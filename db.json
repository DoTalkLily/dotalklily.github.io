{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/anatole/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/anatole/source/css/font-awesome.min.css","path":"css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/anatole/source/css/blog_basic.css","path":"css/blog_basic.css","modified":0,"renderable":1},{"_id":"themes/anatole/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/anatole/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/anatole/source/images/logo@2x.png","path":"images/logo@2x.png","modified":0,"renderable":1},{"_id":"themes/anatole/source/images/favicon.png","path":"images/favicon.png","modified":0,"renderable":1},{"_id":"themes/anatole/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/anatole/source/js/jquery.appear.js","path":"js/jquery.appear.js","modified":0,"renderable":1},{"_id":"themes/anatole/source/js/jquery-migrate-1.2.1.min.js","path":"js/jquery-migrate-1.2.1.min.js","modified":0,"renderable":1},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/anatole/source/js/jquery.js","path":"js/jquery.js","modified":0,"renderable":1},{"_id":"source/images/2017-02-14/3C5D0315-7718-4DC6-89B9-0C7A281294F2.png","path":"images/2017-02-14/3C5D0315-7718-4DC6-89B9-0C7A281294F2.png","modified":0,"renderable":0},{"_id":"source/images/2017-02-14/xxx.png","path":"images/2017-02-14/xxx.png","modified":0,"renderable":0},{"_id":"source/images/2017-02-14/FE612576-70BB-4B9C-9343-07DFAC12DCB4.png","path":"images/2017-02-14/FE612576-70BB-4B9C-9343-07DFAC12DCB4.png","modified":0,"renderable":0},{"_id":"source/images/2017-01-20/基本流程图 (1).png","path":"images/2017-01-20/基本流程图 (1).png","modified":0,"renderable":0},{"_id":"source/images/2017-01-20/基本流程图 (2).png","path":"images/2017-01-20/基本流程图 (2).png","modified":0,"renderable":0},{"_id":"source/images/2017-01-20/基本流程图 (3).png","path":"images/2017-01-20/基本流程图 (3).png","modified":0,"renderable":0},{"_id":"source/images/2017-01-20/基本流程图.png","path":"images/2017-01-20/基本流程图.png","modified":0,"renderable":0}],"Cache":[{"_id":"themes/anatole/LICENSE","hash":"359cb81298c1fdbccf531548fc097466b0151be4","modified":1486971114000},{"_id":"themes/anatole/README.md","hash":"4542a2cc948bc8143abd49025ce3c27c3fa2ee27","modified":1486971114000},{"_id":"themes/anatole/_config.yml","hash":"bb469236b93b591342877a899cae70578c300969","modified":1486977974000},{"_id":"themes/anatole/package.json","hash":"cf731a3ebf3913747fccb6c4c6615eba7d7e88a4","modified":1486971114000},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1486970678000},{"_id":"themes/anatole/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1486971114000},{"_id":"source/_posts/2017-02-14-react源码研究-html","hash":"91d1080f548875d7bef038e912f4974507507dbd","modified":1486971744000},{"_id":"themes/anatole/.git/config","hash":"831e9fdc6bb9fa56130a1292e248c5ad420f7229","modified":1486971114000},{"_id":"themes/anatole/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1486971108000},{"_id":"themes/anatole/.git/index","hash":"fcc5404dfc31fae99c317633ad9d6a1752485a01","modified":1486971114000},{"_id":"themes/anatole/.git/packed-refs","hash":"7df0801e5dce7db41df56e8878714755bd00c43d","modified":1486971114000},{"_id":"themes/anatole/languages/zh-cn.yml","hash":"dab1823e036f4adb3b7ae9efe95a37a15e47bec2","modified":1486971114000},{"_id":"themes/anatole/layout/archive.jade","hash":"8f58996b55dc3db3c96d69e88b0a6db4167d025b","modified":1486971114000},{"_id":"themes/anatole/layout/category.jade","hash":"2f2f113e99eb1ebdac475edba23a330dbd2e77bd","modified":1486971114000},{"_id":"themes/anatole/layout/index.jade","hash":"53da3cfd498951148acb33de1574df80ae282dc5","modified":1486971114000},{"_id":"themes/anatole/layout/mixins.jade","hash":"ae76c27b41e7d46c74c0442ff2a475330ab0448d","modified":1486971114000},{"_id":"themes/anatole/layout/page.jade","hash":"300e3fa98fd7cb2627589d3555ab4863cfeedd0c","modified":1486971114000},{"_id":"themes/anatole/layout/tag.jade","hash":"b2dde91815560830b6a0f1dfbdd83aca88aba969","modified":1486971114000},{"_id":"themes/anatole/layout/post.jade","hash":"0b830bf13f3c82a936fa44c687b3911606cd8bec","modified":1486971114000},{"_id":"themes/anatole/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1486971108000},{"_id":"themes/anatole/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1486971108000},{"_id":"themes/anatole/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1486971108000},{"_id":"themes/anatole/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1486971108000},{"_id":"themes/anatole/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1486971108000},{"_id":"themes/anatole/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1486971108000},{"_id":"themes/anatole/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1486971108000},{"_id":"themes/anatole/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1486971108000},{"_id":"themes/anatole/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1486971108000},{"_id":"themes/anatole/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1486971108000},{"_id":"themes/anatole/.git/logs/HEAD","hash":"ce9191114e033b050e22c721053a16d289873a41","modified":1486971114000},{"_id":"themes/anatole/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1486971108000},{"_id":"themes/anatole/layout/partial/comments.jade","hash":"ee43e2fa9bed77868f2340435e455a3e647428df","modified":1486971114000},{"_id":"themes/anatole/layout/partial/footer.jade","hash":"103db6611e4574d2284772c90423d2dc0a7cceb6","modified":1486978201000},{"_id":"themes/anatole/layout/partial/sidebar.jade","hash":"0e46a60cd56254da51c9073360fee74f81cedd74","modified":1486978449000},{"_id":"themes/anatole/layout/partial/layout.jade","hash":"174050fa9ee919f5bcb2c5426224ec1968db672c","modified":1486971114000},{"_id":"themes/anatole/layout/partial/nav.jade","hash":"6ef30551de7b22d99b6a0980caf7899d7c303093","modified":1486971114000},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.eot","hash":"0183979056f0b87616cd99d5c54a48f3b771eee6","modified":1486971114000},{"_id":"themes/anatole/source/css/font-awesome.min.css","hash":"95d0b0c4d11105c81be1857b744076a1d2bed918","modified":1486971114000},{"_id":"themes/anatole/source/css/blog_basic.css","hash":"7d32bbc353e1a5130374aa69fcaca9c7d298a7ee","modified":1486974599000},{"_id":"themes/anatole/source/css/style.css","hash":"8d45c3fd27c96d047058e0146d7692c93992f4ca","modified":1486971249000},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.woff","hash":"7d65e0227d0d7cdc1718119cd2a7dce0638f151c","modified":1486971114000},{"_id":"themes/anatole/source/css/style.scss","hash":"8bf6290fba289890f0f8dd9df3d3e50c1710a656","modified":1486971249000},{"_id":"themes/anatole/source/images/logo@2x.png","hash":"49c3fa97724abf53861bf11356ea9ba5bcb11576","modified":1486971114000},{"_id":"themes/anatole/source/images/favicon.png","hash":"d659236704308954da9d64b101c4f54cc3f3255c","modified":1486971114000},{"_id":"themes/anatole/source/images/logo.png","hash":"41bdf2ebd8cc193ad82a211758af827d891b1a90","modified":1486971114000},{"_id":"themes/anatole/layout/partial/head.jade","hash":"3d6126d0b53a889a46ad61eb8cc0ab1b35446c49","modified":1486971114000},{"_id":"themes/anatole/source/js/jquery.appear.js","hash":"1f8067d7bd4c0bde30785e8016100f239e14394f","modified":1486971114000},{"_id":"themes/anatole/source/js/jquery-migrate-1.2.1.min.js","hash":"743052320809514fb788fe1d3df37fc87ce90452","modified":1486971114000},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.ttf","hash":"6225ccc4ec94d060f19efab97ca42d842845b949","modified":1486971114000},{"_id":"themes/anatole/.git/refs/heads/master","hash":"b78c9c74c8596337fb20e865008b7b3208713faa","modified":1486971114000},{"_id":"themes/anatole/.git/objects/pack/pack-bc1983eee4892afd38510f0db245ef51aa639b0b.idx","hash":"1977ef60190bd1204f5fe67998da0f9702e7a142","modified":1486971114000},{"_id":"themes/anatole/.git/logs/refs/heads/master","hash":"ce9191114e033b050e22c721053a16d289873a41","modified":1486971114000},{"_id":"themes/anatole/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1486971114000},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.svg","hash":"cd980eab6db5fa57db670cb2e4278e67e1a4d6c9","modified":1486971114000},{"_id":"themes/anatole/source/js/jquery.js","hash":"bfc05b695dfa4f23e11d04b84993585da7a764bf","modified":1486971114000},{"_id":"themes/anatole/.git/logs/refs/remotes/origin/HEAD","hash":"ce9191114e033b050e22c721053a16d289873a41","modified":1486971114000},{"_id":"themes/anatole/.git/objects/pack/pack-bc1983eee4892afd38510f0db245ef51aa639b0b.pack","hash":"2ddfe490a96dae23aad3fd419fd46408d87bf3c0","modified":1486971114000},{"_id":"source/_posts/react源码学习——Virtual Dom和渲染、更新原理.md","hash":"f8f82b969f3bf18fe3d76e9e1d8dd62dfb31eb8e","modified":1486972731000},{"_id":"source/_posts/react源码学习——Virtual Dom和渲染、更新原理1.html","hash":"016286a6c8dbe137ef0573dceba0d2fcf9e177b0","modified":1486973121000},{"_id":"source/_posts/react源码学习——setState原理.resources/3C5D0315-7718-4DC6-89B9-0C7A281294F2.png","hash":"2547dd9686672159033f86adc1013a6b1fb58f08","modified":1486729958000},{"_id":"source/_posts/react源码学习——setState原理.resources/基本流程图.png","hash":"b33011e50180c6e02d45dd6a28a74476d9598c5e","modified":1486729958000},{"_id":"source/_posts/react源码学习——setState原理.resources/FE612576-70BB-4B9C-9343-07DFAC12DCB4.png","hash":"b1d2e39776f1a1beed5ba70beb1deec64faf524b","modified":1486729958000},{"_id":"source/_posts/2017-02-14/3C5D0315-7718-4DC6-89B9-0C7A281294F2.png","hash":"2547dd9686672159033f86adc1013a6b1fb58f08","modified":1486729958000},{"_id":"source/_posts/2017-02-14/基本流程图.png","hash":"b33011e50180c6e02d45dd6a28a74476d9598c5e","modified":1486729958000},{"_id":"source/_posts/2017-02-14/FE612576-70BB-4B9C-9343-07DFAC12DCB4.png","hash":"b1d2e39776f1a1beed5ba70beb1deec64faf524b","modified":1486729958000},{"_id":"source/_posts/react源码学习——setState原理.html","hash":"3f4ffa0a3ac9e473aa2da691acb1a830d1c1c11f","modified":1486977459000},{"_id":"source/_posts/react源码学习——setState原理/2017-02-14/3C5D0315-7718-4DC6-89B9-0C7A281294F2.png","hash":"2547dd9686672159033f86adc1013a6b1fb58f08","modified":1486729958000},{"_id":"source/_posts/react源码学习——setState原理/2017-02-14/基本流程图.png","hash":"b33011e50180c6e02d45dd6a28a74476d9598c5e","modified":1486729958000},{"_id":"source/_posts/react源码学习——setState原理/2017-02-14/FE612576-70BB-4B9C-9343-07DFAC12DCB4.png","hash":"b1d2e39776f1a1beed5ba70beb1deec64faf524b","modified":1486729958000},{"_id":"source/assets/2017-02-14/3C5D0315-7718-4DC6-89B9-0C7A281294F2.png","hash":"2547dd9686672159033f86adc1013a6b1fb58f08","modified":1486729958000},{"_id":"source/assets/2017-02-14/xxx.png","hash":"b33011e50180c6e02d45dd6a28a74476d9598c5e","modified":1486729958000},{"_id":"source/assets/2017-02-14/FE612576-70BB-4B9C-9343-07DFAC12DCB4.png","hash":"b1d2e39776f1a1beed5ba70beb1deec64faf524b","modified":1486729958000},{"_id":"source/images/2017-02-14/3C5D0315-7718-4DC6-89B9-0C7A281294F2.png","hash":"2547dd9686672159033f86adc1013a6b1fb58f08","modified":1486729958000},{"_id":"source/images/2017-02-14/xxx.png","hash":"b33011e50180c6e02d45dd6a28a74476d9598c5e","modified":1486729958000},{"_id":"source/images/2017-02-14/FE612576-70BB-4B9C-9343-07DFAC12DCB4.png","hash":"b1d2e39776f1a1beed5ba70beb1deec64faf524b","modified":1486729958000},{"_id":"source/_posts/react源码学习——Virtual Dom和渲染、更新原理.resources/基本流程图 (1).png","hash":"3bda0c8ce9f1007636be61151c074a8716eda06a","modified":1486916062000},{"_id":"source/_posts/react源码学习——Virtual Dom和渲染、更新原理.resources/基本流程图 (2).png","hash":"eff0ddedfd53076055a2b38a2d4508ccd465e004","modified":1486916062000},{"_id":"source/_posts/react源码学习——Virtual Dom和渲染、更新原理.resources/基本流程图 (3).png","hash":"9e3e74fef181e1669a5d4c2e3236bfc9ad5a6527","modified":1486916062000},{"_id":"source/_posts/react源码学习——Virtual Dom和渲染、更新原理.resources/基本流程图.png","hash":"b89892f08ec0d0100e6e8035e03371bb25487d73","modified":1486916062000},{"_id":"source/_posts/react源码学习——Virtual Dom和渲染、更新原理.html","hash":"0309c4d963e0919c93b9920fcc758e302740d8c7","modified":1486975231000},{"_id":"source/images/2017-01-20/基本流程图 (1).png","hash":"3bda0c8ce9f1007636be61151c074a8716eda06a","modified":1486916062000},{"_id":"source/images/2017-01-20/基本流程图 (3).png","hash":"9e3e74fef181e1669a5d4c2e3236bfc9ad5a6527","modified":1486916062000},{"_id":"source/images/2017-01-20/基本流程图 (2).png","hash":"eff0ddedfd53076055a2b38a2d4508ccd465e004","modified":1486916062000},{"_id":"source/images/2017-01-20/基本流程图.png","hash":"b89892f08ec0d0100e6e8035e03371bb25487d73","modified":1486916062000}],"Category":[{"name":"Jekyll","_id":"ciz3tf2ro000149hymueow0ql"},{"name":"frontend","_id":"ciz3thwgj000549hygfrb2z2t"}],"Data":[],"Page":[],"Post":[{"layout":"post","title":"react源码学习——setState原理","date":"2017-02-14T00:43:59.000Z","author":"Lily","_content":"<div>\n    React通过this.setState方法更新state，当this.setState被调用的时候会根据更新策略执行情况（是否在更新中）来判断是否重新调用render方法还是放到更新队列中。看下setState源码，题外话：React创建组件有三种方式:\n    1）函数方式(无状态组件) 2）React.createClass(es5)  3) extends React.Component(es6)，后两种方式中\n    setState会自动注入到组件中，因此在自定义组件中能通过this.setState直接访问。三种创建方式的区别参见<a\n        href=\"http://www.cnblogs.com/wonyun/p/5930333.html\">这篇文章</a>。<br>\n    <div>——以下代码是React v15.4.2版本——</div>\n</div>\n<div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><br/><span\n        style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Sets a subset of the state. Always use this to mutate<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * state. You should treat `this.state` as immutable.<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * There is no guarantee that `this.state` will be immediately updated, so<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * accessing `this.state` after calling this method may return the old value.<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * There is no guarantee that calls to `setState` will run synchronously,<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * as they may eventually be batched together.  You can provide an optional<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * callback that will be executed when the call to setState is actually<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * completed.<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * When a function is provided to setState, it will be called at some point in<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * the future (not synchronously). It will be called with the up to date<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * component arguments (state, props, context). These values can be different<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * from this.* because your function may be called after receiveProps but before<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * shouldComponentUpdate, and this new state, props, and context will not yet be<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * assigned to this.<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span\n        style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n        style=\"color:#629755;font-style:italic;\">{object|function} partialState Next partial state or function to<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> *        produce next partial state to be merged with current state.<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n        style=\"color:#629755;font-style:italic;\">{?function} callback Called after state is updated.<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@final<br/></span><span\n        style=\"color:#629755;font-weight:bold;font-style:italic;\"/><span\n        style=\"color:#629755;font-style:italic;\">* </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@protected<br/></span><span\n        style=\"color:#629755;font-weight:bold;font-style:italic;\"/><span\n        style=\"color:#629755;font-style:italic;\">*/<br/></span><span style=\"color:#ffc66d;\">ReactComponent</span>.<span\n        style=\"color:#9876aa;\">prototype</span>.<span style=\"color:#ffc66d;\">setState </span>= <span\n        style=\"color:#cc7832;font-weight:bold;\">function</span>(partialState<span\n        style=\"color:#cc7832;\">, </span>callback) {<span style=\"color:#cc7832;\"><br/></span><span\n        style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span\n        style=\"color:#9876aa;\">updater</span>.<span style=\"color:#ffc66d;\">enqueueSetState</span>(<span\n        style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>partialState<span\n        style=\"color:#cc7832;\">, </span>callback<span style=\"color:#cc7832;\">, </span><span\n        style=\"color:#6a8759;\">'setState'</span>)<span style=\"color:#cc7832;\">;<br/></span>}<span\n        style=\"color:#cc7832;\">;</span>\n</pre>\n    <pre style=\"background-color: rgb(43, 43, 43);\"><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(169, 183, 198);\"><span\n            style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Sets a subset of the state. This only exists because _pendingState is<br/></span><span\n            style=\"color:#629755;font-style:italic;\"> * internal. This provides a merging strategy that is not available to deep<br/></span><span\n            style=\"color:#629755;font-style:italic;\"> * properties which is confusing. </span><span\n            style=\"color:#a8c023;font-style:italic;\">TODO: Expose pendingState or don't use it<br/></span><span\n            style=\"color:#a8c023;font-style:italic;\"/><span\n            style=\"color:#629755;font-style:italic;\">* during the merge.<br/></span><span\n            style=\"color:#629755;font-style:italic;\"> *<br/></span><span\n            style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n            style=\"color:#629755;font-style:italic;\">{ReactClass} publicInstance The instance that should rerender.<br/></span><span\n            style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n            style=\"color:#629755;font-style:italic;\">{object} partialState Next partial state to be merged with state.<br/></span><span\n            style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n            style=\"color:#629755;font-style:italic;\">{?function} callback Called after state is updated.<br/></span><span\n            style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n            style=\"color:#629755;font-style:italic;\">{?string} Name of the calling function in the public API.<br/></span><span\n            style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@internal<br/></span><span\n            style=\"color:#629755;font-weight:bold;font-style:italic;\"/><span\n            style=\"color:#629755;font-style:italic;\">*/<br/></span><span style=\"color:#ffc66d;\">enqueueSetState</span>: <span\n            style=\"color:#cc7832;font-weight:bold;\">function</span>(publicInstance<span style=\"color:#cc7832;\">, </span>partialState<span\n            style=\"color:#cc7832;\">, </span>callback<span style=\"color:#cc7832;\">, </span>callerName) {<br/>  </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#cc7832\"><b>//获得组件实例</b></font><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\"><br/>  </font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">internalInstance = </font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">getInternalInstanceReadyForUpdate</span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(<br/>    publicInstance</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(106, 135, 89);\">'setState'<br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(106, 135, 89);\">  </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">)</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\"><br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">if </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(!internalInstance) {<br/>    </font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">return</span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">}<br/><br/>  //初始化state更新队列<br/>  </font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">queue =<br/>    internalInstance.</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_pendingStateQueue </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">||<br/>    (internalInstance.</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_pendingStateQueue </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">= [])</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">queue.</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">push</span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(partialState)</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  //如果setState设置了回调函数，添加到组件实例的队列中<br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">if </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\"\n            color=\"#a9b7c6\">(callback) {<br/>    validateCallback(callback</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">, </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">callerName)</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">if </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(internalInstance.</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_pendingCallbacks</span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">) {<br/>      internalInstance.</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_pendingCallbacks</span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">.</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">push</span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(callback)</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">} </font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">else </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">{<br/>      internalInstance.</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_pendingCallbacks </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">= [callback]</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font color=\"#a9b7c6\"><font\n            face=\"Menlo\" size=\"2\">}<br/>  }<br/>  <br/>  </font></font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">enqueueUpdate</span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(internalInstance)</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">}</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,</span></pre>\n</div>\n<div><font style=\"font-size: 14px;\"><span\n        style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: 'PingFang SC'; color: rgb(69, 69, 69);\">最后调用（</span><span\n        style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(69, 69, 69);\">src/renderers/shared/stack/reconciler/ReactUpdates.js</span><span\n        style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: 'PingFang SC'; color: rgb(69, 69, 69);\">）</span><span\n        style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(69, 69, 69);\">ReactUpdates</span><span\n        style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: 'PingFang SC'; color: rgb(69, 69, 69);\">的enqueueUpdate函数执行更新。</span></font>\n</div>\n<div><font style=\"font-size: 14px;\"><span\n        style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; color: rgb(69, 69, 69);\"/></font><span\n        style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; color: rgb(69, 69, 69);\"><font\n        style=\"font-size: 14px;\"><font face=\"PingFang SC\"><pre\n        style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span\n        style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Mark a component as needing a rerender, adding an optional callback to a<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * list of functions which will be executed once the rerender occurs.<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> */<br/></span><span style=\"color:#cc7832;font-weight:bold;\">function </span><span\n        style=\"color:#ffc66d;\">enqueueUpdate</span>(component) {<br/>  <span\n        style=\"color:#ffc66d;\">ensureInjected</span>()<span style=\"color:#cc7832;\">;</span><span style=\"color:#808080;\"><br/></span><span\n        style=\"color:#808080;\"><br/></span><span style=\"color:#808080;\">  </span><span\n        style=\"color:#cc7832;font-weight:bold;\">if </span>(!batchingStrategy.<span\n        style=\"color:#9876aa;\">isBatchingUpdates</span>) {//如果当前没有处于更新中，<br/>    batchingStrategy.<span\n        style=\"color:#ffc66d;\">batchedUpdates</span>(<span style=\"color:#ffc66d;\">enqueueUpdate</span><span\n        style=\"color:#cc7832;\">, </span>component)<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">return</span><span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><br/>  dirtyComponents.<span\n        style=\"color:#ffc66d;\">push</span>(component)<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(component.<span\n        style=\"color:#9876aa;\">_updateBatchNumber </span>== <span style=\"color:#cc7832;font-weight:bold;\">null</span>) {<br/>    component.<span\n        style=\"color:#9876aa;\">_updateBatchNumber </span>= updateBatchNumber + <span style=\"color:#6897bb;\">1</span><span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/>}\n</pre></font></font></span><br/></div>\n<div>\n    batchingStrategy在ReactDefaultBatchingStrategy.js（src/renderers/shared/stack/reconciler/ReactDefaultBatchingStrategy.js），这里要介绍下React的事务，事务是将需要执行的方法封装起来，在通过perform方法执行，以保证在执行目标方法前，事务中的一组initialize方法限制性，目标方法执行后，一组close方法能够得到执行，参见下图（src/renderers/shared/stack/reconciler/Transaction.js中）：\n</div>\n<div><img\n        src=\"/images/2017-02-14/3C5D0315-7718-4DC6-89B9-0C7A281294F2.png\"\n        height=\"670\" width=\"1066\"/><br/></div>\n<div>再回到我们的更新策略对象中</div>\n<div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><br/><span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>RESET_BATCHED_UPDATES = {<br/>  <span style=\"color:#9876aa;\">initialize</span>: emptyFunction<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span><span\n        style=\"color:#ffc66d;\">close</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>() {<br/>    ReactDefaultBatchingStrategy.<span\n        style=\"color:#9876aa;\">isBatchingUpdates </span>= <span style=\"color:#cc7832;font-weight:bold;\">false</span><span\n        style=\"color:#cc7832;\">;//<font\n        style=\"font-family: Menlo; background-color: rgb(43, 43, 43); font-size: 12px; color: rgb(169, 183, 198);\">事务执行结束后重置当前更新状态</font><br/></span><span\n        style=\"color:#cc7832;\">  </span>}<span style=\"color:#cc7832;\">,<br/></span>}<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\"><br/></span><span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>FLUSH_BATCHED_UPDATES = {<br/>  <span style=\"color:#9876aa;\">initialize</span>: emptyFunction<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#9876aa;\">close</span>: ReactUpdates.<span\n        style=\"color:#ffc66d;\">flushBatchedUpdates</span>.<span style=\"color:#ffc66d;\">bind</span>(ReactUpdates)<span\n        style=\"color:#cc7832;\">,//遍历dirtyComponent数组中的组件，逐个更新<br/></span>}<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;font-weight:bold;\">var </span>TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES<span\n        style=\"color:#cc7832;\">, </span>RESET_BATCHED_UPDATES]<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;font-weight:bold;\">function </span><span\n        style=\"color:#ffc66d;\">ReactDefaultBatchingStrategyTransaction</span>() {<br/>  <span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">reinitializeTransaction</span>()<span\n        style=\"color:#cc7832;\">;<br/></span>}<br/><br/>Object.<span style=\"color:#ffc66d;\">assign</span>(<br/>  <span\n        style=\"color:#ffc66d;\">ReactDefaultBatchingStrategyTransaction</span>.<span\n        style=\"color:#9876aa;\">prototype</span><span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">  </span>Transaction<span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">  </span>{<br/>    <span style=\"color:#ffc66d;\">getTransactionWrappers</span>: <span\n        style=\"color:#cc7832;font-weight:bold;\">function</span>() { //给事务添加wapper<br/>      <span\n        style=\"color:#cc7832;font-weight:bold;\">return </span>TRANSACTION_WRAPPERS<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>}<br/>)<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>transaction = <span\n        style=\"color:#cc7832;font-weight:bold;\">new </span><span style=\"color:#ffc66d;\">ReactDefaultBatchingStrategyTransaction</span>()<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>ReactDefaultBatchingStrategy = {<br/>  <span\n        style=\"color:#9876aa;\">isBatchingUpdates</span>: <span style=\"color:#cc7832;font-weight:bold;\">false</span><span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\"><br/></span><span\n        style=\"color:#cc7832;\">  </span><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span\n        style=\"color:#629755;font-style:italic;\">   * Call the provided function in a context within which calls to `setState`<br/></span><span\n        style=\"color:#629755;font-style:italic;\">   * and friends are batched such that components aren't updated unnecessarily.<br/></span><span\n        style=\"color:#629755;font-style:italic;\">   */<br/></span><span\n        style=\"color:#629755;font-style:italic;\">  </span><span style=\"color:#ffc66d;\">batchedUpdates</span>: <span\n        style=\"color:#cc7832;font-weight:bold;\">function</span>(callback<span style=\"color:#cc7832;\">, </span>a<span\n        style=\"color:#cc7832;\">, </span>b<span style=\"color:#cc7832;\">, </span>c<span style=\"color:#cc7832;\">, </span>d<span\n        style=\"color:#cc7832;\">, </span>e) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>alreadyBatchingUpdates = ReactDefaultBatchingStrategy.<span\n        style=\"color:#9876aa;\">isBatchingUpdates</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span\n        style=\"color:#cc7832;\">    </span>ReactDefaultBatchingStrategy.<span style=\"color:#9876aa;\">isBatchingUpdates </span>= <span\n        style=\"color:#cc7832;font-weight:bold;\">true</span><span style=\"color:#cc7832;\">;//设置当前正在处于更新状态<br/></span><span\n        style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// The code is written this way to avoid extra allocations<br/></span><span\n        style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(alreadyBatchingUpdates) { //个人认为这里是确保同一时间只有一个事务在更新组件，比如一个组件几乎无间隔地调用两次setState，欢迎讨论<br/>      <span\n        style=\"color:#cc7832;font-weight:bold;\">return </span>callback(a<span style=\"color:#cc7832;\">, </span>b<span\n        style=\"color:#cc7832;\">, </span>c<span style=\"color:#cc7832;\">, </span>d<span style=\"color:#cc7832;\">, </span>e)<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>} <span\n        style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>      <span\n        style=\"color:#cc7832;font-weight:bold;\">return </span>transaction.<span style=\"color:#ffc66d;\">perform</span>(callback<span\n        style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">, </span>a<span\n        style=\"color:#cc7832;\">, </span>b<span style=\"color:#cc7832;\">, </span>c<span style=\"color:#cc7832;\">, </span>d<span\n        style=\"color:#cc7832;\">, </span>e)<span style=\"color:#cc7832;\">;//注意这里比较有意思，把<font\n        style=\"font-family: Menlo; font-size: 12px; background-color: rgb(43, 43, 43); color: rgb(255, 198, 109);\">enqueueUpdate作为callback调用，但这时<font\n        style=\"font-family: Menlo; font-size: 12px; background-color: rgb(43, 43, 43); color: rgb(152, 118, 170);\">isBatchingUpdates是true，因此<font\n        style=\"font-family: Menlo; background-color: rgb(43, 43, 43); font-size: 12px; color: rgb(255, 198, 109);\">enqueueUpdate做的事就是把这个要更新的component加入到dirtyComponent数组中，然后在事务wrapper中的close方法</font></font></font></span><span\n        style=\"font-size: 9pt;\">ReactUpdates.</span><span style=\"font-size: 9pt; color: rgb(255, 198, 109);\">flushBatchedUpdates遍历dirtyComponent数组进行更新。</span><span\n        style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span>}<br/>  }<span\n        style=\"color:#cc7832;\">,<br/></span>}<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\"><br/></span>module.<span\n        style=\"color:#ffc66d;\">exports </span>= ReactDefaultBatchingStrategy<span style=\"color:#cc7832;\">;<br/></span>\n</pre>\n    由这段代码可以看到，真正执行更新的实在事务的某个wapper的close方法中，即ReactUpdates.flushBatchedUpdates中进行更新的：\n    <pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.8pt;\"><span\n            style=\"color:#cc7832;font-weight:bold;\">var </span><span style=\"color:#ffc66d;\">flushBatchedUpdates </span>= <span\n            style=\"color:#cc7832;font-weight:bold;\">function</span>() {<br/>  <span style=\"color:#808080;\">// ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents<br/></span><span\n            style=\"color:#808080;\">  // array and perform any updates enqueued by mount-ready handlers (i.e.,<br/></span><span\n            style=\"color:#808080;\">  // componentDidUpdate) but we need to check here too in order to catch<br/></span><span\n            style=\"color:#808080;\">  // updates enqueued by setState callbacks.<br/></span><span\n            style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">while </span>(dirtyComponents.<span\n            style=\"color:#9876aa;\">length</span>) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>transaction = <span\n            style=\"color:#ffc66d;\">ReactUpdatesFlushTransaction</span>.<span style=\"color:#ffc66d;\">getPooled</span>()<span\n            style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>transaction.<span\n            style=\"color:#ffc66d;\">perform</span>(<span style=\"color:#ffc66d;\">runBatchedUpdates</span><span\n            style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">null</span><span\n            style=\"color:#cc7832;\">, </span>transaction)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span\n            style=\"color:#ffc66d;\">ReactUpdatesFlushTransaction</span>.<span\n            style=\"color:#ffc66d;\">release</span>(transaction)<span style=\"color:#cc7832;\">;<br/></span><span\n            style=\"color:#cc7832;\">  </span>}<br/>}<span style=\"color:#cc7832;\">;</span>\n</pre>\n</div>\n<div>注意这里由用到一个事务ReactUpdatesFlushTransaction：</div>\n<div><pre style=\"background-color: rgb(43, 43, 43);\"><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\"><br/></font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">var </span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">NESTED_UPDATES = {<br/>  </font><span\n        style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">initialize</span><font face=\"Menlo\"\n                                                                                                        color=\"#a9b7c6\"\n                                                                                                        size=\"3\">: </font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">function</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">() {<br/>    </font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">this</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span\n        style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">dirtyComponentsLength </span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">= dirtyComponents.</font><span\n        style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">length</span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">  </span><font face=\"Menlo\" color=\"#a9b7c6\"\n                                                                                               size=\"3\">}</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">,<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">  </span><span\n        style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">close</span><font face=\"Menlo\"\n                                                                                                   color=\"#a9b7c6\"\n                                                                                                   size=\"3\">: </font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">function</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">() {<br/>    </font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">if </span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">(</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">this</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span\n        style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">dirtyComponentsLength </span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">!== dirtyComponents.</font><span\n        style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">length</span><font face=\"Menlo\"\n                                                                                                    color=\"#a9b7c6\" size=\"3\">) {<br/>      </font><span\n        style=\"color: rgb(128, 128, 128); font-family: Menlo; font-size: 9.8pt;\">// Additional updates were enqueued by componentDidUpdate handlers or<br/></span><span\n        style=\"color: rgb(128, 128, 128); font-family: Menlo; font-size: 9.8pt;\">      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run<br/></span><span\n        style=\"color: rgb(128, 128, 128); font-family: Menlo; font-size: 9.8pt;\">      // these new updates so that if A's componentDidUpdate calls setState on<br/></span><span\n        style=\"color: rgb(128, 128, 128); font-family: Menlo; font-size: 9.8pt;\">      // B, B will update before the callback A's updater provided when calling<br/></span><font\n        face=\"Menlo\" color=\"#808080\" size=\"3\">      // setState.在close之前再检查一遍</font><font face=\"Menlo\" color=\"#808080\">dirtyComponent</font><font\n        face=\"Menlo\" color=\"#808080\" size=\"3\">是否有新的要更新的组件，有则更新，上面注释中将的场景应该是比如在A组件的setState传入了第二个参数回调函数，如果在A的componentDidUpdate中调用了setState改变了它包含的B组件的状态（这里假设只改变B 的状态），为了保证回调函数能访问到更新后的B组件，继续执行dirtyComponent中后插入的组件（B）然后更新B组件<br/></font><span\n        style=\"color: rgb(128, 128, 128); font-family: Menlo; font-size: 9.8pt;\">      </span><font face=\"Menlo\"\n                                                                                                    color=\"#a9b7c6\" size=\"3\">dirtyComponents.</font><span\n        style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">splice</span><font face=\"Menlo\"\n                                                                                                    color=\"#a9b7c6\"\n                                                                                                    size=\"3\">(</font><span\n        style=\"color: rgb(104, 151, 187); font-family: Menlo; font-size: 9.8pt;\">0</span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">, </span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">this</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span\n        style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">dirtyComponentsLength</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">)</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">      </span><span\n        style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">flushBatchedUpdates</span><font face=\"Menlo\"\n                                                                                                                 color=\"#a9b7c6\"\n                                                                                                                 size=\"3\">()</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">    </span><font face=\"Menlo\" color=\"#a9b7c6\"\n                                                                                                 size=\"3\">} </font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">else </span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">{<br/>      dirtyComponents.</font><span\n        style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">length </span><font face=\"Menlo\"\n                                                                                                     color=\"#a9b7c6\" size=\"3\">= </font><span\n        style=\"color: rgb(104, 151, 187); font-family: Menlo; font-size: 9.8pt;\">0</span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">    </span><font face=\"Menlo\" color=\"#a9b7c6\"\n                                                                                                 size=\"3\">}<br/>  }</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">,<br/></span><font face=\"Menlo\"\n                                                                                                   color=\"#a9b7c6\"\n                                                                                                   size=\"3\">}</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\"><br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">var </span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">TRANSACTION_WRAPPERS = [NESTED_UPDATES]</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\"><br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">function </span><span\n        style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">ReactUpdatesFlushTransaction</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">() {<br/>  </font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">this</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span\n        style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">reinitializeTransaction</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">()</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">  </span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">this</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span\n        style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">dirtyComponentsLength </span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">= </font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">null</span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">  </span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">this</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span\n        style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">reconcileTransaction </span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">= ReactUpdates.</font><span\n        style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">ReactReconcileTransaction</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span\n        style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">getPooled</span><font face=\"Menlo\"\n                                                                                                       color=\"#a9b7c6\"\n                                                                                                       size=\"3\">(<br/>    </font><span\n        style=\"color: rgb(128, 128, 128); font-family: Menlo; font-size: 9.8pt;\">/* useCreateElement */ </span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">true<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">  </span><font face=\"Menlo\"\n                                                                                                                  color=\"#a9b7c6\"\n                                                                                                                  size=\"3\">)</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><font face=\"Menlo\"\n                                                                                                   color=\"#a9b7c6\"\n                                                                                                   size=\"3\">}<br/><br/>Object.</font><span\n        style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">assign</span><font face=\"Menlo\"\n                                                                                                    color=\"#a9b7c6\" size=\"3\">(<br/>  </font><span\n        style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">ReactUpdatesFlushTransaction</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span\n        style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">prototype</span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">,<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">  </span><font face=\"Menlo\" color=\"#a9b7c6\"\n                                                                                               size=\"3\">Transaction</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">,<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">  </span><font face=\"Menlo\" color=\"#a9b7c6\"\n                                                                                               size=\"3\">{<br/>    </font><span\n        style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">getTransactionWrappers</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">: </font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">function</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">() { //这里将wapper加到事务中<br/>      </font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">return </span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">TRANSACTION_WRAPPERS</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">    </span><font face=\"Menlo\" color=\"#a9b7c6\"\n                                                                                                 size=\"3\">}</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">,<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">    //略去其他……<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">  </span><font face=\"Menlo\" color=\"#a9b7c6\"\n                                                                                               size=\"3\">}<br/>)</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><font face=\"Menlo\"\n                                                                                                   color=\"#a9b7c6\" size=\"3\"\n/></pre>\n    现在我们的更新事务结构如下图所示：\n</div>\n<div><img\n        src=\"/images/2017-02-14/FE612576-70BB-4B9C-9343-07DFAC12DCB4.png\"\n        height=\"690\" width=\"1766\"/><br/></div>\n<div>重点看下runBatchedUpdate方法是如何更新组件的。</div>\n<div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.8pt;\"><br/><span\n        style=\"color:#cc7832;font-weight:bold;\">function </span><span style=\"color:#ffc66d;\">runBatchedUpdates</span>(transaction) {<br/>  <span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>len = transaction.<span style=\"color:#9876aa;\">dirtyComponentsLength</span><span\n        style=\"color:#cc7832;\">;</span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span\n        style=\"color:#808080;\">// Since reconciling a component higher in the owner hierarchy usually (not<br/></span><span\n        style=\"color:#808080;\">  // always -- see shouldComponentUpdate()) will reconcile children, reconcile<br/></span><span\n        style=\"color:#808080;\">  // them before their children by sorting the array.<br/></span><span\n        style=\"color:#808080;\">  </span>dirtyComponents.<span style=\"color:#ffc66d;\">sort</span>(<span style=\"color:#ffc66d;\">mountOrderComparator</span>)<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span\n        style=\"color:#cc7832;\">  </span><span style=\"color:#808080;\">// Any updates enqueued while reconciling must be performed after this entire<br/></span><span\n        style=\"color:#808080;\">  // batch. Otherwise, if dirtyComponents is [A, B] where A has children B and<br/></span><span\n        style=\"color:#808080;\">  // C, B could update twice in a single batch if C's render enqueues an update<br/></span><span\n        style=\"color:#808080;\">  // to B (since B would have already updated, we should skip it, and the only<br/></span><span\n        style=\"color:#808080;\">  // way we can know to do so is by checking the batch counter).<br/></span><span\n        style=\"color:#808080;\">  </span>updateBatchNumber++<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span\n        style=\"color:#cc7832;font-weight:bold;\">for </span>(<span style=\"color:#cc7832;font-weight:bold;\">var </span>i = <span\n        style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">; </span>i &lt; len<span style=\"color:#cc7832;\">; </span>i++) {<br/>    <span\n        style=\"color:#808080;\">// If a component is unmounted before pending changes apply, it will still<br/></span><span\n        style=\"color:#808080;\">    // be here, but we assume that it has cleared its _pendingCallbacks and<br/></span><span\n        style=\"color:#808080;\">    // that performUpdateIfNecessary is a noop.<br/></span><span\n        style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>component = dirtyComponents[i]<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">   </span><br/>    ReactReconciler.<span\n        style=\"color:#ffc66d;\">performUpdateIfNecessary</span>(<br/>      component<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">      </span>transaction.<span\n        style=\"color:#9876aa;\">reconcileTransaction</span><span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">      </span>updateBatchNumber<br/>    )<span style=\"color:#cc7832;\">;<br/></span><br/>  }<br/>}\n</pre>\n</div>\n<div>遍历dirtyComponent数组，对每个component实例调用performUpdateIfNecessary，</div>\n<div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span\n        style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * is set, update the component.<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span\n        style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n        style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction} transaction<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@internal<br/></span><span\n        style=\"color:#629755;font-weight:bold;font-style:italic;\"/><span\n        style=\"color:#629755;font-style:italic;\">*/<br/></span>performUpdateIfNecessary: <span\n        style=\"color:#cc7832;font-weight:bold;\">function</span>(transaction) {<br/>  <span\n        style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span\n        style=\"color:#9876aa;\">_pendingElement </span>!= <span style=\"color:#cc7832;font-weight:bold;\">null</span>) { //如果渲染的ReactElement发生变化更新渲染的ReactElement<br/>    ReactReconciler.<span\n        style=\"color:#ffc66d;\">receiveComponent</span>(<br/>      <span\n        style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span\n        style=\"color:#9876aa;\">_pendingElement</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">      </span>transaction<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">      </span><span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_context<br/></span><span\n        style=\"color:#9876aa;\">    </span>)<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span>} <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(<span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingStateQueue </span>!== <span\n        style=\"color:#cc7832;font-weight:bold;\">null </span>|| <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span\n        style=\"color:#9876aa;\">_pendingForceUpdate</span>) {//如果只是状态发生变化<br/>    <span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span\n        style=\"color:#9876aa;\">updateComponent</span>( //这里调用diff算法<br/>      transaction<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">      </span><span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span><span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">      </span><span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span><span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">      </span><span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_context</span><span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">      </span><span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_context<br/></span><span\n        style=\"color:#9876aa;\">    </span>)<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>    <span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>callbacks = <span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingCallbacks</span><span\n        style=\"color:#cc7832;\">; <br/></span><span style=\"color:#cc7832;\">    </span><span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingCallbacks </span>= <span\n        style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">    </span><span\n        style=\"color:#cc7832;font-weight:bold;\">if </span>(callbacks) {<br/>      <span\n        style=\"color:#cc7832;font-weight:bold;\">for </span>(<span style=\"color:#cc7832;font-weight:bold;\">var </span>j = <span\n        style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">; </span>j &lt; callbacks.<span style=\"color:#9876aa;\">length</span><span\n        style=\"color:#cc7832;\">; </span>j++) {<br/>        transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span\n        style=\"color:#ffc66d;\">enqueue</span>(<br/>          callbacks[j]<span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">          </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span\n        style=\"color:#ffc66d;\">getPublicInstance</span>()<br/>        )<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">      </span>}<br/>    }<br/>    <span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_updateBatchNumber </span>= <span\n        style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span>}<br/>}<span style=\"color:#cc7832;\">,<br/></span>\n</pre>\n</div>\n<div><br/></div>\n<div>所以整个setState执行流程参见下图：</div>\n<div><br/></div>\n<div><img\n        src=\"/images/2017-02-14/xxx.png\"\n        height=\"656\" width=\"614\"/><br/></div>\n<div>diff算法部分源码在（src/renderers/shared/stack/reconciler/ReactMultiChild.js）</div>\n<div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span\n        style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span\n        style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n        style=\"color:#629755;font-style:italic;\">{?object} nextNestedChildrenElements Nested child element maps.<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n        style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction} transaction<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@final<br/></span><span\n        style=\"color:#629755;font-weight:bold;font-style:italic;\"/><span\n        style=\"color:#629755;font-style:italic;\">* </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@protected<br/></span><span\n        style=\"color:#629755;font-weight:bold;font-style:italic;\"/><span\n        style=\"color:#629755;font-style:italic;\">*/<br/></span><span style=\"color:#ffc66d;\">_updateChildren</span>: <span\n        style=\"color:#cc7832;font-weight:bold;\">function</span>(nextNestedChildrenElements<span\n        style=\"color:#cc7832;\">, </span>transaction<span style=\"color:#cc7832;\">, </span>context) {<br/>  <span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>prevChildren = <span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_renderedChildren</span><span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>removedNodes = {}<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>mountImages = []<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>nextChildren = <span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_reconcilerUpdateChildren</span>(  &lt;————— 1 下面详细介绍（注意mountImages和removedNode都是在这个函数赋值的）<br/>    prevChildren<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>nextNestedChildrenElements<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>mountImages<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>removedNodes<span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">    </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>context<br/>  )<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span\n        style=\"color:#cc7832;font-weight:bold;\">if </span>(!nextChildren &amp;&amp; !prevChildren) {<br/>    <span\n        style=\"color:#cc7832;font-weight:bold;\">return</span><span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span>}<br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>updates = <span\n        style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>name<span\n        style=\"color:#cc7832;\">;//以下是diff算法部分，讲解参见博客链接<br/></span><span style=\"color:#cc7832;\">  </span><span\n        style=\"color:#808080;\">// `nextIndex` will increment for each child in `nextChildren`, but<br/></span><span\n        style=\"color:#808080;\">  // `lastIndex` will be the last index visited in `prevChildren`.<br/></span><span\n        style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextIndex = <span\n        style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>lastIndex = <span style=\"color:#6897bb;\">0</span><span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#808080;\">// `nextMountIndex` will increment for each newly mounted child.<br/></span><span\n        style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextMountIndex = <span\n        style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>lastPlacedNode = <span\n        style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(name <span\n        style=\"color:#cc7832;font-weight:bold;\">in </span>nextChildren) {<br/>    <span\n        style=\"color:#cc7832;font-weight:bold;\">if </span>(!nextChildren.<span style=\"color:#ffc66d;\">hasOwnProperty</span>(name)) {<br/>      <span\n        style=\"color:#cc7832;font-weight:bold;\">continue</span><span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">    </span>}<br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>prevChild = prevChildren &amp;&amp; prevChildren[name]<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>nextChild = nextChildren[name]<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span\n        style=\"color:#cc7832;font-weight:bold;\">if </span>(prevChild === nextChild) {<br/>      updates = <span\n        style=\"color:#ffc66d;\">enqueue</span>(<br/>        updates<span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span\n        style=\"color:#ffc66d;\">moveChild</span>(prevChild<span style=\"color:#cc7832;\">, </span>lastPlacedNode<span\n        style=\"color:#cc7832;\">, </span>nextIndex<span style=\"color:#cc7832;\">, </span>lastIndex)<br/>      )<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>lastIndex = <span\n        style=\"color:#9876aa;\">Math</span>.<span style=\"color:#ffc66d;\">max</span>(prevChild.<span style=\"color:#9876aa;\">_mountIndex</span><span\n        style=\"color:#cc7832;\">, </span>lastIndex)<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">      </span>prevChild.<span style=\"color:#9876aa;\">_mountIndex </span>= nextIndex<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>} <span\n        style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>      <span\n        style=\"color:#cc7832;font-weight:bold;\">if </span>(prevChild) {<br/>        <span style=\"color:#808080;\">// Update `lastIndex` before `_mountIndex` gets unset by unmounting.<br/></span><span\n        style=\"color:#808080;\">        </span>lastIndex = <span style=\"color:#9876aa;\">Math</span>.<span\n        style=\"color:#ffc66d;\">max</span>(prevChild.<span style=\"color:#9876aa;\">_mountIndex</span><span\n        style=\"color:#cc7832;\">, </span>lastIndex)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span\n        style=\"color:#808080;\">// The `removedNodes` loop below will actually remove the child.<br/></span><span\n        style=\"color:#808080;\">      </span>}<br/>      <span style=\"color:#808080;\">// The child must be instantiated before it's mounted.<br/></span><span\n        style=\"color:#808080;\">      </span>updates = <span style=\"color:#ffc66d;\">enqueue</span>(<br/>        updates<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span><span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_mountChildAtIndex</span>(<br/>          nextChild<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">          </span>mountImages[nextMountIndex]<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">          </span>lastPlacedNode<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">          </span>nextIndex<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">          </span>transaction<span\n        style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">          </span>context<br/>        )<br/>      )<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>nextMountIndex++<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/>    nextIndex++<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>lastPlacedNode = ReactReconciler.<span\n        style=\"color:#ffc66d;\">getHostNode</span>(nextChild)<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span>}<br/>  <span\n        style=\"color:#808080;\">// Remove children that are no longer present.<br/></span><span\n        style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(name <span\n        style=\"color:#cc7832;font-weight:bold;\">in </span>removedNodes) {<br/>    <span\n        style=\"color:#cc7832;font-weight:bold;\">if </span>(removedNodes.<span style=\"color:#ffc66d;\">hasOwnProperty</span>(name)) {<br/>      updates = <span\n        style=\"color:#ffc66d;\">enqueue</span>(<br/>        updates<span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span\n        style=\"color:#ffc66d;\">_unmountChild</span>(prevChildren[name]<span style=\"color:#cc7832;\">, </span>removedNodes[name])<br/>      )<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/>  }<br/>  <span\n        style=\"color:#cc7832;font-weight:bold;\">if </span>(updates) {<br/>    <span style=\"color:#ffc66d;\">processQueue</span>(<span\n        style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>updates)<span\n        style=\"color:#cc7832;\">;//注意这里将上面比较后缓存的变更进行处理更新dom树，使所有变更在浏览器中得以展现，代码参见（src/<font\n        style=\"font-size: 12px; color: rgb(204, 120, 50); font-family: Menlo;\">renderers/dom/stack/client/DOMChildrenOperations.js</font>）的processUpdate<br/></span><span\n        style=\"color:#cc7832;\">  </span>}<br/>  <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span\n        style=\"color:#9876aa;\">_renderedChildren </span>= nextChildren<span style=\"color:#cc7832;\">;<br/></span><br/>}<span\n        style=\"color:#cc7832;\">,</span>\n</pre>\n    React在执行diff算法之前先做了两件事情：\n</div>\n<div>\n    <ol start=\"1\">\n        <li>将新的ReactElement结构树（可能包含很多层）’拍平’，以{ key：xx，value：element}方式返回</li>\n        <li>遍历上一步生成的key——ReactElement映射和原有的key——ReactComponent实例映射做比较，新建或删除ReactComponent。</li>\n    </ol>\n</div>\n<div>经过上面两个步骤生成了新的key——ReactComponent实例，和原有的key——ReactComponent映射进行diff算法。</div>\n<div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span\n        style=\"color:#ffc66d;\">_reconcilerUpdateChildren</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br/>  prevChildren<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>nextNestedChildrenElements<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>mountImages<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>removedNodes<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>transaction<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>context<br/>) {<br/>  <span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>nextChildren<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>selfDebugID = <span\n        style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">;<br/></span> //第一步：调用（src/<font\n        style=\"font-size: 12px; color: rgb(169, 183, 198); font-family: Menlo;\">shared/utils/traverseAllChildren.js</font>）对子节点进行深度优先遍历，同时根据子节点所在的层级按照一定命名规则生成唯一key存在object中，这样虽然所有树状结构的子节点被’拍平’存储，但是能保证在diff操作的时候同一层级的子节点进行比较（即连个map中key相同的子节点一定在同一层）<br/>  nextChildren = flattenChildren(nextNestedChildrenElements<span\n        style=\"color:#cc7832;\">, </span>selfDebugID)<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span>ReactChildReconciler.<span style=\"color:#ffc66d;\">updateChildren</span>( //第二步：参见下面详细介绍<br/>    prevChildren<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>nextChildren<span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">    </span>mountImages<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>removedNodes<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>transaction<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span><span\n        style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span\n        style=\"color:#9876aa;\">_hostContainerInfo</span><span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">    </span>context<span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">    </span>selfDebugID<br/>  )<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">return </span>nextChildren<span\n        style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">,</span>\n</pre>\n    <div>\n\t\t<pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span\n                style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Updates the rendered children and returns a new set of children.<br/></span><span\n                style=\"color:#629755;font-style:italic;\"> *<br/></span><span\n                style=\"color:#629755;font-style:italic;\"> * </span><span\n                style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n                style=\"color:#629755;font-style:italic;\">{?object} prevChildren Previously initialized set of children.<br/></span><span\n                style=\"color:#629755;font-style:italic;\"> * </span><span\n                style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n                style=\"color:#629755;font-style:italic;\">{?object} nextChildren Flat child element maps.<br/></span><span\n                style=\"color:#629755;font-style:italic;\"> * </span><span\n                style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n                style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction} transaction<br/></span><span\n                style=\"color:#629755;font-style:italic;\"> * </span><span\n                style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n                style=\"color:#629755;font-style:italic;\">{object} context<br/></span><span\n                style=\"color:#629755;font-style:italic;\"> * </span><span\n                style=\"color:#629755;font-weight:bold;font-style:italic;\">@return </span><span\n                style=\"color:#629755;font-style:italic;\">{?object} A new set of child instances.<br/></span><span\n                style=\"color:#629755;font-style:italic;\"> * </span><span\n                style=\"color:#629755;font-weight:bold;font-style:italic;\">@internal<br/></span><span\n                style=\"color:#629755;font-weight:bold;font-style:italic;\"/><span style=\"color:#629755;font-style:italic;\">*/<br/></span><span\n                style=\"color:#ffc66d;\">updateChildren</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br/>  prevChildren<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>nextChildren<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>mountImages<span style=\"color:#cc7832;\">,<br/></span><span\n                style=\"color:#cc7832;\">  </span>removedNodes<span style=\"color:#cc7832;\">,<br/></span><span\n                style=\"color:#cc7832;\">  </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>hostParent<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>hostContainerInfo<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>context<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>selfDebugID <span\n                style=\"color:#808080;\">// 0 in production and for roots<br/></span>) {<br/>  <span style=\"color:#808080;\">// We currently don't have a way to track moves here but if we use iterators<br/></span><span\n                style=\"color:#808080;\">  // instead of for..in we can zip the iterators and check if an item has<br/></span><span\n                style=\"color:#808080;\">  // moved.<br/></span><span style=\"color:#808080;\">  // </span><span\n                style=\"color:#a8c023;font-style:italic;\">TODO: If nothing has changed, return the prevChildren object so that we<br/></span><span\n                style=\"color:#a8c023;font-style:italic;\">  </span><span style=\"color:#808080;\">// can quickly bailout if nothing has changed.<br/></span><span\n                style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(!nextChildren &amp;&amp; !prevChildren) {<br/>    <span\n                style=\"color:#cc7832;font-weight:bold;\">return</span><span style=\"color:#cc7832;\">;<br/></span><span\n                style=\"color:#cc7832;\">  </span>}<br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>name<span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span\n                style=\"color:#cc7832;font-weight:bold;\">var </span>prevChild<span style=\"color:#cc7832;\">;<br/></span><span\n                style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(name <span\n                style=\"color:#cc7832;font-weight:bold;\">in </span>nextChildren) {<br/>    <span\n                style=\"color:#cc7832;font-weight:bold;\">if </span>(!nextChildren.<span\n                style=\"color:#ffc66d;\">hasOwnProperty</span>(name)) {<br/>      <span style=\"color:#cc7832;font-weight:bold;\">continue</span><span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/>    prevChild = prevChildren &amp;&amp; prevChildren[name]<span\n                style=\"color:#cc7832;\">; //如果旧映射里找到对应的ReactComponent实例<br/></span><span style=\"color:#cc7832;\">    </span><span\n                style=\"color:#cc7832;font-weight:bold;\">var </span>prevElement = prevChild &amp;&amp; prevChild.<span\n                style=\"color:#9876aa;\">_currentElement</span><span style=\"color:#cc7832;\">;<br/></span><span\n                style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextElement = nextChildren[name]<span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span\n                style=\"color:#cc7832;font-weight:bold;\">if </span>(prevChild != <span\n                style=\"color:#cc7832;font-weight:bold;\">null </span>&amp;&amp;<br/>        shouldUpdateReactComponent(prevElement<span\n                style=\"color:#cc7832;\">, </span>nextElement)) {//取出实例中的ReactElement与新的做比较，如果类型相同调用实例更新函数<br/>      ReactReconciler.<span\n                style=\"color:#ffc66d;\">receiveComponent</span>(<br/>        prevChild<span style=\"color:#cc7832;\">, </span>nextElement<span\n                style=\"color:#cc7832;\">, </span>transaction<span style=\"color:#cc7832;\">, </span>context<br/>      )<span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>nextChildren[name] = prevChild<span\n                style=\"color:#cc7832;\">; <br/></span><span style=\"color:#cc7832;\">    </span>} <span\n                style=\"color:#cc7832;font-weight:bold;\">else </span>{ //否则清理旧的ReactComponent实例，加入到removeNodes映射中，初始化新实例加入映射中，调用新实例的mountComponent获得对应的渲染markup加入到<font\n                style=\"font-family: Menlo; background-color: rgb(43, 43, 43); font-size: 12px; color: rgb(169, 183, 198);\">mountImages 。<font\n                style=\"font-family: Menlo; background-color: rgb(43, 43, 43); font-size: 12px; color: rgb(169, 183, 198);\">removeNodes映射和mountImage映射在diff算法执行过程中加入到更新队列然后批量更新dom。</font></font><br/>      <span\n                style=\"color:#cc7832;font-weight:bold;\">if </span>(<br/>        !ReactFeatureFlags.<span style=\"color:#9876aa;\">prepareNewChildrenBeforeUnmountInStack </span>&amp;&amp;<br/>        prevChild<br/>      ) {<br/>        removedNodes[name] = ReactReconciler.<span\n                style=\"color:#ffc66d;\">getHostNode</span>(prevChild)<span style=\"color:#cc7832;\">;<br/></span><span\n                style=\"color:#cc7832;\">        </span>ReactReconciler.<span style=\"color:#ffc66d;\">unmountComponent</span>(<br/>          prevChild<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">          </span><span\n                style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">, </span><span\n                style=\"color:#808080;\">/* safely */<br/></span><span style=\"color:#808080;\">          </span><span\n                style=\"color:#cc7832;font-weight:bold;\">false </span><span\n                style=\"color:#808080;\">/* skipLifecycle */<br/></span><span style=\"color:#808080;\">        </span>)<span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>}<br/>      <span\n                style=\"color:#808080;\">// The child must be instantiated before it's mounted.<br/></span><span\n                style=\"color:#808080;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextChildInstance = instantiateReactComponent(nextElement<span\n                style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">true</span>)<span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>nextChildren[name] = nextChildInstance<span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span><span style=\"color:#808080;\">// Creating mount image now ensures refs are resolved in right order<br/></span><span\n                style=\"color:#808080;\">      // (see <a href=\"https://github.com/facebook/react/pull/7101\">https://github.com/facebook/react/pull/7101</a> for explanation).<br/></span><span\n                style=\"color:#808080;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextChildMountImage = ReactReconciler.<span\n                style=\"color:#ffc66d;\">mountComponent</span>(<br/>        nextChildInstance<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>transaction<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>hostParent<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>hostContainerInfo<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>context<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>selfDebugID<br/>      )<span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>mountImages.<span\n                style=\"color:#ffc66d;\">push</span>(nextChildMountImage)<span style=\"color:#cc7832;\">;<br/></span><span\n                style=\"color:#cc7832;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(<br/>        ReactFeatureFlags.<span\n                style=\"color:#9876aa;\">prepareNewChildrenBeforeUnmountInStack </span>&amp;&amp;<br/>        prevChild<br/>      ) {<br/>        removedNodes[name] = ReactReconciler.<span\n                style=\"color:#ffc66d;\">getHostNode</span>(prevChild)<span style=\"color:#cc7832;\">;<br/></span><span\n                style=\"color:#cc7832;\">        </span>ReactReconciler.<span style=\"color:#ffc66d;\">unmountComponent</span>(<br/>          prevChild<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">          </span><span\n                style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">, </span><span\n                style=\"color:#808080;\">/* safely */<br/></span><span style=\"color:#808080;\">          </span><span\n                style=\"color:#cc7832;font-weight:bold;\">false </span><span\n                style=\"color:#808080;\">/* skipLifecycle */<br/></span><span style=\"color:#808080;\">        </span>)<span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>}<br/>    }<br/>  }<br/>  <span\n                style=\"color:#808080;\">// Unmount children that are no longer present.<br/></span><span\n                style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(name <span\n                style=\"color:#cc7832;font-weight:bold;\">in </span>prevChildren) {<br/>    <span\n                style=\"color:#cc7832;font-weight:bold;\">if </span>(prevChildren.<span style=\"color:#ffc66d;\">hasOwnProperty</span>(name) &amp;&amp;<br/>        !(nextChildren &amp;&amp; nextChildren.<span\n                style=\"color:#ffc66d;\">hasOwnProperty</span>(name))) {<br/>      prevChild = prevChildren[name]<span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>removedNodes[name] = ReactReconciler.<span\n                style=\"color:#ffc66d;\">getHostNode</span>(prevChild)<span style=\"color:#cc7832;\">;<br/></span><span\n                style=\"color:#cc7832;\">      </span>ReactReconciler.<span style=\"color:#ffc66d;\">unmountComponent</span>(<br/>        prevChild<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span><span\n                style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">, </span><span\n                style=\"color:#808080;\">/* safely */<br/></span><span style=\"color:#808080;\">        </span><span\n                style=\"color:#cc7832;font-weight:bold;\">false </span><span\n                style=\"color:#808080;\">/* skipLifecycle */<br/></span><span style=\"color:#808080;\">      </span>)<span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/>  }<br/>}<span\n                style=\"color:#cc7832;\">,</span></pre>\n    </div>\n    <div><br/></div>\n    <div>diff算法原理详解参见：<br/></div>\n</div>\n<div><a href=\"https://zhuanlan.zhihu.com/p/20346379?refer=purerender\">https://zhuanlan.zhihu.com/p/20346379?refer=purerender</a> 或《深入React技术栈》3.5章（可以找我借）讲得很详细。<br/>\n</div>\n<div><br/></div>\n","source":"_posts/react源码学习——setState原理.html","raw":"---\nlayout: post\ntitle:  react源码学习——setState原理\ndate:   2017-02-14 08:43:59\nauthor: Lily\ncategories: frontend\ntags:\n- react\n- 源码解读\n---\n<div>\n    React通过this.setState方法更新state，当this.setState被调用的时候会根据更新策略执行情况（是否在更新中）来判断是否重新调用render方法还是放到更新队列中。看下setState源码，题外话：React创建组件有三种方式:\n    1）函数方式(无状态组件) 2）React.createClass(es5)  3) extends React.Component(es6)，后两种方式中\n    setState会自动注入到组件中，因此在自定义组件中能通过this.setState直接访问。三种创建方式的区别参见<a\n        href=\"http://www.cnblogs.com/wonyun/p/5930333.html\">这篇文章</a>。<br>\n    <div>——以下代码是React v15.4.2版本——</div>\n</div>\n<div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><br/><span\n        style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Sets a subset of the state. Always use this to mutate<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * state. You should treat `this.state` as immutable.<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * There is no guarantee that `this.state` will be immediately updated, so<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * accessing `this.state` after calling this method may return the old value.<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * There is no guarantee that calls to `setState` will run synchronously,<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * as they may eventually be batched together.  You can provide an optional<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * callback that will be executed when the call to setState is actually<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * completed.<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * When a function is provided to setState, it will be called at some point in<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * the future (not synchronously). It will be called with the up to date<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * component arguments (state, props, context). These values can be different<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * from this.* because your function may be called after receiveProps but before<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * shouldComponentUpdate, and this new state, props, and context will not yet be<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * assigned to this.<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span\n        style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n        style=\"color:#629755;font-style:italic;\">{object|function} partialState Next partial state or function to<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> *        produce next partial state to be merged with current state.<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n        style=\"color:#629755;font-style:italic;\">{?function} callback Called after state is updated.<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@final<br/></span><span\n        style=\"color:#629755;font-weight:bold;font-style:italic;\"/><span\n        style=\"color:#629755;font-style:italic;\">* </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@protected<br/></span><span\n        style=\"color:#629755;font-weight:bold;font-style:italic;\"/><span\n        style=\"color:#629755;font-style:italic;\">*/<br/></span><span style=\"color:#ffc66d;\">ReactComponent</span>.<span\n        style=\"color:#9876aa;\">prototype</span>.<span style=\"color:#ffc66d;\">setState </span>= <span\n        style=\"color:#cc7832;font-weight:bold;\">function</span>(partialState<span\n        style=\"color:#cc7832;\">, </span>callback) {<span style=\"color:#cc7832;\"><br/></span><span\n        style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span\n        style=\"color:#9876aa;\">updater</span>.<span style=\"color:#ffc66d;\">enqueueSetState</span>(<span\n        style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>partialState<span\n        style=\"color:#cc7832;\">, </span>callback<span style=\"color:#cc7832;\">, </span><span\n        style=\"color:#6a8759;\">'setState'</span>)<span style=\"color:#cc7832;\">;<br/></span>}<span\n        style=\"color:#cc7832;\">;</span>\n</pre>\n    <pre style=\"background-color: rgb(43, 43, 43);\"><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(169, 183, 198);\"><span\n            style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Sets a subset of the state. This only exists because _pendingState is<br/></span><span\n            style=\"color:#629755;font-style:italic;\"> * internal. This provides a merging strategy that is not available to deep<br/></span><span\n            style=\"color:#629755;font-style:italic;\"> * properties which is confusing. </span><span\n            style=\"color:#a8c023;font-style:italic;\">TODO: Expose pendingState or don't use it<br/></span><span\n            style=\"color:#a8c023;font-style:italic;\"/><span\n            style=\"color:#629755;font-style:italic;\">* during the merge.<br/></span><span\n            style=\"color:#629755;font-style:italic;\"> *<br/></span><span\n            style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n            style=\"color:#629755;font-style:italic;\">{ReactClass} publicInstance The instance that should rerender.<br/></span><span\n            style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n            style=\"color:#629755;font-style:italic;\">{object} partialState Next partial state to be merged with state.<br/></span><span\n            style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n            style=\"color:#629755;font-style:italic;\">{?function} callback Called after state is updated.<br/></span><span\n            style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n            style=\"color:#629755;font-style:italic;\">{?string} Name of the calling function in the public API.<br/></span><span\n            style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@internal<br/></span><span\n            style=\"color:#629755;font-weight:bold;font-style:italic;\"/><span\n            style=\"color:#629755;font-style:italic;\">*/<br/></span><span style=\"color:#ffc66d;\">enqueueSetState</span>: <span\n            style=\"color:#cc7832;font-weight:bold;\">function</span>(publicInstance<span style=\"color:#cc7832;\">, </span>partialState<span\n            style=\"color:#cc7832;\">, </span>callback<span style=\"color:#cc7832;\">, </span>callerName) {<br/>  </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#cc7832\"><b>//获得组件实例</b></font><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\"><br/>  </font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">internalInstance = </font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">getInternalInstanceReadyForUpdate</span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(<br/>    publicInstance</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(106, 135, 89);\">'setState'<br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(106, 135, 89);\">  </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">)</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\"><br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">if </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(!internalInstance) {<br/>    </font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">return</span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">}<br/><br/>  //初始化state更新队列<br/>  </font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">queue =<br/>    internalInstance.</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_pendingStateQueue </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">||<br/>    (internalInstance.</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_pendingStateQueue </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">= [])</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">queue.</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">push</span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(partialState)</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  //如果setState设置了回调函数，添加到组件实例的队列中<br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">if </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\"\n            color=\"#a9b7c6\">(callback) {<br/>    validateCallback(callback</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">, </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">callerName)</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">if </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(internalInstance.</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_pendingCallbacks</span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">) {<br/>      internalInstance.</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_pendingCallbacks</span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">.</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">push</span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(callback)</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">} </font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">else </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">{<br/>      internalInstance.</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_pendingCallbacks </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">= [callback]</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font color=\"#a9b7c6\"><font\n            face=\"Menlo\" size=\"2\">}<br/>  }<br/>  <br/>  </font></font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">enqueueUpdate</span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(internalInstance)</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">}</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,</span></pre>\n</div>\n<div><font style=\"font-size: 14px;\"><span\n        style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: 'PingFang SC'; color: rgb(69, 69, 69);\">最后调用（</span><span\n        style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(69, 69, 69);\">src/renderers/shared/stack/reconciler/ReactUpdates.js</span><span\n        style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: 'PingFang SC'; color: rgb(69, 69, 69);\">）</span><span\n        style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(69, 69, 69);\">ReactUpdates</span><span\n        style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: 'PingFang SC'; color: rgb(69, 69, 69);\">的enqueueUpdate函数执行更新。</span></font>\n</div>\n<div><font style=\"font-size: 14px;\"><span\n        style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; color: rgb(69, 69, 69);\"/></font><span\n        style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; color: rgb(69, 69, 69);\"><font\n        style=\"font-size: 14px;\"><font face=\"PingFang SC\"><pre\n        style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span\n        style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Mark a component as needing a rerender, adding an optional callback to a<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * list of functions which will be executed once the rerender occurs.<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> */<br/></span><span style=\"color:#cc7832;font-weight:bold;\">function </span><span\n        style=\"color:#ffc66d;\">enqueueUpdate</span>(component) {<br/>  <span\n        style=\"color:#ffc66d;\">ensureInjected</span>()<span style=\"color:#cc7832;\">;</span><span style=\"color:#808080;\"><br/></span><span\n        style=\"color:#808080;\"><br/></span><span style=\"color:#808080;\">  </span><span\n        style=\"color:#cc7832;font-weight:bold;\">if </span>(!batchingStrategy.<span\n        style=\"color:#9876aa;\">isBatchingUpdates</span>) {//如果当前没有处于更新中，<br/>    batchingStrategy.<span\n        style=\"color:#ffc66d;\">batchedUpdates</span>(<span style=\"color:#ffc66d;\">enqueueUpdate</span><span\n        style=\"color:#cc7832;\">, </span>component)<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">return</span><span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><br/>  dirtyComponents.<span\n        style=\"color:#ffc66d;\">push</span>(component)<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(component.<span\n        style=\"color:#9876aa;\">_updateBatchNumber </span>== <span style=\"color:#cc7832;font-weight:bold;\">null</span>) {<br/>    component.<span\n        style=\"color:#9876aa;\">_updateBatchNumber </span>= updateBatchNumber + <span style=\"color:#6897bb;\">1</span><span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/>}\n</pre></font></font></span><br/></div>\n<div>\n    batchingStrategy在ReactDefaultBatchingStrategy.js（src/renderers/shared/stack/reconciler/ReactDefaultBatchingStrategy.js），这里要介绍下React的事务，事务是将需要执行的方法封装起来，在通过perform方法执行，以保证在执行目标方法前，事务中的一组initialize方法限制性，目标方法执行后，一组close方法能够得到执行，参见下图（src/renderers/shared/stack/reconciler/Transaction.js中）：\n</div>\n<div><img\n        src=\"/images/2017-02-14/3C5D0315-7718-4DC6-89B9-0C7A281294F2.png\"\n        height=\"670\" width=\"1066\"/><br/></div>\n<div>再回到我们的更新策略对象中</div>\n<div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><br/><span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>RESET_BATCHED_UPDATES = {<br/>  <span style=\"color:#9876aa;\">initialize</span>: emptyFunction<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span><span\n        style=\"color:#ffc66d;\">close</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>() {<br/>    ReactDefaultBatchingStrategy.<span\n        style=\"color:#9876aa;\">isBatchingUpdates </span>= <span style=\"color:#cc7832;font-weight:bold;\">false</span><span\n        style=\"color:#cc7832;\">;//<font\n        style=\"font-family: Menlo; background-color: rgb(43, 43, 43); font-size: 12px; color: rgb(169, 183, 198);\">事务执行结束后重置当前更新状态</font><br/></span><span\n        style=\"color:#cc7832;\">  </span>}<span style=\"color:#cc7832;\">,<br/></span>}<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\"><br/></span><span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>FLUSH_BATCHED_UPDATES = {<br/>  <span style=\"color:#9876aa;\">initialize</span>: emptyFunction<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#9876aa;\">close</span>: ReactUpdates.<span\n        style=\"color:#ffc66d;\">flushBatchedUpdates</span>.<span style=\"color:#ffc66d;\">bind</span>(ReactUpdates)<span\n        style=\"color:#cc7832;\">,//遍历dirtyComponent数组中的组件，逐个更新<br/></span>}<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;font-weight:bold;\">var </span>TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES<span\n        style=\"color:#cc7832;\">, </span>RESET_BATCHED_UPDATES]<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;font-weight:bold;\">function </span><span\n        style=\"color:#ffc66d;\">ReactDefaultBatchingStrategyTransaction</span>() {<br/>  <span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">reinitializeTransaction</span>()<span\n        style=\"color:#cc7832;\">;<br/></span>}<br/><br/>Object.<span style=\"color:#ffc66d;\">assign</span>(<br/>  <span\n        style=\"color:#ffc66d;\">ReactDefaultBatchingStrategyTransaction</span>.<span\n        style=\"color:#9876aa;\">prototype</span><span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">  </span>Transaction<span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">  </span>{<br/>    <span style=\"color:#ffc66d;\">getTransactionWrappers</span>: <span\n        style=\"color:#cc7832;font-weight:bold;\">function</span>() { //给事务添加wapper<br/>      <span\n        style=\"color:#cc7832;font-weight:bold;\">return </span>TRANSACTION_WRAPPERS<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>}<br/>)<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>transaction = <span\n        style=\"color:#cc7832;font-weight:bold;\">new </span><span style=\"color:#ffc66d;\">ReactDefaultBatchingStrategyTransaction</span>()<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>ReactDefaultBatchingStrategy = {<br/>  <span\n        style=\"color:#9876aa;\">isBatchingUpdates</span>: <span style=\"color:#cc7832;font-weight:bold;\">false</span><span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\"><br/></span><span\n        style=\"color:#cc7832;\">  </span><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span\n        style=\"color:#629755;font-style:italic;\">   * Call the provided function in a context within which calls to `setState`<br/></span><span\n        style=\"color:#629755;font-style:italic;\">   * and friends are batched such that components aren't updated unnecessarily.<br/></span><span\n        style=\"color:#629755;font-style:italic;\">   */<br/></span><span\n        style=\"color:#629755;font-style:italic;\">  </span><span style=\"color:#ffc66d;\">batchedUpdates</span>: <span\n        style=\"color:#cc7832;font-weight:bold;\">function</span>(callback<span style=\"color:#cc7832;\">, </span>a<span\n        style=\"color:#cc7832;\">, </span>b<span style=\"color:#cc7832;\">, </span>c<span style=\"color:#cc7832;\">, </span>d<span\n        style=\"color:#cc7832;\">, </span>e) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>alreadyBatchingUpdates = ReactDefaultBatchingStrategy.<span\n        style=\"color:#9876aa;\">isBatchingUpdates</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span\n        style=\"color:#cc7832;\">    </span>ReactDefaultBatchingStrategy.<span style=\"color:#9876aa;\">isBatchingUpdates </span>= <span\n        style=\"color:#cc7832;font-weight:bold;\">true</span><span style=\"color:#cc7832;\">;//设置当前正在处于更新状态<br/></span><span\n        style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// The code is written this way to avoid extra allocations<br/></span><span\n        style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(alreadyBatchingUpdates) { //个人认为这里是确保同一时间只有一个事务在更新组件，比如一个组件几乎无间隔地调用两次setState，欢迎讨论<br/>      <span\n        style=\"color:#cc7832;font-weight:bold;\">return </span>callback(a<span style=\"color:#cc7832;\">, </span>b<span\n        style=\"color:#cc7832;\">, </span>c<span style=\"color:#cc7832;\">, </span>d<span style=\"color:#cc7832;\">, </span>e)<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>} <span\n        style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>      <span\n        style=\"color:#cc7832;font-weight:bold;\">return </span>transaction.<span style=\"color:#ffc66d;\">perform</span>(callback<span\n        style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">, </span>a<span\n        style=\"color:#cc7832;\">, </span>b<span style=\"color:#cc7832;\">, </span>c<span style=\"color:#cc7832;\">, </span>d<span\n        style=\"color:#cc7832;\">, </span>e)<span style=\"color:#cc7832;\">;//注意这里比较有意思，把<font\n        style=\"font-family: Menlo; font-size: 12px; background-color: rgb(43, 43, 43); color: rgb(255, 198, 109);\">enqueueUpdate作为callback调用，但这时<font\n        style=\"font-family: Menlo; font-size: 12px; background-color: rgb(43, 43, 43); color: rgb(152, 118, 170);\">isBatchingUpdates是true，因此<font\n        style=\"font-family: Menlo; background-color: rgb(43, 43, 43); font-size: 12px; color: rgb(255, 198, 109);\">enqueueUpdate做的事就是把这个要更新的component加入到dirtyComponent数组中，然后在事务wrapper中的close方法</font></font></font></span><span\n        style=\"font-size: 9pt;\">ReactUpdates.</span><span style=\"font-size: 9pt; color: rgb(255, 198, 109);\">flushBatchedUpdates遍历dirtyComponent数组进行更新。</span><span\n        style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span>}<br/>  }<span\n        style=\"color:#cc7832;\">,<br/></span>}<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\"><br/></span>module.<span\n        style=\"color:#ffc66d;\">exports </span>= ReactDefaultBatchingStrategy<span style=\"color:#cc7832;\">;<br/></span>\n</pre>\n    由这段代码可以看到，真正执行更新的实在事务的某个wapper的close方法中，即ReactUpdates.flushBatchedUpdates中进行更新的：\n    <pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.8pt;\"><span\n            style=\"color:#cc7832;font-weight:bold;\">var </span><span style=\"color:#ffc66d;\">flushBatchedUpdates </span>= <span\n            style=\"color:#cc7832;font-weight:bold;\">function</span>() {<br/>  <span style=\"color:#808080;\">// ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents<br/></span><span\n            style=\"color:#808080;\">  // array and perform any updates enqueued by mount-ready handlers (i.e.,<br/></span><span\n            style=\"color:#808080;\">  // componentDidUpdate) but we need to check here too in order to catch<br/></span><span\n            style=\"color:#808080;\">  // updates enqueued by setState callbacks.<br/></span><span\n            style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">while </span>(dirtyComponents.<span\n            style=\"color:#9876aa;\">length</span>) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>transaction = <span\n            style=\"color:#ffc66d;\">ReactUpdatesFlushTransaction</span>.<span style=\"color:#ffc66d;\">getPooled</span>()<span\n            style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>transaction.<span\n            style=\"color:#ffc66d;\">perform</span>(<span style=\"color:#ffc66d;\">runBatchedUpdates</span><span\n            style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">null</span><span\n            style=\"color:#cc7832;\">, </span>transaction)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span\n            style=\"color:#ffc66d;\">ReactUpdatesFlushTransaction</span>.<span\n            style=\"color:#ffc66d;\">release</span>(transaction)<span style=\"color:#cc7832;\">;<br/></span><span\n            style=\"color:#cc7832;\">  </span>}<br/>}<span style=\"color:#cc7832;\">;</span>\n</pre>\n</div>\n<div>注意这里由用到一个事务ReactUpdatesFlushTransaction：</div>\n<div><pre style=\"background-color: rgb(43, 43, 43);\"><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\"><br/></font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">var </span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">NESTED_UPDATES = {<br/>  </font><span\n        style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">initialize</span><font face=\"Menlo\"\n                                                                                                        color=\"#a9b7c6\"\n                                                                                                        size=\"3\">: </font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">function</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">() {<br/>    </font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">this</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span\n        style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">dirtyComponentsLength </span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">= dirtyComponents.</font><span\n        style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">length</span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">  </span><font face=\"Menlo\" color=\"#a9b7c6\"\n                                                                                               size=\"3\">}</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">,<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">  </span><span\n        style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">close</span><font face=\"Menlo\"\n                                                                                                   color=\"#a9b7c6\"\n                                                                                                   size=\"3\">: </font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">function</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">() {<br/>    </font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">if </span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">(</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">this</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span\n        style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">dirtyComponentsLength </span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">!== dirtyComponents.</font><span\n        style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">length</span><font face=\"Menlo\"\n                                                                                                    color=\"#a9b7c6\" size=\"3\">) {<br/>      </font><span\n        style=\"color: rgb(128, 128, 128); font-family: Menlo; font-size: 9.8pt;\">// Additional updates were enqueued by componentDidUpdate handlers or<br/></span><span\n        style=\"color: rgb(128, 128, 128); font-family: Menlo; font-size: 9.8pt;\">      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run<br/></span><span\n        style=\"color: rgb(128, 128, 128); font-family: Menlo; font-size: 9.8pt;\">      // these new updates so that if A's componentDidUpdate calls setState on<br/></span><span\n        style=\"color: rgb(128, 128, 128); font-family: Menlo; font-size: 9.8pt;\">      // B, B will update before the callback A's updater provided when calling<br/></span><font\n        face=\"Menlo\" color=\"#808080\" size=\"3\">      // setState.在close之前再检查一遍</font><font face=\"Menlo\" color=\"#808080\">dirtyComponent</font><font\n        face=\"Menlo\" color=\"#808080\" size=\"3\">是否有新的要更新的组件，有则更新，上面注释中将的场景应该是比如在A组件的setState传入了第二个参数回调函数，如果在A的componentDidUpdate中调用了setState改变了它包含的B组件的状态（这里假设只改变B 的状态），为了保证回调函数能访问到更新后的B组件，继续执行dirtyComponent中后插入的组件（B）然后更新B组件<br/></font><span\n        style=\"color: rgb(128, 128, 128); font-family: Menlo; font-size: 9.8pt;\">      </span><font face=\"Menlo\"\n                                                                                                    color=\"#a9b7c6\" size=\"3\">dirtyComponents.</font><span\n        style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">splice</span><font face=\"Menlo\"\n                                                                                                    color=\"#a9b7c6\"\n                                                                                                    size=\"3\">(</font><span\n        style=\"color: rgb(104, 151, 187); font-family: Menlo; font-size: 9.8pt;\">0</span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">, </span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">this</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span\n        style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">dirtyComponentsLength</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">)</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">      </span><span\n        style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">flushBatchedUpdates</span><font face=\"Menlo\"\n                                                                                                                 color=\"#a9b7c6\"\n                                                                                                                 size=\"3\">()</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">    </span><font face=\"Menlo\" color=\"#a9b7c6\"\n                                                                                                 size=\"3\">} </font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">else </span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">{<br/>      dirtyComponents.</font><span\n        style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">length </span><font face=\"Menlo\"\n                                                                                                     color=\"#a9b7c6\" size=\"3\">= </font><span\n        style=\"color: rgb(104, 151, 187); font-family: Menlo; font-size: 9.8pt;\">0</span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">    </span><font face=\"Menlo\" color=\"#a9b7c6\"\n                                                                                                 size=\"3\">}<br/>  }</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">,<br/></span><font face=\"Menlo\"\n                                                                                                   color=\"#a9b7c6\"\n                                                                                                   size=\"3\">}</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\"><br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">var </span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">TRANSACTION_WRAPPERS = [NESTED_UPDATES]</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\"><br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">function </span><span\n        style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">ReactUpdatesFlushTransaction</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">() {<br/>  </font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">this</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span\n        style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">reinitializeTransaction</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">()</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">  </span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">this</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span\n        style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">dirtyComponentsLength </span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">= </font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">null</span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">  </span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">this</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span\n        style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">reconcileTransaction </span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">= ReactUpdates.</font><span\n        style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">ReactReconcileTransaction</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span\n        style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">getPooled</span><font face=\"Menlo\"\n                                                                                                       color=\"#a9b7c6\"\n                                                                                                       size=\"3\">(<br/>    </font><span\n        style=\"color: rgb(128, 128, 128); font-family: Menlo; font-size: 9.8pt;\">/* useCreateElement */ </span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">true<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">  </span><font face=\"Menlo\"\n                                                                                                                  color=\"#a9b7c6\"\n                                                                                                                  size=\"3\">)</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><font face=\"Menlo\"\n                                                                                                   color=\"#a9b7c6\"\n                                                                                                   size=\"3\">}<br/><br/>Object.</font><span\n        style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">assign</span><font face=\"Menlo\"\n                                                                                                    color=\"#a9b7c6\" size=\"3\">(<br/>  </font><span\n        style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">ReactUpdatesFlushTransaction</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span\n        style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">prototype</span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">,<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">  </span><font face=\"Menlo\" color=\"#a9b7c6\"\n                                                                                               size=\"3\">Transaction</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">,<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">  </span><font face=\"Menlo\" color=\"#a9b7c6\"\n                                                                                               size=\"3\">{<br/>    </font><span\n        style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">getTransactionWrappers</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">: </font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">function</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">() { //这里将wapper加到事务中<br/>      </font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">return </span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">TRANSACTION_WRAPPERS</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">    </span><font face=\"Menlo\" color=\"#a9b7c6\"\n                                                                                                 size=\"3\">}</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">,<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">    //略去其他……<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">  </span><font face=\"Menlo\" color=\"#a9b7c6\"\n                                                                                               size=\"3\">}<br/>)</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><font face=\"Menlo\"\n                                                                                                   color=\"#a9b7c6\" size=\"3\"\n/></pre>\n    现在我们的更新事务结构如下图所示：\n</div>\n<div><img\n        src=\"/images/2017-02-14/FE612576-70BB-4B9C-9343-07DFAC12DCB4.png\"\n        height=\"690\" width=\"1766\"/><br/></div>\n<div>重点看下runBatchedUpdate方法是如何更新组件的。</div>\n<div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.8pt;\"><br/><span\n        style=\"color:#cc7832;font-weight:bold;\">function </span><span style=\"color:#ffc66d;\">runBatchedUpdates</span>(transaction) {<br/>  <span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>len = transaction.<span style=\"color:#9876aa;\">dirtyComponentsLength</span><span\n        style=\"color:#cc7832;\">;</span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span\n        style=\"color:#808080;\">// Since reconciling a component higher in the owner hierarchy usually (not<br/></span><span\n        style=\"color:#808080;\">  // always -- see shouldComponentUpdate()) will reconcile children, reconcile<br/></span><span\n        style=\"color:#808080;\">  // them before their children by sorting the array.<br/></span><span\n        style=\"color:#808080;\">  </span>dirtyComponents.<span style=\"color:#ffc66d;\">sort</span>(<span style=\"color:#ffc66d;\">mountOrderComparator</span>)<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span\n        style=\"color:#cc7832;\">  </span><span style=\"color:#808080;\">// Any updates enqueued while reconciling must be performed after this entire<br/></span><span\n        style=\"color:#808080;\">  // batch. Otherwise, if dirtyComponents is [A, B] where A has children B and<br/></span><span\n        style=\"color:#808080;\">  // C, B could update twice in a single batch if C's render enqueues an update<br/></span><span\n        style=\"color:#808080;\">  // to B (since B would have already updated, we should skip it, and the only<br/></span><span\n        style=\"color:#808080;\">  // way we can know to do so is by checking the batch counter).<br/></span><span\n        style=\"color:#808080;\">  </span>updateBatchNumber++<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span\n        style=\"color:#cc7832;font-weight:bold;\">for </span>(<span style=\"color:#cc7832;font-weight:bold;\">var </span>i = <span\n        style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">; </span>i &lt; len<span style=\"color:#cc7832;\">; </span>i++) {<br/>    <span\n        style=\"color:#808080;\">// If a component is unmounted before pending changes apply, it will still<br/></span><span\n        style=\"color:#808080;\">    // be here, but we assume that it has cleared its _pendingCallbacks and<br/></span><span\n        style=\"color:#808080;\">    // that performUpdateIfNecessary is a noop.<br/></span><span\n        style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>component = dirtyComponents[i]<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">   </span><br/>    ReactReconciler.<span\n        style=\"color:#ffc66d;\">performUpdateIfNecessary</span>(<br/>      component<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">      </span>transaction.<span\n        style=\"color:#9876aa;\">reconcileTransaction</span><span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">      </span>updateBatchNumber<br/>    )<span style=\"color:#cc7832;\">;<br/></span><br/>  }<br/>}\n</pre>\n</div>\n<div>遍历dirtyComponent数组，对每个component实例调用performUpdateIfNecessary，</div>\n<div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span\n        style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * is set, update the component.<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span\n        style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n        style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction} transaction<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@internal<br/></span><span\n        style=\"color:#629755;font-weight:bold;font-style:italic;\"/><span\n        style=\"color:#629755;font-style:italic;\">*/<br/></span>performUpdateIfNecessary: <span\n        style=\"color:#cc7832;font-weight:bold;\">function</span>(transaction) {<br/>  <span\n        style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span\n        style=\"color:#9876aa;\">_pendingElement </span>!= <span style=\"color:#cc7832;font-weight:bold;\">null</span>) { //如果渲染的ReactElement发生变化更新渲染的ReactElement<br/>    ReactReconciler.<span\n        style=\"color:#ffc66d;\">receiveComponent</span>(<br/>      <span\n        style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span\n        style=\"color:#9876aa;\">_pendingElement</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">      </span>transaction<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">      </span><span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_context<br/></span><span\n        style=\"color:#9876aa;\">    </span>)<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span>} <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(<span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingStateQueue </span>!== <span\n        style=\"color:#cc7832;font-weight:bold;\">null </span>|| <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span\n        style=\"color:#9876aa;\">_pendingForceUpdate</span>) {//如果只是状态发生变化<br/>    <span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span\n        style=\"color:#9876aa;\">updateComponent</span>( //这里调用diff算法<br/>      transaction<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">      </span><span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span><span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">      </span><span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span><span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">      </span><span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_context</span><span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">      </span><span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_context<br/></span><span\n        style=\"color:#9876aa;\">    </span>)<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>    <span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>callbacks = <span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingCallbacks</span><span\n        style=\"color:#cc7832;\">; <br/></span><span style=\"color:#cc7832;\">    </span><span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingCallbacks </span>= <span\n        style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">    </span><span\n        style=\"color:#cc7832;font-weight:bold;\">if </span>(callbacks) {<br/>      <span\n        style=\"color:#cc7832;font-weight:bold;\">for </span>(<span style=\"color:#cc7832;font-weight:bold;\">var </span>j = <span\n        style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">; </span>j &lt; callbacks.<span style=\"color:#9876aa;\">length</span><span\n        style=\"color:#cc7832;\">; </span>j++) {<br/>        transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span\n        style=\"color:#ffc66d;\">enqueue</span>(<br/>          callbacks[j]<span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">          </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span\n        style=\"color:#ffc66d;\">getPublicInstance</span>()<br/>        )<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">      </span>}<br/>    }<br/>    <span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_updateBatchNumber </span>= <span\n        style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span>}<br/>}<span style=\"color:#cc7832;\">,<br/></span>\n</pre>\n</div>\n<div><br/></div>\n<div>所以整个setState执行流程参见下图：</div>\n<div><br/></div>\n<div><img\n        src=\"/images/2017-02-14/xxx.png\"\n        height=\"656\" width=\"614\"/><br/></div>\n<div>diff算法部分源码在（src/renderers/shared/stack/reconciler/ReactMultiChild.js）</div>\n<div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span\n        style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span\n        style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n        style=\"color:#629755;font-style:italic;\">{?object} nextNestedChildrenElements Nested child element maps.<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n        style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction} transaction<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@final<br/></span><span\n        style=\"color:#629755;font-weight:bold;font-style:italic;\"/><span\n        style=\"color:#629755;font-style:italic;\">* </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@protected<br/></span><span\n        style=\"color:#629755;font-weight:bold;font-style:italic;\"/><span\n        style=\"color:#629755;font-style:italic;\">*/<br/></span><span style=\"color:#ffc66d;\">_updateChildren</span>: <span\n        style=\"color:#cc7832;font-weight:bold;\">function</span>(nextNestedChildrenElements<span\n        style=\"color:#cc7832;\">, </span>transaction<span style=\"color:#cc7832;\">, </span>context) {<br/>  <span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>prevChildren = <span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_renderedChildren</span><span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>removedNodes = {}<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>mountImages = []<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>nextChildren = <span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_reconcilerUpdateChildren</span>(  &lt;————— 1 下面详细介绍（注意mountImages和removedNode都是在这个函数赋值的）<br/>    prevChildren<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>nextNestedChildrenElements<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>mountImages<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>removedNodes<span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">    </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>context<br/>  )<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span\n        style=\"color:#cc7832;font-weight:bold;\">if </span>(!nextChildren &amp;&amp; !prevChildren) {<br/>    <span\n        style=\"color:#cc7832;font-weight:bold;\">return</span><span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span>}<br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>updates = <span\n        style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>name<span\n        style=\"color:#cc7832;\">;//以下是diff算法部分，讲解参见博客链接<br/></span><span style=\"color:#cc7832;\">  </span><span\n        style=\"color:#808080;\">// `nextIndex` will increment for each child in `nextChildren`, but<br/></span><span\n        style=\"color:#808080;\">  // `lastIndex` will be the last index visited in `prevChildren`.<br/></span><span\n        style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextIndex = <span\n        style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>lastIndex = <span style=\"color:#6897bb;\">0</span><span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#808080;\">// `nextMountIndex` will increment for each newly mounted child.<br/></span><span\n        style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextMountIndex = <span\n        style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>lastPlacedNode = <span\n        style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(name <span\n        style=\"color:#cc7832;font-weight:bold;\">in </span>nextChildren) {<br/>    <span\n        style=\"color:#cc7832;font-weight:bold;\">if </span>(!nextChildren.<span style=\"color:#ffc66d;\">hasOwnProperty</span>(name)) {<br/>      <span\n        style=\"color:#cc7832;font-weight:bold;\">continue</span><span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">    </span>}<br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>prevChild = prevChildren &amp;&amp; prevChildren[name]<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>nextChild = nextChildren[name]<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span\n        style=\"color:#cc7832;font-weight:bold;\">if </span>(prevChild === nextChild) {<br/>      updates = <span\n        style=\"color:#ffc66d;\">enqueue</span>(<br/>        updates<span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span\n        style=\"color:#ffc66d;\">moveChild</span>(prevChild<span style=\"color:#cc7832;\">, </span>lastPlacedNode<span\n        style=\"color:#cc7832;\">, </span>nextIndex<span style=\"color:#cc7832;\">, </span>lastIndex)<br/>      )<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>lastIndex = <span\n        style=\"color:#9876aa;\">Math</span>.<span style=\"color:#ffc66d;\">max</span>(prevChild.<span style=\"color:#9876aa;\">_mountIndex</span><span\n        style=\"color:#cc7832;\">, </span>lastIndex)<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">      </span>prevChild.<span style=\"color:#9876aa;\">_mountIndex </span>= nextIndex<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>} <span\n        style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>      <span\n        style=\"color:#cc7832;font-weight:bold;\">if </span>(prevChild) {<br/>        <span style=\"color:#808080;\">// Update `lastIndex` before `_mountIndex` gets unset by unmounting.<br/></span><span\n        style=\"color:#808080;\">        </span>lastIndex = <span style=\"color:#9876aa;\">Math</span>.<span\n        style=\"color:#ffc66d;\">max</span>(prevChild.<span style=\"color:#9876aa;\">_mountIndex</span><span\n        style=\"color:#cc7832;\">, </span>lastIndex)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span\n        style=\"color:#808080;\">// The `removedNodes` loop below will actually remove the child.<br/></span><span\n        style=\"color:#808080;\">      </span>}<br/>      <span style=\"color:#808080;\">// The child must be instantiated before it's mounted.<br/></span><span\n        style=\"color:#808080;\">      </span>updates = <span style=\"color:#ffc66d;\">enqueue</span>(<br/>        updates<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span><span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_mountChildAtIndex</span>(<br/>          nextChild<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">          </span>mountImages[nextMountIndex]<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">          </span>lastPlacedNode<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">          </span>nextIndex<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">          </span>transaction<span\n        style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">          </span>context<br/>        )<br/>      )<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>nextMountIndex++<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/>    nextIndex++<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>lastPlacedNode = ReactReconciler.<span\n        style=\"color:#ffc66d;\">getHostNode</span>(nextChild)<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span>}<br/>  <span\n        style=\"color:#808080;\">// Remove children that are no longer present.<br/></span><span\n        style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(name <span\n        style=\"color:#cc7832;font-weight:bold;\">in </span>removedNodes) {<br/>    <span\n        style=\"color:#cc7832;font-weight:bold;\">if </span>(removedNodes.<span style=\"color:#ffc66d;\">hasOwnProperty</span>(name)) {<br/>      updates = <span\n        style=\"color:#ffc66d;\">enqueue</span>(<br/>        updates<span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span\n        style=\"color:#ffc66d;\">_unmountChild</span>(prevChildren[name]<span style=\"color:#cc7832;\">, </span>removedNodes[name])<br/>      )<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/>  }<br/>  <span\n        style=\"color:#cc7832;font-weight:bold;\">if </span>(updates) {<br/>    <span style=\"color:#ffc66d;\">processQueue</span>(<span\n        style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>updates)<span\n        style=\"color:#cc7832;\">;//注意这里将上面比较后缓存的变更进行处理更新dom树，使所有变更在浏览器中得以展现，代码参见（src/<font\n        style=\"font-size: 12px; color: rgb(204, 120, 50); font-family: Menlo;\">renderers/dom/stack/client/DOMChildrenOperations.js</font>）的processUpdate<br/></span><span\n        style=\"color:#cc7832;\">  </span>}<br/>  <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span\n        style=\"color:#9876aa;\">_renderedChildren </span>= nextChildren<span style=\"color:#cc7832;\">;<br/></span><br/>}<span\n        style=\"color:#cc7832;\">,</span>\n</pre>\n    React在执行diff算法之前先做了两件事情：\n</div>\n<div>\n    <ol start=\"1\">\n        <li>将新的ReactElement结构树（可能包含很多层）’拍平’，以{ key：xx，value：element}方式返回</li>\n        <li>遍历上一步生成的key——ReactElement映射和原有的key——ReactComponent实例映射做比较，新建或删除ReactComponent。</li>\n    </ol>\n</div>\n<div>经过上面两个步骤生成了新的key——ReactComponent实例，和原有的key——ReactComponent映射进行diff算法。</div>\n<div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span\n        style=\"color:#ffc66d;\">_reconcilerUpdateChildren</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br/>  prevChildren<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>nextNestedChildrenElements<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>mountImages<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>removedNodes<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>transaction<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>context<br/>) {<br/>  <span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>nextChildren<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>selfDebugID = <span\n        style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">;<br/></span> //第一步：调用（src/<font\n        style=\"font-size: 12px; color: rgb(169, 183, 198); font-family: Menlo;\">shared/utils/traverseAllChildren.js</font>）对子节点进行深度优先遍历，同时根据子节点所在的层级按照一定命名规则生成唯一key存在object中，这样虽然所有树状结构的子节点被’拍平’存储，但是能保证在diff操作的时候同一层级的子节点进行比较（即连个map中key相同的子节点一定在同一层）<br/>  nextChildren = flattenChildren(nextNestedChildrenElements<span\n        style=\"color:#cc7832;\">, </span>selfDebugID)<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span>ReactChildReconciler.<span style=\"color:#ffc66d;\">updateChildren</span>( //第二步：参见下面详细介绍<br/>    prevChildren<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>nextChildren<span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">    </span>mountImages<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>removedNodes<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>transaction<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span><span\n        style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span\n        style=\"color:#9876aa;\">_hostContainerInfo</span><span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">    </span>context<span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">    </span>selfDebugID<br/>  )<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">return </span>nextChildren<span\n        style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">,</span>\n</pre>\n    <div>\n\t\t<pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span\n                style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Updates the rendered children and returns a new set of children.<br/></span><span\n                style=\"color:#629755;font-style:italic;\"> *<br/></span><span\n                style=\"color:#629755;font-style:italic;\"> * </span><span\n                style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n                style=\"color:#629755;font-style:italic;\">{?object} prevChildren Previously initialized set of children.<br/></span><span\n                style=\"color:#629755;font-style:italic;\"> * </span><span\n                style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n                style=\"color:#629755;font-style:italic;\">{?object} nextChildren Flat child element maps.<br/></span><span\n                style=\"color:#629755;font-style:italic;\"> * </span><span\n                style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n                style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction} transaction<br/></span><span\n                style=\"color:#629755;font-style:italic;\"> * </span><span\n                style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n                style=\"color:#629755;font-style:italic;\">{object} context<br/></span><span\n                style=\"color:#629755;font-style:italic;\"> * </span><span\n                style=\"color:#629755;font-weight:bold;font-style:italic;\">@return </span><span\n                style=\"color:#629755;font-style:italic;\">{?object} A new set of child instances.<br/></span><span\n                style=\"color:#629755;font-style:italic;\"> * </span><span\n                style=\"color:#629755;font-weight:bold;font-style:italic;\">@internal<br/></span><span\n                style=\"color:#629755;font-weight:bold;font-style:italic;\"/><span style=\"color:#629755;font-style:italic;\">*/<br/></span><span\n                style=\"color:#ffc66d;\">updateChildren</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br/>  prevChildren<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>nextChildren<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>mountImages<span style=\"color:#cc7832;\">,<br/></span><span\n                style=\"color:#cc7832;\">  </span>removedNodes<span style=\"color:#cc7832;\">,<br/></span><span\n                style=\"color:#cc7832;\">  </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>hostParent<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>hostContainerInfo<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>context<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>selfDebugID <span\n                style=\"color:#808080;\">// 0 in production and for roots<br/></span>) {<br/>  <span style=\"color:#808080;\">// We currently don't have a way to track moves here but if we use iterators<br/></span><span\n                style=\"color:#808080;\">  // instead of for..in we can zip the iterators and check if an item has<br/></span><span\n                style=\"color:#808080;\">  // moved.<br/></span><span style=\"color:#808080;\">  // </span><span\n                style=\"color:#a8c023;font-style:italic;\">TODO: If nothing has changed, return the prevChildren object so that we<br/></span><span\n                style=\"color:#a8c023;font-style:italic;\">  </span><span style=\"color:#808080;\">// can quickly bailout if nothing has changed.<br/></span><span\n                style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(!nextChildren &amp;&amp; !prevChildren) {<br/>    <span\n                style=\"color:#cc7832;font-weight:bold;\">return</span><span style=\"color:#cc7832;\">;<br/></span><span\n                style=\"color:#cc7832;\">  </span>}<br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>name<span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span\n                style=\"color:#cc7832;font-weight:bold;\">var </span>prevChild<span style=\"color:#cc7832;\">;<br/></span><span\n                style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(name <span\n                style=\"color:#cc7832;font-weight:bold;\">in </span>nextChildren) {<br/>    <span\n                style=\"color:#cc7832;font-weight:bold;\">if </span>(!nextChildren.<span\n                style=\"color:#ffc66d;\">hasOwnProperty</span>(name)) {<br/>      <span style=\"color:#cc7832;font-weight:bold;\">continue</span><span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/>    prevChild = prevChildren &amp;&amp; prevChildren[name]<span\n                style=\"color:#cc7832;\">; //如果旧映射里找到对应的ReactComponent实例<br/></span><span style=\"color:#cc7832;\">    </span><span\n                style=\"color:#cc7832;font-weight:bold;\">var </span>prevElement = prevChild &amp;&amp; prevChild.<span\n                style=\"color:#9876aa;\">_currentElement</span><span style=\"color:#cc7832;\">;<br/></span><span\n                style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextElement = nextChildren[name]<span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span\n                style=\"color:#cc7832;font-weight:bold;\">if </span>(prevChild != <span\n                style=\"color:#cc7832;font-weight:bold;\">null </span>&amp;&amp;<br/>        shouldUpdateReactComponent(prevElement<span\n                style=\"color:#cc7832;\">, </span>nextElement)) {//取出实例中的ReactElement与新的做比较，如果类型相同调用实例更新函数<br/>      ReactReconciler.<span\n                style=\"color:#ffc66d;\">receiveComponent</span>(<br/>        prevChild<span style=\"color:#cc7832;\">, </span>nextElement<span\n                style=\"color:#cc7832;\">, </span>transaction<span style=\"color:#cc7832;\">, </span>context<br/>      )<span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>nextChildren[name] = prevChild<span\n                style=\"color:#cc7832;\">; <br/></span><span style=\"color:#cc7832;\">    </span>} <span\n                style=\"color:#cc7832;font-weight:bold;\">else </span>{ //否则清理旧的ReactComponent实例，加入到removeNodes映射中，初始化新实例加入映射中，调用新实例的mountComponent获得对应的渲染markup加入到<font\n                style=\"font-family: Menlo; background-color: rgb(43, 43, 43); font-size: 12px; color: rgb(169, 183, 198);\">mountImages 。<font\n                style=\"font-family: Menlo; background-color: rgb(43, 43, 43); font-size: 12px; color: rgb(169, 183, 198);\">removeNodes映射和mountImage映射在diff算法执行过程中加入到更新队列然后批量更新dom。</font></font><br/>      <span\n                style=\"color:#cc7832;font-weight:bold;\">if </span>(<br/>        !ReactFeatureFlags.<span style=\"color:#9876aa;\">prepareNewChildrenBeforeUnmountInStack </span>&amp;&amp;<br/>        prevChild<br/>      ) {<br/>        removedNodes[name] = ReactReconciler.<span\n                style=\"color:#ffc66d;\">getHostNode</span>(prevChild)<span style=\"color:#cc7832;\">;<br/></span><span\n                style=\"color:#cc7832;\">        </span>ReactReconciler.<span style=\"color:#ffc66d;\">unmountComponent</span>(<br/>          prevChild<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">          </span><span\n                style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">, </span><span\n                style=\"color:#808080;\">/* safely */<br/></span><span style=\"color:#808080;\">          </span><span\n                style=\"color:#cc7832;font-weight:bold;\">false </span><span\n                style=\"color:#808080;\">/* skipLifecycle */<br/></span><span style=\"color:#808080;\">        </span>)<span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>}<br/>      <span\n                style=\"color:#808080;\">// The child must be instantiated before it's mounted.<br/></span><span\n                style=\"color:#808080;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextChildInstance = instantiateReactComponent(nextElement<span\n                style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">true</span>)<span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>nextChildren[name] = nextChildInstance<span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span><span style=\"color:#808080;\">// Creating mount image now ensures refs are resolved in right order<br/></span><span\n                style=\"color:#808080;\">      // (see <a href=\"https://github.com/facebook/react/pull/7101\">https://github.com/facebook/react/pull/7101</a> for explanation).<br/></span><span\n                style=\"color:#808080;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextChildMountImage = ReactReconciler.<span\n                style=\"color:#ffc66d;\">mountComponent</span>(<br/>        nextChildInstance<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>transaction<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>hostParent<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>hostContainerInfo<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>context<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>selfDebugID<br/>      )<span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>mountImages.<span\n                style=\"color:#ffc66d;\">push</span>(nextChildMountImage)<span style=\"color:#cc7832;\">;<br/></span><span\n                style=\"color:#cc7832;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(<br/>        ReactFeatureFlags.<span\n                style=\"color:#9876aa;\">prepareNewChildrenBeforeUnmountInStack </span>&amp;&amp;<br/>        prevChild<br/>      ) {<br/>        removedNodes[name] = ReactReconciler.<span\n                style=\"color:#ffc66d;\">getHostNode</span>(prevChild)<span style=\"color:#cc7832;\">;<br/></span><span\n                style=\"color:#cc7832;\">        </span>ReactReconciler.<span style=\"color:#ffc66d;\">unmountComponent</span>(<br/>          prevChild<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">          </span><span\n                style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">, </span><span\n                style=\"color:#808080;\">/* safely */<br/></span><span style=\"color:#808080;\">          </span><span\n                style=\"color:#cc7832;font-weight:bold;\">false </span><span\n                style=\"color:#808080;\">/* skipLifecycle */<br/></span><span style=\"color:#808080;\">        </span>)<span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>}<br/>    }<br/>  }<br/>  <span\n                style=\"color:#808080;\">// Unmount children that are no longer present.<br/></span><span\n                style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(name <span\n                style=\"color:#cc7832;font-weight:bold;\">in </span>prevChildren) {<br/>    <span\n                style=\"color:#cc7832;font-weight:bold;\">if </span>(prevChildren.<span style=\"color:#ffc66d;\">hasOwnProperty</span>(name) &amp;&amp;<br/>        !(nextChildren &amp;&amp; nextChildren.<span\n                style=\"color:#ffc66d;\">hasOwnProperty</span>(name))) {<br/>      prevChild = prevChildren[name]<span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>removedNodes[name] = ReactReconciler.<span\n                style=\"color:#ffc66d;\">getHostNode</span>(prevChild)<span style=\"color:#cc7832;\">;<br/></span><span\n                style=\"color:#cc7832;\">      </span>ReactReconciler.<span style=\"color:#ffc66d;\">unmountComponent</span>(<br/>        prevChild<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span><span\n                style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">, </span><span\n                style=\"color:#808080;\">/* safely */<br/></span><span style=\"color:#808080;\">        </span><span\n                style=\"color:#cc7832;font-weight:bold;\">false </span><span\n                style=\"color:#808080;\">/* skipLifecycle */<br/></span><span style=\"color:#808080;\">      </span>)<span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/>  }<br/>}<span\n                style=\"color:#cc7832;\">,</span></pre>\n    </div>\n    <div><br/></div>\n    <div>diff算法原理详解参见：<br/></div>\n</div>\n<div><a href=\"https://zhuanlan.zhihu.com/p/20346379?refer=purerender\">https://zhuanlan.zhihu.com/p/20346379?refer=purerender</a> 或《深入React技术栈》3.5章（可以找我借）讲得很详细。<br/>\n</div>\n<div><br/></div>\n","slug":"react源码学习——setState原理","published":1,"updated":"2017-02-13T09:17:39.000Z","_id":"ciz3tqj7t000949hyicbwpauy","comments":1,"photos":[],"link":"","content":"<div>\n    React通过this.setState方法更新state，当this.setState被调用的时候会根据更新策略执行情况（是否在更新中）来判断是否重新调用render方法还是放到更新队列中。看下setState源码，题外话：React创建组件有三种方式:\n    1）函数方式(无状态组件) 2）React.createClass(es5)  3) extends React.Component(es6)，后两种方式中\n    setState会自动注入到组件中，因此在自定义组件中能通过this.setState直接访问。三种创建方式的区别参见<a href=\"http://www.cnblogs.com/wonyun/p/5930333.html\" target=\"_blank\" rel=\"external\">这篇文章</a>。<br>\n    <div>——以下代码是React v15.4.2版本——</div>\n</div>\n<div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><br><span style=\"color:#629755;font-style:italic;\">/**<br></span><span style=\"color:#629755;font-style:italic;\"> * Sets a subset of the state. Always use this to mutate<br></span><span style=\"color:#629755;font-style:italic;\"> * state. You should treat `this.state` as immutable.<br></span><span style=\"color:#629755;font-style:italic;\"> *<br></span><span style=\"color:#629755;font-style:italic;\"> * There is no guarantee that `this.state` will be immediately updated, so<br></span><span style=\"color:#629755;font-style:italic;\"> * accessing `this.state` after calling this method may return the old value.<br></span><span style=\"color:#629755;font-style:italic;\"> *<br></span><span style=\"color:#629755;font-style:italic;\"> * There is no guarantee that calls to `setState` will run synchronously,<br></span><span style=\"color:#629755;font-style:italic;\"> * as they may eventually be batched together.  You can provide an optional<br></span><span style=\"color:#629755;font-style:italic;\"> * callback that will be executed when the call to setState is actually<br></span><span style=\"color:#629755;font-style:italic;\"> * completed.<br></span><span style=\"color:#629755;font-style:italic;\"> *<br></span><span style=\"color:#629755;font-style:italic;\"> * When a function is provided to setState, it will be called at some point in<br></span><span style=\"color:#629755;font-style:italic;\"> * the future (not synchronously). It will be called with the up to date<br></span><span style=\"color:#629755;font-style:italic;\"> * component arguments (state, props, context). These values can be different<br></span><span style=\"color:#629755;font-style:italic;\"> * from this.* because your function may be called after receiveProps but before<br></span><span style=\"color:#629755;font-style:italic;\"> * shouldComponentUpdate, and this new state, props, and context will not yet be<br></span><span style=\"color:#629755;font-style:italic;\"> * assigned to this.<br></span><span style=\"color:#629755;font-style:italic;\"> *<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{object|function} partialState Next partial state or function to<br></span><span style=\"color:#629755;font-style:italic;\"> *        produce next partial state to be merged with current state.<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?function} callback Called after state is updated.<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@final<br></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\"><span style=\"color:#629755;font-style:italic;\">* </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@protected<br></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\"><span style=\"color:#629755;font-style:italic;\">*/<br></span><span style=\"color:#ffc66d;\">ReactComponent</span>.<span style=\"color:#9876aa;\">prototype</span>.<span style=\"color:#ffc66d;\">setState </span>= <span style=\"color:#cc7832;font-weight:bold;\">function</span>(partialState<span style=\"color:#cc7832;\">, </span>callback) {<span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">updater</span>.<span style=\"color:#ffc66d;\">enqueueSetState</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>partialState<span style=\"color:#cc7832;\">, </span>callback<span style=\"color:#cc7832;\">, </span><span style=\"color:#6a8759;\">'setState'</span>)<span style=\"color:#cc7832;\">;<br></span>}<span style=\"color:#cc7832;\">;</span>\n</span></span></pre>\n    <pre style=\"background-color: rgb(43, 43, 43);\"><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(169, 183, 198);\"><span style=\"color:#629755;font-style:italic;\">/**<br></span><span style=\"color:#629755;font-style:italic;\"> * Sets a subset of the state. This only exists because _pendingState is<br></span><span style=\"color:#629755;font-style:italic;\"> * internal. This provides a merging strategy that is not available to deep<br></span><span style=\"color:#629755;font-style:italic;\"> * properties which is confusing. </span><span style=\"color:#a8c023;font-style:italic;\">TODO: Expose pendingState or don't use it<br></span><span style=\"color:#a8c023;font-style:italic;\"><span style=\"color:#629755;font-style:italic;\">* during the merge.<br></span><span style=\"color:#629755;font-style:italic;\"> *<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactClass} publicInstance The instance that should rerender.<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{object} partialState Next partial state to be merged with state.<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?function} callback Called after state is updated.<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?string} Name of the calling function in the public API.<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@internal<br></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\"><span style=\"color:#629755;font-style:italic;\">*/<br></span><span style=\"color:#ffc66d;\">enqueueSetState</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(publicInstance<span style=\"color:#cc7832;\">, </span>partialState<span style=\"color:#cc7832;\">, </span>callback<span style=\"color:#cc7832;\">, </span>callerName) {<br>  </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#cc7832\"><b>//获得组件实例</b></font><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\"><br>  </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">internalInstance = </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">getInternalInstanceReadyForUpdate</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(<br>    publicInstance</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(106, 135, 89);\">'setState'<br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(106, 135, 89);\">  </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">)</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\"><br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">if </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(!internalInstance) {<br>    </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">return</span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">}<br><br>  //初始化state更新队列<br>  </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">queue =<br>    internalInstance.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_pendingStateQueue </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">||<br>    (internalInstance.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_pendingStateQueue </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">= [])</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">queue.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">push</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(partialState)</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  //如果setState设置了回调函数，添加到组件实例的队列中<br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">if </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(callback) {<br>    validateCallback(callback</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">, </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">callerName)</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">if </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(internalInstance.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_pendingCallbacks</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">) {<br>      internalInstance.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_pendingCallbacks</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">push</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(callback)</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">} </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">else </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">{<br>      internalInstance.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_pendingCallbacks </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">= [callback]</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font color=\"#a9b7c6\"><font face=\"Menlo\" size=\"2\">}<br>  }<br>  <br>  </font></font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">enqueueUpdate</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(internalInstance)</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br></span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">}</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,</span></span></span></pre>\n</div>\n<div><font style=\"font-size: 14px;\"><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: 'PingFang SC'; color: rgb(69, 69, 69);\">最后调用（</span><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(69, 69, 69);\">src/renderers/shared/stack/reconciler/ReactUpdates.js</span><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: 'PingFang SC'; color: rgb(69, 69, 69);\">）</span><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(69, 69, 69);\">ReactUpdates</span><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: 'PingFang SC'; color: rgb(69, 69, 69);\">的enqueueUpdate函数执行更新。</span></font>\n</div>\n<div><font style=\"font-size: 14px;\"><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; color: rgb(69, 69, 69);\"></span></font><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; color: rgb(69, 69, 69);\"><font style=\"font-size: 14px;\"><font face=\"PingFang SC\"><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#629755;font-style:italic;\">/**<br></span><span style=\"color:#629755;font-style:italic;\"> * Mark a component as needing a rerender, adding an optional callback to a<br></span><span style=\"color:#629755;font-style:italic;\"> * list of functions which will be executed once the rerender occurs.<br></span><span style=\"color:#629755;font-style:italic;\"> */<br></span><span style=\"color:#cc7832;font-weight:bold;\">function </span><span style=\"color:#ffc66d;\">enqueueUpdate</span>(component) {<br>  <span style=\"color:#ffc66d;\">ensureInjected</span>()<span style=\"color:#cc7832;\">;</span><span style=\"color:#808080;\"><br></span><span style=\"color:#808080;\"><br></span><span style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(!batchingStrategy.<span style=\"color:#9876aa;\">isBatchingUpdates</span>) {//如果当前没有处于更新中，<br>    batchingStrategy.<span style=\"color:#ffc66d;\">batchedUpdates</span>(<span style=\"color:#ffc66d;\">enqueueUpdate</span><span style=\"color:#cc7832;\">, </span>component)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">return</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>}<br><br>  dirtyComponents.<span style=\"color:#ffc66d;\">push</span>(component)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(component.<span style=\"color:#9876aa;\">_updateBatchNumber </span>== <span style=\"color:#cc7832;font-weight:bold;\">null</span>) {<br>    component.<span style=\"color:#9876aa;\">_updateBatchNumber </span>= updateBatchNumber + <span style=\"color:#6897bb;\">1</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>}<br>}\n</pre></font></font></span><br></div>\n<div>\n    batchingStrategy在ReactDefaultBatchingStrategy.js（src/renderers/shared/stack/reconciler/ReactDefaultBatchingStrategy.js），这里要介绍下React的事务，事务是将需要执行的方法封装起来，在通过perform方法执行，以保证在执行目标方法前，事务中的一组initialize方法限制性，目标方法执行后，一组close方法能够得到执行，参见下图（src/renderers/shared/stack/reconciler/Transaction.js中）：\n</div>\n<div><img src=\"/images/2017-02-14/3C5D0315-7718-4DC6-89B9-0C7A281294F2.png\" height=\"670\" width=\"1066\"><br></div>\n<div>再回到我们的更新策略对象中</div>\n<div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><br><span style=\"color:#cc7832;font-weight:bold;\">var </span>RESET_BATCHED_UPDATES = {<br>  <span style=\"color:#9876aa;\">initialize</span>: emptyFunction<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#ffc66d;\">close</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>() {<br>    ReactDefaultBatchingStrategy.<span style=\"color:#9876aa;\">isBatchingUpdates </span>= <span style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">;//<font style=\"font-family: Menlo; background-color: rgb(43, 43, 43); font-size: 12px; color: rgb(169, 183, 198);\">事务执行结束后重置当前更新状态</font><br></span><span style=\"color:#cc7832;\">  </span>}<span style=\"color:#cc7832;\">,<br></span>}<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;font-weight:bold;\">var </span>FLUSH_BATCHED_UPDATES = {<br>  <span style=\"color:#9876aa;\">initialize</span>: emptyFunction<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#9876aa;\">close</span>: ReactUpdates.<span style=\"color:#ffc66d;\">flushBatchedUpdates</span>.<span style=\"color:#ffc66d;\">bind</span>(ReactUpdates)<span style=\"color:#cc7832;\">,//遍历dirtyComponent数组中的组件，逐个更新<br></span>}<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;font-weight:bold;\">var </span>TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES<span style=\"color:#cc7832;\">, </span>RESET_BATCHED_UPDATES]<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;font-weight:bold;\">function </span><span style=\"color:#ffc66d;\">ReactDefaultBatchingStrategyTransaction</span>() {<br>  <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">reinitializeTransaction</span>()<span style=\"color:#cc7832;\">;<br></span>}<br><br>Object.<span style=\"color:#ffc66d;\">assign</span>(<br>  <span style=\"color:#ffc66d;\">ReactDefaultBatchingStrategyTransaction</span>.<span style=\"color:#9876aa;\">prototype</span><span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>Transaction<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>{<br>    <span style=\"color:#ffc66d;\">getTransactionWrappers</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>() { //给事务添加wapper<br>      <span style=\"color:#cc7832;font-weight:bold;\">return </span>TRANSACTION_WRAPPERS<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>}<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>}<br>)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;font-weight:bold;\">var </span>transaction = <span style=\"color:#cc7832;font-weight:bold;\">new </span><span style=\"color:#ffc66d;\">ReactDefaultBatchingStrategyTransaction</span>()<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;font-weight:bold;\">var </span>ReactDefaultBatchingStrategy = {<br>  <span style=\"color:#9876aa;\">isBatchingUpdates</span>: <span style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#629755;font-style:italic;\">/**<br></span><span style=\"color:#629755;font-style:italic;\">   * Call the provided function in a context within which calls to `setState`<br></span><span style=\"color:#629755;font-style:italic;\">   * and friends are batched such that components aren't updated unnecessarily.<br></span><span style=\"color:#629755;font-style:italic;\">   */<br></span><span style=\"color:#629755;font-style:italic;\">  </span><span style=\"color:#ffc66d;\">batchedUpdates</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(callback<span style=\"color:#cc7832;\">, </span>a<span style=\"color:#cc7832;\">, </span>b<span style=\"color:#cc7832;\">, </span>c<span style=\"color:#cc7832;\">, </span>d<span style=\"color:#cc7832;\">, </span>e) {<br>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>alreadyBatchingUpdates = ReactDefaultBatchingStrategy.<span style=\"color:#9876aa;\">isBatchingUpdates</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">    </span>ReactDefaultBatchingStrategy.<span style=\"color:#9876aa;\">isBatchingUpdates </span>= <span style=\"color:#cc7832;font-weight:bold;\">true</span><span style=\"color:#cc7832;\">;//设置当前正在处于更新状态<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// The code is written this way to avoid extra allocations<br></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(alreadyBatchingUpdates) { //个人认为这里是确保同一时间只有一个事务在更新组件，比如一个组件几乎无间隔地调用两次setState，欢迎讨论<br>      <span style=\"color:#cc7832;font-weight:bold;\">return </span>callback(a<span style=\"color:#cc7832;\">, </span>b<span style=\"color:#cc7832;\">, </span>c<span style=\"color:#cc7832;\">, </span>d<span style=\"color:#cc7832;\">, </span>e)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br>      <span style=\"color:#cc7832;font-weight:bold;\">return </span>transaction.<span style=\"color:#ffc66d;\">perform</span>(callback<span style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">, </span>a<span style=\"color:#cc7832;\">, </span>b<span style=\"color:#cc7832;\">, </span>c<span style=\"color:#cc7832;\">, </span>d<span style=\"color:#cc7832;\">, </span>e)<span style=\"color:#cc7832;\">;//注意这里比较有意思，把<font style=\"font-family: Menlo; font-size: 12px; background-color: rgb(43, 43, 43); color: rgb(255, 198, 109);\">enqueueUpdate作为callback调用，但这时<font style=\"font-family: Menlo; font-size: 12px; background-color: rgb(43, 43, 43); color: rgb(152, 118, 170);\">isBatchingUpdates是true，因此<font style=\"font-family: Menlo; background-color: rgb(43, 43, 43); font-size: 12px; color: rgb(255, 198, 109);\">enqueueUpdate做的事就是把这个要更新的component加入到dirtyComponent数组中，然后在事务wrapper中的close方法</font></font></font></span><span style=\"font-size: 9pt;\">ReactUpdates.</span><span style=\"font-size: 9pt; color: rgb(255, 198, 109);\">flushBatchedUpdates遍历dirtyComponent数组进行更新。</span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">    </span>}<br>  }<span style=\"color:#cc7832;\">,<br></span>}<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span>module.<span style=\"color:#ffc66d;\">exports </span>= ReactDefaultBatchingStrategy<span style=\"color:#cc7832;\">;<br></span>\n</pre>\n    由这段代码可以看到，真正执行更新的实在事务的某个wapper的close方法中，即ReactUpdates.flushBatchedUpdates中进行更新的：\n    <pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.8pt;\"><span style=\"color:#cc7832;font-weight:bold;\">var </span><span style=\"color:#ffc66d;\">flushBatchedUpdates </span>= <span style=\"color:#cc7832;font-weight:bold;\">function</span>() {<br>  <span style=\"color:#808080;\">// ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents<br></span><span style=\"color:#808080;\">  // array and perform any updates enqueued by mount-ready handlers (i.e.,<br></span><span style=\"color:#808080;\">  // componentDidUpdate) but we need to check here too in order to catch<br></span><span style=\"color:#808080;\">  // updates enqueued by setState callbacks.<br></span><span style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">while </span>(dirtyComponents.<span style=\"color:#9876aa;\">length</span>) {<br>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>transaction = <span style=\"color:#ffc66d;\">ReactUpdatesFlushTransaction</span>.<span style=\"color:#ffc66d;\">getPooled</span>()<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>transaction.<span style=\"color:#ffc66d;\">perform</span>(<span style=\"color:#ffc66d;\">runBatchedUpdates</span><span style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">, </span>transaction)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#ffc66d;\">ReactUpdatesFlushTransaction</span>.<span style=\"color:#ffc66d;\">release</span>(transaction)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>}<br>}<span style=\"color:#cc7832;\">;</span>\n</pre>\n</div>\n<div>注意这里由用到一个事务ReactUpdatesFlushTransaction：</div>\n<div><pre style=\"background-color: rgb(43, 43, 43);\"><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\"><br></font><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">var </span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">NESTED_UPDATES = {<br>  </font><span style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">initialize</span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">: </font><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">function</span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">() {<br>    </font><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">this</span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">dirtyComponentsLength </span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">= dirtyComponents.</font><span style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">length</span><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br></span><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">  </span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">}</font><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">,<br></span><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">  </span><span style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">close</span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">: </font><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">function</span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">() {<br>    </font><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">if </span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">(</font><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">this</span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">dirtyComponentsLength </span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">!== dirtyComponents.</font><span style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">length</span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">) {<br>      </font><span style=\"color: rgb(128, 128, 128); font-family: Menlo; font-size: 9.8pt;\">// Additional updates were enqueued by componentDidUpdate handlers or<br></span><span style=\"color: rgb(128, 128, 128); font-family: Menlo; font-size: 9.8pt;\">      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run<br></span><span style=\"color: rgb(128, 128, 128); font-family: Menlo; font-size: 9.8pt;\">      // these new updates so that if A's componentDidUpdate calls setState on<br></span><span style=\"color: rgb(128, 128, 128); font-family: Menlo; font-size: 9.8pt;\">      // B, B will update before the callback A's updater provided when calling<br></span><font face=\"Menlo\" color=\"#808080\" size=\"3\">      // setState.在close之前再检查一遍</font><font face=\"Menlo\" color=\"#808080\">dirtyComponent</font><font face=\"Menlo\" color=\"#808080\" size=\"3\">是否有新的要更新的组件，有则更新，上面注释中将的场景应该是比如在A组件的setState传入了第二个参数回调函数，如果在A的componentDidUpdate中调用了setState改变了它包含的B组件的状态（这里假设只改变B 的状态），为了保证回调函数能访问到更新后的B组件，继续执行dirtyComponent中后插入的组件（B）然后更新B组件<br></font><span style=\"color: rgb(128, 128, 128); font-family: Menlo; font-size: 9.8pt;\">      </span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">dirtyComponents.</font><span style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">splice</span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">(</font><span style=\"color: rgb(104, 151, 187); font-family: Menlo; font-size: 9.8pt;\">0</span><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">, </span><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">this</span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">dirtyComponentsLength</span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">)</font><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br></span><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">      </span><span style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">flushBatchedUpdates</span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">()</font><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br></span><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">    </span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">} </font><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">else </span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">{<br>      dirtyComponents.</font><span style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">length </span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">= </font><span style=\"color: rgb(104, 151, 187); font-family: Menlo; font-size: 9.8pt;\">0</span><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br></span><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">    </span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">}<br>  }</font><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">,<br></span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">}</font><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br></span><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\"><br></span><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">var </span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">TRANSACTION_WRAPPERS = [NESTED_UPDATES]</font><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br></span><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\"><br></span><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">function </span><span style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">ReactUpdatesFlushTransaction</span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">() {<br>  </font><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">this</span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">reinitializeTransaction</span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">()</font><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br></span><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">  </span><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">this</span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">dirtyComponentsLength </span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">= </font><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">null</span><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br></span><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">  </span><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">this</span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">reconcileTransaction </span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">= ReactUpdates.</font><span style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">ReactReconcileTransaction</span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">getPooled</span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">(<br>    </font><span style=\"color: rgb(128, 128, 128); font-family: Menlo; font-size: 9.8pt;\">/* useCreateElement */ </span><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">true<br></span><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">  </span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">)</font><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br></span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">}<br><br>Object.</font><span style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">assign</span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">(<br>  </font><span style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">ReactUpdatesFlushTransaction</span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">prototype</span><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">,<br></span><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">  </span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">Transaction</font><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">,<br></span><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">  </span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">{<br>    </font><span style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">getTransactionWrappers</span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">: </font><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">function</span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">() { //这里将wapper加到事务中<br>      </font><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">return </span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">TRANSACTION_WRAPPERS</font><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br></span><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">    </span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">}</font><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">,<br></span><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">    //略去其他……<br></span><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">  </span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">}<br>)</font><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br></span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\"></font></pre>\n    现在我们的更新事务结构如下图所示：\n</div>\n<div><img src=\"/images/2017-02-14/FE612576-70BB-4B9C-9343-07DFAC12DCB4.png\" height=\"690\" width=\"1766\"><br></div>\n<div>重点看下runBatchedUpdate方法是如何更新组件的。</div>\n<div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.8pt;\"><br><span style=\"color:#cc7832;font-weight:bold;\">function </span><span style=\"color:#ffc66d;\">runBatchedUpdates</span>(transaction) {<br>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>len = transaction.<span style=\"color:#9876aa;\">dirtyComponentsLength</span><span style=\"color:#cc7832;\">;</span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#808080;\">// Since reconciling a component higher in the owner hierarchy usually (not<br></span><span style=\"color:#808080;\">  // always -- see shouldComponentUpdate()) will reconcile children, reconcile<br></span><span style=\"color:#808080;\">  // them before their children by sorting the array.<br></span><span style=\"color:#808080;\">  </span>dirtyComponents.<span style=\"color:#ffc66d;\">sort</span>(<span style=\"color:#ffc66d;\">mountOrderComparator</span>)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#808080;\">// Any updates enqueued while reconciling must be performed after this entire<br></span><span style=\"color:#808080;\">  // batch. Otherwise, if dirtyComponents is [A, B] where A has children B and<br></span><span style=\"color:#808080;\">  // C, B could update twice in a single batch if C's render enqueues an update<br></span><span style=\"color:#808080;\">  // to B (since B would have already updated, we should skip it, and the only<br></span><span style=\"color:#808080;\">  // way we can know to do so is by checking the batch counter).<br></span><span style=\"color:#808080;\">  </span>updateBatchNumber++<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(<span style=\"color:#cc7832;font-weight:bold;\">var </span>i = <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">; </span>i &lt; len<span style=\"color:#cc7832;\">; </span>i++) {<br>    <span style=\"color:#808080;\">// If a component is unmounted before pending changes apply, it will still<br></span><span style=\"color:#808080;\">    // be here, but we assume that it has cleared its _pendingCallbacks and<br></span><span style=\"color:#808080;\">    // that performUpdateIfNecessary is a noop.<br></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>component = dirtyComponents[i]<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">   </span><br>    ReactReconciler.<span style=\"color:#ffc66d;\">performUpdateIfNecessary</span>(<br>      component<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">      </span>transaction.<span style=\"color:#9876aa;\">reconcileTransaction</span><span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">      </span>updateBatchNumber<br>    )<span style=\"color:#cc7832;\">;<br></span><br>  }<br>}\n</pre>\n</div>\n<div>遍历dirtyComponent数组，对每个component实例调用performUpdateIfNecessary，</div>\n<div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#629755;font-style:italic;\">/**<br></span><span style=\"color:#629755;font-style:italic;\"> * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`<br></span><span style=\"color:#629755;font-style:italic;\"> * is set, update the component.<br></span><span style=\"color:#629755;font-style:italic;\"> *<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction} transaction<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@internal<br></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\"><span style=\"color:#629755;font-style:italic;\">*/<br></span>performUpdateIfNecessary: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(transaction) {<br>  <span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingElement </span>!= <span style=\"color:#cc7832;font-weight:bold;\">null</span>) { //如果渲染的ReactElement发生变化更新渲染的ReactElement<br>    ReactReconciler.<span style=\"color:#ffc66d;\">receiveComponent</span>(<br>      <span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingElement</span><span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">      </span>transaction<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_context<br></span><span style=\"color:#9876aa;\">    </span>)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>} <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingStateQueue </span>!== <span style=\"color:#cc7832;font-weight:bold;\">null </span>|| <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingForceUpdate</span>) {//如果只是状态发生变化<br>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">updateComponent</span>( //这里调用diff算法<br>      transaction<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span><span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span><span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_context</span><span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_context<br></span><span style=\"color:#9876aa;\">    </span>)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>callbacks = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingCallbacks</span><span style=\"color:#cc7832;\">; <br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingCallbacks </span>= <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(callbacks) {<br>      <span style=\"color:#cc7832;font-weight:bold;\">for </span>(<span style=\"color:#cc7832;font-weight:bold;\">var </span>j = <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">; </span>j &lt; callbacks.<span style=\"color:#9876aa;\">length</span><span style=\"color:#cc7832;\">; </span>j++) {<br>        transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<br>          callbacks[j]<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">          </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">getPublicInstance</span>()<br>        )<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">      </span>}<br>    }<br>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_updateBatchNumber </span>= <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>}<br>}<span style=\"color:#cc7832;\">,<br></span>\n</span></pre>\n</div>\n<div><br></div>\n<div>所以整个setState执行流程参见下图：</div>\n<div><br></div>\n<div><img src=\"/images/2017-02-14/xxx.png\" height=\"656\" width=\"614\"><br></div>\n<div>diff算法部分源码在（src/renderers/shared/stack/reconciler/ReactMultiChild.js）</div>\n<div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#629755;font-style:italic;\">/**<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?object} nextNestedChildrenElements Nested child element maps.<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction} transaction<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@final<br></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\"><span style=\"color:#629755;font-style:italic;\">* </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@protected<br></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\"><span style=\"color:#629755;font-style:italic;\">*/<br></span><span style=\"color:#ffc66d;\">_updateChildren</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(nextNestedChildrenElements<span style=\"color:#cc7832;\">, </span>transaction<span style=\"color:#cc7832;\">, </span>context) {<br>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>prevChildren = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_renderedChildren</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>removedNodes = {}<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>mountImages = []<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextChildren = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_reconcilerUpdateChildren</span>(  &lt;————— 1 下面详细介绍（注意mountImages和removedNode都是在这个函数赋值的）<br>    prevChildren<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>nextNestedChildrenElements<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>mountImages<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>removedNodes<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>transaction<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>context<br>  )<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(!nextChildren &amp;&amp; !prevChildren) {<br>    <span style=\"color:#cc7832;font-weight:bold;\">return</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>}<br>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>updates = <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>name<span style=\"color:#cc7832;\">;//以下是diff算法部分，讲解参见博客链接<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#808080;\">// `nextIndex` will increment for each child in `nextChildren`, but<br></span><span style=\"color:#808080;\">  // `lastIndex` will be the last index visited in `prevChildren`.<br></span><span style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextIndex = <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>lastIndex = <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#808080;\">// `nextMountIndex` will increment for each newly mounted child.<br></span><span style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextMountIndex = <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>lastPlacedNode = <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(name <span style=\"color:#cc7832;font-weight:bold;\">in </span>nextChildren) {<br>    <span style=\"color:#cc7832;font-weight:bold;\">if </span>(!nextChildren.<span style=\"color:#ffc66d;\">hasOwnProperty</span>(name)) {<br>      <span style=\"color:#cc7832;font-weight:bold;\">continue</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>}<br>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>prevChild = prevChildren &amp;&amp; prevChildren[name]<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextChild = nextChildren[name]<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(prevChild === nextChild) {<br>      updates = <span style=\"color:#ffc66d;\">enqueue</span>(<br>        updates<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">moveChild</span>(prevChild<span style=\"color:#cc7832;\">, </span>lastPlacedNode<span style=\"color:#cc7832;\">, </span>nextIndex<span style=\"color:#cc7832;\">, </span>lastIndex)<br>      )<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">      </span>lastIndex = <span style=\"color:#9876aa;\">Math</span>.<span style=\"color:#ffc66d;\">max</span>(prevChild.<span style=\"color:#9876aa;\">_mountIndex</span><span style=\"color:#cc7832;\">, </span>lastIndex)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">      </span>prevChild.<span style=\"color:#9876aa;\">_mountIndex </span>= nextIndex<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br>      <span style=\"color:#cc7832;font-weight:bold;\">if </span>(prevChild) {<br>        <span style=\"color:#808080;\">// Update `lastIndex` before `_mountIndex` gets unset by unmounting.<br></span><span style=\"color:#808080;\">        </span>lastIndex = <span style=\"color:#9876aa;\">Math</span>.<span style=\"color:#ffc66d;\">max</span>(prevChild.<span style=\"color:#9876aa;\">_mountIndex</span><span style=\"color:#cc7832;\">, </span>lastIndex)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">// The `removedNodes` loop below will actually remove the child.<br></span><span style=\"color:#808080;\">      </span>}<br>      <span style=\"color:#808080;\">// The child must be instantiated before it's mounted.<br></span><span style=\"color:#808080;\">      </span>updates = <span style=\"color:#ffc66d;\">enqueue</span>(<br>        updates<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_mountChildAtIndex</span>(<br>          nextChild<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">          </span>mountImages[nextMountIndex]<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">          </span>lastPlacedNode<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">          </span>nextIndex<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">          </span>transaction<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">          </span>context<br>        )<br>      )<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">      </span>nextMountIndex++<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>}<br>    nextIndex++<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>lastPlacedNode = ReactReconciler.<span style=\"color:#ffc66d;\">getHostNode</span>(nextChild)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>}<br>  <span style=\"color:#808080;\">// Remove children that are no longer present.<br></span><span style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(name <span style=\"color:#cc7832;font-weight:bold;\">in </span>removedNodes) {<br>    <span style=\"color:#cc7832;font-weight:bold;\">if </span>(removedNodes.<span style=\"color:#ffc66d;\">hasOwnProperty</span>(name)) {<br>      updates = <span style=\"color:#ffc66d;\">enqueue</span>(<br>        updates<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_unmountChild</span>(prevChildren[name]<span style=\"color:#cc7832;\">, </span>removedNodes[name])<br>      )<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>}<br>  }<br>  <span style=\"color:#cc7832;font-weight:bold;\">if </span>(updates) {<br>    <span style=\"color:#ffc66d;\">processQueue</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>updates)<span style=\"color:#cc7832;\">;//注意这里将上面比较后缓存的变更进行处理更新dom树，使所有变更在浏览器中得以展现，代码参见（src/<font style=\"font-size: 12px; color: rgb(204, 120, 50); font-family: Menlo;\">renderers/dom/stack/client/DOMChildrenOperations.js</font>）的processUpdate<br></span><span style=\"color:#cc7832;\">  </span>}<br>  <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_renderedChildren </span>= nextChildren<span style=\"color:#cc7832;\">;<br></span><br>}<span style=\"color:#cc7832;\">,</span>\n</span></span></pre>\n    React在执行diff算法之前先做了两件事情：\n</div>\n<div>\n    <ol start=\"1\">\n        <li>将新的ReactElement结构树（可能包含很多层）’拍平’，以{ key：xx，value：element}方式返回</li>\n        <li>遍历上一步生成的key——ReactElement映射和原有的key——ReactComponent实例映射做比较，新建或删除ReactComponent。</li>\n    </ol>\n</div>\n<div>经过上面两个步骤生成了新的key——ReactComponent实例，和原有的key——ReactComponent映射进行diff算法。</div>\n<div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#ffc66d;\">_reconcilerUpdateChildren</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br>  prevChildren<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>nextNestedChildrenElements<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>mountImages<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>removedNodes<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>transaction<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>context<br>) {<br>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>nextChildren<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>selfDebugID = <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">;<br></span> //第一步：调用（src/<font style=\"font-size: 12px; color: rgb(169, 183, 198); font-family: Menlo;\">shared/utils/traverseAllChildren.js</font>）对子节点进行深度优先遍历，同时根据子节点所在的层级按照一定命名规则生成唯一key存在object中，这样虽然所有树状结构的子节点被’拍平’存储，但是能保证在diff操作的时候同一层级的子节点进行比较（即连个map中key相同的子节点一定在同一层）<br>  nextChildren = flattenChildren(nextNestedChildrenElements<span style=\"color:#cc7832;\">, </span>selfDebugID)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>ReactChildReconciler.<span style=\"color:#ffc66d;\">updateChildren</span>( //第二步：参见下面详细介绍<br>    prevChildren<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>nextChildren<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>mountImages<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>removedNodes<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>transaction<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_hostContainerInfo</span><span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>context<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>selfDebugID<br>  )<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">return </span>nextChildren<span style=\"color:#cc7832;\">;<br></span>}<span style=\"color:#cc7832;\">,</span>\n</pre>\n    <div>\n\t\t<pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#629755;font-style:italic;\">/**<br></span><span style=\"color:#629755;font-style:italic;\"> * Updates the rendered children and returns a new set of children.<br></span><span style=\"color:#629755;font-style:italic;\"> *<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?object} prevChildren Previously initialized set of children.<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?object} nextChildren Flat child element maps.<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction} transaction<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{object} context<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@return </span><span style=\"color:#629755;font-style:italic;\">{?object} A new set of child instances.<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@internal<br></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\"><span style=\"color:#629755;font-style:italic;\">*/<br></span><span style=\"color:#ffc66d;\">updateChildren</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br>  prevChildren<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>nextChildren<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>mountImages<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>removedNodes<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>transaction<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>hostParent<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>hostContainerInfo<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>context<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>selfDebugID <span style=\"color:#808080;\">// 0 in production and for roots<br></span>) {<br>  <span style=\"color:#808080;\">// We currently don't have a way to track moves here but if we use iterators<br></span><span style=\"color:#808080;\">  // instead of for..in we can zip the iterators and check if an item has<br></span><span style=\"color:#808080;\">  // moved.<br></span><span style=\"color:#808080;\">  // </span><span style=\"color:#a8c023;font-style:italic;\">TODO: If nothing has changed, return the prevChildren object so that we<br></span><span style=\"color:#a8c023;font-style:italic;\">  </span><span style=\"color:#808080;\">// can quickly bailout if nothing has changed.<br></span><span style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(!nextChildren &amp;&amp; !prevChildren) {<br>    <span style=\"color:#cc7832;font-weight:bold;\">return</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>}<br>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>name<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>prevChild<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(name <span style=\"color:#cc7832;font-weight:bold;\">in </span>nextChildren) {<br>    <span style=\"color:#cc7832;font-weight:bold;\">if </span>(!nextChildren.<span style=\"color:#ffc66d;\">hasOwnProperty</span>(name)) {<br>      <span style=\"color:#cc7832;font-weight:bold;\">continue</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>}<br>    prevChild = prevChildren &amp;&amp; prevChildren[name]<span style=\"color:#cc7832;\">; //如果旧映射里找到对应的ReactComponent实例<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>prevElement = prevChild &amp;&amp; prevChild.<span style=\"color:#9876aa;\">_currentElement</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextElement = nextChildren[name]<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(prevChild != <span style=\"color:#cc7832;font-weight:bold;\">null </span>&amp;&amp;<br>        shouldUpdateReactComponent(prevElement<span style=\"color:#cc7832;\">, </span>nextElement)) {//取出实例中的ReactElement与新的做比较，如果类型相同调用实例更新函数<br>      ReactReconciler.<span style=\"color:#ffc66d;\">receiveComponent</span>(<br>        prevChild<span style=\"color:#cc7832;\">, </span>nextElement<span style=\"color:#cc7832;\">, </span>transaction<span style=\"color:#cc7832;\">, </span>context<br>      )<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">      </span>nextChildren[name] = prevChild<span style=\"color:#cc7832;\">; <br></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{ //否则清理旧的ReactComponent实例，加入到removeNodes映射中，初始化新实例加入映射中，调用新实例的mountComponent获得对应的渲染markup加入到<font style=\"font-family: Menlo; background-color: rgb(43, 43, 43); font-size: 12px; color: rgb(169, 183, 198);\">mountImages 。<font style=\"font-family: Menlo; background-color: rgb(43, 43, 43); font-size: 12px; color: rgb(169, 183, 198);\">removeNodes映射和mountImage映射在diff算法执行过程中加入到更新队列然后批量更新dom。</font></font><br>      <span style=\"color:#cc7832;font-weight:bold;\">if </span>(<br>        !ReactFeatureFlags.<span style=\"color:#9876aa;\">prepareNewChildrenBeforeUnmountInStack </span>&amp;&amp;<br>        prevChild<br>      ) {<br>        removedNodes[name] = ReactReconciler.<span style=\"color:#ffc66d;\">getHostNode</span>(prevChild)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span>ReactReconciler.<span style=\"color:#ffc66d;\">unmountComponent</span>(<br>          prevChild<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">          </span><span style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">, </span><span style=\"color:#808080;\">/* safely */<br></span><span style=\"color:#808080;\">          </span><span style=\"color:#cc7832;font-weight:bold;\">false </span><span style=\"color:#808080;\">/* skipLifecycle */<br></span><span style=\"color:#808080;\">        </span>)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">      </span>}<br>      <span style=\"color:#808080;\">// The child must be instantiated before it's mounted.<br></span><span style=\"color:#808080;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextChildInstance = instantiateReactComponent(nextElement<span style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">true</span>)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">      </span>nextChildren[name] = nextChildInstance<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">      </span><span style=\"color:#808080;\">// Creating mount image now ensures refs are resolved in right order<br></span><span style=\"color:#808080;\">      // (see <a href=\"https://github.com/facebook/react/pull/7101\" target=\"_blank\" rel=\"external\">https://github.com/facebook/react/pull/7101</a> for explanation).<br></span><span style=\"color:#808080;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextChildMountImage = ReactReconciler.<span style=\"color:#ffc66d;\">mountComponent</span>(<br>        nextChildInstance<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">        </span>transaction<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">        </span>hostParent<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">        </span>hostContainerInfo<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">        </span>context<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">        </span>selfDebugID<br>      )<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">      </span>mountImages.<span style=\"color:#ffc66d;\">push</span>(nextChildMountImage)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(<br>        ReactFeatureFlags.<span style=\"color:#9876aa;\">prepareNewChildrenBeforeUnmountInStack </span>&amp;&amp;<br>        prevChild<br>      ) {<br>        removedNodes[name] = ReactReconciler.<span style=\"color:#ffc66d;\">getHostNode</span>(prevChild)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span>ReactReconciler.<span style=\"color:#ffc66d;\">unmountComponent</span>(<br>          prevChild<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">          </span><span style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">, </span><span style=\"color:#808080;\">/* safely */<br></span><span style=\"color:#808080;\">          </span><span style=\"color:#cc7832;font-weight:bold;\">false </span><span style=\"color:#808080;\">/* skipLifecycle */<br></span><span style=\"color:#808080;\">        </span>)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">      </span>}<br>    }<br>  }<br>  <span style=\"color:#808080;\">// Unmount children that are no longer present.<br></span><span style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(name <span style=\"color:#cc7832;font-weight:bold;\">in </span>prevChildren) {<br>    <span style=\"color:#cc7832;font-weight:bold;\">if </span>(prevChildren.<span style=\"color:#ffc66d;\">hasOwnProperty</span>(name) &amp;&amp;<br>        !(nextChildren &amp;&amp; nextChildren.<span style=\"color:#ffc66d;\">hasOwnProperty</span>(name))) {<br>      prevChild = prevChildren[name]<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">      </span>removedNodes[name] = ReactReconciler.<span style=\"color:#ffc66d;\">getHostNode</span>(prevChild)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">      </span>ReactReconciler.<span style=\"color:#ffc66d;\">unmountComponent</span>(<br>        prevChild<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">, </span><span style=\"color:#808080;\">/* safely */<br></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">false </span><span style=\"color:#808080;\">/* skipLifecycle */<br></span><span style=\"color:#808080;\">      </span>)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>}<br>  }<br>}<span style=\"color:#cc7832;\">,</span></span></pre>\n    </div>\n    <div><br></div>\n    <div>diff算法原理详解参见：<br></div>\n</div>\n<div><a href=\"https://zhuanlan.zhihu.com/p/20346379?refer=purerender\" target=\"_blank\" rel=\"external\">https://zhuanlan.zhihu.com/p/20346379?refer=purerender</a> 或《深入React技术栈》3.5章（可以找我借）讲得很详细。<br>\n</div>\n<div><br></div>\n","excerpt":"","more":"<div>\n    React通过this.setState方法更新state，当this.setState被调用的时候会根据更新策略执行情况（是否在更新中）来判断是否重新调用render方法还是放到更新队列中。看下setState源码，题外话：React创建组件有三种方式:\n    1）函数方式(无状态组件) 2）React.createClass(es5)  3) extends React.Component(es6)，后两种方式中\n    setState会自动注入到组件中，因此在自定义组件中能通过this.setState直接访问。三种创建方式的区别参见<a\n        href=\"http://www.cnblogs.com/wonyun/p/5930333.html\">这篇文章</a>。<br>\n    <div>——以下代码是React v15.4.2版本——</div>\n</div>\n<div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><br/><span\n        style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Sets a subset of the state. Always use this to mutate<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * state. You should treat `this.state` as immutable.<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * There is no guarantee that `this.state` will be immediately updated, so<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * accessing `this.state` after calling this method may return the old value.<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * There is no guarantee that calls to `setState` will run synchronously,<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * as they may eventually be batched together.  You can provide an optional<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * callback that will be executed when the call to setState is actually<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * completed.<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * When a function is provided to setState, it will be called at some point in<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * the future (not synchronously). It will be called with the up to date<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * component arguments (state, props, context). These values can be different<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * from this.* because your function may be called after receiveProps but before<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * shouldComponentUpdate, and this new state, props, and context will not yet be<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * assigned to this.<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span\n        style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n        style=\"color:#629755;font-style:italic;\">{object|function} partialState Next partial state or function to<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> *        produce next partial state to be merged with current state.<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n        style=\"color:#629755;font-style:italic;\">{?function} callback Called after state is updated.<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@final<br/></span><span\n        style=\"color:#629755;font-weight:bold;font-style:italic;\"/><span\n        style=\"color:#629755;font-style:italic;\">* </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@protected<br/></span><span\n        style=\"color:#629755;font-weight:bold;font-style:italic;\"/><span\n        style=\"color:#629755;font-style:italic;\">*/<br/></span><span style=\"color:#ffc66d;\">ReactComponent</span>.<span\n        style=\"color:#9876aa;\">prototype</span>.<span style=\"color:#ffc66d;\">setState </span>= <span\n        style=\"color:#cc7832;font-weight:bold;\">function</span>(partialState<span\n        style=\"color:#cc7832;\">, </span>callback) {<span style=\"color:#cc7832;\"><br/></span><span\n        style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span\n        style=\"color:#9876aa;\">updater</span>.<span style=\"color:#ffc66d;\">enqueueSetState</span>(<span\n        style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>partialState<span\n        style=\"color:#cc7832;\">, </span>callback<span style=\"color:#cc7832;\">, </span><span\n        style=\"color:#6a8759;\">'setState'</span>)<span style=\"color:#cc7832;\">;<br/></span>}<span\n        style=\"color:#cc7832;\">;</span>\n</pre>\n    <pre style=\"background-color: rgb(43, 43, 43);\"><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(169, 183, 198);\"><span\n            style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Sets a subset of the state. This only exists because _pendingState is<br/></span><span\n            style=\"color:#629755;font-style:italic;\"> * internal. This provides a merging strategy that is not available to deep<br/></span><span\n            style=\"color:#629755;font-style:italic;\"> * properties which is confusing. </span><span\n            style=\"color:#a8c023;font-style:italic;\">TODO: Expose pendingState or don't use it<br/></span><span\n            style=\"color:#a8c023;font-style:italic;\"/><span\n            style=\"color:#629755;font-style:italic;\">* during the merge.<br/></span><span\n            style=\"color:#629755;font-style:italic;\"> *<br/></span><span\n            style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n            style=\"color:#629755;font-style:italic;\">{ReactClass} publicInstance The instance that should rerender.<br/></span><span\n            style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n            style=\"color:#629755;font-style:italic;\">{object} partialState Next partial state to be merged with state.<br/></span><span\n            style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n            style=\"color:#629755;font-style:italic;\">{?function} callback Called after state is updated.<br/></span><span\n            style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n            style=\"color:#629755;font-style:italic;\">{?string} Name of the calling function in the public API.<br/></span><span\n            style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@internal<br/></span><span\n            style=\"color:#629755;font-weight:bold;font-style:italic;\"/><span\n            style=\"color:#629755;font-style:italic;\">*/<br/></span><span style=\"color:#ffc66d;\">enqueueSetState</span>: <span\n            style=\"color:#cc7832;font-weight:bold;\">function</span>(publicInstance<span style=\"color:#cc7832;\">, </span>partialState<span\n            style=\"color:#cc7832;\">, </span>callback<span style=\"color:#cc7832;\">, </span>callerName) {<br/>  </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#cc7832\"><b>//获得组件实例</b></font><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\"><br/>  </font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">internalInstance = </font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">getInternalInstanceReadyForUpdate</span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(<br/>    publicInstance</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(106, 135, 89);\">'setState'<br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(106, 135, 89);\">  </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">)</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\"><br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">if </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(!internalInstance) {<br/>    </font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">return</span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">}<br/><br/>  //初始化state更新队列<br/>  </font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">queue =<br/>    internalInstance.</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_pendingStateQueue </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">||<br/>    (internalInstance.</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_pendingStateQueue </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">= [])</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">queue.</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">push</span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(partialState)</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  //如果setState设置了回调函数，添加到组件实例的队列中<br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">if </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\"\n            color=\"#a9b7c6\">(callback) {<br/>    validateCallback(callback</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">, </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">callerName)</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">if </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(internalInstance.</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_pendingCallbacks</span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">) {<br/>      internalInstance.</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_pendingCallbacks</span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">.</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">push</span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(callback)</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">} </font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">else </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">{<br/>      internalInstance.</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_pendingCallbacks </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">= [callback]</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font color=\"#a9b7c6\"><font\n            face=\"Menlo\" size=\"2\">}<br/>  }<br/>  <br/>  </font></font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">enqueueUpdate</span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(internalInstance)</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">}</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,</span></pre>\n</div>\n<div><font style=\"font-size: 14px;\"><span\n        style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: 'PingFang SC'; color: rgb(69, 69, 69);\">最后调用（</span><span\n        style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(69, 69, 69);\">src/renderers/shared/stack/reconciler/ReactUpdates.js</span><span\n        style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: 'PingFang SC'; color: rgb(69, 69, 69);\">）</span><span\n        style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(69, 69, 69);\">ReactUpdates</span><span\n        style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: 'PingFang SC'; color: rgb(69, 69, 69);\">的enqueueUpdate函数执行更新。</span></font>\n</div>\n<div><font style=\"font-size: 14px;\"><span\n        style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; color: rgb(69, 69, 69);\"/></font><span\n        style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; color: rgb(69, 69, 69);\"><font\n        style=\"font-size: 14px;\"><font face=\"PingFang SC\"><pre\n        style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span\n        style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Mark a component as needing a rerender, adding an optional callback to a<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * list of functions which will be executed once the rerender occurs.<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> */<br/></span><span style=\"color:#cc7832;font-weight:bold;\">function </span><span\n        style=\"color:#ffc66d;\">enqueueUpdate</span>(component) {<br/>  <span\n        style=\"color:#ffc66d;\">ensureInjected</span>()<span style=\"color:#cc7832;\">;</span><span style=\"color:#808080;\"><br/></span><span\n        style=\"color:#808080;\"><br/></span><span style=\"color:#808080;\">  </span><span\n        style=\"color:#cc7832;font-weight:bold;\">if </span>(!batchingStrategy.<span\n        style=\"color:#9876aa;\">isBatchingUpdates</span>) {//如果当前没有处于更新中，<br/>    batchingStrategy.<span\n        style=\"color:#ffc66d;\">batchedUpdates</span>(<span style=\"color:#ffc66d;\">enqueueUpdate</span><span\n        style=\"color:#cc7832;\">, </span>component)<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">return</span><span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><br/>  dirtyComponents.<span\n        style=\"color:#ffc66d;\">push</span>(component)<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(component.<span\n        style=\"color:#9876aa;\">_updateBatchNumber </span>== <span style=\"color:#cc7832;font-weight:bold;\">null</span>) {<br/>    component.<span\n        style=\"color:#9876aa;\">_updateBatchNumber </span>= updateBatchNumber + <span style=\"color:#6897bb;\">1</span><span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/>}\n</pre></font></font></span><br/></div>\n<div>\n    batchingStrategy在ReactDefaultBatchingStrategy.js（src/renderers/shared/stack/reconciler/ReactDefaultBatchingStrategy.js），这里要介绍下React的事务，事务是将需要执行的方法封装起来，在通过perform方法执行，以保证在执行目标方法前，事务中的一组initialize方法限制性，目标方法执行后，一组close方法能够得到执行，参见下图（src/renderers/shared/stack/reconciler/Transaction.js中）：\n</div>\n<div><img\n        src=\"/images/2017-02-14/3C5D0315-7718-4DC6-89B9-0C7A281294F2.png\"\n        height=\"670\" width=\"1066\"/><br/></div>\n<div>再回到我们的更新策略对象中</div>\n<div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><br/><span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>RESET_BATCHED_UPDATES = {<br/>  <span style=\"color:#9876aa;\">initialize</span>: emptyFunction<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span><span\n        style=\"color:#ffc66d;\">close</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>() {<br/>    ReactDefaultBatchingStrategy.<span\n        style=\"color:#9876aa;\">isBatchingUpdates </span>= <span style=\"color:#cc7832;font-weight:bold;\">false</span><span\n        style=\"color:#cc7832;\">;//<font\n        style=\"font-family: Menlo; background-color: rgb(43, 43, 43); font-size: 12px; color: rgb(169, 183, 198);\">事务执行结束后重置当前更新状态</font><br/></span><span\n        style=\"color:#cc7832;\">  </span>}<span style=\"color:#cc7832;\">,<br/></span>}<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\"><br/></span><span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>FLUSH_BATCHED_UPDATES = {<br/>  <span style=\"color:#9876aa;\">initialize</span>: emptyFunction<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#9876aa;\">close</span>: ReactUpdates.<span\n        style=\"color:#ffc66d;\">flushBatchedUpdates</span>.<span style=\"color:#ffc66d;\">bind</span>(ReactUpdates)<span\n        style=\"color:#cc7832;\">,//遍历dirtyComponent数组中的组件，逐个更新<br/></span>}<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;font-weight:bold;\">var </span>TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES<span\n        style=\"color:#cc7832;\">, </span>RESET_BATCHED_UPDATES]<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;font-weight:bold;\">function </span><span\n        style=\"color:#ffc66d;\">ReactDefaultBatchingStrategyTransaction</span>() {<br/>  <span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">reinitializeTransaction</span>()<span\n        style=\"color:#cc7832;\">;<br/></span>}<br/><br/>Object.<span style=\"color:#ffc66d;\">assign</span>(<br/>  <span\n        style=\"color:#ffc66d;\">ReactDefaultBatchingStrategyTransaction</span>.<span\n        style=\"color:#9876aa;\">prototype</span><span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">  </span>Transaction<span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">  </span>{<br/>    <span style=\"color:#ffc66d;\">getTransactionWrappers</span>: <span\n        style=\"color:#cc7832;font-weight:bold;\">function</span>() { //给事务添加wapper<br/>      <span\n        style=\"color:#cc7832;font-weight:bold;\">return </span>TRANSACTION_WRAPPERS<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>}<br/>)<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>transaction = <span\n        style=\"color:#cc7832;font-weight:bold;\">new </span><span style=\"color:#ffc66d;\">ReactDefaultBatchingStrategyTransaction</span>()<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>ReactDefaultBatchingStrategy = {<br/>  <span\n        style=\"color:#9876aa;\">isBatchingUpdates</span>: <span style=\"color:#cc7832;font-weight:bold;\">false</span><span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\"><br/></span><span\n        style=\"color:#cc7832;\">  </span><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span\n        style=\"color:#629755;font-style:italic;\">   * Call the provided function in a context within which calls to `setState`<br/></span><span\n        style=\"color:#629755;font-style:italic;\">   * and friends are batched such that components aren't updated unnecessarily.<br/></span><span\n        style=\"color:#629755;font-style:italic;\">   */<br/></span><span\n        style=\"color:#629755;font-style:italic;\">  </span><span style=\"color:#ffc66d;\">batchedUpdates</span>: <span\n        style=\"color:#cc7832;font-weight:bold;\">function</span>(callback<span style=\"color:#cc7832;\">, </span>a<span\n        style=\"color:#cc7832;\">, </span>b<span style=\"color:#cc7832;\">, </span>c<span style=\"color:#cc7832;\">, </span>d<span\n        style=\"color:#cc7832;\">, </span>e) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>alreadyBatchingUpdates = ReactDefaultBatchingStrategy.<span\n        style=\"color:#9876aa;\">isBatchingUpdates</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span\n        style=\"color:#cc7832;\">    </span>ReactDefaultBatchingStrategy.<span style=\"color:#9876aa;\">isBatchingUpdates </span>= <span\n        style=\"color:#cc7832;font-weight:bold;\">true</span><span style=\"color:#cc7832;\">;//设置当前正在处于更新状态<br/></span><span\n        style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// The code is written this way to avoid extra allocations<br/></span><span\n        style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(alreadyBatchingUpdates) { //个人认为这里是确保同一时间只有一个事务在更新组件，比如一个组件几乎无间隔地调用两次setState，欢迎讨论<br/>      <span\n        style=\"color:#cc7832;font-weight:bold;\">return </span>callback(a<span style=\"color:#cc7832;\">, </span>b<span\n        style=\"color:#cc7832;\">, </span>c<span style=\"color:#cc7832;\">, </span>d<span style=\"color:#cc7832;\">, </span>e)<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>} <span\n        style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>      <span\n        style=\"color:#cc7832;font-weight:bold;\">return </span>transaction.<span style=\"color:#ffc66d;\">perform</span>(callback<span\n        style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">, </span>a<span\n        style=\"color:#cc7832;\">, </span>b<span style=\"color:#cc7832;\">, </span>c<span style=\"color:#cc7832;\">, </span>d<span\n        style=\"color:#cc7832;\">, </span>e)<span style=\"color:#cc7832;\">;//注意这里比较有意思，把<font\n        style=\"font-family: Menlo; font-size: 12px; background-color: rgb(43, 43, 43); color: rgb(255, 198, 109);\">enqueueUpdate作为callback调用，但这时<font\n        style=\"font-family: Menlo; font-size: 12px; background-color: rgb(43, 43, 43); color: rgb(152, 118, 170);\">isBatchingUpdates是true，因此<font\n        style=\"font-family: Menlo; background-color: rgb(43, 43, 43); font-size: 12px; color: rgb(255, 198, 109);\">enqueueUpdate做的事就是把这个要更新的component加入到dirtyComponent数组中，然后在事务wrapper中的close方法</font></font></font></span><span\n        style=\"font-size: 9pt;\">ReactUpdates.</span><span style=\"font-size: 9pt; color: rgb(255, 198, 109);\">flushBatchedUpdates遍历dirtyComponent数组进行更新。</span><span\n        style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span>}<br/>  }<span\n        style=\"color:#cc7832;\">,<br/></span>}<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\"><br/></span>module.<span\n        style=\"color:#ffc66d;\">exports </span>= ReactDefaultBatchingStrategy<span style=\"color:#cc7832;\">;<br/></span>\n</pre>\n    由这段代码可以看到，真正执行更新的实在事务的某个wapper的close方法中，即ReactUpdates.flushBatchedUpdates中进行更新的：\n    <pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.8pt;\"><span\n            style=\"color:#cc7832;font-weight:bold;\">var </span><span style=\"color:#ffc66d;\">flushBatchedUpdates </span>= <span\n            style=\"color:#cc7832;font-weight:bold;\">function</span>() {<br/>  <span style=\"color:#808080;\">// ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents<br/></span><span\n            style=\"color:#808080;\">  // array and perform any updates enqueued by mount-ready handlers (i.e.,<br/></span><span\n            style=\"color:#808080;\">  // componentDidUpdate) but we need to check here too in order to catch<br/></span><span\n            style=\"color:#808080;\">  // updates enqueued by setState callbacks.<br/></span><span\n            style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">while </span>(dirtyComponents.<span\n            style=\"color:#9876aa;\">length</span>) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>transaction = <span\n            style=\"color:#ffc66d;\">ReactUpdatesFlushTransaction</span>.<span style=\"color:#ffc66d;\">getPooled</span>()<span\n            style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>transaction.<span\n            style=\"color:#ffc66d;\">perform</span>(<span style=\"color:#ffc66d;\">runBatchedUpdates</span><span\n            style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">null</span><span\n            style=\"color:#cc7832;\">, </span>transaction)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span\n            style=\"color:#ffc66d;\">ReactUpdatesFlushTransaction</span>.<span\n            style=\"color:#ffc66d;\">release</span>(transaction)<span style=\"color:#cc7832;\">;<br/></span><span\n            style=\"color:#cc7832;\">  </span>}<br/>}<span style=\"color:#cc7832;\">;</span>\n</pre>\n</div>\n<div>注意这里由用到一个事务ReactUpdatesFlushTransaction：</div>\n<div><pre style=\"background-color: rgb(43, 43, 43);\"><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\"><br/></font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">var </span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">NESTED_UPDATES = {<br/>  </font><span\n        style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">initialize</span><font face=\"Menlo\"\n                                                                                                        color=\"#a9b7c6\"\n                                                                                                        size=\"3\">: </font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">function</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">() {<br/>    </font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">this</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span\n        style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">dirtyComponentsLength </span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">= dirtyComponents.</font><span\n        style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">length</span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">  </span><font face=\"Menlo\" color=\"#a9b7c6\"\n                                                                                               size=\"3\">}</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">,<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">  </span><span\n        style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">close</span><font face=\"Menlo\"\n                                                                                                   color=\"#a9b7c6\"\n                                                                                                   size=\"3\">: </font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">function</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">() {<br/>    </font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">if </span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">(</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">this</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span\n        style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">dirtyComponentsLength </span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">!== dirtyComponents.</font><span\n        style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">length</span><font face=\"Menlo\"\n                                                                                                    color=\"#a9b7c6\" size=\"3\">) {<br/>      </font><span\n        style=\"color: rgb(128, 128, 128); font-family: Menlo; font-size: 9.8pt;\">// Additional updates were enqueued by componentDidUpdate handlers or<br/></span><span\n        style=\"color: rgb(128, 128, 128); font-family: Menlo; font-size: 9.8pt;\">      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run<br/></span><span\n        style=\"color: rgb(128, 128, 128); font-family: Menlo; font-size: 9.8pt;\">      // these new updates so that if A's componentDidUpdate calls setState on<br/></span><span\n        style=\"color: rgb(128, 128, 128); font-family: Menlo; font-size: 9.8pt;\">      // B, B will update before the callback A's updater provided when calling<br/></span><font\n        face=\"Menlo\" color=\"#808080\" size=\"3\">      // setState.在close之前再检查一遍</font><font face=\"Menlo\" color=\"#808080\">dirtyComponent</font><font\n        face=\"Menlo\" color=\"#808080\" size=\"3\">是否有新的要更新的组件，有则更新，上面注释中将的场景应该是比如在A组件的setState传入了第二个参数回调函数，如果在A的componentDidUpdate中调用了setState改变了它包含的B组件的状态（这里假设只改变B 的状态），为了保证回调函数能访问到更新后的B组件，继续执行dirtyComponent中后插入的组件（B）然后更新B组件<br/></font><span\n        style=\"color: rgb(128, 128, 128); font-family: Menlo; font-size: 9.8pt;\">      </span><font face=\"Menlo\"\n                                                                                                    color=\"#a9b7c6\" size=\"3\">dirtyComponents.</font><span\n        style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">splice</span><font face=\"Menlo\"\n                                                                                                    color=\"#a9b7c6\"\n                                                                                                    size=\"3\">(</font><span\n        style=\"color: rgb(104, 151, 187); font-family: Menlo; font-size: 9.8pt;\">0</span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">, </span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">this</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span\n        style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">dirtyComponentsLength</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">)</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">      </span><span\n        style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">flushBatchedUpdates</span><font face=\"Menlo\"\n                                                                                                                 color=\"#a9b7c6\"\n                                                                                                                 size=\"3\">()</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">    </span><font face=\"Menlo\" color=\"#a9b7c6\"\n                                                                                                 size=\"3\">} </font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">else </span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">{<br/>      dirtyComponents.</font><span\n        style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">length </span><font face=\"Menlo\"\n                                                                                                     color=\"#a9b7c6\" size=\"3\">= </font><span\n        style=\"color: rgb(104, 151, 187); font-family: Menlo; font-size: 9.8pt;\">0</span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">    </span><font face=\"Menlo\" color=\"#a9b7c6\"\n                                                                                                 size=\"3\">}<br/>  }</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">,<br/></span><font face=\"Menlo\"\n                                                                                                   color=\"#a9b7c6\"\n                                                                                                   size=\"3\">}</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\"><br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">var </span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">TRANSACTION_WRAPPERS = [NESTED_UPDATES]</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\"><br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">function </span><span\n        style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">ReactUpdatesFlushTransaction</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">() {<br/>  </font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">this</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span\n        style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">reinitializeTransaction</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">()</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">  </span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">this</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span\n        style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">dirtyComponentsLength </span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">= </font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">null</span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">  </span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">this</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span\n        style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">reconcileTransaction </span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">= ReactUpdates.</font><span\n        style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">ReactReconcileTransaction</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span\n        style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">getPooled</span><font face=\"Menlo\"\n                                                                                                       color=\"#a9b7c6\"\n                                                                                                       size=\"3\">(<br/>    </font><span\n        style=\"color: rgb(128, 128, 128); font-family: Menlo; font-size: 9.8pt;\">/* useCreateElement */ </span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">true<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">  </span><font face=\"Menlo\"\n                                                                                                                  color=\"#a9b7c6\"\n                                                                                                                  size=\"3\">)</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><font face=\"Menlo\"\n                                                                                                   color=\"#a9b7c6\"\n                                                                                                   size=\"3\">}<br/><br/>Object.</font><span\n        style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">assign</span><font face=\"Menlo\"\n                                                                                                    color=\"#a9b7c6\" size=\"3\">(<br/>  </font><span\n        style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">ReactUpdatesFlushTransaction</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span\n        style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">prototype</span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">,<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">  </span><font face=\"Menlo\" color=\"#a9b7c6\"\n                                                                                               size=\"3\">Transaction</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">,<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">  </span><font face=\"Menlo\" color=\"#a9b7c6\"\n                                                                                               size=\"3\">{<br/>    </font><span\n        style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">getTransactionWrappers</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">: </font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">function</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">() { //这里将wapper加到事务中<br/>      </font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">return </span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">TRANSACTION_WRAPPERS</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">    </span><font face=\"Menlo\" color=\"#a9b7c6\"\n                                                                                                 size=\"3\">}</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">,<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">    //略去其他……<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">  </span><font face=\"Menlo\" color=\"#a9b7c6\"\n                                                                                               size=\"3\">}<br/>)</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><font face=\"Menlo\"\n                                                                                                   color=\"#a9b7c6\" size=\"3\"\n/></pre>\n    现在我们的更新事务结构如下图所示：\n</div>\n<div><img\n        src=\"/images/2017-02-14/FE612576-70BB-4B9C-9343-07DFAC12DCB4.png\"\n        height=\"690\" width=\"1766\"/><br/></div>\n<div>重点看下runBatchedUpdate方法是如何更新组件的。</div>\n<div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.8pt;\"><br/><span\n        style=\"color:#cc7832;font-weight:bold;\">function </span><span style=\"color:#ffc66d;\">runBatchedUpdates</span>(transaction) {<br/>  <span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>len = transaction.<span style=\"color:#9876aa;\">dirtyComponentsLength</span><span\n        style=\"color:#cc7832;\">;</span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span\n        style=\"color:#808080;\">// Since reconciling a component higher in the owner hierarchy usually (not<br/></span><span\n        style=\"color:#808080;\">  // always -- see shouldComponentUpdate()) will reconcile children, reconcile<br/></span><span\n        style=\"color:#808080;\">  // them before their children by sorting the array.<br/></span><span\n        style=\"color:#808080;\">  </span>dirtyComponents.<span style=\"color:#ffc66d;\">sort</span>(<span style=\"color:#ffc66d;\">mountOrderComparator</span>)<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span\n        style=\"color:#cc7832;\">  </span><span style=\"color:#808080;\">// Any updates enqueued while reconciling must be performed after this entire<br/></span><span\n        style=\"color:#808080;\">  // batch. Otherwise, if dirtyComponents is [A, B] where A has children B and<br/></span><span\n        style=\"color:#808080;\">  // C, B could update twice in a single batch if C's render enqueues an update<br/></span><span\n        style=\"color:#808080;\">  // to B (since B would have already updated, we should skip it, and the only<br/></span><span\n        style=\"color:#808080;\">  // way we can know to do so is by checking the batch counter).<br/></span><span\n        style=\"color:#808080;\">  </span>updateBatchNumber++<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span\n        style=\"color:#cc7832;font-weight:bold;\">for </span>(<span style=\"color:#cc7832;font-weight:bold;\">var </span>i = <span\n        style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">; </span>i &lt; len<span style=\"color:#cc7832;\">; </span>i++) {<br/>    <span\n        style=\"color:#808080;\">// If a component is unmounted before pending changes apply, it will still<br/></span><span\n        style=\"color:#808080;\">    // be here, but we assume that it has cleared its _pendingCallbacks and<br/></span><span\n        style=\"color:#808080;\">    // that performUpdateIfNecessary is a noop.<br/></span><span\n        style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>component = dirtyComponents[i]<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">   </span><br/>    ReactReconciler.<span\n        style=\"color:#ffc66d;\">performUpdateIfNecessary</span>(<br/>      component<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">      </span>transaction.<span\n        style=\"color:#9876aa;\">reconcileTransaction</span><span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">      </span>updateBatchNumber<br/>    )<span style=\"color:#cc7832;\">;<br/></span><br/>  }<br/>}\n</pre>\n</div>\n<div>遍历dirtyComponent数组，对每个component实例调用performUpdateIfNecessary，</div>\n<div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span\n        style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * is set, update the component.<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span\n        style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n        style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction} transaction<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@internal<br/></span><span\n        style=\"color:#629755;font-weight:bold;font-style:italic;\"/><span\n        style=\"color:#629755;font-style:italic;\">*/<br/></span>performUpdateIfNecessary: <span\n        style=\"color:#cc7832;font-weight:bold;\">function</span>(transaction) {<br/>  <span\n        style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span\n        style=\"color:#9876aa;\">_pendingElement </span>!= <span style=\"color:#cc7832;font-weight:bold;\">null</span>) { //如果渲染的ReactElement发生变化更新渲染的ReactElement<br/>    ReactReconciler.<span\n        style=\"color:#ffc66d;\">receiveComponent</span>(<br/>      <span\n        style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span\n        style=\"color:#9876aa;\">_pendingElement</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">      </span>transaction<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">      </span><span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_context<br/></span><span\n        style=\"color:#9876aa;\">    </span>)<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span>} <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(<span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingStateQueue </span>!== <span\n        style=\"color:#cc7832;font-weight:bold;\">null </span>|| <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span\n        style=\"color:#9876aa;\">_pendingForceUpdate</span>) {//如果只是状态发生变化<br/>    <span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span\n        style=\"color:#9876aa;\">updateComponent</span>( //这里调用diff算法<br/>      transaction<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">      </span><span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span><span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">      </span><span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span><span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">      </span><span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_context</span><span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">      </span><span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_context<br/></span><span\n        style=\"color:#9876aa;\">    </span>)<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>    <span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>callbacks = <span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingCallbacks</span><span\n        style=\"color:#cc7832;\">; <br/></span><span style=\"color:#cc7832;\">    </span><span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingCallbacks </span>= <span\n        style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">    </span><span\n        style=\"color:#cc7832;font-weight:bold;\">if </span>(callbacks) {<br/>      <span\n        style=\"color:#cc7832;font-weight:bold;\">for </span>(<span style=\"color:#cc7832;font-weight:bold;\">var </span>j = <span\n        style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">; </span>j &lt; callbacks.<span style=\"color:#9876aa;\">length</span><span\n        style=\"color:#cc7832;\">; </span>j++) {<br/>        transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span\n        style=\"color:#ffc66d;\">enqueue</span>(<br/>          callbacks[j]<span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">          </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span\n        style=\"color:#ffc66d;\">getPublicInstance</span>()<br/>        )<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">      </span>}<br/>    }<br/>    <span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_updateBatchNumber </span>= <span\n        style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span>}<br/>}<span style=\"color:#cc7832;\">,<br/></span>\n</pre>\n</div>\n<div><br/></div>\n<div>所以整个setState执行流程参见下图：</div>\n<div><br/></div>\n<div><img\n        src=\"/images/2017-02-14/xxx.png\"\n        height=\"656\" width=\"614\"/><br/></div>\n<div>diff算法部分源码在（src/renderers/shared/stack/reconciler/ReactMultiChild.js）</div>\n<div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span\n        style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span\n        style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n        style=\"color:#629755;font-style:italic;\">{?object} nextNestedChildrenElements Nested child element maps.<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n        style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction} transaction<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@final<br/></span><span\n        style=\"color:#629755;font-weight:bold;font-style:italic;\"/><span\n        style=\"color:#629755;font-style:italic;\">* </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@protected<br/></span><span\n        style=\"color:#629755;font-weight:bold;font-style:italic;\"/><span\n        style=\"color:#629755;font-style:italic;\">*/<br/></span><span style=\"color:#ffc66d;\">_updateChildren</span>: <span\n        style=\"color:#cc7832;font-weight:bold;\">function</span>(nextNestedChildrenElements<span\n        style=\"color:#cc7832;\">, </span>transaction<span style=\"color:#cc7832;\">, </span>context) {<br/>  <span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>prevChildren = <span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_renderedChildren</span><span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>removedNodes = {}<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>mountImages = []<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>nextChildren = <span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_reconcilerUpdateChildren</span>(  &lt;————— 1 下面详细介绍（注意mountImages和removedNode都是在这个函数赋值的）<br/>    prevChildren<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>nextNestedChildrenElements<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>mountImages<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>removedNodes<span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">    </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>context<br/>  )<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span\n        style=\"color:#cc7832;font-weight:bold;\">if </span>(!nextChildren &amp;&amp; !prevChildren) {<br/>    <span\n        style=\"color:#cc7832;font-weight:bold;\">return</span><span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span>}<br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>updates = <span\n        style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>name<span\n        style=\"color:#cc7832;\">;//以下是diff算法部分，讲解参见博客链接<br/></span><span style=\"color:#cc7832;\">  </span><span\n        style=\"color:#808080;\">// `nextIndex` will increment for each child in `nextChildren`, but<br/></span><span\n        style=\"color:#808080;\">  // `lastIndex` will be the last index visited in `prevChildren`.<br/></span><span\n        style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextIndex = <span\n        style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>lastIndex = <span style=\"color:#6897bb;\">0</span><span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#808080;\">// `nextMountIndex` will increment for each newly mounted child.<br/></span><span\n        style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextMountIndex = <span\n        style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>lastPlacedNode = <span\n        style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(name <span\n        style=\"color:#cc7832;font-weight:bold;\">in </span>nextChildren) {<br/>    <span\n        style=\"color:#cc7832;font-weight:bold;\">if </span>(!nextChildren.<span style=\"color:#ffc66d;\">hasOwnProperty</span>(name)) {<br/>      <span\n        style=\"color:#cc7832;font-weight:bold;\">continue</span><span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">    </span>}<br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>prevChild = prevChildren &amp;&amp; prevChildren[name]<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>nextChild = nextChildren[name]<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span\n        style=\"color:#cc7832;font-weight:bold;\">if </span>(prevChild === nextChild) {<br/>      updates = <span\n        style=\"color:#ffc66d;\">enqueue</span>(<br/>        updates<span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span\n        style=\"color:#ffc66d;\">moveChild</span>(prevChild<span style=\"color:#cc7832;\">, </span>lastPlacedNode<span\n        style=\"color:#cc7832;\">, </span>nextIndex<span style=\"color:#cc7832;\">, </span>lastIndex)<br/>      )<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>lastIndex = <span\n        style=\"color:#9876aa;\">Math</span>.<span style=\"color:#ffc66d;\">max</span>(prevChild.<span style=\"color:#9876aa;\">_mountIndex</span><span\n        style=\"color:#cc7832;\">, </span>lastIndex)<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">      </span>prevChild.<span style=\"color:#9876aa;\">_mountIndex </span>= nextIndex<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>} <span\n        style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>      <span\n        style=\"color:#cc7832;font-weight:bold;\">if </span>(prevChild) {<br/>        <span style=\"color:#808080;\">// Update `lastIndex` before `_mountIndex` gets unset by unmounting.<br/></span><span\n        style=\"color:#808080;\">        </span>lastIndex = <span style=\"color:#9876aa;\">Math</span>.<span\n        style=\"color:#ffc66d;\">max</span>(prevChild.<span style=\"color:#9876aa;\">_mountIndex</span><span\n        style=\"color:#cc7832;\">, </span>lastIndex)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span\n        style=\"color:#808080;\">// The `removedNodes` loop below will actually remove the child.<br/></span><span\n        style=\"color:#808080;\">      </span>}<br/>      <span style=\"color:#808080;\">// The child must be instantiated before it's mounted.<br/></span><span\n        style=\"color:#808080;\">      </span>updates = <span style=\"color:#ffc66d;\">enqueue</span>(<br/>        updates<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span><span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_mountChildAtIndex</span>(<br/>          nextChild<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">          </span>mountImages[nextMountIndex]<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">          </span>lastPlacedNode<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">          </span>nextIndex<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">          </span>transaction<span\n        style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">          </span>context<br/>        )<br/>      )<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>nextMountIndex++<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/>    nextIndex++<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>lastPlacedNode = ReactReconciler.<span\n        style=\"color:#ffc66d;\">getHostNode</span>(nextChild)<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span>}<br/>  <span\n        style=\"color:#808080;\">// Remove children that are no longer present.<br/></span><span\n        style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(name <span\n        style=\"color:#cc7832;font-weight:bold;\">in </span>removedNodes) {<br/>    <span\n        style=\"color:#cc7832;font-weight:bold;\">if </span>(removedNodes.<span style=\"color:#ffc66d;\">hasOwnProperty</span>(name)) {<br/>      updates = <span\n        style=\"color:#ffc66d;\">enqueue</span>(<br/>        updates<span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span\n        style=\"color:#ffc66d;\">_unmountChild</span>(prevChildren[name]<span style=\"color:#cc7832;\">, </span>removedNodes[name])<br/>      )<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/>  }<br/>  <span\n        style=\"color:#cc7832;font-weight:bold;\">if </span>(updates) {<br/>    <span style=\"color:#ffc66d;\">processQueue</span>(<span\n        style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>updates)<span\n        style=\"color:#cc7832;\">;//注意这里将上面比较后缓存的变更进行处理更新dom树，使所有变更在浏览器中得以展现，代码参见（src/<font\n        style=\"font-size: 12px; color: rgb(204, 120, 50); font-family: Menlo;\">renderers/dom/stack/client/DOMChildrenOperations.js</font>）的processUpdate<br/></span><span\n        style=\"color:#cc7832;\">  </span>}<br/>  <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span\n        style=\"color:#9876aa;\">_renderedChildren </span>= nextChildren<span style=\"color:#cc7832;\">;<br/></span><br/>}<span\n        style=\"color:#cc7832;\">,</span>\n</pre>\n    React在执行diff算法之前先做了两件事情：\n</div>\n<div>\n    <ol start=\"1\">\n        <li>将新的ReactElement结构树（可能包含很多层）’拍平’，以{ key：xx，value：element}方式返回</li>\n        <li>遍历上一步生成的key——ReactElement映射和原有的key——ReactComponent实例映射做比较，新建或删除ReactComponent。</li>\n    </ol>\n</div>\n<div>经过上面两个步骤生成了新的key——ReactComponent实例，和原有的key——ReactComponent映射进行diff算法。</div>\n<div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span\n        style=\"color:#ffc66d;\">_reconcilerUpdateChildren</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br/>  prevChildren<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>nextNestedChildrenElements<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>mountImages<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>removedNodes<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>transaction<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>context<br/>) {<br/>  <span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>nextChildren<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>selfDebugID = <span\n        style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">;<br/></span> //第一步：调用（src/<font\n        style=\"font-size: 12px; color: rgb(169, 183, 198); font-family: Menlo;\">shared/utils/traverseAllChildren.js</font>）对子节点进行深度优先遍历，同时根据子节点所在的层级按照一定命名规则生成唯一key存在object中，这样虽然所有树状结构的子节点被’拍平’存储，但是能保证在diff操作的时候同一层级的子节点进行比较（即连个map中key相同的子节点一定在同一层）<br/>  nextChildren = flattenChildren(nextNestedChildrenElements<span\n        style=\"color:#cc7832;\">, </span>selfDebugID)<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span>ReactChildReconciler.<span style=\"color:#ffc66d;\">updateChildren</span>( //第二步：参见下面详细介绍<br/>    prevChildren<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>nextChildren<span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">    </span>mountImages<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>removedNodes<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>transaction<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span><span\n        style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span\n        style=\"color:#9876aa;\">_hostContainerInfo</span><span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">    </span>context<span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">    </span>selfDebugID<br/>  )<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">return </span>nextChildren<span\n        style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">,</span>\n</pre>\n    <div>\n\t\t<pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span\n                style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Updates the rendered children and returns a new set of children.<br/></span><span\n                style=\"color:#629755;font-style:italic;\"> *<br/></span><span\n                style=\"color:#629755;font-style:italic;\"> * </span><span\n                style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n                style=\"color:#629755;font-style:italic;\">{?object} prevChildren Previously initialized set of children.<br/></span><span\n                style=\"color:#629755;font-style:italic;\"> * </span><span\n                style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n                style=\"color:#629755;font-style:italic;\">{?object} nextChildren Flat child element maps.<br/></span><span\n                style=\"color:#629755;font-style:italic;\"> * </span><span\n                style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n                style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction} transaction<br/></span><span\n                style=\"color:#629755;font-style:italic;\"> * </span><span\n                style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n                style=\"color:#629755;font-style:italic;\">{object} context<br/></span><span\n                style=\"color:#629755;font-style:italic;\"> * </span><span\n                style=\"color:#629755;font-weight:bold;font-style:italic;\">@return </span><span\n                style=\"color:#629755;font-style:italic;\">{?object} A new set of child instances.<br/></span><span\n                style=\"color:#629755;font-style:italic;\"> * </span><span\n                style=\"color:#629755;font-weight:bold;font-style:italic;\">@internal<br/></span><span\n                style=\"color:#629755;font-weight:bold;font-style:italic;\"/><span style=\"color:#629755;font-style:italic;\">*/<br/></span><span\n                style=\"color:#ffc66d;\">updateChildren</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br/>  prevChildren<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>nextChildren<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>mountImages<span style=\"color:#cc7832;\">,<br/></span><span\n                style=\"color:#cc7832;\">  </span>removedNodes<span style=\"color:#cc7832;\">,<br/></span><span\n                style=\"color:#cc7832;\">  </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>hostParent<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>hostContainerInfo<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>context<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>selfDebugID <span\n                style=\"color:#808080;\">// 0 in production and for roots<br/></span>) {<br/>  <span style=\"color:#808080;\">// We currently don't have a way to track moves here but if we use iterators<br/></span><span\n                style=\"color:#808080;\">  // instead of for..in we can zip the iterators and check if an item has<br/></span><span\n                style=\"color:#808080;\">  // moved.<br/></span><span style=\"color:#808080;\">  // </span><span\n                style=\"color:#a8c023;font-style:italic;\">TODO: If nothing has changed, return the prevChildren object so that we<br/></span><span\n                style=\"color:#a8c023;font-style:italic;\">  </span><span style=\"color:#808080;\">// can quickly bailout if nothing has changed.<br/></span><span\n                style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(!nextChildren &amp;&amp; !prevChildren) {<br/>    <span\n                style=\"color:#cc7832;font-weight:bold;\">return</span><span style=\"color:#cc7832;\">;<br/></span><span\n                style=\"color:#cc7832;\">  </span>}<br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>name<span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span\n                style=\"color:#cc7832;font-weight:bold;\">var </span>prevChild<span style=\"color:#cc7832;\">;<br/></span><span\n                style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(name <span\n                style=\"color:#cc7832;font-weight:bold;\">in </span>nextChildren) {<br/>    <span\n                style=\"color:#cc7832;font-weight:bold;\">if </span>(!nextChildren.<span\n                style=\"color:#ffc66d;\">hasOwnProperty</span>(name)) {<br/>      <span style=\"color:#cc7832;font-weight:bold;\">continue</span><span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/>    prevChild = prevChildren &amp;&amp; prevChildren[name]<span\n                style=\"color:#cc7832;\">; //如果旧映射里找到对应的ReactComponent实例<br/></span><span style=\"color:#cc7832;\">    </span><span\n                style=\"color:#cc7832;font-weight:bold;\">var </span>prevElement = prevChild &amp;&amp; prevChild.<span\n                style=\"color:#9876aa;\">_currentElement</span><span style=\"color:#cc7832;\">;<br/></span><span\n                style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextElement = nextChildren[name]<span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span\n                style=\"color:#cc7832;font-weight:bold;\">if </span>(prevChild != <span\n                style=\"color:#cc7832;font-weight:bold;\">null </span>&amp;&amp;<br/>        shouldUpdateReactComponent(prevElement<span\n                style=\"color:#cc7832;\">, </span>nextElement)) {//取出实例中的ReactElement与新的做比较，如果类型相同调用实例更新函数<br/>      ReactReconciler.<span\n                style=\"color:#ffc66d;\">receiveComponent</span>(<br/>        prevChild<span style=\"color:#cc7832;\">, </span>nextElement<span\n                style=\"color:#cc7832;\">, </span>transaction<span style=\"color:#cc7832;\">, </span>context<br/>      )<span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>nextChildren[name] = prevChild<span\n                style=\"color:#cc7832;\">; <br/></span><span style=\"color:#cc7832;\">    </span>} <span\n                style=\"color:#cc7832;font-weight:bold;\">else </span>{ //否则清理旧的ReactComponent实例，加入到removeNodes映射中，初始化新实例加入映射中，调用新实例的mountComponent获得对应的渲染markup加入到<font\n                style=\"font-family: Menlo; background-color: rgb(43, 43, 43); font-size: 12px; color: rgb(169, 183, 198);\">mountImages 。<font\n                style=\"font-family: Menlo; background-color: rgb(43, 43, 43); font-size: 12px; color: rgb(169, 183, 198);\">removeNodes映射和mountImage映射在diff算法执行过程中加入到更新队列然后批量更新dom。</font></font><br/>      <span\n                style=\"color:#cc7832;font-weight:bold;\">if </span>(<br/>        !ReactFeatureFlags.<span style=\"color:#9876aa;\">prepareNewChildrenBeforeUnmountInStack </span>&amp;&amp;<br/>        prevChild<br/>      ) {<br/>        removedNodes[name] = ReactReconciler.<span\n                style=\"color:#ffc66d;\">getHostNode</span>(prevChild)<span style=\"color:#cc7832;\">;<br/></span><span\n                style=\"color:#cc7832;\">        </span>ReactReconciler.<span style=\"color:#ffc66d;\">unmountComponent</span>(<br/>          prevChild<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">          </span><span\n                style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">, </span><span\n                style=\"color:#808080;\">/* safely */<br/></span><span style=\"color:#808080;\">          </span><span\n                style=\"color:#cc7832;font-weight:bold;\">false </span><span\n                style=\"color:#808080;\">/* skipLifecycle */<br/></span><span style=\"color:#808080;\">        </span>)<span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>}<br/>      <span\n                style=\"color:#808080;\">// The child must be instantiated before it's mounted.<br/></span><span\n                style=\"color:#808080;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextChildInstance = instantiateReactComponent(nextElement<span\n                style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">true</span>)<span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>nextChildren[name] = nextChildInstance<span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span><span style=\"color:#808080;\">// Creating mount image now ensures refs are resolved in right order<br/></span><span\n                style=\"color:#808080;\">      // (see <a href=\"https://github.com/facebook/react/pull/7101\">https://github.com/facebook/react/pull/7101</a> for explanation).<br/></span><span\n                style=\"color:#808080;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextChildMountImage = ReactReconciler.<span\n                style=\"color:#ffc66d;\">mountComponent</span>(<br/>        nextChildInstance<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>transaction<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>hostParent<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>hostContainerInfo<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>context<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>selfDebugID<br/>      )<span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>mountImages.<span\n                style=\"color:#ffc66d;\">push</span>(nextChildMountImage)<span style=\"color:#cc7832;\">;<br/></span><span\n                style=\"color:#cc7832;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(<br/>        ReactFeatureFlags.<span\n                style=\"color:#9876aa;\">prepareNewChildrenBeforeUnmountInStack </span>&amp;&amp;<br/>        prevChild<br/>      ) {<br/>        removedNodes[name] = ReactReconciler.<span\n                style=\"color:#ffc66d;\">getHostNode</span>(prevChild)<span style=\"color:#cc7832;\">;<br/></span><span\n                style=\"color:#cc7832;\">        </span>ReactReconciler.<span style=\"color:#ffc66d;\">unmountComponent</span>(<br/>          prevChild<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">          </span><span\n                style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">, </span><span\n                style=\"color:#808080;\">/* safely */<br/></span><span style=\"color:#808080;\">          </span><span\n                style=\"color:#cc7832;font-weight:bold;\">false </span><span\n                style=\"color:#808080;\">/* skipLifecycle */<br/></span><span style=\"color:#808080;\">        </span>)<span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>}<br/>    }<br/>  }<br/>  <span\n                style=\"color:#808080;\">// Unmount children that are no longer present.<br/></span><span\n                style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(name <span\n                style=\"color:#cc7832;font-weight:bold;\">in </span>prevChildren) {<br/>    <span\n                style=\"color:#cc7832;font-weight:bold;\">if </span>(prevChildren.<span style=\"color:#ffc66d;\">hasOwnProperty</span>(name) &amp;&amp;<br/>        !(nextChildren &amp;&amp; nextChildren.<span\n                style=\"color:#ffc66d;\">hasOwnProperty</span>(name))) {<br/>      prevChild = prevChildren[name]<span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>removedNodes[name] = ReactReconciler.<span\n                style=\"color:#ffc66d;\">getHostNode</span>(prevChild)<span style=\"color:#cc7832;\">;<br/></span><span\n                style=\"color:#cc7832;\">      </span>ReactReconciler.<span style=\"color:#ffc66d;\">unmountComponent</span>(<br/>        prevChild<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span><span\n                style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">, </span><span\n                style=\"color:#808080;\">/* safely */<br/></span><span style=\"color:#808080;\">        </span><span\n                style=\"color:#cc7832;font-weight:bold;\">false </span><span\n                style=\"color:#808080;\">/* skipLifecycle */<br/></span><span style=\"color:#808080;\">      </span>)<span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/>  }<br/>}<span\n                style=\"color:#cc7832;\">,</span></pre>\n    </div>\n    <div><br/></div>\n    <div>diff算法原理详解参见：<br/></div>\n</div>\n<div><a href=\"https://zhuanlan.zhihu.com/p/20346379?refer=purerender\">https://zhuanlan.zhihu.com/p/20346379?refer=purerender</a> 或《深入React技术栈》3.5章（可以找我借）讲得很详细。<br/>\n</div>\n<div><br/></div>\n"},{"layout":"post","title":"react源码学习——Virtual Dom和渲染、更新原理s","date":"2017-01-20T00:43:59.000Z","author":"Lily","_content":"\n<div><span style=\"color: rgb(68, 68, 68); font-family: 'Helvetica Neue', Helvetica, 'Lucida Grande', Arial, 'Hiragino Sans GB', 微软雅黑, 'WenQuanYi Micro Hei', STHeiti, SimSun, sans-serif; font-size: 14px; orphans: 2; widows: 2;\">前端开发过程中，更新页面的数据、样式等操作都要操作dom，而复杂的dom操作通常是产品性能瓶颈原因之一，为此React引入了Virtual Dom的概念，Virtual Dom其实是用js实现了一套dom api，包括虚拟dom模型、生命周期管理、diff算法等。React会将传入的JSX片段转化成虚拟dom节点，当数据更新时，通过diff算法找到要变更的dom节点，并只对变化的部分进行实际的浏览器dom更新，而不是重新渲染整个dom树。下面我们结合组件渲染流程结合源码介绍一下React如何创建虚拟节点，以及如何渲染、更新节点的整个流程。</span><br/></div><div><span style=\"color: rgb(68, 68, 68); font-family: 'Helvetica Neue', Helvetica, 'Lucida Grande', Arial, 'Hiragino Sans GB', 微软雅黑, 'WenQuanYi Micro Hei', STHeiti, SimSun, sans-serif; font-size: 14px; orphans: 2; widows: 2;\">——以下代码是React v15.4.2版本——<br/></span></div><div>React项目渲染组件的方法是：ReactDom.render，将父组件连带所有包含在内的子组件渲染出来。render方法最终调用了 src/renderers/dom/stack/client/ReactMount.js 的render方法。</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Renders a React component into the DOM in the supplied `container`.<br/></span><span style=\"color:#629755;font-style:italic;\"> * See <a href=\"https://facebook.github.io/react/docs/react-dom.html#render\">https://facebook.github.io/react/docs/react-dom.html#render</a><br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * If the React component was previously rendered into `container`, this will<br/></span><span style=\"color:#629755;font-style:italic;\"> * perform an update on it and only mutate the DOM as necessary to reflect the<br/></span><span style=\"color:#629755;font-style:italic;\"> * latest React component.<br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactElement} nextElement Component element to render.<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{DOMElement} container DOM element to render into.<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?function} callback function triggered on completion<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@return </span><span style=\"color:#629755;font-style:italic;\">{ReactComponent} Component instance rendered in `container`.<br/></span><span style=\"color:#629755;font-style:italic;\"> */<br/></span><span style=\"color:#ffc66d;\">render</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(nextElement<span style=\"color:#cc7832;\">, </span>container<span style=\"color:#cc7832;\">, </span>callback) {<br/>  <span style=\"color:#cc7832;font-weight:bold;\">return </span>ReactMount.<span style=\"color:#ffc66d;\">_renderSubtreeIntoContainer</span>(<span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">, </span>nextElement<span style=\"color:#cc7832;\">, </span>container<span style=\"color:#cc7832;\">, </span>callback)<span style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">,</span></pre></div><div>注意这里第一个参数是ReactElement类型，通常为了可读性和开发效率我们传入JSX写的结构，最终会编译转换成调用React的createElement方法生成虚拟元素ReactElement结构传入render中。这里我们先看一下React.createElement做了哪些事情（src/isomorphic/classic/element/ReactElement.js）</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><br/><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Create and return a new ReactElement of the given type.<br/></span><span style=\"color:#629755;font-style:italic;\"> * See <a href=\"https://facebook.github.io/react/docs/react-api.html#createelement\">https://facebook.github.io/react/docs/react-api.html#createelement</a><br/></span><span style=\"color:#629755;font-style:italic;\"> */<br/></span><span style=\"color:#ffc66d;\">ReactElement</span>.<span style=\"color:#ffc66d;\">createElement </span>= <span style=\"color:#cc7832;font-weight:bold;\">function</span>(type<span style=\"color:#cc7832;\">, </span>config<span style=\"color:#cc7832;\">, </span>children) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>propName<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// Reserved names are extracted<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>props = {}<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>key = <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>ref = <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>self = <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>source = <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(config != <span style=\"color:#cc7832;font-weight:bold;\">null</span>) {<br/>        <span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#ffc66d;\">hasValidRef</span>(config)) {<br/>            ref = config.<span style=\"color:#9876aa;\">ref</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/>        <span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#ffc66d;\">hasValidKey</span>(config)) {<br/>            key = <span style=\"color:#6a8759;\">'' </span>+ config.key<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/><br/>        self = config.<span style=\"color:#9876aa;\">__self </span>=== <span style=\"color:#9876aa;\">undefined </span>? <span style=\"color:#cc7832;font-weight:bold;\">null </span>: config.<span style=\"color:#9876aa;\">__self</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>source = config.<span style=\"color:#9876aa;\">__source </span>=== <span style=\"color:#9876aa;\">undefined </span>? <span style=\"color:#cc7832;font-weight:bold;\">null </span>: config.<span style=\"color:#9876aa;\">__source</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">// config中的内容复制到props<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(propName <span style=\"color:#cc7832;font-weight:bold;\">in </span>config) {<br/>            <span style=\"color:#cc7832;font-weight:bold;\">if </span>(hasOwnProperty.<span style=\"color:#ffc66d;\">call</span>(config<span style=\"color:#cc7832;\">, </span>propName) &amp;&amp;<br/>                !RESERVED_PROPS.<span style=\"color:#ffc66d;\">hasOwnProperty</span>(propName)) {<br/>                props[propName] = config[propName]<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span>}<br/>        }<br/>    }<br/><br/>    <span style=\"color:#808080;\">//将第三个及之后的参数作为children赋值给props的children属性<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>childrenLength = arguments.<span style=\"color:#9876aa;\">length </span>- <span style=\"color:#6897bb;\">2</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(childrenLength === <span style=\"color:#6897bb;\">1</span>) {<br/>        props.<span style=\"color:#9876aa;\">children </span>= children<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(childrenLength &gt; <span style=\"color:#6897bb;\">1</span>) {<br/>        <span style=\"color:#cc7832;font-weight:bold;\">var </span>childArray = Array(childrenLength)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(<span style=\"color:#cc7832;font-weight:bold;\">var </span>i = <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">; </span>i &lt; childrenLength<span style=\"color:#cc7832;\">; </span>i++) {<br/>            childArray[i] = arguments[i + <span style=\"color:#6897bb;\">2</span>]<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/><br/>        props.<span style=\"color:#9876aa;\">children </span>= childArray<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/><br/>    <span style=\"color:#808080;\">// 如果某个props为空且存在默认props，赋值<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(type &amp;&amp; type.<span style=\"color:#9876aa;font-style:italic;\">defaultProps</span>) {<br/>        <span style=\"color:#cc7832;font-weight:bold;\">var </span>defaultProps = type.<span style=\"color:#9876aa;font-style:italic;\">defaultProps</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(propName <span style=\"color:#cc7832;font-weight:bold;\">in </span>defaultProps) {<br/>            <span style=\"color:#cc7832;font-weight:bold;\">if </span>(props[propName] === <span style=\"color:#9876aa;\">undefined</span>) {<br/>                props[propName] = defaultProps[propName]<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span>}<br/>        }<br/>    }<br/><br/>    <span style=\"color:#cc7832;font-weight:bold;\">return </span><span style=\"color:#ffc66d;\">ReactElement</span>(<br/>        type<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>key<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>ref<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>self<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>source<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>ReactCurrentOwner.<span style=\"color:#9876aa;\">current</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>props<br/>    )<span style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">;</span>\n</pre></div><div><br/></div><div>下面结合源码详细讲解整个渲染的过程。</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#ffc66d;\">render</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(nextElement<span style=\"color:#cc7832;\">, </span>container<span style=\"color:#cc7832;\">, </span>callback) {<br/>  <span style=\"color:#cc7832;font-weight:bold;\">return </span>ReactMount.<span style=\"color:#ffc66d;\">_renderSubtreeIntoContainer</span>(<span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">, </span>nextElement<span style=\"color:#cc7832;\">, </span>container<span style=\"color:#cc7832;\">, </span>callback)<span style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">,</span>\n</pre>去掉各种检查后的代码如下：</div><div>思路：首先获得dom container里原有的ReactElement，如果存在则将实际需要渲染的ReactElement（上一步用<font style=\"font-family: Menlo; font-size: 12px; background-color: rgb(43, 43, 43); color: rgb(128, 128, 128);\">TopLevelWrapper</font>包裹的child）和新的ReactElement做比较（1），如果应该更新则更新组件（2），否则清空container内之前渲染的组件（3），生成新的根ReactComponent渲染到container中（4）。</div><div>主要流程图如下：<br/><img src=\"/images/2017-01-20/%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B%E5%9B%BE.png\" height=\"558\" width=\"650\"/><br/></div><div><pre style=\"background-color: rgb(43, 43, 43);\"><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">_renderSubtreeIntoContainer</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">: </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">function</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(parentComponent</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">, </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">nextElement</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">, </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">container</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">, </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">callback) {</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\"><br/></span><pre style=\"font-family: Menlo; font-size: 9pt; background-color: rgb(43, 43, 43);\"><span style=\"font-size: 9pt;\"><font><pre style=\"background-color: rgb(43, 43, 43); font-family: Menlo; font-size: 9pt;\">   <span style=\"color: rgb(128, 128, 128);\">//nextElement外包一层react定义的TopLevelWrapper用于屏蔽各类组件的差异记录一些变量，比如顶层组件的计数<br/></span><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">   var </span><font color=\"#a9b7c6\">nextWrappedElement = React.</font><span style=\"color: rgb(152, 118, 170);\">createElement</span><font color=\"#a9b7c6\">(<br/>     </font><span style=\"color: rgb(255, 198, 109);\">TopLevelWrapper</span><span style=\"color: rgb(204, 120, 50);\">,<br/></span><span style=\"color: rgb(204, 120, 50);\">     </span><font color=\"#a9b7c6\">{ </font><span style=\"color: rgb(152, 118, 170);\">child</span><font color=\"#a9b7c6\">: nextElement }<br/>   )</font>;</pre></font></span></pre><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">nextContext = getContextForSubtree(parentComponent)</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;//本次调用返回null<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">prevComponent = </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">getTopLevelWrapperInContainer</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(container)</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\"><br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">if </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(prevComponent) {<br/>    </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">prevWrappedElement = prevComponent.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_currentElement</span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">prevElement = prevWrappedElement.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">props</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">.child</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">if </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(shouldUpdateReactComponent(prevElement</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">, </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">nextElement)) {      &lt;——— 1<br/>      </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">publicInst = prevComponent.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_renderedComponent</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">getPublicInstance</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">()</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">      </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">updatedCallback = callback &amp;&amp; </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">function</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">() {<br/>        callback.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">call</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(publicInst)</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">      </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">}</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">      </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">ReactMount.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">_updateRootComponent</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(   &lt;———— 2<br/>        prevComponent</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">        </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">nextWrappedElement</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">        </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">nextContext</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">        </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">container</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">        </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">updatedCallback<br/>      )</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">      </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">return </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">publicInst</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">} </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">else </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">{<br/>      ReactMount.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">unmountComponentAtNode</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(container)</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;  <font style=\"font-family: Menlo; background-color: rgb(43, 43, 43); font-size: 12px; color: rgb(169, 183, 198);\">&lt;———— 3</font><br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">}<br/>  }<br/><br/>  </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">reactRootElement = </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">getReactRootElementInContainer</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(container)</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;//获得container节点的第一个dom子节点<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">containerHasReactMarkup =<br/>    reactRootElement &amp;&amp; !!</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">internalGetID</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(reactRootElement)</font><font face=\"Menlo\" color=\"#cc7832\" size=\"2\">; //判断这个dom子节点是不是React渲染的（React渲染的会有会有一个‘data-reacted’的attribute属性）<br/></font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">containerHasNonRootReactChild = </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">hasNonRootReactChild</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(container)</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">; //判断container是否包含不是React根节点的React实例<br/></span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\"><br/>  </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font color=\"#a9b7c6\"><font face=\"Menlo\" size=\"2\">shouldReuseMarkup =           //这里不太明白什么情况会重用markup，因为在’3’已经把container中的dom清空了，欢迎讨论<br/>    containerHasReactMarkup &amp;&amp;<br/>    !prevComponent &amp;&amp;<br/>    !containerHasNonRootReactChild</font></font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">component = ReactMount.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">_renderNewRootComponent</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(   </font><font style=\"font-family: Menlo; font-size: 12px; color: rgb(169, 183, 198); background-color: rgb(43, 43, 43);\">&lt;———— 4</font><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\"><br/>    nextWrappedElement</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">container</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">shouldReuseMarkup</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">nextContext</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">callback<br/>  ).</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_renderedComponent</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">getPublicInstance</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">()</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">return </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">component</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">}</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br/></span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\"\n/></pre><br/></div><div>下面分别展开研究四个函数：</div><div><div><ol start=\"1\"><li>shouldUpdateReactComponent.js ( src/renderers/shared/shared/shouldUpdateReactComponent.js ）</li></ol>这里只做了简单的类型比较，如果父节点的类型不同，则即使子节点相同也不做递归比较，官方文档参见<a href=\"https://facebook.github.io/react/docs/reconciliation.html#elements-of-different-types\">这里</a>。<br/></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#cc7832;font-weight:bold;\">function </span><span style=\"color:#ffc66d;\">shouldUpdateReactComponent</span>(prevElement<span style=\"color:#cc7832;\">, </span>nextElement) {<br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>prevEmpty = prevElement === <span style=\"color:#cc7832;font-weight:bold;\">null </span>|| prevElement === <span style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextEmpty = nextElement === <span style=\"color:#cc7832;font-weight:bold;\">null </span>|| nextElement === <span style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(prevEmpty || nextEmpty) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">return </span>prevEmpty === nextEmpty<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>prevType = <span style=\"color:#cc7832;font-weight:bold;\">typeof </span>prevElement<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextType = <span style=\"color:#cc7832;font-weight:bold;\">typeof </span>nextElement<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(prevType === <span style=\"color:#6a8759;\">'string' </span>|| prevType === <span style=\"color:#6a8759;\">'number'</span>) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">return </span>(nextType === <span style=\"color:#6a8759;\">'string' </span>|| nextType === <span style=\"color:#6a8759;\">'number'</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>    <span style=\"color:#cc7832;font-weight:bold;\">return </span>(<br/>      nextType === <span style=\"color:#6a8759;\">'object' </span>&amp;&amp;<br/>      prevElement.<span style=\"color:#9876aa;\">type </span>=== nextElement.<span style=\"color:#9876aa;\">type </span>&amp;&amp;<br/>      prevElement.<span style=\"color:#9876aa;\">key </span>=== nextElement.<span style=\"color:#9876aa;\">key<br/></span><span style=\"color:#9876aa;\">    </span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/>}<br/>\n</pre></div></div><div><font style=\"font-size: 14px;\">  </font></div><div><font style=\"font-size: 14px;\">  2. <span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(69, 69, 69);\">ReactMount._updateRootComponent（  src/renderers/dom/stack/client/ReactMount.js ）</span><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(228, 175, 9);\"><br/>\n</span></font></div><div>最主要的两句：</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\">ReactUpdateQueue.<span style=\"color:#ffc66d;\">enqueueElementInternal</span>(prevComponent<span style=\"color:#cc7832;\">, </span>nextElement<span style=\"color:#cc7832;\">, </span>nextContext)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(callback) {<br/>  ReactUpdateQueue.<span style=\"color:#ffc66d;\">enqueueCallbackInternal</span>(prevComponent<span style=\"color:#cc7832;\">, </span>callback)<span style=\"color:#cc7832;\">;<br/></span>}\n</pre>这里调用了src/renderers/shared/stack/reconciler/ReactUpdateQueue.js 的两个函数，分别给ReactComponent实例添加属性，要渲染的ReactElemnt、初始化上下文和在渲染完成后执行的回掉函数队列，然后调用ReactUpdates.js (src/renderers/shared/stack/reconciler/ReactUpdates.js)的enqueueUpadate加入到更新队列中（更新策略下文将详细讲解）。</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#ffc66d;\">enqueueElementInternal</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(internalInstance<span style=\"color:#cc7832;\">, </span>nextElement<span style=\"color:#cc7832;\">, </span>nextContext) {<br/>  internalInstance.<span style=\"color:#9876aa;\">_pendingElement </span>= nextElement<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#808080;\">// </span><span style=\"color:#a8c023;font-style:italic;\">TODO: introduce _pendingContext instead of setting it directly.<br/></span><span style=\"color:#a8c023;font-style:italic;\">  </span>internalInstance.<span style=\"color:#9876aa;\">_context </span>= nextContext<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#ffc66d;\">enqueueUpdate</span>(internalInstance)<span style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">,</span>\n</pre></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#ffc66d;\">enqueueCallbackInternal</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(internalInstance<span style=\"color:#cc7832;\">, </span>callback) {<br/>  <span style=\"color:#cc7832;font-weight:bold;\">if </span>(internalInstance.<span style=\"color:#9876aa;\">_pendingCallbacks</span>) {<br/>    internalInstance.<span style=\"color:#9876aa;\">_pendingCallbacks</span>.<span style=\"color:#ffc66d;\">push</span>(callback)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>    internalInstance.<span style=\"color:#9876aa;\">_pendingCallbacks </span>= [callback]<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/>  <span style=\"color:#ffc66d;\">enqueueUpdate</span>(internalInstance)<span style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">,</span>\n</pre><br/></div><div> <font style=\"font-size: 14px;\"> 3.</font><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(69, 69, 69);\"><font style=\"font-size: 14px;\">ReactMount.unmountComponentAtNode</font></span></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Unmounts and destroys the React component rendered in the `container`.<br/></span><span style=\"color:#629755;font-style:italic;\"> * See <a href=\"https://facebook.github.io/react/docs/react-dom.html#unmountcomponentatnode\">https://facebook.github.io/react/docs/react-dom.html#unmountcomponentatnode</a><br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{DOMElement} container DOM element containing a React component.<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@return </span><span style=\"color:#629755;font-style:italic;\">{boolean} True if a component was found in and unmounted from<br/></span><span style=\"color:#629755;font-style:italic;\"> *                   `container`<br/></span><span style=\"color:#629755;font-style:italic;\"> */<br/></span><span style=\"color:#ffc66d;\">unmountComponentAtNode</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(container) {<br/><br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>prevComponent = <span style=\"color:#ffc66d;\">getTopLevelWrapperInContainer</span>(container)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(!prevComponent) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">return false</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/>  <span style=\"color:#cc7832;font-weight:bold;\">delete </span>instancesByReactRootID[prevComponent.<span style=\"color:#9876aa;\">_instance</span>.rootID]<span style=\"color:#cc7832;\">;//devtools会用到的映射，这里可以先忽略<br/></span><span style=\"color:#cc7832;\">  </span>ReactUpdates.<span style=\"color:#ffc66d;\">batchedUpdates</span>(<br/>    <span style=\"color:#ffc66d;\">unmountComponentFromNode</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>prevComponent<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>container<br/>  )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">return true</span><span style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">,</span>\n</pre>注意这里也调用ReactUpdates.js (src/renderers/shared/stack/reconciler/ReactUpdates.js)类的函数batchedUpadates更新组件（更新策略下文将详细讲解），传入三个参数，第一个参数作为更新策略执行过程中调用的函数，后两个作为参数，这里要执行的函数是：</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#cc7832;font-weight:bold;\">function </span><span style=\"color:#ffc66d;\">unmountComponentFromNode</span>(instance<span style=\"color:#cc7832;\">, </span>container) {<br/>  //这个函数主要作用是：1.去掉组件中的ref引用，调用组件的unmountComponent函数，这里主要有三类组件文本组件、html标签对应的组件和自定义组件，每种对应的unmountComponent实现方式不同，主要做些清理React内部用到的缓存，组件上绑定的事件之类的工作，具体参见下文。<br/>  ReactReconciler.<span style=\"color:#ffc66d;\">unmountComponent</span>(<br/>    instance<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">false </span><span style=\"color:#808080;\">/* safely */</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">false </span><span style=\"color:#808080;\">/* skipLifecycle */<br/></span><span style=\"color:#808080;\">  </span>)<span style=\"color:#cc7832;\">;<br/></span><br/>  <span style=\"color:#cc7832;font-weight:bold;\">if </span>(container.nodeType === DOC_NODE_TYPE) {<br/>    container = container.documentElement<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><br/>  <span style=\"color:#808080;\">//可以看到这里循环移除了container节点中的全部dom元素，有很多方法可以实现，这里有个有趣的效率对比试验： <a href=\"http://jsperf.com/emptying-a-node\">http://jsperf.com/emptying-a-node</a><br/></span><span style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">while </span>(container.lastChild) {<br/>    container.removeChild(container.lastChild)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><span style=\"background-color:#344134;\">}</span>\n</pre><br/></div><div><ol start=\"4\"><li><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(69, 69, 69);\"><font style=\"font-size: 14px;\">ReactMount._renderNewRootComponent</font></span></li></ol><div><font face=\"Helvetica\" color=\"#454545\">先ReactElement初始<font style=\"font-size: 14px;\">化ReactComponent实例（1），这里可能是自定义组件</font><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(69, 69, 69);\"><font style=\"font-size: 14px;\">ReactCompositeComponent，文本元素对应的ReactDOMTextComponent和浏览器基本元素对应的ReactDOMComponent。然后调用更新策略将组件渲染到container中，以及做一些比如ref绑定等初始化工作（2）。</font><br/>\n</span></font></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#ffc66d;\">_renderNewRootComponent</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br/>  nextElement<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>container<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>shouldReuseMarkup<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>context<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>callback<br/>) {<br/> //<span style=\"color: rgb(98, 151, 85); font-style: italic; font-size: 9pt;\">Listens to window scroll and resize events. We cache scroll values so that </span><span style=\"color: rgb(98, 151, 85); font-style: italic; font-size: 9pt;\">application code can access them without triggering reflows.这里先不做分析</span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span>ReactBrowserEventEmitter.<span style=\"color:#ffc66d;\">ensureScrollValueMonitoring</span>()<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>componentInstance = instantiateReactComponent(nextElement<span style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">false</span>)<span style=\"color:#cc7832;\">; &lt;——— 1<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(callback) {<br/>    componentInstance.<span style=\"color:#9876aa;\">_pendingCallbacks </span>= [<span style=\"color:#cc7832;font-weight:bold;\">function</span>() { //初始化render完成后调用的回掉函数队列<br/>      callback.<span style=\"color:#ffc66d;\">call</span>(componentInstance.<span style=\"color:#9876aa;\">_renderedComponent</span>.<span style=\"color:#ffc66d;\">getPublicInstance</span>())<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}]<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><br/>  <span style=\"color:#808080;\">// The initial render is synchronous but any updates that happen during<br/></span><span style=\"color:#808080;\">  // rendering, in componentWillMount or componentDidMount, will be batched<br/></span><span style=\"color:#808080;\">  // according to the current batching strategy.<br/></span><span style=\"color:#808080;\"><br/></span><span style=\"color:#808080;\">  </span>ReactUpdates.<span style=\"color:#ffc66d;\">batchedUpdates</span>(  &lt;———— 2<br/>    <span style=\"color:#ffc66d;\">batchedMountComponentIntoNode</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>componentInstance<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>container<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>shouldReuseMarkup<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>context<br/>  )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>wrapperID = componentInstance.<span style=\"color:#9876aa;\">_instance</span>.rootID<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>instancesByReactRootID[wrapperID] = componentInstance<span style=\"color:#cc7832;\">; <font style=\"font-family: Menlo; font-size: 12px; background-color: rgb(43, 43, 43); color: rgb(204, 120, 50);\">//devtools会用到的映射，先忽略</font><br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">return </span>componentInstance<span style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">,</span>\n</pre><br/></div></div><div>下面分别展开讲解。</div><div><div><ol start=\"1\"><li><font style=\"font-size: 14px;\"> </font><font><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(69, 69, 69);\"><font><font style=\"font-size: 14px;\">instantiateReactComponent（src/<font style=\"color: rgb(69, 69, 69); font-family: Helvetica;\">renderers/shared/stack/reconciler/instantiateReactComponent.js</font>） 初始化组件实例，这里用到了工厂模式，根据传入的参数‘生产’对应的React Component实例。<span style=\"color: rgb(51, 51, 51); font-family: -apple-system, 'PingFang SC', 'Hiragino Sans GB', Arial, 'Microsoft YaHei', 'Helvetica Neue', sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); float: none;\">分别实例化</span><code style=\"box-sizing: border-box; outline: none; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 0.2em 0.4em; word-break: break-word; color: rgb(78, 89, 128); background-color: rgb(248, 248, 248); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">ReactDOMTextComponent</code><span style=\"color: rgb(51, 51, 51); font-family: -apple-system, 'PingFang SC', 'Hiragino Sans GB', Arial, 'Microsoft YaHei', 'Helvetica Neue', sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; float: none;\">, </span><code style=\"box-sizing: border-box; outline: none; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 0.2em 0.4em; word-break: break-word; color: rgb(78, 89, 128); background-color: rgb(248, 248, 248); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">ReactDOMComponent</code><span style=\"color: rgb(51, 51, 51); font-family: -apple-system, 'PingFang SC', 'Hiragino Sans GB', Arial, 'Microsoft YaHei', 'Helvetica Neue', sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); float: none;\">, </span><code style=\"box-sizing: border-box; outline: none; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 0.2em 0.4em; word-break: break-word; color: rgb(78, 89, 128); background-color: rgb(248, 248, 248); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">ReactCompositeComponent</code><span style=\"color: rgb(51, 51, 51); font-family: -apple-system, 'PingFang SC', 'Hiragino Sans GB', Arial, 'Microsoft YaHei', 'Helvetica Neue', sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; float: none;\">类。这些类用来管理</span><code style=\"box-sizing: border-box; outline: none; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 0.2em 0.4em; word-break: break-word; color: rgb(78, 89, 128); background-color: rgb(248, 248, 248); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">ReactElement</code><span style=\"color: rgb(51, 51, 51); font-family: -apple-system, 'PingFang SC', 'Hiragino Sans GB', Arial, 'Microsoft YaHei', 'Helvetica Neue', sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; float: none;\">,负责将不同的</span><code style=\"box-sizing: border-box; outline: none; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 0.2em 0.4em; word-break: break-word; color: rgb(78, 89, 128); background-color: rgb(248, 248, 248); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">ReactElement</code><span style=\"color: rgb(51, 51, 51); font-family: -apple-system, 'PingFang SC', 'Hiragino Sans GB', Arial, 'Microsoft YaHei', 'Helvetica Neue', sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; float: none;\">转化成DOM(通过mountComponent方法),负责更新DOM(通过receiveComponent方法，updateComponent方法，下面详细介绍)等。</span></font></font></span></font></li></ol><div style=\"text-align: center; \"><img src=\"/images/2017-01-20/%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B%E5%9B%BE%20(1).png\" height=\"251\" width=\"554\"/><br/></div><div><font face=\"Helvetica\" color=\"#454545\"/></div></div></div><div><font face=\"Helvetica\" color=\"#454545\"><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Given a ReactNode, create an instance that will actually be mounted.<br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactNode} node<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{boolean} shouldHaveDebugID<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@return </span><span style=\"color:#629755;font-style:italic;\">{object} A new instance of the element's constructor.<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@protected<br/></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\" /><span style=\"color:#629755;font-style:italic;\">*/<br/></span><span style=\"color:#cc7832;font-weight:bold;\">function </span><span style=\"color:#ffc66d;\">instantiateReactComponent</span>(node<span style=\"color:#cc7832;\">, </span>shouldHaveDebugID) {<br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>instance<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(node === <span style=\"color:#cc7832;font-weight:bold;\">null </span>|| node === <span style=\"color:#cc7832;font-weight:bold;\">false</span>) {<br/>    instance = ReactEmptyComponent.<span style=\"color:#ffc66d;\">create</span>(<span style=\"color:#ffc66d;\">instantiateReactComponent</span>)<span style=\"color:#cc7832;\">;//这里生成一个空的component对象</span><span style=\"font-size: 9pt;\">ReactDOMEmptyComponent，渲染一行注释，可以忽略</span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span>} <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(<span style=\"color:#cc7832;font-weight:bold;\">typeof </span>node === <span style=\"color:#6a8759;\">'object'</span>) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>element = node<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>type = element.<span style=\"color:#9876aa;\">type</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\"><br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">typeof </span>element.<span style=\"color:#9876aa;\">type </span>=== <span style=\"color:#6a8759;\">'string'</span>) { //如果类型是浏览器标签比如“div”、“span”之类 创建<font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); color: rgb(78, 89, 128);\">ReactDOMComponent 对象</font><br/>      instance = ReactHostComponent.<span style=\"color:#ffc66d;\">createInternalComponent</span>(element)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(<span style=\"color:#ffc66d;\">isInternalComponentType</span>(element.<span style=\"color:#9876aa;\">type</span>)) {//这个判断是否是内部组件的方式没有遇到过（待研究补充）<br/>      <span style=\"color:#808080;\">// This is temporarily available for custom components that are not string<br/></span><span style=\"color:#808080;\">      // representations. I.e. ART. Once those are updated to use the string<br/></span><span style=\"color:#808080;\">      // representation, we can drop this code path.<br/></span><span style=\"color:#808080;\">      </span>instance = <span style=\"color:#cc7832;font-weight:bold;\">new </span>element.<span style=\"color:#9876aa;\">type</span>(element)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">      </span><span style=\"color:#808080;\">// We renamed this. Allow the old name for compat. :(<br/></span><span style=\"color:#808080;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(!instance.<span style=\"color:#9876aa;\">getHostNode</span>) {<br/>        instance.<span style=\"color:#9876aa;\">getHostNode </span>= instance.<span style=\"color:#ffc66d;\">getNativeNode</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>}<br/>    } <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>      instance = <span style=\"color:#cc7832;font-weight:bold;\">new </span><span style=\"color:#ffc66d;\">ReactCompositeComponentWrapper</span>(element)<span style=\"color:#cc7832;\">; //创建自定义组件<font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); color: rgb(78, 89, 128);\">ReactCompositeComponent对象</font><br/></span><span style=\"color:#cc7832;\">    </span>}<br/>  } <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(<span style=\"color:#cc7832;font-weight:bold;\">typeof </span>node === <span style=\"color:#6a8759;\">'string' </span>|| <span style=\"color:#cc7832;font-weight:bold;\">typeof </span>node === <span style=\"color:#6a8759;\">'number'</span>) {<span style=\"color:#cc7832;\">//创建文本节点<font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); color: rgb(78, 89, 128);\">ReactDOMTextComponent 对象</font></span><br/>    instance = ReactHostComponent.<span style=\"color:#ffc66d;\">createInstanceForText</span>(node)<span style=\"color:#cc7832;\">; <br/></span><span style=\"color:#cc7832;\">  </span>} <br/><br/>  <span style=\"color:#808080;\">// These two fields are used by the DOM and ART diffing algorithms<br/></span><span style=\"color:#808080;\">  // respectively. Instead of using expandos on components, we should be<br/></span><span style=\"color:#808080;\">  // storing the state needed by the diffing algorithms elsewhere.<br/></span><span style=\"color:#808080;\">  </span>instance.<span style=\"color:#9876aa;\">_mountIndex </span>= <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>instance.<span style=\"color:#9876aa;\">_mountImage </span>= <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><br/>  <span style=\"color:#cc7832;font-weight:bold;\">return </span>instance<span style=\"color:#cc7832;\">;<br/></span>}<br/></pre></font></div><div><font face=\"Helvetica\" color=\"#454545\"><br/></font></div><div><font face=\"Helvetica\" color=\"#454545\">下面分别展开介绍三种组件的渲染、更新、卸载策略。</font></div><div><br/></div><div><font face=\"Helvetica\" color=\"#454545\">1.1）<font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); font-size: 12px; color: rgb(78, 89, 128);\">ReactDOMTextComponent（src/<font style=\"font-size: 12px; color: rgb(78, 89, 128); font-family: Menlo;\">renderers/dom/stack/client/ReactDOMTextComponent.js）</font></font></font></div><div><font face=\"Helvetica\" color=\"#454545\"><font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); font-size: 12px; color: rgb(78, 89, 128);\"><font style=\"font-size: 12px; color: rgb(78, 89, 128); font-family: Menlo;\"/></font></font></div><div>重点看下三个函数：</div><div><br/></div><div>    1) mountComponent 在render的时候调用，返回渲染内容，针对文本节点返回：</div><div>        &lt;!-- react-text:domId —&gt;这是文本内容&lt;!-- /react-text —&gt;</div><div><br/></div><div><div>  2）receiveComponent 在setState触发更新时调用这个函数，如果文本不同，只替换了注释中的内容。</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#ffc66d;\">receiveComponent</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(nextText<span style=\"color:#cc7832;\">, </span>transaction) {<br/>  <span style=\"color:#cc7832;font-weight:bold;\">if </span>(nextText !== <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span>) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement </span>= nextText<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextStringText = <span style=\"color:#6a8759;\">'' </span>+ nextText<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(nextStringText !== <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_stringText</span>) {<span style=\"color:#808080;\"><br/></span><span style=\"color:#808080;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_stringText </span>= nextStringText<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>commentNodes = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">getHostNode</span>()<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>DOMChildrenOperations.<span style=\"color:#ffc66d;\">replaceDelimitedText</span>(<br/>        commentNodes[<span style=\"color:#6897bb;\">0</span>]<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>commentNodes[<span style=\"color:#6897bb;\">1</span>]<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>nextStringText<br/>      )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/>  }<br/>}<span style=\"color:#cc7832;\">,</span>\n</pre><br/></div><div>3）unmountComponent 去掉对text节点引用，重置一些变量。</div><div><br/></div><div><br/></div><div>1.2）<font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); color: rgb(78, 89, 128);\">ReactDOMComponent</font></div><div><br/></div><div>    1）mountComponent 生成组件对应的dom结构</div><div>代码比较长，主要分为四个步骤：</div><div><ol start=\"1\"><li>做一些生成markup前的“准备工作”  ，针对不同类型做一些变量初始化以及让React事件系统捕捉指定事件。</li></ol>           以input标签为例介绍一下：<br/><div><ul><li> ReactDOMInput.mountWrapper(this, props, hostParent);  <br/></li></ul></div><div>           给input组件实例初始化状态，mountWrapper函数里只给实例设置了一个属性用以保存input的初始value和初始checked值。</div><div>           <span style=\"color:#cc7832;font-weight:bold;\">var </span>defaultValue = props.<span style=\"color:#9876aa;\">defaultValue</span><span style=\"color:#cc7832;\">;<br/></span><span>    <span>       </span></span>inst.<span style=\"color:#9876aa;\">_wrapperState </span>= {</div><div><span style=\"color:#9876aa;\">             initialChecked</span>: props.<span style=\"color:#9876aa;\">checked </span>!= <span style=\"color:#cc7832;font-weight:bold;\">null </span>? props.<span style=\"color:#9876aa;\">checked </span>: props.<span style=\"color:#9876aa;\">defaultChecked</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  <span>           </span></span><span style=\"color:#9876aa;\">initialValue</span>: props.<span style=\"color:#9876aa;\">value </span>!= <span style=\"color:#cc7832;font-weight:bold;\">null </span>? props.<span style=\"color:#9876aa;\">value </span>: defaultValue<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\"><span>    <span>  </span></span>       </span><span style=\"color:#9876aa;\">listeners</span>: <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">,<br/></span>           }<span style=\"color:#cc7832;\">;</span></div><div><ul><li> props = ReactDOMInput.getHostProps(this, props); 将更多input元素要用到的属性初始化并赋给事例，如value、type、max、min等等</li><li> transaction.getReactMountReady().enqueue(trackInputValue, this);<br/></li><li> transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this); 添加预定义事件，这里react添加了invalid事件</li><li> ensureListeningTo(this, 'onChange', transaction); 对于受控组件确保监听on change事件</li></ul><div><br/></div><div/></div><ol start=\"2\"><li>设置正确的namespace，根据父容器的namespace类型和当前实例的tag类型设置namespace 变量是html svg还是mathml<br/></li><li><b>创建将渲染在页面的markup（重要！！！讲解参见注释）</b></li></ol><div><ol start=\"4\"><li>做一些“收尾”工作，比如input、texture的内容初始化以及各个元素的autofocus设置<br/></li></ol></div></div><div>       </div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><br/><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Generates root tag markup then recurses. This method has side effects and<br/></span><span style=\"color:#629755;font-style:italic;\"> * is not idempotent.<br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@internal<br/></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\" /><span style=\"color:#629755;font-style:italic;\">* </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction|ReactServerRenderingTransaction} transaction<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?ReactDOMComponent} the parent component instance<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?object} info about the host container<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{object} context<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@return </span><span style=\"color:#629755;font-style:italic;\">{string} The computed markup.<br/></span><span style=\"color:#629755;font-style:italic;\"> */<br/></span>mountComponent: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br/>    transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>hostParent<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>hostContainerInfo<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>context<br/>) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_rootNodeID </span>= globalIdCounter++<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_domID </span>= hostContainerInfo.<span style=\"color:#9876aa;\">_idCounter</span>++<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_hostParent </span>= hostParent<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_hostContainerInfo </span>= hostContainerInfo<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>props = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span>.<span style=\"color:#9876aa;\">props</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">switch </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span>) {  &lt;———— <span style=\"color:#6897bb;\">1 </span>做一些生成markup前的“准备工作”<br/>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'audio'</span>:<br/>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'form'</span>:<br/>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'iframe'</span>:<br/>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'img'</span>:<br/>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'link'</span>:<br/>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'object'</span>:<br/>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'source'</span>:<br/>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'video'</span>:<br/>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'details'</span>:<br/>            <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_wrapperState </span>= {<br/>                <span style=\"color:#9876aa;\">listeners</span>: <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>}<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span><span style=\"color:#808080;\">//针对一些特性元素预先绑定一些事件<br/></span><span style=\"color:#808080;\">            </span>transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<span style=\"color:#ffc66d;\">trapBubbledEventsLocal</span><span style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span><span style=\"color:#cc7832;font-weight:bold;\">break</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'input'</span>:<span style=\"color:#808080;\">//给input组件实例初始化状态<br/></span><span style=\"color:#808080;\">            </span>ReactDOMInput.<span style=\"color:#ffc66d;\">mountWrapper</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>props<span style=\"color:#cc7832;\">, </span>hostParent)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span>props = ReactDOMInput.<span style=\"color:#ffc66d;\">getHostProps</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>props)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span>transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<span style=\"color:#ffc66d;\">trackInputValue</span><span style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span>transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<span style=\"color:#ffc66d;\">trapBubbledEventsLocal</span><span style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span><span style=\"color:#808080;\">// For controlled components we always need to ensure we're listening<br/></span><span style=\"color:#808080;\">            // to onChange. Even if there is no listener.<br/></span><span style=\"color:#808080;\">            </span><span style=\"color:#ffc66d;\">ensureListeningTo</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span><span style=\"color:#6a8759;\">'onChange'</span><span style=\"color:#cc7832;\">, </span>transaction)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span><span style=\"color:#cc7832;font-weight:bold;\">break</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">       //略去其他……</span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span>}<br/><br/>    <span style=\"color:#ffc66d;\">assertValidProps</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>props)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// We create tags in the namespace of their parent container, except HTML<br/></span><span style=\"color:#808080;\">    // tags get no namespace.<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>namespaceURI<span style=\"color:#cc7832;\">; </span>&lt;————— <span style=\"color:#6897bb;\">2 </span>设置正确的namespace<br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>parentTag<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(hostParent != <span style=\"color:#cc7832;font-weight:bold;\">null</span>) {<br/>        namespaceURI = hostParent.<span style=\"color:#9876aa;\">_namespaceURI</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>parentTag = hostParent.<span style=\"color:#9876aa;\">_tag</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(hostContainerInfo.<span style=\"color:#9876aa;\">_tag</span>) {<br/>        namespaceURI = hostContainerInfo.<span style=\"color:#9876aa;\">_namespaceURI</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>parentTag = hostContainerInfo.<span style=\"color:#9876aa;\">_tag</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/>    <span style=\"color:#cc7832;font-weight:bold;\">if </span>(namespaceURI == <span style=\"color:#cc7832;font-weight:bold;\">null </span>||<br/>        namespaceURI === DOMNamespaces.<span style=\"color:#9876aa;\">svg </span>&amp;&amp; parentTag === <span style=\"color:#6a8759;\">'foreignobject'</span>) {<br/>        namespaceURI = DOMNamespaces.<span style=\"color:#9876aa;\">html</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/>    <span style=\"color:#cc7832;font-weight:bold;\">if </span>(namespaceURI === DOMNamespaces.<span style=\"color:#9876aa;\">html</span>) {<br/>        <span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag </span>=== <span style=\"color:#6a8759;\">'svg'</span>) {<br/>            namespaceURI = DOMNamespaces.<span style=\"color:#9876aa;\">svg</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>} <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag </span>=== <span style=\"color:#6a8759;\">'math'</span>) {<br/>            namespaceURI = DOMNamespaces.<span style=\"color:#9876aa;\">mathml</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/>    }<br/>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_namespaceURI </span>= namespaceURI<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>mountImage<span style=\"color:#cc7832;\">; </span>&lt;————— <span style=\"color:#6897bb;\">3 </span>创建将渲染在页面的markup<br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>type = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span>.<span style=\"color:#9876aa;\">type</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">//默认用createElement创建<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(transaction.<span style=\"color:#9876aa;\">useCreateElement</span>) {<br/>        <span style=\"color:#cc7832;font-weight:bold;\">var </span>ownerDocument = hostContainerInfo.<span style=\"color:#9876aa;\">_ownerDocument</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>el<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(namespaceURI === DOMNamespaces.<span style=\"color:#9876aa;\">html</span>) {<br/>            <span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag </span>=== <span style=\"color:#6a8759;\">'script'</span>) {<br/>                <span style=\"color:#808080;\">//如果是script标签，注意这里包在div里再获取<br/></span><span style=\"color:#808080;\">                // Create the script via .innerHTML so its \"parser-inserted\" flag is<br/></span><span style=\"color:#808080;\">                // set to true and it does not execute<br/></span><span style=\"color:#808080;\">                </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>div = ownerDocument.<span style=\"color:#ffc66d;\">createElement</span>(<span style=\"color:#6a8759;\">'div'</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">                </span>div.<span style=\"color:#9876aa;\">innerHTML </span>= <span style=\"color:#6a8759;\">`&lt;</span>${type}<span style=\"color:#6a8759;\">&gt;&lt;/</span>${type}<span style=\"color:#6a8759;\">&gt;`</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">                </span>el = div.<span style=\"color:#ffc66d;\">removeChild</span>(div.<span style=\"color:#9876aa;\">firstChild</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span>} <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(props.<span style=\"color:#9876aa;\">is</span>) {<br/>                <span style=\"color:#808080;\">//和用户自定义元素相关，参见：https://developer.<a href=\"http://mozilla.org/en-US/docs/Web/API/Document/createElement\">mozilla.org/en-US/docs/Web/API/Document/createElement</a> <br/></span><span style=\"color:#808080;\">                //https://www.<a href=\"http://w3.org/TR/custom-elements/#customized-built-in-element\">w3.org/TR/custom-elements/#customized-built-in-element</a> 同时也是为了解决firefox下createElement的bug<br/></span><span style=\"color:#808080;\">                </span>el = ownerDocument.<span style=\"color:#ffc66d;\">createElement</span>(type<span style=\"color:#cc7832;\">, </span>props.<span style=\"color:#9876aa;\">is</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>                <span style=\"color:#808080;\">// Separate else branch instead of using `props.is || undefined` above becuase of a Firefox bug.<br/></span><span style=\"color:#808080;\">                // See discussion in <a href=\"https://github.com/facebook/react/pull/6896\">https://github.com/facebook/react/pull/6896</a><br/></span><span style=\"color:#808080;\">                // and discussion in <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1276240\">https://bugzilla.mozilla.org/show_bug.cgi?id=1276240</a><br/></span><span style=\"color:#808080;\">                </span>el = ownerDocument.<span style=\"color:#ffc66d;\">createElement</span>(type)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span>}<br/>        } <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>            el = ownerDocument.<span style=\"color:#ffc66d;\">createElementNS</span>(<br/>                namespaceURI<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">                </span>type<br/>            )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/>        <span style=\"color:#808080;\">//如果tag名包含’－’或指定“is”属性认为是用户自定义标签<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>isCustomComponentTag = <span style=\"color:#ffc66d;\">isCustomComponent</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span><span style=\"color:#cc7832;\">, </span>props)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//分别在react实例添加属性指向刚创建的节点，同时给节点添加属性指向当前实例<br/></span><span style=\"color:#808080;\">        </span>ReactDOMComponentTree.<span style=\"color:#ffc66d;\">precacheNode</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>el)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_flags </span>|= Flags.<span style=\"color:#9876aa;\">hasCachedChildNodes</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//如果是最外层标签，不是递归创建的子节点，则设置为React根元素，比如ReactDom.render(‘&lt;div&gt;&lt;input/&gt;&lt;/div&gt;’,node) 在创建到div层的时候设置为根元素，然后递归渲染子元素（input）的时候hostParent不为空了。<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(!<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_hostParent</span>) {<br/>            DOMPropertyOperations.<span style=\"color:#ffc66d;\">setAttributeForRoot</span>(el)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/>        <span style=\"color:#808080;\">//根据新旧props的差异更新对应dom元素上的属性，首次渲染没有旧props<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_updateDOMProperties</span>(<span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">, </span>props<span style=\"color:#cc7832;\">, </span>transaction<span style=\"color:#cc7832;\">, </span>isCustomComponentTag)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//初始化DOMLazyTree结构，根据不同浏览器选择不同的渲染策略，参见（src/renderers/dom/stack/client/DOMLazyTree.js）<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>lazyTree = DOMLazyTree(el)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//如果有子节点，则遍历子节点递归调用ReactReconciler.mountComponent（这个函数主要还是调用子节点实例对应的mountComponent）生成子节点的markup（可以简单理解为子节点dom树），保存到lazyTree中，<br/></span><span style=\"color:#808080;\">        //根据不同浏览器渲染dom的效率选择将子元素缓存在DOMLazyTree的队列中延迟渲染还是直接拼成一个完整的dom树返回<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_createInitialChildren</span>(transaction<span style=\"color:#cc7832;\">, </span>props<span style=\"color:#cc7832;\">, </span>context<span style=\"color:#cc7832;\">, </span>lazyTree)<span style=\"color:#cc7832;\">;    &lt;============<br/></span><span style=\"color:#cc7832;\">        </span>mountImage = lazyTree<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>        <span style=\"color:#808080;\">//判断是否是合法的tag名（用正则）<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#ffc66d;\">validateDangerousTag</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//用字符串拼接的方式创建起始标签，并添加事件监听、属性和样式内容<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>tagOpen = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_createOpenTagMarkupAndPutListeners</span>(transaction<span style=\"color:#cc7832;\">, </span>props)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//如果有子节点，则遍历子节点递归生成每一个子节点的ReactComponent实例，然后调用每个实例的ReactReconciler.mountComponent生成子节点的dom树<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>tagContent = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_createContentMarkup</span>(transaction<span style=\"color:#cc7832;\">, </span>props<span style=\"color:#cc7832;\">, </span>context)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//闭合标签<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(!tagContent &amp;&amp; omittedCloseTags[<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span>]) {<br/>            mountImage = tagOpen + <span style=\"color:#6a8759;\">'/&gt;'</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>            mountImage = tagOpen + <span style=\"color:#6a8759;\">'&gt;' </span>+ tagContent + <span style=\"color:#6a8759;\">'&lt;/' </span>+ type + <span style=\"color:#6a8759;\">'&gt;'</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/>    }<br/><br/>    <span style=\"color:#cc7832;font-weight:bold;\">switch </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span>) { &lt;—————<span style=\"color:#6897bb;\">4 </span>给事务添加组件渲染完毕后做的事情<br/>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'input'</span>:<br/>            transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<br/>                <span style=\"color:#ffc66d;\">inputPostMount</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">                </span><span style=\"color:#cc7832;font-weight:bold;\">this<br/></span><span style=\"color:#cc7832;font-weight:bold;\">            </span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(props.<span style=\"color:#9876aa;\">autoFocus</span>) {<br/>                transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<br/>                    AutoFocusUtils.<span style=\"color:#ffc66d;\">focusDOMComponent</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">                    </span><span style=\"color:#cc7832;font-weight:bold;\">this<br/></span><span style=\"color:#cc7832;font-weight:bold;\">                </span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span>}<br/>            <span style=\"color:#cc7832;font-weight:bold;\">break</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">       //略去其他……  </span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span>}<br/><br/>    <span style=\"color:#cc7832;font-weight:bold;\">return </span>mountImage<span style=\"color:#cc7832;\">;<br/></span>}\n</pre>这里额外讲一下 <b>this._createInitialChildren(transaction, props, context, lazyTree)</b>生成子元素dom树的函数，如果props.children是数组，调用以下函数。</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#ffc66d;\">mountChildren</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(nestedChildren<span style=\"color:#cc7832;\">, </span>transaction<span style=\"color:#cc7832;\">, </span>context) {<br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>children = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_reconcilerInstantiateChildren</span>(<span style=\"color:#808080;\">//深度遍历子节点获得所有子节点，同时调用</span><span style=\"font-size: 9pt; background-color: rgb(52, 65, 52);\">instantiateReactComponent生成子节点对应的</span><span style=\"font-size: 9pt; color: rgb(128, 128, 128);\">ReactComponent组</span><span style=\"color:#808080;\"><br/></span><span style=\"color:#808080;\">    </span>nestedChildren<span style=\"color:#cc7832;\">, </span>transaction<span style=\"color:#cc7832;\">, </span>context<br/>  )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_renderedChildren </span>= children<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>mountImages = []<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>index = <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(<span style=\"color:#cc7832;font-weight:bold;\">var </span>name <span style=\"color:#cc7832;font-weight:bold;\">in </span>children) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">if </span>(children.<span style=\"color:#9876aa;\">hasOwnProperty</span>(name)) {<br/>      <span style=\"color:#cc7832;font-weight:bold;\">var </span>child = children[name]<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>selfDebugID = <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">     </span><br/>      <span style=\"color:#cc7832;font-weight:bold;\">var </span>mountImage = ReactReconciler.<span style=\"color:#ffc66d;\">mountComponent</span>(//调用每个子节点的ReactComponent实例的mountComponent递归渲染所有子节点<br/>        child<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_hostContainerInfo</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>context<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>selfDebugID<br/>      )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>child.<span style=\"color:#9876aa;\">_mountIndex </span>= index++<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>mountImages.<span style=\"color:#ffc66d;\">push</span>(mountImage)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/>  }<br/>  <span style=\"color:#cc7832;font-weight:bold;\">return </span>mountImages<span style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">,<br/></span>\n</pre> </div><div><div/><div>再顺便提一下，源码中用到了DOMLazyTree，并根据不同浏览器对dom片段生成的速度做了优化。</div><div><pre style=\"background-color: rgb(43, 43, 43); font-family: Menlo; font-size: 9pt;\"><pre style=\"background-color: rgb(43, 43, 43); font-family: Menlo; font-size: 9pt;\"><span style=\"color: rgb(98, 151, 85); font-style: italic;\">/**<br/></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> * In IE (8-11) and Edge, appending nodes with no children is dramatically<br/></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> * faster than appending a full subtree, so we essentially queue up the<br/></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> * .appendChild calls here and apply them so each node is added to its parent<br/></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> * before any children are added.<br/></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> *<br/></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> * In other browsers, doing so is slower or neutral compared to the other order<br/></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> * (in Firefox, twice as slow) so we only do this inversion in IE.<br/></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> *<br/></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> * See <a href=\"https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode\">https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode</a>.<br/></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> */<br/></span><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">var </span><font color=\"#a9b7c6\">enableLazy = (<br/>  </font><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">typeof </span><span style=\"color: rgb(152, 118, 170);\">document </span><font color=\"#a9b7c6\">!== </font><span style=\"color: rgb(106, 135, 89);\">'undefined' </span><font color=\"#a9b7c6\">&amp;&amp;<br/>  </font><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">typeof </span><span style=\"color: rgb(152, 118, 170);\">document</span><font color=\"#a9b7c6\">.</font><span style=\"color: rgb(152, 118, 170);\">documentMode </span><font color=\"#a9b7c6\">=== </font><span style=\"color: rgb(106, 135, 89);\">'number'<br/></span><span style=\"color: rgb(106, 135, 89);\">  </span><font color=\"#a9b7c6\">||<br/>  </font><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">typeof </span><span style=\"color: rgb(152, 118, 170);\">navigator </span><font color=\"#a9b7c6\">!== </font><span style=\"color: rgb(106, 135, 89);\">'undefined' </span><font color=\"#a9b7c6\">&amp;&amp;<br/>  </font><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">typeof </span><span style=\"color: rgb(152, 118, 170);\">navigator</span><font color=\"#a9b7c6\">.</font><span style=\"color: rgb(152, 118, 170);\">userAgent </span><font color=\"#a9b7c6\">=== </font><span style=\"color: rgb(106, 135, 89);\">'string' </span><font color=\"#a9b7c6\">&amp;&amp;<br/>  </font><span style=\"color: rgb(106, 135, 89);\">/\\bEdge\\/\\d/</span><font color=\"#a9b7c6\">.</font><span style=\"color: rgb(255, 198, 109);\">test</span><font color=\"#a9b7c6\">(</font><span style=\"color: rgb(152, 118, 170);\">navigator</span><font color=\"#a9b7c6\">.</font><span style=\"color: rgb(152, 118, 170);\">userAgent</span><font color=\"#a9b7c6\">)<br/>)</font>;</pre><pre style=\"background-color: rgb(43, 43, 43); font-family: Menlo; font-size: 9pt;\"><span style=\"font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\"> function </span><span style=\"font-size: 9pt; color: rgb(255, 198, 109);\">queueChild</span><font style=\"font-size: 9pt;\" color=\"#a9b7c6\">(parentTree</font><span style=\"font-size: 9pt; color: rgb(204, 120, 50);\">, </span><font style=\"font-size: 9pt;\" color=\"#a9b7c6\">childTree) {</font><br/></pre><pre style=\"background-color: rgb(43, 43, 43); font-family: Menlo; font-size: 9pt;\"><pre style=\"background-color: rgb(43, 43, 43); font-family: Menlo; font-size: 9pt;\"><font color=\"#a9b7c6\">  </font><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">if </span><font color=\"#a9b7c6\">(enableLazy) {<br/>    parentTree.</font><span style=\"color: rgb(152, 118, 170);\">children</span><font color=\"#a9b7c6\">.</font><span style=\"color: rgb(255, 198, 109);\">push</span><font color=\"#a9b7c6\">(childTree)</font><span style=\"color: rgb(204, 120, 50);\">;<br/></span><span style=\"color: rgb(204, 120, 50);\">  </span><font color=\"#a9b7c6\">} </font><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">else </span><font color=\"#a9b7c6\">{<br/>    parentTree.node.</font><span style=\"color: rgb(152, 118, 170);\">appendChild</span><font color=\"#a9b7c6\">(childTree.node)</font><span style=\"color: rgb(204, 120, 50);\">;<br/></span><span style=\"color: rgb(204, 120, 50);\">  </span><font color=\"#a9b7c6\">}<br/></font><span style=\"color: rgb(169, 183, 198); background-color: rgb(52, 65, 52);\">}</span><font color=\"#a9b7c6\"\n/></pre><br/></pre></pre></div><div><font face=\"Helvetica\" color=\"#454545\"><font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); font-size: 12px; color: rgb(78, 89, 128);\"/></font></div></div><div><div>然后会在这里判断是把子节点缓存起来还是直接挂到父节点上。缓存起来的节点会在ReactMount的_mountImageIntoNode递归地将子节点逐个挂到父节点上，主要用在<code style=\"box-sizing: border-box; outline: none; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 0.2em 0.4em; word-break: break-word; color: rgb(78, 89, 128); background-color: rgb(248, 248, 248); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">ReactDOMComponent</code><span style=\"color: rgb(51, 51, 51); font-family: -apple-system, 'PingFang SC', 'Hiragino Sans GB', Arial, 'Microsoft YaHei', 'Helvetica Neue', sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); float: none;\">, </span><code style=\"box-sizing: border-box; outline: none; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 0.2em 0.4em; word-break: break-word; color: rgb(78, 89, 128); background-color: rgb(248, 248, 248); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">ReactCompositeComponent。</code></div><div/><div><br/></div>  </div><div>2）receiveComponent 在setState触发更新时调用这个函</div><div><div/></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"/></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Updates a DOM component after it has already been allocated and<br/></span><span style=\"color:#629755;font-style:italic;\"> * attached to the DOM. Reconciles the root DOM node, then recurses.<br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction} transaction<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactElement} prevElement<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactElement} nextElement<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@internal<br/></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\" /><span style=\"color:#629755;font-style:italic;\">* </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@overridable<br/></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\" /><span style=\"color:#629755;font-style:italic;\">*/<br/></span><span style=\"color:#ffc66d;\">updateComponent</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(transaction<span style=\"color:#cc7832;\">, </span>prevElement<span style=\"color:#cc7832;\">, </span>nextElement<span style=\"color:#cc7832;\">, </span>context) {<br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>lastProps = prevElement.props<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextProps = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span>.props<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  //获得last 和next props<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">switch </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span>) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'input'</span>:<br/>      lastProps = ReactDOMInput.<span style=\"color:#ffc66d;\">getHostProps</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>lastProps)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>nextProps = ReactDOMInput.<span style=\"color:#ffc66d;\">getHostProps</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>nextProps)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">break</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    //略去其他……</span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">default</span>:<br/>      <span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">typeof </span>lastProps.<span style=\"color:#9876aa;\">onClick </span>!== <span style=\"color:#6a8759;\">'function' </span>&amp;&amp;<br/>          <span style=\"color:#cc7832;font-weight:bold;\">typeof </span>nextProps.<span style=\"color:#9876aa;\">onClick </span>=== <span style=\"color:#6a8759;\">'function'</span>) {<br/>        transaction.getReactMountReady().<span style=\"color:#ffc66d;\">enqueue</span>(<br/>          <span style=\"color:#ffc66d;\">trapClickOnNonInteractiveElement</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">          </span><span style=\"color:#cc7832;font-weight:bold;\">this<br/></span><span style=\"color:#cc7832;font-weight:bold;\">        </span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>}<br/>      <span style=\"color:#cc7832;font-weight:bold;\">break</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><br/>  <span style=\"color:#ffc66d;\">assertValidProps</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>nextProps)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>isCustomComponentTag = <span style=\"color:#ffc66d;\">isCustomComponent</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span><span style=\"color:#cc7832;\">, </span>nextProps)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#808080;\">//根据新旧props的差异更新对应dom元素上的属性<br/></span><span style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_updateDOMProperties</span>(lastProps<span style=\"color:#cc7832;\">, </span>nextProps<span style=\"color:#cc7832;\">, </span>transaction<span style=\"color:#cc7832;\">, </span>isCustomComponentTag)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#808080;\">//更新子节点内容，diff算法（diff算法下文将详细介绍）<br/></span><span style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_updateDOMChildren</span>(<br/>    lastProps<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>nextProps<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>context<br/>  )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#808080;\">//更新节点后根据新的props中的值设置dom属性比如value、checked等<br/></span><span style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">switch </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span>) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'input'</span>:<br/>      <span style=\"color:#808080;\">// Update the wrapper around inputs *after* updating props. This has to<br/></span><span style=\"color:#808080;\">      // happen after `_updateDOMProperties`. Otherwise HTML5 input validations<br/></span><span style=\"color:#808080;\">      // raise warnings and prevent the new value from being assigned.<br/></span><span style=\"color:#808080;\">      </span>ReactDOMInput.<span style=\"color:#ffc66d;\">updateWrapper</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">break</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    <b>//略去其他……</b></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span>}<br/>}<span style=\"color:#cc7832;\">,</span>\n</pre><br/></div><div>3）unmountComponent 去掉React Component实例上的事件监听器，循环调用子组件的unmountComponent方法，不直接删除dom节点，由父节点统一清除。</div><div><br/></div><div>1.3）<font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); color: rgb(78, 89, 128);\">ReactCompositeComponent</font></div><div><br/></div><div> 1）mountComponent</div><div style=\"text-align: center; \"><img src=\"/images/2017-01-20/%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B%E5%9B%BE%20(2).png\" height=\"548\" width=\"213\"/><br/></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><br/><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Initializes the component, renders markup, and registers event listeners.<br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction|ReactServerRenderingTransaction} transaction<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?object} hostParent<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?object} hostContainerInfo<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?object} context<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@return </span><span style=\"color:#629755;font-style:italic;\">{?string} Rendered markup to be inserted into the DOM.<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@final<br/></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\" /><span style=\"color:#629755;font-style:italic;\">* </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@internal<br/></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\" /><span style=\"color:#629755;font-style:italic;\">*/<br/></span>mountComponent: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br/>    transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>hostParent<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>hostContainerInfo<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>context<br/>) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_context </span>= context<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_mountOrder </span>= nextMountID++<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_hostParent </span>= hostParent<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_hostContainerInfo </span>= hostContainerInfo<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>publicProps = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span>.<span style=\"color:#9876aa;\">props</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>publicContext = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_processContext</span>(context)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>Component = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span>.<span style=\"color:#9876aa;\">type</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>updateQueue = transaction.<span style=\"color:#ffc66d;\">getUpdateQueue</span>()<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// Initialize the public class<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>doConstruct = <span style=\"color:#ffc66d;\">shouldConstruct</span>(Component)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>inst = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_constructComponent</span>(<br/>        doConstruct<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>publicProps<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>publicContext<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>updateQueue<br/>    )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>renderedElement<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// Support functional components<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(!doConstruct &amp;&amp; (inst == <span style=\"color:#cc7832;font-weight:bold;\">null </span>|| inst.<span style=\"color:#ffc66d;\">render </span>== <span style=\"color:#cc7832;font-weight:bold;\">null</span>)) {<br/>        renderedElement = inst<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>inst = <span style=\"color:#cc7832;font-weight:bold;\">new </span><span style=\"color:#ffc66d;\">StatelessComponent</span>(Component)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_compositeType </span>= ReactCompositeComponentTypes.<span style=\"color:#9876aa;\">StatelessFunctional</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>        <span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#ffc66d;\">isPureComponent</span>(Component)) {<br/>            <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_compositeType </span>= ReactCompositeComponentTypes.<span style=\"color:#9876aa;\">PureClass</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>            <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_compositeType </span>= ReactCompositeComponentTypes.<span style=\"color:#9876aa;\">ImpureClass</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/>    }<br/><br/>    <span style=\"color:#808080;\">// These should be set up in the constructor, but as a convenience for<br/></span><span style=\"color:#808080;\">    // simpler class abstractions, we set them up after the fact.<br/></span><span style=\"color:#808080;\">    </span>inst.<span style=\"color:#9876aa;\">props </span>= publicProps<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>inst.<span style=\"color:#9876aa;\">context </span>= publicContext<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>inst.<span style=\"color:#9876aa;\">refs </span>= emptyObject<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>inst.<span style=\"color:#9876aa;\">updater </span>= updateQueue<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_instance </span>= inst<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// Store a reference from the instance back to the internal representation<br/></span><span style=\"color:#808080;\">    </span>ReactInstanceMap.<span style=\"color:#ffc66d;\">set</span>(inst<span style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>initialState = inst.<span style=\"color:#9876aa;\">state</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(initialState === <span style=\"color:#9876aa;\">undefined</span>) {<br/>        inst.<span style=\"color:#9876aa;\">state </span>= initialState = <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/><br/>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingStateQueue </span>= <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingReplaceState </span>= <span style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingForceUpdate </span>= <span style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">//调用生命周期函数<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(inst.<span style=\"color:#9876aa;\">componentWillMount</span>) {<br/>        inst.<span style=\"color:#9876aa;\">componentWillMount</span>()<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">// When mounting, calls to `setState` by `componentWillMount` will set<br/></span><span style=\"color:#808080;\">        // `this._pendingStateQueue` without triggering a re-render.注意这里新的state是在</span><span style=\"color: rgb(152, 118, 170); font-size: 9pt;\">componentWillMount执行完后更新的，因此在<font style=\"font-family: Menlo; font-size: 12px; background-color: rgb(43, 43, 43); color: rgb(152, 118, 170);\">componentWillMount</font>里的this.state不是最新的</span><span style=\"color:#808080;\"><br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingStateQueue</span>) {<br/>            inst.<span style=\"color:#9876aa;\">state </span>= <span style=\"color:#cc7832;font-weight:bold;\">this</span>._processPendingState(inst.<span style=\"color:#9876aa;\">props</span><span style=\"color:#cc7832;\">, </span>inst.<span style=\"color:#9876aa;\">context</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/>    }<br/><br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>markup<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">//带错误监听，内部调用performInitialMount，render函数返回的内容用来初始化一个ReactComponent实例，然后调用ReactReconciler.mountComponent获得dom树<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(inst.<span style=\"color:#ffc66d;\">unstable_handleError</span>) {<br/>        markup = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">performInitialMountWithErrorHandling</span>(<br/>            renderedElement<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>hostParent<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>hostContainerInfo<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>context<br/>        )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>        markup = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">performInitialMount</span>(<br/>            renderedElement<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>hostParent<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>hostContainerInfo<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>context<br/>        )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/>    <span style=\"color:#808080;\">//<font style=\"font-family: Menlo; font-size: 12px; background-color: rgb(43, 43, 43); color: rgb(255, 198, 109);\">componentDidMount执行</font><br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(inst.<span style=\"color:#ffc66d;\">componentDidMount</span>) {<br/>        transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(inst.<span style=\"color:#ffc66d;\">componentDidMount</span><span style=\"color:#cc7832;\">, </span>inst)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/><br/>    <span style=\"color:#808080;\">// setState callbacks during willMount should end up here<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">const </span>callbacks = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingCallbacks</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(callbacks) {<br/>        <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingCallbacks </span>= <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(let i = <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">; </span>i &lt; callbacks.<span style=\"color:#9876aa;\">length</span><span style=\"color:#cc7832;\">; </span>i++) {<br/>            transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<br/>                callbacks[i]<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">                </span>inst<br/>            )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/>    }<br/><br/>    <span style=\"color:#cc7832;font-weight:bold;\">return </span>markup<span style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">,</span>\n</pre><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#cc7832;\"><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#ffc66d;\">performInitialMount</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br/>  renderedElement<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>hostParent<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>hostContainerInfo<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>context<br/>) {<br/>  <span style=\"color:#808080;\">// If not a stateless component, we now render<br/></span><span style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(renderedElement === <span style=\"color:#9876aa;\">undefined</span>) {<br/>    renderedElement = <span style=\"color:#cc7832;font-weight:bold;\">this</span>._renderValidatedComponent()<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>nodeType = ReactNodeTypes.<span style=\"color:#ffc66d;\">getType</span>(renderedElement)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_renderedNodeType </span>= nodeType<span style=\"color:#cc7832;\">;</span></pre><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#cc7832;\">  //得到当前ReactElement对应的ReactComponent实例<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>child = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_instantiateReactComponent</span>(<br/>    renderedElement<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>nodeType !== ReactNodeTypes.<span style=\"color:#9876aa;\">EMPTY </span><span style=\"color:#808080;\">/* shouldHaveDebugID */<br/></span><span style=\"color:#808080;\">  </span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_renderedComponent </span>= child<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>debugID = <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">;</span><br/>  //递归生成子节点dom树<br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>markup = ReactReconciler.<span style=\"color:#ffc66d;\">mountComponent</span>(<br/>    child<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>hostParent<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>hostContainerInfo<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_processChildContext</span>(context)<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>debugID<br/>  )<span style=\"color:#cc7832;\">;</span><br/><br/>  <span style=\"color:#cc7832;font-weight:bold;\">return </span>markup<span style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">,<br/></span>\n</pre><br/></span></pre>2）receiveComponent </div><div>这里负责生命周期的componentWillReceiveProps、shouldComponentUpdate、componentWillUpdate、render、componentDidUpdate。注意在前三个生命周期函数中调用this.state无法获取更新后的this.state因为为实例更新state的inst.state=nextState在componentWillUpdate之后调用，即render和componentDidUpdate中可以，禁止在shouldComponentUpdate和componentWillUpdate中调用setState，会造成循环调用（原因参见src/renderers/shared/stack/reconciler/ReactCompositeComponent.js的performUpdateIfNecessary方法）</div><div style=\"text-align: center; \"><img src=\"/images/2017-01-20/%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B%E5%9B%BE%20(3).png\" height=\"685\" width=\"564\"/><br/></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><br/><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Perform an update to a mounted component. The componentWillReceiveProps and<br/></span><span style=\"color:#629755;font-style:italic;\"> * shouldComponentUpdate methods are called, then (assuming the update isn't<br/></span><span style=\"color:#629755;font-style:italic;\"> * skipped) the remaining update lifecycle methods are called and the DOM<br/></span><span style=\"color:#629755;font-style:italic;\"> * representation is updated.<br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * By default, this implements React's rendering and reconciliation algorithm.<br/></span><span style=\"color:#629755;font-style:italic;\"> * Sophisticated clients may wish to override this.<br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction} transaction<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactElement} prevParentElement<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactElement} nextParentElement<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@internal<br/></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\" /><span style=\"color:#629755;font-style:italic;\">* </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@overridable<br/></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\" /><span style=\"color:#629755;font-style:italic;\">*/<br/></span>updateComponent: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br/>    transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>prevParentElement<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>nextParentElement<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>prevUnmaskedContext<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>nextUnmaskedContext<br/>) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>inst = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_instance</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>willReceive = <span style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextContext<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// Determine if the context has changed or not<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_context </span>=== nextUnmaskedContext) {<br/>        nextContext = inst.<span style=\"color:#9876aa;\">context</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>        nextContext = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_processContext</span>(nextUnmaskedContext)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>willReceive = <span style=\"color:#cc7832;font-weight:bold;\">true</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/><br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>prevProps = prevParentElement.<span style=\"color:#9876aa;\">props</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextProps = nextParentElement.<span style=\"color:#9876aa;\">props</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// Not a simple state update but a props update<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(prevParentElement !== nextParentElement) {<br/>        willReceive = <span style=\"color:#cc7832;font-weight:bold;\">true</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/><br/>    <span style=\"color:#808080;\">// An update here will schedule an update but immediately set<br/></span><span style=\"color:#808080;\">    // _pendingStateQueue which will ensure that any state updates gets<br/></span><span style=\"color:#808080;\">    // immediately reconciled instead of waiting for the next batch.<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(willReceive &amp;&amp; inst.<span style=\"color:#ffc66d;\">componentWillReceiveProps</span>) {<br/>        inst.<span style=\"color:#ffc66d;\">componentWillReceiveProps</span>(nextProps<span style=\"color:#cc7832;\">, </span>nextContext)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/><br/>    <span style=\"color:#808080;\">// If updating happens to enqueue any new updates, we shouldn't execute new<br/></span><span style=\"color:#808080;\">    // callbacks until the next render happens, so stash the callbacks first.<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>callbacks = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingCallbacks</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingCallbacks </span>= <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextState = <span style=\"color:#cc7832;font-weight:bold;\">this</span>._processPendingState(nextProps<span style=\"color:#cc7832;\">, </span>nextContext)<span style=\"color:#cc7832;\">; </span><span style=\"color:#808080;\">//获得nextState<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>shouldUpdate = <span style=\"color:#cc7832;font-weight:bold;\">true</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(!<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingForceUpdate</span>) { <span style=\"color:#808080;\">//没设置forseupdate<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>prevState = inst.<span style=\"color:#9876aa;\">state</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>shouldUpdate = willReceive || nextState !== prevState<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//如果提供shouldComponentUpdate，调用函数，否则新旧state和props浅比较确定是否更新<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(inst.<span style=\"color:#ffc66d;\">shouldComponentUpdate</span>) {<br/>            shouldUpdate = inst.<span style=\"color:#ffc66d;\">shouldComponentUpdate</span>(nextProps<span style=\"color:#cc7832;\">, </span>nextState<span style=\"color:#cc7832;\">, </span>nextContext)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>            <span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_compositeType </span>=== ReactCompositeComponentTypes.<span style=\"color:#9876aa;\">PureClass</span>) {<br/>                shouldUpdate =<br/>                    !shallowEqual(prevProps<span style=\"color:#cc7832;\">, </span>nextProps) ||<br/>                    !shallowEqual(inst.<span style=\"color:#9876aa;\">state</span><span style=\"color:#cc7832;\">, </span>nextState)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span>}<br/>        }<br/>    }<br/><br/>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_updateBatchNumber </span>= <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(shouldUpdate) {<br/>        <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingForceUpdate </span>= <span style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">// Will set `this.props`, `this.state` and `this.context`.<br/></span><span style=\"color:#808080;\">        //设置新props、state，调用生命周期函数（如果提供），更新dom<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>._performComponentUpdate(<br/>            nextParentElement<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>nextProps<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>nextState<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>nextContext<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>nextUnmaskedContext<br/>        )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>        <span style=\"color:#808080;\">// If it's determined that a component should not update, we still want<br/></span><span style=\"color:#808080;\">        // to set props and state but we shortcut the rest of the update.<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement </span>= nextParentElement<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_context </span>= nextUnmaskedContext<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>inst.<span style=\"color:#9876aa;\">props </span>= nextProps<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>inst.<span style=\"color:#9876aa;\">state </span>= nextState<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>inst.<span style=\"color:#9876aa;\">context </span>= nextContext<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/>    <span style=\"color:#808080;\">//render之后调用的事件队列<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(callbacks) {<br/>        <span style=\"color:#cc7832;font-weight:bold;\">for </span>(<span style=\"color:#cc7832;font-weight:bold;\">var </span>j = <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">; </span>j &lt; callbacks.<span style=\"color:#9876aa;\">length</span><span style=\"color:#cc7832;\">; </span>j++) {<br/>            transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<br/>                callbacks[j]<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">                </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">getPublicInstance</span>()<br/>            )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/>    }<br/>}<span style=\"color:#cc7832;\">,</span>\n</pre><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Merges new props and state, notifies delegate methods of update and<br/></span><span style=\"color:#629755;font-style:italic;\"> * performs update.<br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactElement} nextElement Next element<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{object} nextProps Next public object to set as properties.<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?object} nextState Next object to set as state.<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?object} nextContext Next public object to set as context.<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction} transaction<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?object} unmaskedContext<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@private<br/></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\" /><span style=\"color:#629755;font-style:italic;\">*/<br/></span>_performComponentUpdate: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br/>  nextElement<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>nextProps<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>nextState<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>nextContext<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>unmaskedContext<br/>) {<br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>inst = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_instance</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>hasComponentDidUpdate = Boolean(inst.<span style=\"color:#ffc66d;\">componentDidUpdate</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>prevProps<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>prevState<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>prevContext<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(hasComponentDidUpdate) {<br/>    prevProps = inst.<span style=\"color:#9876aa;\">props</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>prevState = inst.<span style=\"color:#9876aa;\">state</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>prevContext = inst.<span style=\"color:#9876aa;\">context</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><br/>  <span style=\"color:#cc7832;font-weight:bold;\">if </span>(inst.<span style=\"color:#ffc66d;\">componentWillUpdate</span>) {<br/>     inst.<span style=\"color:#ffc66d;\">componentWillUpdate</span>(nextProps<span style=\"color:#cc7832;\">, </span>nextState<span style=\"color:#cc7832;\">, </span>nextContext)<span style=\"color:#cc7832;\">;</span><br/>  }<br/><br/>  <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement </span>= nextElement<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_context </span>= unmaskedContext<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>inst.<span style=\"color:#9876aa;\">props </span>= nextProps<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>inst.<span style=\"color:#9876aa;\">state </span>= nextState<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>inst.<span style=\"color:#9876aa;\">context </span>= nextContext<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(inst.<span style=\"color:#ffc66d;\">unstable_handleError</span>) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>._updateRenderedComponentWithErrorHandling(transaction<span style=\"color:#cc7832;\">, </span>unmaskedContext)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>._updateRenderedComponent(transaction<span style=\"color:#cc7832;\">, </span>unmaskedContext)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><br/>  <span style=\"color:#cc7832;font-weight:bold;\">if </span>(hasComponentDidUpdate) {<br/>      transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<br/>        inst.<span style=\"color:#ffc66d;\">componentDidUpdate</span>.<span style=\"color:#ffc66d;\">bind</span>(inst<span style=\"color:#cc7832;\">, </span>prevProps<span style=\"color:#cc7832;\">, </span>prevState<span style=\"color:#cc7832;\">, </span>prevContext)<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>inst<br/>      )<span style=\"color:#cc7832;\">;</span><br/>  }<br/>}<span style=\"color:#cc7832;\">,</span>\n</pre><br/></div><div>3）unmountComponent 调用生命周期函数componentWillUnmount（如果提供），调用当前组件对应的React Component实例对应的unmountComponent函数，重置一堆变量。</div><div><br/></div><div><br/></div><div/><ol start=\"2\"><li>渲染组件的工作主要在这个函数，通过<font style=\"font-family: Helvetica; color: rgb(69, 69, 69);\">instantiateReactComponent</font>得到了各种类型组件对应的ReactComponent实例（可以理解为一个ReactComponent实例的树，包含所有子节点的ReactComponent实例），然后调用实例的mountComponent方法（上面讲解过）得到要渲染的‘markup’可能是一个dom树，或一个DOMLazyTree结构保存将子节点的dom结构树保存到数组里，最后插入到container中。</li></ol></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Mounts this component and inserts it into the DOM.<br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactComponent} componentInstance The instance to mount.<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{DOMElement} container DOM element to mount into.<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction} transaction<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{boolean} shouldReuseMarkup If true, do not insert markup<br/></span><span style=\"color:#629755;font-style:italic;\"> */<br/></span><span style=\"color:#cc7832;font-weight:bold;\">function </span><span style=\"color:#ffc66d;\">mountComponentIntoNode</span>(<br/>  wrapperInstance<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>container<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>shouldReuseMarkup<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>context<br/>) {<br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>markerName<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(ReactFeatureFlags.<span style=\"color:#9876aa;\">logTopLevelRenders</span>) { //记录拼接组件对应的dom模板所用的时长<br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>wrappedElement = wrapperInstance.<span style=\"color:#9876aa;\">_currentElement</span>.<span style=\"color:#9876aa;\">props</span>.child<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>type = wrappedElement.<span style=\"color:#9876aa;\">type</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>markerName = <span style=\"color:#6a8759;\">'React mount: ' </span>+ (<br/>      <span style=\"color:#cc7832;font-weight:bold;\">typeof </span>type === <span style=\"color:#6a8759;\">'string' </span>? type :<br/>      type.<span style=\"color:#9876aa;\">displayName </span>|| type.<span style=\"color:#9876aa;\">name<br/></span><span style=\"color:#9876aa;\">    </span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#9876aa;\">console</span>.<span style=\"color:#ffc66d;\">time</span>(markerName)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>markup = ReactReconciler.<span style=\"color:#ffc66d;\">mountComponent</span>( //调用组件实例的mountComponent方法获得要渲染的结构（可能是一个html片段或一个src/<font style=\"font-size: 12px; color: rgb(169, 183, 198); font-family: Menlo;\">renderers/dom/stack/client/DOMLazyTree.js结构）</font>，添加事件以及ref属性<br/>    wrapperInstance<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>ReactDOMContainerInfo(wrapperInstance<span style=\"color:#cc7832;\">, </span>container)<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>context<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#6897bb;\">0 </span><span style=\"color:#808080;\">/* parentDebugID */<br/></span><span style=\"color:#808080;\">  </span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(markerName) {<br/>    <span style=\"color:#9876aa;\">console</span>.<span style=\"color:#ffc66d;\">timeEnd</span>(markerName)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><br/>  wrapperInstance.<span style=\"color:#9876aa;\">_renderedComponent</span>.<span style=\"color:#9876aa;\">_topLevelWrapper </span>= wrapperInstance<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>ReactMount.<span style=\"color:#ffc66d;\">_mountImageIntoNode</span>( //将上面得到的结构（递归）渲染到container dom节点中，显示在页面上<br/>    markup<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>container<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>wrapperInstance<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>shouldReuseMarkup<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>transaction<br/>  )<span style=\"color:#cc7832;\">;<br/></span>}\n</pre><br/></div><div>以上是对虚拟dom和渲染策略的讲解。</div><div><br/></div><div>推荐阅读：</div><div><span style=\"font: 12.0px Helvetica; color: #e4af09\"><a href=\"https://zhuanlan.zhihu.com/purerender\">https://zhuanlan.zhihu.com/purerender</a></span><span style=\"font: 12.0px Helvetica; color: #454545\" /><span style=\"font: 12.0px 'PingFang SC'; color: #454545\">关于</span><span style=\"font: 12.0px Helvetica; color: #454545\">react</span><span style=\"font: 12.0px 'PingFang SC'; color: #454545\">源码解析系列文章</span><span style=\"font: 12.0px Helvetica; color: #454545\"><br/>\n<span style=\"color: #e4af09\"><a href=\"http://purplebamboo.github.io/2015/09/15/reactjs_source_analyze_part_one/\">http://purplebamboo.github.io/2015/09/15/reactjs_source_analyze_part_one/</a></span></span></div><div><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-size: 12px; font-family: Helvetica;\"><font color=\"#e4af09\">《深入React技术栈》这本书的第三章（有需要可以找我借）<br/></font>\n</span><br/></div><div><br/></div><div><br/></div>","source":"_posts/react源码学习——Virtual Dom和渲染、更新原理.html","raw":"---\nlayout: post\ntitle:  react源码学习——Virtual Dom和渲染、更新原理s\ndate:   2017-01-20 08:43:59\nauthor: Lily\ncategories: frontend\ntags:\n- react\n- 源码解读\n---\n\n<div><span style=\"color: rgb(68, 68, 68); font-family: 'Helvetica Neue', Helvetica, 'Lucida Grande', Arial, 'Hiragino Sans GB', 微软雅黑, 'WenQuanYi Micro Hei', STHeiti, SimSun, sans-serif; font-size: 14px; orphans: 2; widows: 2;\">前端开发过程中，更新页面的数据、样式等操作都要操作dom，而复杂的dom操作通常是产品性能瓶颈原因之一，为此React引入了Virtual Dom的概念，Virtual Dom其实是用js实现了一套dom api，包括虚拟dom模型、生命周期管理、diff算法等。React会将传入的JSX片段转化成虚拟dom节点，当数据更新时，通过diff算法找到要变更的dom节点，并只对变化的部分进行实际的浏览器dom更新，而不是重新渲染整个dom树。下面我们结合组件渲染流程结合源码介绍一下React如何创建虚拟节点，以及如何渲染、更新节点的整个流程。</span><br/></div><div><span style=\"color: rgb(68, 68, 68); font-family: 'Helvetica Neue', Helvetica, 'Lucida Grande', Arial, 'Hiragino Sans GB', 微软雅黑, 'WenQuanYi Micro Hei', STHeiti, SimSun, sans-serif; font-size: 14px; orphans: 2; widows: 2;\">——以下代码是React v15.4.2版本——<br/></span></div><div>React项目渲染组件的方法是：ReactDom.render，将父组件连带所有包含在内的子组件渲染出来。render方法最终调用了 src/renderers/dom/stack/client/ReactMount.js 的render方法。</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Renders a React component into the DOM in the supplied `container`.<br/></span><span style=\"color:#629755;font-style:italic;\"> * See <a href=\"https://facebook.github.io/react/docs/react-dom.html#render\">https://facebook.github.io/react/docs/react-dom.html#render</a><br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * If the React component was previously rendered into `container`, this will<br/></span><span style=\"color:#629755;font-style:italic;\"> * perform an update on it and only mutate the DOM as necessary to reflect the<br/></span><span style=\"color:#629755;font-style:italic;\"> * latest React component.<br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactElement} nextElement Component element to render.<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{DOMElement} container DOM element to render into.<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?function} callback function triggered on completion<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@return </span><span style=\"color:#629755;font-style:italic;\">{ReactComponent} Component instance rendered in `container`.<br/></span><span style=\"color:#629755;font-style:italic;\"> */<br/></span><span style=\"color:#ffc66d;\">render</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(nextElement<span style=\"color:#cc7832;\">, </span>container<span style=\"color:#cc7832;\">, </span>callback) {<br/>  <span style=\"color:#cc7832;font-weight:bold;\">return </span>ReactMount.<span style=\"color:#ffc66d;\">_renderSubtreeIntoContainer</span>(<span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">, </span>nextElement<span style=\"color:#cc7832;\">, </span>container<span style=\"color:#cc7832;\">, </span>callback)<span style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">,</span></pre></div><div>注意这里第一个参数是ReactElement类型，通常为了可读性和开发效率我们传入JSX写的结构，最终会编译转换成调用React的createElement方法生成虚拟元素ReactElement结构传入render中。这里我们先看一下React.createElement做了哪些事情（src/isomorphic/classic/element/ReactElement.js）</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><br/><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Create and return a new ReactElement of the given type.<br/></span><span style=\"color:#629755;font-style:italic;\"> * See <a href=\"https://facebook.github.io/react/docs/react-api.html#createelement\">https://facebook.github.io/react/docs/react-api.html#createelement</a><br/></span><span style=\"color:#629755;font-style:italic;\"> */<br/></span><span style=\"color:#ffc66d;\">ReactElement</span>.<span style=\"color:#ffc66d;\">createElement </span>= <span style=\"color:#cc7832;font-weight:bold;\">function</span>(type<span style=\"color:#cc7832;\">, </span>config<span style=\"color:#cc7832;\">, </span>children) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>propName<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// Reserved names are extracted<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>props = {}<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>key = <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>ref = <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>self = <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>source = <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(config != <span style=\"color:#cc7832;font-weight:bold;\">null</span>) {<br/>        <span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#ffc66d;\">hasValidRef</span>(config)) {<br/>            ref = config.<span style=\"color:#9876aa;\">ref</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/>        <span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#ffc66d;\">hasValidKey</span>(config)) {<br/>            key = <span style=\"color:#6a8759;\">'' </span>+ config.key<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/><br/>        self = config.<span style=\"color:#9876aa;\">__self </span>=== <span style=\"color:#9876aa;\">undefined </span>? <span style=\"color:#cc7832;font-weight:bold;\">null </span>: config.<span style=\"color:#9876aa;\">__self</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>source = config.<span style=\"color:#9876aa;\">__source </span>=== <span style=\"color:#9876aa;\">undefined </span>? <span style=\"color:#cc7832;font-weight:bold;\">null </span>: config.<span style=\"color:#9876aa;\">__source</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">// config中的内容复制到props<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(propName <span style=\"color:#cc7832;font-weight:bold;\">in </span>config) {<br/>            <span style=\"color:#cc7832;font-weight:bold;\">if </span>(hasOwnProperty.<span style=\"color:#ffc66d;\">call</span>(config<span style=\"color:#cc7832;\">, </span>propName) &amp;&amp;<br/>                !RESERVED_PROPS.<span style=\"color:#ffc66d;\">hasOwnProperty</span>(propName)) {<br/>                props[propName] = config[propName]<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span>}<br/>        }<br/>    }<br/><br/>    <span style=\"color:#808080;\">//将第三个及之后的参数作为children赋值给props的children属性<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>childrenLength = arguments.<span style=\"color:#9876aa;\">length </span>- <span style=\"color:#6897bb;\">2</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(childrenLength === <span style=\"color:#6897bb;\">1</span>) {<br/>        props.<span style=\"color:#9876aa;\">children </span>= children<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(childrenLength &gt; <span style=\"color:#6897bb;\">1</span>) {<br/>        <span style=\"color:#cc7832;font-weight:bold;\">var </span>childArray = Array(childrenLength)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(<span style=\"color:#cc7832;font-weight:bold;\">var </span>i = <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">; </span>i &lt; childrenLength<span style=\"color:#cc7832;\">; </span>i++) {<br/>            childArray[i] = arguments[i + <span style=\"color:#6897bb;\">2</span>]<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/><br/>        props.<span style=\"color:#9876aa;\">children </span>= childArray<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/><br/>    <span style=\"color:#808080;\">// 如果某个props为空且存在默认props，赋值<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(type &amp;&amp; type.<span style=\"color:#9876aa;font-style:italic;\">defaultProps</span>) {<br/>        <span style=\"color:#cc7832;font-weight:bold;\">var </span>defaultProps = type.<span style=\"color:#9876aa;font-style:italic;\">defaultProps</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(propName <span style=\"color:#cc7832;font-weight:bold;\">in </span>defaultProps) {<br/>            <span style=\"color:#cc7832;font-weight:bold;\">if </span>(props[propName] === <span style=\"color:#9876aa;\">undefined</span>) {<br/>                props[propName] = defaultProps[propName]<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span>}<br/>        }<br/>    }<br/><br/>    <span style=\"color:#cc7832;font-weight:bold;\">return </span><span style=\"color:#ffc66d;\">ReactElement</span>(<br/>        type<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>key<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>ref<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>self<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>source<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>ReactCurrentOwner.<span style=\"color:#9876aa;\">current</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>props<br/>    )<span style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">;</span>\n</pre></div><div><br/></div><div>下面结合源码详细讲解整个渲染的过程。</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#ffc66d;\">render</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(nextElement<span style=\"color:#cc7832;\">, </span>container<span style=\"color:#cc7832;\">, </span>callback) {<br/>  <span style=\"color:#cc7832;font-weight:bold;\">return </span>ReactMount.<span style=\"color:#ffc66d;\">_renderSubtreeIntoContainer</span>(<span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">, </span>nextElement<span style=\"color:#cc7832;\">, </span>container<span style=\"color:#cc7832;\">, </span>callback)<span style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">,</span>\n</pre>去掉各种检查后的代码如下：</div><div>思路：首先获得dom container里原有的ReactElement，如果存在则将实际需要渲染的ReactElement（上一步用<font style=\"font-family: Menlo; font-size: 12px; background-color: rgb(43, 43, 43); color: rgb(128, 128, 128);\">TopLevelWrapper</font>包裹的child）和新的ReactElement做比较（1），如果应该更新则更新组件（2），否则清空container内之前渲染的组件（3），生成新的根ReactComponent渲染到container中（4）。</div><div>主要流程图如下：<br/><img src=\"/images/2017-01-20/%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B%E5%9B%BE.png\" height=\"558\" width=\"650\"/><br/></div><div><pre style=\"background-color: rgb(43, 43, 43);\"><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">_renderSubtreeIntoContainer</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">: </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">function</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(parentComponent</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">, </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">nextElement</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">, </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">container</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">, </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">callback) {</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\"><br/></span><pre style=\"font-family: Menlo; font-size: 9pt; background-color: rgb(43, 43, 43);\"><span style=\"font-size: 9pt;\"><font><pre style=\"background-color: rgb(43, 43, 43); font-family: Menlo; font-size: 9pt;\">   <span style=\"color: rgb(128, 128, 128);\">//nextElement外包一层react定义的TopLevelWrapper用于屏蔽各类组件的差异记录一些变量，比如顶层组件的计数<br/></span><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">   var </span><font color=\"#a9b7c6\">nextWrappedElement = React.</font><span style=\"color: rgb(152, 118, 170);\">createElement</span><font color=\"#a9b7c6\">(<br/>     </font><span style=\"color: rgb(255, 198, 109);\">TopLevelWrapper</span><span style=\"color: rgb(204, 120, 50);\">,<br/></span><span style=\"color: rgb(204, 120, 50);\">     </span><font color=\"#a9b7c6\">{ </font><span style=\"color: rgb(152, 118, 170);\">child</span><font color=\"#a9b7c6\">: nextElement }<br/>   )</font>;</pre></font></span></pre><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">nextContext = getContextForSubtree(parentComponent)</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;//本次调用返回null<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">prevComponent = </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">getTopLevelWrapperInContainer</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(container)</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\"><br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">if </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(prevComponent) {<br/>    </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">prevWrappedElement = prevComponent.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_currentElement</span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">prevElement = prevWrappedElement.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">props</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">.child</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">if </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(shouldUpdateReactComponent(prevElement</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">, </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">nextElement)) {      &lt;——— 1<br/>      </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">publicInst = prevComponent.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_renderedComponent</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">getPublicInstance</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">()</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">      </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">updatedCallback = callback &amp;&amp; </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">function</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">() {<br/>        callback.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">call</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(publicInst)</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">      </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">}</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">      </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">ReactMount.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">_updateRootComponent</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(   &lt;———— 2<br/>        prevComponent</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">        </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">nextWrappedElement</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">        </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">nextContext</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">        </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">container</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">        </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">updatedCallback<br/>      )</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">      </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">return </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">publicInst</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">} </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">else </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">{<br/>      ReactMount.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">unmountComponentAtNode</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(container)</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;  <font style=\"font-family: Menlo; background-color: rgb(43, 43, 43); font-size: 12px; color: rgb(169, 183, 198);\">&lt;———— 3</font><br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">}<br/>  }<br/><br/>  </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">reactRootElement = </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">getReactRootElementInContainer</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(container)</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;//获得container节点的第一个dom子节点<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">containerHasReactMarkup =<br/>    reactRootElement &amp;&amp; !!</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">internalGetID</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(reactRootElement)</font><font face=\"Menlo\" color=\"#cc7832\" size=\"2\">; //判断这个dom子节点是不是React渲染的（React渲染的会有会有一个‘data-reacted’的attribute属性）<br/></font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">containerHasNonRootReactChild = </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">hasNonRootReactChild</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(container)</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">; //判断container是否包含不是React根节点的React实例<br/></span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\"><br/>  </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font color=\"#a9b7c6\"><font face=\"Menlo\" size=\"2\">shouldReuseMarkup =           //这里不太明白什么情况会重用markup，因为在’3’已经把container中的dom清空了，欢迎讨论<br/>    containerHasReactMarkup &amp;&amp;<br/>    !prevComponent &amp;&amp;<br/>    !containerHasNonRootReactChild</font></font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">component = ReactMount.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">_renderNewRootComponent</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(   </font><font style=\"font-family: Menlo; font-size: 12px; color: rgb(169, 183, 198); background-color: rgb(43, 43, 43);\">&lt;———— 4</font><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\"><br/>    nextWrappedElement</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">container</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">shouldReuseMarkup</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">nextContext</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">callback<br/>  ).</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_renderedComponent</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">getPublicInstance</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">()</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">return </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">component</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">}</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br/></span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\"\n/></pre><br/></div><div>下面分别展开研究四个函数：</div><div><div><ol start=\"1\"><li>shouldUpdateReactComponent.js ( src/renderers/shared/shared/shouldUpdateReactComponent.js ）</li></ol>这里只做了简单的类型比较，如果父节点的类型不同，则即使子节点相同也不做递归比较，官方文档参见<a href=\"https://facebook.github.io/react/docs/reconciliation.html#elements-of-different-types\">这里</a>。<br/></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#cc7832;font-weight:bold;\">function </span><span style=\"color:#ffc66d;\">shouldUpdateReactComponent</span>(prevElement<span style=\"color:#cc7832;\">, </span>nextElement) {<br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>prevEmpty = prevElement === <span style=\"color:#cc7832;font-weight:bold;\">null </span>|| prevElement === <span style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextEmpty = nextElement === <span style=\"color:#cc7832;font-weight:bold;\">null </span>|| nextElement === <span style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(prevEmpty || nextEmpty) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">return </span>prevEmpty === nextEmpty<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>prevType = <span style=\"color:#cc7832;font-weight:bold;\">typeof </span>prevElement<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextType = <span style=\"color:#cc7832;font-weight:bold;\">typeof </span>nextElement<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(prevType === <span style=\"color:#6a8759;\">'string' </span>|| prevType === <span style=\"color:#6a8759;\">'number'</span>) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">return </span>(nextType === <span style=\"color:#6a8759;\">'string' </span>|| nextType === <span style=\"color:#6a8759;\">'number'</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>    <span style=\"color:#cc7832;font-weight:bold;\">return </span>(<br/>      nextType === <span style=\"color:#6a8759;\">'object' </span>&amp;&amp;<br/>      prevElement.<span style=\"color:#9876aa;\">type </span>=== nextElement.<span style=\"color:#9876aa;\">type </span>&amp;&amp;<br/>      prevElement.<span style=\"color:#9876aa;\">key </span>=== nextElement.<span style=\"color:#9876aa;\">key<br/></span><span style=\"color:#9876aa;\">    </span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/>}<br/>\n</pre></div></div><div><font style=\"font-size: 14px;\">  </font></div><div><font style=\"font-size: 14px;\">  2. <span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(69, 69, 69);\">ReactMount._updateRootComponent（  src/renderers/dom/stack/client/ReactMount.js ）</span><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(228, 175, 9);\"><br/>\n</span></font></div><div>最主要的两句：</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\">ReactUpdateQueue.<span style=\"color:#ffc66d;\">enqueueElementInternal</span>(prevComponent<span style=\"color:#cc7832;\">, </span>nextElement<span style=\"color:#cc7832;\">, </span>nextContext)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(callback) {<br/>  ReactUpdateQueue.<span style=\"color:#ffc66d;\">enqueueCallbackInternal</span>(prevComponent<span style=\"color:#cc7832;\">, </span>callback)<span style=\"color:#cc7832;\">;<br/></span>}\n</pre>这里调用了src/renderers/shared/stack/reconciler/ReactUpdateQueue.js 的两个函数，分别给ReactComponent实例添加属性，要渲染的ReactElemnt、初始化上下文和在渲染完成后执行的回掉函数队列，然后调用ReactUpdates.js (src/renderers/shared/stack/reconciler/ReactUpdates.js)的enqueueUpadate加入到更新队列中（更新策略下文将详细讲解）。</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#ffc66d;\">enqueueElementInternal</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(internalInstance<span style=\"color:#cc7832;\">, </span>nextElement<span style=\"color:#cc7832;\">, </span>nextContext) {<br/>  internalInstance.<span style=\"color:#9876aa;\">_pendingElement </span>= nextElement<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#808080;\">// </span><span style=\"color:#a8c023;font-style:italic;\">TODO: introduce _pendingContext instead of setting it directly.<br/></span><span style=\"color:#a8c023;font-style:italic;\">  </span>internalInstance.<span style=\"color:#9876aa;\">_context </span>= nextContext<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#ffc66d;\">enqueueUpdate</span>(internalInstance)<span style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">,</span>\n</pre></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#ffc66d;\">enqueueCallbackInternal</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(internalInstance<span style=\"color:#cc7832;\">, </span>callback) {<br/>  <span style=\"color:#cc7832;font-weight:bold;\">if </span>(internalInstance.<span style=\"color:#9876aa;\">_pendingCallbacks</span>) {<br/>    internalInstance.<span style=\"color:#9876aa;\">_pendingCallbacks</span>.<span style=\"color:#ffc66d;\">push</span>(callback)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>    internalInstance.<span style=\"color:#9876aa;\">_pendingCallbacks </span>= [callback]<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/>  <span style=\"color:#ffc66d;\">enqueueUpdate</span>(internalInstance)<span style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">,</span>\n</pre><br/></div><div> <font style=\"font-size: 14px;\"> 3.</font><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(69, 69, 69);\"><font style=\"font-size: 14px;\">ReactMount.unmountComponentAtNode</font></span></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Unmounts and destroys the React component rendered in the `container`.<br/></span><span style=\"color:#629755;font-style:italic;\"> * See <a href=\"https://facebook.github.io/react/docs/react-dom.html#unmountcomponentatnode\">https://facebook.github.io/react/docs/react-dom.html#unmountcomponentatnode</a><br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{DOMElement} container DOM element containing a React component.<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@return </span><span style=\"color:#629755;font-style:italic;\">{boolean} True if a component was found in and unmounted from<br/></span><span style=\"color:#629755;font-style:italic;\"> *                   `container`<br/></span><span style=\"color:#629755;font-style:italic;\"> */<br/></span><span style=\"color:#ffc66d;\">unmountComponentAtNode</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(container) {<br/><br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>prevComponent = <span style=\"color:#ffc66d;\">getTopLevelWrapperInContainer</span>(container)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(!prevComponent) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">return false</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/>  <span style=\"color:#cc7832;font-weight:bold;\">delete </span>instancesByReactRootID[prevComponent.<span style=\"color:#9876aa;\">_instance</span>.rootID]<span style=\"color:#cc7832;\">;//devtools会用到的映射，这里可以先忽略<br/></span><span style=\"color:#cc7832;\">  </span>ReactUpdates.<span style=\"color:#ffc66d;\">batchedUpdates</span>(<br/>    <span style=\"color:#ffc66d;\">unmountComponentFromNode</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>prevComponent<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>container<br/>  )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">return true</span><span style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">,</span>\n</pre>注意这里也调用ReactUpdates.js (src/renderers/shared/stack/reconciler/ReactUpdates.js)类的函数batchedUpadates更新组件（更新策略下文将详细讲解），传入三个参数，第一个参数作为更新策略执行过程中调用的函数，后两个作为参数，这里要执行的函数是：</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#cc7832;font-weight:bold;\">function </span><span style=\"color:#ffc66d;\">unmountComponentFromNode</span>(instance<span style=\"color:#cc7832;\">, </span>container) {<br/>  //这个函数主要作用是：1.去掉组件中的ref引用，调用组件的unmountComponent函数，这里主要有三类组件文本组件、html标签对应的组件和自定义组件，每种对应的unmountComponent实现方式不同，主要做些清理React内部用到的缓存，组件上绑定的事件之类的工作，具体参见下文。<br/>  ReactReconciler.<span style=\"color:#ffc66d;\">unmountComponent</span>(<br/>    instance<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">false </span><span style=\"color:#808080;\">/* safely */</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">false </span><span style=\"color:#808080;\">/* skipLifecycle */<br/></span><span style=\"color:#808080;\">  </span>)<span style=\"color:#cc7832;\">;<br/></span><br/>  <span style=\"color:#cc7832;font-weight:bold;\">if </span>(container.nodeType === DOC_NODE_TYPE) {<br/>    container = container.documentElement<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><br/>  <span style=\"color:#808080;\">//可以看到这里循环移除了container节点中的全部dom元素，有很多方法可以实现，这里有个有趣的效率对比试验： <a href=\"http://jsperf.com/emptying-a-node\">http://jsperf.com/emptying-a-node</a><br/></span><span style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">while </span>(container.lastChild) {<br/>    container.removeChild(container.lastChild)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><span style=\"background-color:#344134;\">}</span>\n</pre><br/></div><div><ol start=\"4\"><li><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(69, 69, 69);\"><font style=\"font-size: 14px;\">ReactMount._renderNewRootComponent</font></span></li></ol><div><font face=\"Helvetica\" color=\"#454545\">先ReactElement初始<font style=\"font-size: 14px;\">化ReactComponent实例（1），这里可能是自定义组件</font><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(69, 69, 69);\"><font style=\"font-size: 14px;\">ReactCompositeComponent，文本元素对应的ReactDOMTextComponent和浏览器基本元素对应的ReactDOMComponent。然后调用更新策略将组件渲染到container中，以及做一些比如ref绑定等初始化工作（2）。</font><br/>\n</span></font></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#ffc66d;\">_renderNewRootComponent</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br/>  nextElement<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>container<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>shouldReuseMarkup<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>context<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>callback<br/>) {<br/> //<span style=\"color: rgb(98, 151, 85); font-style: italic; font-size: 9pt;\">Listens to window scroll and resize events. We cache scroll values so that </span><span style=\"color: rgb(98, 151, 85); font-style: italic; font-size: 9pt;\">application code can access them without triggering reflows.这里先不做分析</span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span>ReactBrowserEventEmitter.<span style=\"color:#ffc66d;\">ensureScrollValueMonitoring</span>()<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>componentInstance = instantiateReactComponent(nextElement<span style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">false</span>)<span style=\"color:#cc7832;\">; &lt;——— 1<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(callback) {<br/>    componentInstance.<span style=\"color:#9876aa;\">_pendingCallbacks </span>= [<span style=\"color:#cc7832;font-weight:bold;\">function</span>() { //初始化render完成后调用的回掉函数队列<br/>      callback.<span style=\"color:#ffc66d;\">call</span>(componentInstance.<span style=\"color:#9876aa;\">_renderedComponent</span>.<span style=\"color:#ffc66d;\">getPublicInstance</span>())<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}]<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><br/>  <span style=\"color:#808080;\">// The initial render is synchronous but any updates that happen during<br/></span><span style=\"color:#808080;\">  // rendering, in componentWillMount or componentDidMount, will be batched<br/></span><span style=\"color:#808080;\">  // according to the current batching strategy.<br/></span><span style=\"color:#808080;\"><br/></span><span style=\"color:#808080;\">  </span>ReactUpdates.<span style=\"color:#ffc66d;\">batchedUpdates</span>(  &lt;———— 2<br/>    <span style=\"color:#ffc66d;\">batchedMountComponentIntoNode</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>componentInstance<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>container<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>shouldReuseMarkup<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>context<br/>  )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>wrapperID = componentInstance.<span style=\"color:#9876aa;\">_instance</span>.rootID<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>instancesByReactRootID[wrapperID] = componentInstance<span style=\"color:#cc7832;\">; <font style=\"font-family: Menlo; font-size: 12px; background-color: rgb(43, 43, 43); color: rgb(204, 120, 50);\">//devtools会用到的映射，先忽略</font><br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">return </span>componentInstance<span style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">,</span>\n</pre><br/></div></div><div>下面分别展开讲解。</div><div><div><ol start=\"1\"><li><font style=\"font-size: 14px;\"> </font><font><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(69, 69, 69);\"><font><font style=\"font-size: 14px;\">instantiateReactComponent（src/<font style=\"color: rgb(69, 69, 69); font-family: Helvetica;\">renderers/shared/stack/reconciler/instantiateReactComponent.js</font>） 初始化组件实例，这里用到了工厂模式，根据传入的参数‘生产’对应的React Component实例。<span style=\"color: rgb(51, 51, 51); font-family: -apple-system, 'PingFang SC', 'Hiragino Sans GB', Arial, 'Microsoft YaHei', 'Helvetica Neue', sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); float: none;\">分别实例化</span><code style=\"box-sizing: border-box; outline: none; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 0.2em 0.4em; word-break: break-word; color: rgb(78, 89, 128); background-color: rgb(248, 248, 248); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">ReactDOMTextComponent</code><span style=\"color: rgb(51, 51, 51); font-family: -apple-system, 'PingFang SC', 'Hiragino Sans GB', Arial, 'Microsoft YaHei', 'Helvetica Neue', sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; float: none;\">, </span><code style=\"box-sizing: border-box; outline: none; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 0.2em 0.4em; word-break: break-word; color: rgb(78, 89, 128); background-color: rgb(248, 248, 248); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">ReactDOMComponent</code><span style=\"color: rgb(51, 51, 51); font-family: -apple-system, 'PingFang SC', 'Hiragino Sans GB', Arial, 'Microsoft YaHei', 'Helvetica Neue', sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); float: none;\">, </span><code style=\"box-sizing: border-box; outline: none; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 0.2em 0.4em; word-break: break-word; color: rgb(78, 89, 128); background-color: rgb(248, 248, 248); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">ReactCompositeComponent</code><span style=\"color: rgb(51, 51, 51); font-family: -apple-system, 'PingFang SC', 'Hiragino Sans GB', Arial, 'Microsoft YaHei', 'Helvetica Neue', sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; float: none;\">类。这些类用来管理</span><code style=\"box-sizing: border-box; outline: none; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 0.2em 0.4em; word-break: break-word; color: rgb(78, 89, 128); background-color: rgb(248, 248, 248); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">ReactElement</code><span style=\"color: rgb(51, 51, 51); font-family: -apple-system, 'PingFang SC', 'Hiragino Sans GB', Arial, 'Microsoft YaHei', 'Helvetica Neue', sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; float: none;\">,负责将不同的</span><code style=\"box-sizing: border-box; outline: none; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 0.2em 0.4em; word-break: break-word; color: rgb(78, 89, 128); background-color: rgb(248, 248, 248); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">ReactElement</code><span style=\"color: rgb(51, 51, 51); font-family: -apple-system, 'PingFang SC', 'Hiragino Sans GB', Arial, 'Microsoft YaHei', 'Helvetica Neue', sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; float: none;\">转化成DOM(通过mountComponent方法),负责更新DOM(通过receiveComponent方法，updateComponent方法，下面详细介绍)等。</span></font></font></span></font></li></ol><div style=\"text-align: center; \"><img src=\"/images/2017-01-20/%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B%E5%9B%BE%20(1).png\" height=\"251\" width=\"554\"/><br/></div><div><font face=\"Helvetica\" color=\"#454545\"/></div></div></div><div><font face=\"Helvetica\" color=\"#454545\"><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Given a ReactNode, create an instance that will actually be mounted.<br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactNode} node<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{boolean} shouldHaveDebugID<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@return </span><span style=\"color:#629755;font-style:italic;\">{object} A new instance of the element's constructor.<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@protected<br/></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\" /><span style=\"color:#629755;font-style:italic;\">*/<br/></span><span style=\"color:#cc7832;font-weight:bold;\">function </span><span style=\"color:#ffc66d;\">instantiateReactComponent</span>(node<span style=\"color:#cc7832;\">, </span>shouldHaveDebugID) {<br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>instance<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(node === <span style=\"color:#cc7832;font-weight:bold;\">null </span>|| node === <span style=\"color:#cc7832;font-weight:bold;\">false</span>) {<br/>    instance = ReactEmptyComponent.<span style=\"color:#ffc66d;\">create</span>(<span style=\"color:#ffc66d;\">instantiateReactComponent</span>)<span style=\"color:#cc7832;\">;//这里生成一个空的component对象</span><span style=\"font-size: 9pt;\">ReactDOMEmptyComponent，渲染一行注释，可以忽略</span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span>} <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(<span style=\"color:#cc7832;font-weight:bold;\">typeof </span>node === <span style=\"color:#6a8759;\">'object'</span>) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>element = node<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>type = element.<span style=\"color:#9876aa;\">type</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\"><br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">typeof </span>element.<span style=\"color:#9876aa;\">type </span>=== <span style=\"color:#6a8759;\">'string'</span>) { //如果类型是浏览器标签比如“div”、“span”之类 创建<font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); color: rgb(78, 89, 128);\">ReactDOMComponent 对象</font><br/>      instance = ReactHostComponent.<span style=\"color:#ffc66d;\">createInternalComponent</span>(element)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(<span style=\"color:#ffc66d;\">isInternalComponentType</span>(element.<span style=\"color:#9876aa;\">type</span>)) {//这个判断是否是内部组件的方式没有遇到过（待研究补充）<br/>      <span style=\"color:#808080;\">// This is temporarily available for custom components that are not string<br/></span><span style=\"color:#808080;\">      // representations. I.e. ART. Once those are updated to use the string<br/></span><span style=\"color:#808080;\">      // representation, we can drop this code path.<br/></span><span style=\"color:#808080;\">      </span>instance = <span style=\"color:#cc7832;font-weight:bold;\">new </span>element.<span style=\"color:#9876aa;\">type</span>(element)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">      </span><span style=\"color:#808080;\">// We renamed this. Allow the old name for compat. :(<br/></span><span style=\"color:#808080;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(!instance.<span style=\"color:#9876aa;\">getHostNode</span>) {<br/>        instance.<span style=\"color:#9876aa;\">getHostNode </span>= instance.<span style=\"color:#ffc66d;\">getNativeNode</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>}<br/>    } <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>      instance = <span style=\"color:#cc7832;font-weight:bold;\">new </span><span style=\"color:#ffc66d;\">ReactCompositeComponentWrapper</span>(element)<span style=\"color:#cc7832;\">; //创建自定义组件<font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); color: rgb(78, 89, 128);\">ReactCompositeComponent对象</font><br/></span><span style=\"color:#cc7832;\">    </span>}<br/>  } <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(<span style=\"color:#cc7832;font-weight:bold;\">typeof </span>node === <span style=\"color:#6a8759;\">'string' </span>|| <span style=\"color:#cc7832;font-weight:bold;\">typeof </span>node === <span style=\"color:#6a8759;\">'number'</span>) {<span style=\"color:#cc7832;\">//创建文本节点<font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); color: rgb(78, 89, 128);\">ReactDOMTextComponent 对象</font></span><br/>    instance = ReactHostComponent.<span style=\"color:#ffc66d;\">createInstanceForText</span>(node)<span style=\"color:#cc7832;\">; <br/></span><span style=\"color:#cc7832;\">  </span>} <br/><br/>  <span style=\"color:#808080;\">// These two fields are used by the DOM and ART diffing algorithms<br/></span><span style=\"color:#808080;\">  // respectively. Instead of using expandos on components, we should be<br/></span><span style=\"color:#808080;\">  // storing the state needed by the diffing algorithms elsewhere.<br/></span><span style=\"color:#808080;\">  </span>instance.<span style=\"color:#9876aa;\">_mountIndex </span>= <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>instance.<span style=\"color:#9876aa;\">_mountImage </span>= <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><br/>  <span style=\"color:#cc7832;font-weight:bold;\">return </span>instance<span style=\"color:#cc7832;\">;<br/></span>}<br/></pre></font></div><div><font face=\"Helvetica\" color=\"#454545\"><br/></font></div><div><font face=\"Helvetica\" color=\"#454545\">下面分别展开介绍三种组件的渲染、更新、卸载策略。</font></div><div><br/></div><div><font face=\"Helvetica\" color=\"#454545\">1.1）<font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); font-size: 12px; color: rgb(78, 89, 128);\">ReactDOMTextComponent（src/<font style=\"font-size: 12px; color: rgb(78, 89, 128); font-family: Menlo;\">renderers/dom/stack/client/ReactDOMTextComponent.js）</font></font></font></div><div><font face=\"Helvetica\" color=\"#454545\"><font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); font-size: 12px; color: rgb(78, 89, 128);\"><font style=\"font-size: 12px; color: rgb(78, 89, 128); font-family: Menlo;\"/></font></font></div><div>重点看下三个函数：</div><div><br/></div><div>    1) mountComponent 在render的时候调用，返回渲染内容，针对文本节点返回：</div><div>        &lt;!-- react-text:domId —&gt;这是文本内容&lt;!-- /react-text —&gt;</div><div><br/></div><div><div>  2）receiveComponent 在setState触发更新时调用这个函数，如果文本不同，只替换了注释中的内容。</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#ffc66d;\">receiveComponent</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(nextText<span style=\"color:#cc7832;\">, </span>transaction) {<br/>  <span style=\"color:#cc7832;font-weight:bold;\">if </span>(nextText !== <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span>) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement </span>= nextText<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextStringText = <span style=\"color:#6a8759;\">'' </span>+ nextText<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(nextStringText !== <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_stringText</span>) {<span style=\"color:#808080;\"><br/></span><span style=\"color:#808080;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_stringText </span>= nextStringText<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>commentNodes = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">getHostNode</span>()<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>DOMChildrenOperations.<span style=\"color:#ffc66d;\">replaceDelimitedText</span>(<br/>        commentNodes[<span style=\"color:#6897bb;\">0</span>]<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>commentNodes[<span style=\"color:#6897bb;\">1</span>]<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>nextStringText<br/>      )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/>  }<br/>}<span style=\"color:#cc7832;\">,</span>\n</pre><br/></div><div>3）unmountComponent 去掉对text节点引用，重置一些变量。</div><div><br/></div><div><br/></div><div>1.2）<font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); color: rgb(78, 89, 128);\">ReactDOMComponent</font></div><div><br/></div><div>    1）mountComponent 生成组件对应的dom结构</div><div>代码比较长，主要分为四个步骤：</div><div><ol start=\"1\"><li>做一些生成markup前的“准备工作”  ，针对不同类型做一些变量初始化以及让React事件系统捕捉指定事件。</li></ol>           以input标签为例介绍一下：<br/><div><ul><li> ReactDOMInput.mountWrapper(this, props, hostParent);  <br/></li></ul></div><div>           给input组件实例初始化状态，mountWrapper函数里只给实例设置了一个属性用以保存input的初始value和初始checked值。</div><div>           <span style=\"color:#cc7832;font-weight:bold;\">var </span>defaultValue = props.<span style=\"color:#9876aa;\">defaultValue</span><span style=\"color:#cc7832;\">;<br/></span><span>    <span>       </span></span>inst.<span style=\"color:#9876aa;\">_wrapperState </span>= {</div><div><span style=\"color:#9876aa;\">             initialChecked</span>: props.<span style=\"color:#9876aa;\">checked </span>!= <span style=\"color:#cc7832;font-weight:bold;\">null </span>? props.<span style=\"color:#9876aa;\">checked </span>: props.<span style=\"color:#9876aa;\">defaultChecked</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  <span>           </span></span><span style=\"color:#9876aa;\">initialValue</span>: props.<span style=\"color:#9876aa;\">value </span>!= <span style=\"color:#cc7832;font-weight:bold;\">null </span>? props.<span style=\"color:#9876aa;\">value </span>: defaultValue<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\"><span>    <span>  </span></span>       </span><span style=\"color:#9876aa;\">listeners</span>: <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">,<br/></span>           }<span style=\"color:#cc7832;\">;</span></div><div><ul><li> props = ReactDOMInput.getHostProps(this, props); 将更多input元素要用到的属性初始化并赋给事例，如value、type、max、min等等</li><li> transaction.getReactMountReady().enqueue(trackInputValue, this);<br/></li><li> transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this); 添加预定义事件，这里react添加了invalid事件</li><li> ensureListeningTo(this, 'onChange', transaction); 对于受控组件确保监听on change事件</li></ul><div><br/></div><div/></div><ol start=\"2\"><li>设置正确的namespace，根据父容器的namespace类型和当前实例的tag类型设置namespace 变量是html svg还是mathml<br/></li><li><b>创建将渲染在页面的markup（重要！！！讲解参见注释）</b></li></ol><div><ol start=\"4\"><li>做一些“收尾”工作，比如input、texture的内容初始化以及各个元素的autofocus设置<br/></li></ol></div></div><div>       </div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><br/><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Generates root tag markup then recurses. This method has side effects and<br/></span><span style=\"color:#629755;font-style:italic;\"> * is not idempotent.<br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@internal<br/></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\" /><span style=\"color:#629755;font-style:italic;\">* </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction|ReactServerRenderingTransaction} transaction<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?ReactDOMComponent} the parent component instance<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?object} info about the host container<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{object} context<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@return </span><span style=\"color:#629755;font-style:italic;\">{string} The computed markup.<br/></span><span style=\"color:#629755;font-style:italic;\"> */<br/></span>mountComponent: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br/>    transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>hostParent<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>hostContainerInfo<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>context<br/>) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_rootNodeID </span>= globalIdCounter++<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_domID </span>= hostContainerInfo.<span style=\"color:#9876aa;\">_idCounter</span>++<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_hostParent </span>= hostParent<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_hostContainerInfo </span>= hostContainerInfo<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>props = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span>.<span style=\"color:#9876aa;\">props</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">switch </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span>) {  &lt;———— <span style=\"color:#6897bb;\">1 </span>做一些生成markup前的“准备工作”<br/>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'audio'</span>:<br/>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'form'</span>:<br/>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'iframe'</span>:<br/>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'img'</span>:<br/>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'link'</span>:<br/>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'object'</span>:<br/>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'source'</span>:<br/>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'video'</span>:<br/>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'details'</span>:<br/>            <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_wrapperState </span>= {<br/>                <span style=\"color:#9876aa;\">listeners</span>: <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>}<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span><span style=\"color:#808080;\">//针对一些特性元素预先绑定一些事件<br/></span><span style=\"color:#808080;\">            </span>transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<span style=\"color:#ffc66d;\">trapBubbledEventsLocal</span><span style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span><span style=\"color:#cc7832;font-weight:bold;\">break</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'input'</span>:<span style=\"color:#808080;\">//给input组件实例初始化状态<br/></span><span style=\"color:#808080;\">            </span>ReactDOMInput.<span style=\"color:#ffc66d;\">mountWrapper</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>props<span style=\"color:#cc7832;\">, </span>hostParent)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span>props = ReactDOMInput.<span style=\"color:#ffc66d;\">getHostProps</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>props)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span>transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<span style=\"color:#ffc66d;\">trackInputValue</span><span style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span>transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<span style=\"color:#ffc66d;\">trapBubbledEventsLocal</span><span style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span><span style=\"color:#808080;\">// For controlled components we always need to ensure we're listening<br/></span><span style=\"color:#808080;\">            // to onChange. Even if there is no listener.<br/></span><span style=\"color:#808080;\">            </span><span style=\"color:#ffc66d;\">ensureListeningTo</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span><span style=\"color:#6a8759;\">'onChange'</span><span style=\"color:#cc7832;\">, </span>transaction)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span><span style=\"color:#cc7832;font-weight:bold;\">break</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">       //略去其他……</span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span>}<br/><br/>    <span style=\"color:#ffc66d;\">assertValidProps</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>props)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// We create tags in the namespace of their parent container, except HTML<br/></span><span style=\"color:#808080;\">    // tags get no namespace.<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>namespaceURI<span style=\"color:#cc7832;\">; </span>&lt;————— <span style=\"color:#6897bb;\">2 </span>设置正确的namespace<br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>parentTag<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(hostParent != <span style=\"color:#cc7832;font-weight:bold;\">null</span>) {<br/>        namespaceURI = hostParent.<span style=\"color:#9876aa;\">_namespaceURI</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>parentTag = hostParent.<span style=\"color:#9876aa;\">_tag</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(hostContainerInfo.<span style=\"color:#9876aa;\">_tag</span>) {<br/>        namespaceURI = hostContainerInfo.<span style=\"color:#9876aa;\">_namespaceURI</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>parentTag = hostContainerInfo.<span style=\"color:#9876aa;\">_tag</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/>    <span style=\"color:#cc7832;font-weight:bold;\">if </span>(namespaceURI == <span style=\"color:#cc7832;font-weight:bold;\">null </span>||<br/>        namespaceURI === DOMNamespaces.<span style=\"color:#9876aa;\">svg </span>&amp;&amp; parentTag === <span style=\"color:#6a8759;\">'foreignobject'</span>) {<br/>        namespaceURI = DOMNamespaces.<span style=\"color:#9876aa;\">html</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/>    <span style=\"color:#cc7832;font-weight:bold;\">if </span>(namespaceURI === DOMNamespaces.<span style=\"color:#9876aa;\">html</span>) {<br/>        <span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag </span>=== <span style=\"color:#6a8759;\">'svg'</span>) {<br/>            namespaceURI = DOMNamespaces.<span style=\"color:#9876aa;\">svg</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>} <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag </span>=== <span style=\"color:#6a8759;\">'math'</span>) {<br/>            namespaceURI = DOMNamespaces.<span style=\"color:#9876aa;\">mathml</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/>    }<br/>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_namespaceURI </span>= namespaceURI<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>mountImage<span style=\"color:#cc7832;\">; </span>&lt;————— <span style=\"color:#6897bb;\">3 </span>创建将渲染在页面的markup<br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>type = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span>.<span style=\"color:#9876aa;\">type</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">//默认用createElement创建<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(transaction.<span style=\"color:#9876aa;\">useCreateElement</span>) {<br/>        <span style=\"color:#cc7832;font-weight:bold;\">var </span>ownerDocument = hostContainerInfo.<span style=\"color:#9876aa;\">_ownerDocument</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>el<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(namespaceURI === DOMNamespaces.<span style=\"color:#9876aa;\">html</span>) {<br/>            <span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag </span>=== <span style=\"color:#6a8759;\">'script'</span>) {<br/>                <span style=\"color:#808080;\">//如果是script标签，注意这里包在div里再获取<br/></span><span style=\"color:#808080;\">                // Create the script via .innerHTML so its \"parser-inserted\" flag is<br/></span><span style=\"color:#808080;\">                // set to true and it does not execute<br/></span><span style=\"color:#808080;\">                </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>div = ownerDocument.<span style=\"color:#ffc66d;\">createElement</span>(<span style=\"color:#6a8759;\">'div'</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">                </span>div.<span style=\"color:#9876aa;\">innerHTML </span>= <span style=\"color:#6a8759;\">`&lt;</span>${type}<span style=\"color:#6a8759;\">&gt;&lt;/</span>${type}<span style=\"color:#6a8759;\">&gt;`</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">                </span>el = div.<span style=\"color:#ffc66d;\">removeChild</span>(div.<span style=\"color:#9876aa;\">firstChild</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span>} <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(props.<span style=\"color:#9876aa;\">is</span>) {<br/>                <span style=\"color:#808080;\">//和用户自定义元素相关，参见：https://developer.<a href=\"http://mozilla.org/en-US/docs/Web/API/Document/createElement\">mozilla.org/en-US/docs/Web/API/Document/createElement</a> <br/></span><span style=\"color:#808080;\">                //https://www.<a href=\"http://w3.org/TR/custom-elements/#customized-built-in-element\">w3.org/TR/custom-elements/#customized-built-in-element</a> 同时也是为了解决firefox下createElement的bug<br/></span><span style=\"color:#808080;\">                </span>el = ownerDocument.<span style=\"color:#ffc66d;\">createElement</span>(type<span style=\"color:#cc7832;\">, </span>props.<span style=\"color:#9876aa;\">is</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>                <span style=\"color:#808080;\">// Separate else branch instead of using `props.is || undefined` above becuase of a Firefox bug.<br/></span><span style=\"color:#808080;\">                // See discussion in <a href=\"https://github.com/facebook/react/pull/6896\">https://github.com/facebook/react/pull/6896</a><br/></span><span style=\"color:#808080;\">                // and discussion in <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1276240\">https://bugzilla.mozilla.org/show_bug.cgi?id=1276240</a><br/></span><span style=\"color:#808080;\">                </span>el = ownerDocument.<span style=\"color:#ffc66d;\">createElement</span>(type)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span>}<br/>        } <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>            el = ownerDocument.<span style=\"color:#ffc66d;\">createElementNS</span>(<br/>                namespaceURI<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">                </span>type<br/>            )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/>        <span style=\"color:#808080;\">//如果tag名包含’－’或指定“is”属性认为是用户自定义标签<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>isCustomComponentTag = <span style=\"color:#ffc66d;\">isCustomComponent</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span><span style=\"color:#cc7832;\">, </span>props)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//分别在react实例添加属性指向刚创建的节点，同时给节点添加属性指向当前实例<br/></span><span style=\"color:#808080;\">        </span>ReactDOMComponentTree.<span style=\"color:#ffc66d;\">precacheNode</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>el)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_flags </span>|= Flags.<span style=\"color:#9876aa;\">hasCachedChildNodes</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//如果是最外层标签，不是递归创建的子节点，则设置为React根元素，比如ReactDom.render(‘&lt;div&gt;&lt;input/&gt;&lt;/div&gt;’,node) 在创建到div层的时候设置为根元素，然后递归渲染子元素（input）的时候hostParent不为空了。<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(!<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_hostParent</span>) {<br/>            DOMPropertyOperations.<span style=\"color:#ffc66d;\">setAttributeForRoot</span>(el)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/>        <span style=\"color:#808080;\">//根据新旧props的差异更新对应dom元素上的属性，首次渲染没有旧props<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_updateDOMProperties</span>(<span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">, </span>props<span style=\"color:#cc7832;\">, </span>transaction<span style=\"color:#cc7832;\">, </span>isCustomComponentTag)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//初始化DOMLazyTree结构，根据不同浏览器选择不同的渲染策略，参见（src/renderers/dom/stack/client/DOMLazyTree.js）<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>lazyTree = DOMLazyTree(el)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//如果有子节点，则遍历子节点递归调用ReactReconciler.mountComponent（这个函数主要还是调用子节点实例对应的mountComponent）生成子节点的markup（可以简单理解为子节点dom树），保存到lazyTree中，<br/></span><span style=\"color:#808080;\">        //根据不同浏览器渲染dom的效率选择将子元素缓存在DOMLazyTree的队列中延迟渲染还是直接拼成一个完整的dom树返回<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_createInitialChildren</span>(transaction<span style=\"color:#cc7832;\">, </span>props<span style=\"color:#cc7832;\">, </span>context<span style=\"color:#cc7832;\">, </span>lazyTree)<span style=\"color:#cc7832;\">;    &lt;============<br/></span><span style=\"color:#cc7832;\">        </span>mountImage = lazyTree<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>        <span style=\"color:#808080;\">//判断是否是合法的tag名（用正则）<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#ffc66d;\">validateDangerousTag</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//用字符串拼接的方式创建起始标签，并添加事件监听、属性和样式内容<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>tagOpen = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_createOpenTagMarkupAndPutListeners</span>(transaction<span style=\"color:#cc7832;\">, </span>props)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//如果有子节点，则遍历子节点递归生成每一个子节点的ReactComponent实例，然后调用每个实例的ReactReconciler.mountComponent生成子节点的dom树<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>tagContent = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_createContentMarkup</span>(transaction<span style=\"color:#cc7832;\">, </span>props<span style=\"color:#cc7832;\">, </span>context)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//闭合标签<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(!tagContent &amp;&amp; omittedCloseTags[<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span>]) {<br/>            mountImage = tagOpen + <span style=\"color:#6a8759;\">'/&gt;'</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>            mountImage = tagOpen + <span style=\"color:#6a8759;\">'&gt;' </span>+ tagContent + <span style=\"color:#6a8759;\">'&lt;/' </span>+ type + <span style=\"color:#6a8759;\">'&gt;'</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/>    }<br/><br/>    <span style=\"color:#cc7832;font-weight:bold;\">switch </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span>) { &lt;—————<span style=\"color:#6897bb;\">4 </span>给事务添加组件渲染完毕后做的事情<br/>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'input'</span>:<br/>            transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<br/>                <span style=\"color:#ffc66d;\">inputPostMount</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">                </span><span style=\"color:#cc7832;font-weight:bold;\">this<br/></span><span style=\"color:#cc7832;font-weight:bold;\">            </span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(props.<span style=\"color:#9876aa;\">autoFocus</span>) {<br/>                transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<br/>                    AutoFocusUtils.<span style=\"color:#ffc66d;\">focusDOMComponent</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">                    </span><span style=\"color:#cc7832;font-weight:bold;\">this<br/></span><span style=\"color:#cc7832;font-weight:bold;\">                </span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span>}<br/>            <span style=\"color:#cc7832;font-weight:bold;\">break</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">       //略去其他……  </span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span>}<br/><br/>    <span style=\"color:#cc7832;font-weight:bold;\">return </span>mountImage<span style=\"color:#cc7832;\">;<br/></span>}\n</pre>这里额外讲一下 <b>this._createInitialChildren(transaction, props, context, lazyTree)</b>生成子元素dom树的函数，如果props.children是数组，调用以下函数。</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#ffc66d;\">mountChildren</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(nestedChildren<span style=\"color:#cc7832;\">, </span>transaction<span style=\"color:#cc7832;\">, </span>context) {<br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>children = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_reconcilerInstantiateChildren</span>(<span style=\"color:#808080;\">//深度遍历子节点获得所有子节点，同时调用</span><span style=\"font-size: 9pt; background-color: rgb(52, 65, 52);\">instantiateReactComponent生成子节点对应的</span><span style=\"font-size: 9pt; color: rgb(128, 128, 128);\">ReactComponent组</span><span style=\"color:#808080;\"><br/></span><span style=\"color:#808080;\">    </span>nestedChildren<span style=\"color:#cc7832;\">, </span>transaction<span style=\"color:#cc7832;\">, </span>context<br/>  )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_renderedChildren </span>= children<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>mountImages = []<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>index = <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(<span style=\"color:#cc7832;font-weight:bold;\">var </span>name <span style=\"color:#cc7832;font-weight:bold;\">in </span>children) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">if </span>(children.<span style=\"color:#9876aa;\">hasOwnProperty</span>(name)) {<br/>      <span style=\"color:#cc7832;font-weight:bold;\">var </span>child = children[name]<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>selfDebugID = <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">     </span><br/>      <span style=\"color:#cc7832;font-weight:bold;\">var </span>mountImage = ReactReconciler.<span style=\"color:#ffc66d;\">mountComponent</span>(//调用每个子节点的ReactComponent实例的mountComponent递归渲染所有子节点<br/>        child<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_hostContainerInfo</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>context<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>selfDebugID<br/>      )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>child.<span style=\"color:#9876aa;\">_mountIndex </span>= index++<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>mountImages.<span style=\"color:#ffc66d;\">push</span>(mountImage)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/>  }<br/>  <span style=\"color:#cc7832;font-weight:bold;\">return </span>mountImages<span style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">,<br/></span>\n</pre> </div><div><div/><div>再顺便提一下，源码中用到了DOMLazyTree，并根据不同浏览器对dom片段生成的速度做了优化。</div><div><pre style=\"background-color: rgb(43, 43, 43); font-family: Menlo; font-size: 9pt;\"><pre style=\"background-color: rgb(43, 43, 43); font-family: Menlo; font-size: 9pt;\"><span style=\"color: rgb(98, 151, 85); font-style: italic;\">/**<br/></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> * In IE (8-11) and Edge, appending nodes with no children is dramatically<br/></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> * faster than appending a full subtree, so we essentially queue up the<br/></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> * .appendChild calls here and apply them so each node is added to its parent<br/></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> * before any children are added.<br/></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> *<br/></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> * In other browsers, doing so is slower or neutral compared to the other order<br/></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> * (in Firefox, twice as slow) so we only do this inversion in IE.<br/></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> *<br/></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> * See <a href=\"https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode\">https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode</a>.<br/></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> */<br/></span><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">var </span><font color=\"#a9b7c6\">enableLazy = (<br/>  </font><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">typeof </span><span style=\"color: rgb(152, 118, 170);\">document </span><font color=\"#a9b7c6\">!== </font><span style=\"color: rgb(106, 135, 89);\">'undefined' </span><font color=\"#a9b7c6\">&amp;&amp;<br/>  </font><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">typeof </span><span style=\"color: rgb(152, 118, 170);\">document</span><font color=\"#a9b7c6\">.</font><span style=\"color: rgb(152, 118, 170);\">documentMode </span><font color=\"#a9b7c6\">=== </font><span style=\"color: rgb(106, 135, 89);\">'number'<br/></span><span style=\"color: rgb(106, 135, 89);\">  </span><font color=\"#a9b7c6\">||<br/>  </font><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">typeof </span><span style=\"color: rgb(152, 118, 170);\">navigator </span><font color=\"#a9b7c6\">!== </font><span style=\"color: rgb(106, 135, 89);\">'undefined' </span><font color=\"#a9b7c6\">&amp;&amp;<br/>  </font><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">typeof </span><span style=\"color: rgb(152, 118, 170);\">navigator</span><font color=\"#a9b7c6\">.</font><span style=\"color: rgb(152, 118, 170);\">userAgent </span><font color=\"#a9b7c6\">=== </font><span style=\"color: rgb(106, 135, 89);\">'string' </span><font color=\"#a9b7c6\">&amp;&amp;<br/>  </font><span style=\"color: rgb(106, 135, 89);\">/\\bEdge\\/\\d/</span><font color=\"#a9b7c6\">.</font><span style=\"color: rgb(255, 198, 109);\">test</span><font color=\"#a9b7c6\">(</font><span style=\"color: rgb(152, 118, 170);\">navigator</span><font color=\"#a9b7c6\">.</font><span style=\"color: rgb(152, 118, 170);\">userAgent</span><font color=\"#a9b7c6\">)<br/>)</font>;</pre><pre style=\"background-color: rgb(43, 43, 43); font-family: Menlo; font-size: 9pt;\"><span style=\"font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\"> function </span><span style=\"font-size: 9pt; color: rgb(255, 198, 109);\">queueChild</span><font style=\"font-size: 9pt;\" color=\"#a9b7c6\">(parentTree</font><span style=\"font-size: 9pt; color: rgb(204, 120, 50);\">, </span><font style=\"font-size: 9pt;\" color=\"#a9b7c6\">childTree) {</font><br/></pre><pre style=\"background-color: rgb(43, 43, 43); font-family: Menlo; font-size: 9pt;\"><pre style=\"background-color: rgb(43, 43, 43); font-family: Menlo; font-size: 9pt;\"><font color=\"#a9b7c6\">  </font><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">if </span><font color=\"#a9b7c6\">(enableLazy) {<br/>    parentTree.</font><span style=\"color: rgb(152, 118, 170);\">children</span><font color=\"#a9b7c6\">.</font><span style=\"color: rgb(255, 198, 109);\">push</span><font color=\"#a9b7c6\">(childTree)</font><span style=\"color: rgb(204, 120, 50);\">;<br/></span><span style=\"color: rgb(204, 120, 50);\">  </span><font color=\"#a9b7c6\">} </font><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">else </span><font color=\"#a9b7c6\">{<br/>    parentTree.node.</font><span style=\"color: rgb(152, 118, 170);\">appendChild</span><font color=\"#a9b7c6\">(childTree.node)</font><span style=\"color: rgb(204, 120, 50);\">;<br/></span><span style=\"color: rgb(204, 120, 50);\">  </span><font color=\"#a9b7c6\">}<br/></font><span style=\"color: rgb(169, 183, 198); background-color: rgb(52, 65, 52);\">}</span><font color=\"#a9b7c6\"\n/></pre><br/></pre></pre></div><div><font face=\"Helvetica\" color=\"#454545\"><font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); font-size: 12px; color: rgb(78, 89, 128);\"/></font></div></div><div><div>然后会在这里判断是把子节点缓存起来还是直接挂到父节点上。缓存起来的节点会在ReactMount的_mountImageIntoNode递归地将子节点逐个挂到父节点上，主要用在<code style=\"box-sizing: border-box; outline: none; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 0.2em 0.4em; word-break: break-word; color: rgb(78, 89, 128); background-color: rgb(248, 248, 248); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">ReactDOMComponent</code><span style=\"color: rgb(51, 51, 51); font-family: -apple-system, 'PingFang SC', 'Hiragino Sans GB', Arial, 'Microsoft YaHei', 'Helvetica Neue', sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); float: none;\">, </span><code style=\"box-sizing: border-box; outline: none; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 0.2em 0.4em; word-break: break-word; color: rgb(78, 89, 128); background-color: rgb(248, 248, 248); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">ReactCompositeComponent。</code></div><div/><div><br/></div>  </div><div>2）receiveComponent 在setState触发更新时调用这个函</div><div><div/></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"/></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Updates a DOM component after it has already been allocated and<br/></span><span style=\"color:#629755;font-style:italic;\"> * attached to the DOM. Reconciles the root DOM node, then recurses.<br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction} transaction<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactElement} prevElement<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactElement} nextElement<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@internal<br/></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\" /><span style=\"color:#629755;font-style:italic;\">* </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@overridable<br/></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\" /><span style=\"color:#629755;font-style:italic;\">*/<br/></span><span style=\"color:#ffc66d;\">updateComponent</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(transaction<span style=\"color:#cc7832;\">, </span>prevElement<span style=\"color:#cc7832;\">, </span>nextElement<span style=\"color:#cc7832;\">, </span>context) {<br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>lastProps = prevElement.props<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextProps = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span>.props<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  //获得last 和next props<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">switch </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span>) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'input'</span>:<br/>      lastProps = ReactDOMInput.<span style=\"color:#ffc66d;\">getHostProps</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>lastProps)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>nextProps = ReactDOMInput.<span style=\"color:#ffc66d;\">getHostProps</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>nextProps)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">break</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    //略去其他……</span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">default</span>:<br/>      <span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">typeof </span>lastProps.<span style=\"color:#9876aa;\">onClick </span>!== <span style=\"color:#6a8759;\">'function' </span>&amp;&amp;<br/>          <span style=\"color:#cc7832;font-weight:bold;\">typeof </span>nextProps.<span style=\"color:#9876aa;\">onClick </span>=== <span style=\"color:#6a8759;\">'function'</span>) {<br/>        transaction.getReactMountReady().<span style=\"color:#ffc66d;\">enqueue</span>(<br/>          <span style=\"color:#ffc66d;\">trapClickOnNonInteractiveElement</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">          </span><span style=\"color:#cc7832;font-weight:bold;\">this<br/></span><span style=\"color:#cc7832;font-weight:bold;\">        </span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>}<br/>      <span style=\"color:#cc7832;font-weight:bold;\">break</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><br/>  <span style=\"color:#ffc66d;\">assertValidProps</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>nextProps)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>isCustomComponentTag = <span style=\"color:#ffc66d;\">isCustomComponent</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span><span style=\"color:#cc7832;\">, </span>nextProps)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#808080;\">//根据新旧props的差异更新对应dom元素上的属性<br/></span><span style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_updateDOMProperties</span>(lastProps<span style=\"color:#cc7832;\">, </span>nextProps<span style=\"color:#cc7832;\">, </span>transaction<span style=\"color:#cc7832;\">, </span>isCustomComponentTag)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#808080;\">//更新子节点内容，diff算法（diff算法下文将详细介绍）<br/></span><span style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_updateDOMChildren</span>(<br/>    lastProps<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>nextProps<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>context<br/>  )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#808080;\">//更新节点后根据新的props中的值设置dom属性比如value、checked等<br/></span><span style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">switch </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span>) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'input'</span>:<br/>      <span style=\"color:#808080;\">// Update the wrapper around inputs *after* updating props. This has to<br/></span><span style=\"color:#808080;\">      // happen after `_updateDOMProperties`. Otherwise HTML5 input validations<br/></span><span style=\"color:#808080;\">      // raise warnings and prevent the new value from being assigned.<br/></span><span style=\"color:#808080;\">      </span>ReactDOMInput.<span style=\"color:#ffc66d;\">updateWrapper</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">break</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    <b>//略去其他……</b></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span>}<br/>}<span style=\"color:#cc7832;\">,</span>\n</pre><br/></div><div>3）unmountComponent 去掉React Component实例上的事件监听器，循环调用子组件的unmountComponent方法，不直接删除dom节点，由父节点统一清除。</div><div><br/></div><div>1.3）<font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); color: rgb(78, 89, 128);\">ReactCompositeComponent</font></div><div><br/></div><div> 1）mountComponent</div><div style=\"text-align: center; \"><img src=\"/images/2017-01-20/%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B%E5%9B%BE%20(2).png\" height=\"548\" width=\"213\"/><br/></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><br/><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Initializes the component, renders markup, and registers event listeners.<br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction|ReactServerRenderingTransaction} transaction<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?object} hostParent<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?object} hostContainerInfo<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?object} context<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@return </span><span style=\"color:#629755;font-style:italic;\">{?string} Rendered markup to be inserted into the DOM.<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@final<br/></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\" /><span style=\"color:#629755;font-style:italic;\">* </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@internal<br/></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\" /><span style=\"color:#629755;font-style:italic;\">*/<br/></span>mountComponent: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br/>    transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>hostParent<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>hostContainerInfo<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>context<br/>) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_context </span>= context<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_mountOrder </span>= nextMountID++<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_hostParent </span>= hostParent<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_hostContainerInfo </span>= hostContainerInfo<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>publicProps = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span>.<span style=\"color:#9876aa;\">props</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>publicContext = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_processContext</span>(context)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>Component = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span>.<span style=\"color:#9876aa;\">type</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>updateQueue = transaction.<span style=\"color:#ffc66d;\">getUpdateQueue</span>()<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// Initialize the public class<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>doConstruct = <span style=\"color:#ffc66d;\">shouldConstruct</span>(Component)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>inst = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_constructComponent</span>(<br/>        doConstruct<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>publicProps<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>publicContext<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>updateQueue<br/>    )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>renderedElement<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// Support functional components<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(!doConstruct &amp;&amp; (inst == <span style=\"color:#cc7832;font-weight:bold;\">null </span>|| inst.<span style=\"color:#ffc66d;\">render </span>== <span style=\"color:#cc7832;font-weight:bold;\">null</span>)) {<br/>        renderedElement = inst<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>inst = <span style=\"color:#cc7832;font-weight:bold;\">new </span><span style=\"color:#ffc66d;\">StatelessComponent</span>(Component)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_compositeType </span>= ReactCompositeComponentTypes.<span style=\"color:#9876aa;\">StatelessFunctional</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>        <span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#ffc66d;\">isPureComponent</span>(Component)) {<br/>            <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_compositeType </span>= ReactCompositeComponentTypes.<span style=\"color:#9876aa;\">PureClass</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>            <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_compositeType </span>= ReactCompositeComponentTypes.<span style=\"color:#9876aa;\">ImpureClass</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/>    }<br/><br/>    <span style=\"color:#808080;\">// These should be set up in the constructor, but as a convenience for<br/></span><span style=\"color:#808080;\">    // simpler class abstractions, we set them up after the fact.<br/></span><span style=\"color:#808080;\">    </span>inst.<span style=\"color:#9876aa;\">props </span>= publicProps<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>inst.<span style=\"color:#9876aa;\">context </span>= publicContext<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>inst.<span style=\"color:#9876aa;\">refs </span>= emptyObject<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>inst.<span style=\"color:#9876aa;\">updater </span>= updateQueue<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_instance </span>= inst<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// Store a reference from the instance back to the internal representation<br/></span><span style=\"color:#808080;\">    </span>ReactInstanceMap.<span style=\"color:#ffc66d;\">set</span>(inst<span style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>initialState = inst.<span style=\"color:#9876aa;\">state</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(initialState === <span style=\"color:#9876aa;\">undefined</span>) {<br/>        inst.<span style=\"color:#9876aa;\">state </span>= initialState = <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/><br/>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingStateQueue </span>= <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingReplaceState </span>= <span style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingForceUpdate </span>= <span style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">//调用生命周期函数<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(inst.<span style=\"color:#9876aa;\">componentWillMount</span>) {<br/>        inst.<span style=\"color:#9876aa;\">componentWillMount</span>()<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">// When mounting, calls to `setState` by `componentWillMount` will set<br/></span><span style=\"color:#808080;\">        // `this._pendingStateQueue` without triggering a re-render.注意这里新的state是在</span><span style=\"color: rgb(152, 118, 170); font-size: 9pt;\">componentWillMount执行完后更新的，因此在<font style=\"font-family: Menlo; font-size: 12px; background-color: rgb(43, 43, 43); color: rgb(152, 118, 170);\">componentWillMount</font>里的this.state不是最新的</span><span style=\"color:#808080;\"><br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingStateQueue</span>) {<br/>            inst.<span style=\"color:#9876aa;\">state </span>= <span style=\"color:#cc7832;font-weight:bold;\">this</span>._processPendingState(inst.<span style=\"color:#9876aa;\">props</span><span style=\"color:#cc7832;\">, </span>inst.<span style=\"color:#9876aa;\">context</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/>    }<br/><br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>markup<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">//带错误监听，内部调用performInitialMount，render函数返回的内容用来初始化一个ReactComponent实例，然后调用ReactReconciler.mountComponent获得dom树<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(inst.<span style=\"color:#ffc66d;\">unstable_handleError</span>) {<br/>        markup = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">performInitialMountWithErrorHandling</span>(<br/>            renderedElement<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>hostParent<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>hostContainerInfo<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>context<br/>        )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>        markup = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">performInitialMount</span>(<br/>            renderedElement<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>hostParent<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>hostContainerInfo<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>context<br/>        )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/>    <span style=\"color:#808080;\">//<font style=\"font-family: Menlo; font-size: 12px; background-color: rgb(43, 43, 43); color: rgb(255, 198, 109);\">componentDidMount执行</font><br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(inst.<span style=\"color:#ffc66d;\">componentDidMount</span>) {<br/>        transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(inst.<span style=\"color:#ffc66d;\">componentDidMount</span><span style=\"color:#cc7832;\">, </span>inst)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/><br/>    <span style=\"color:#808080;\">// setState callbacks during willMount should end up here<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">const </span>callbacks = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingCallbacks</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(callbacks) {<br/>        <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingCallbacks </span>= <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(let i = <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">; </span>i &lt; callbacks.<span style=\"color:#9876aa;\">length</span><span style=\"color:#cc7832;\">; </span>i++) {<br/>            transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<br/>                callbacks[i]<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">                </span>inst<br/>            )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/>    }<br/><br/>    <span style=\"color:#cc7832;font-weight:bold;\">return </span>markup<span style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">,</span>\n</pre><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#cc7832;\"><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#ffc66d;\">performInitialMount</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br/>  renderedElement<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>hostParent<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>hostContainerInfo<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>context<br/>) {<br/>  <span style=\"color:#808080;\">// If not a stateless component, we now render<br/></span><span style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(renderedElement === <span style=\"color:#9876aa;\">undefined</span>) {<br/>    renderedElement = <span style=\"color:#cc7832;font-weight:bold;\">this</span>._renderValidatedComponent()<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>nodeType = ReactNodeTypes.<span style=\"color:#ffc66d;\">getType</span>(renderedElement)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_renderedNodeType </span>= nodeType<span style=\"color:#cc7832;\">;</span></pre><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#cc7832;\">  //得到当前ReactElement对应的ReactComponent实例<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>child = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_instantiateReactComponent</span>(<br/>    renderedElement<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>nodeType !== ReactNodeTypes.<span style=\"color:#9876aa;\">EMPTY </span><span style=\"color:#808080;\">/* shouldHaveDebugID */<br/></span><span style=\"color:#808080;\">  </span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_renderedComponent </span>= child<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>debugID = <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">;</span><br/>  //递归生成子节点dom树<br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>markup = ReactReconciler.<span style=\"color:#ffc66d;\">mountComponent</span>(<br/>    child<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>hostParent<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>hostContainerInfo<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_processChildContext</span>(context)<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>debugID<br/>  )<span style=\"color:#cc7832;\">;</span><br/><br/>  <span style=\"color:#cc7832;font-weight:bold;\">return </span>markup<span style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">,<br/></span>\n</pre><br/></span></pre>2）receiveComponent </div><div>这里负责生命周期的componentWillReceiveProps、shouldComponentUpdate、componentWillUpdate、render、componentDidUpdate。注意在前三个生命周期函数中调用this.state无法获取更新后的this.state因为为实例更新state的inst.state=nextState在componentWillUpdate之后调用，即render和componentDidUpdate中可以，禁止在shouldComponentUpdate和componentWillUpdate中调用setState，会造成循环调用（原因参见src/renderers/shared/stack/reconciler/ReactCompositeComponent.js的performUpdateIfNecessary方法）</div><div style=\"text-align: center; \"><img src=\"/images/2017-01-20/%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B%E5%9B%BE%20(3).png\" height=\"685\" width=\"564\"/><br/></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><br/><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Perform an update to a mounted component. The componentWillReceiveProps and<br/></span><span style=\"color:#629755;font-style:italic;\"> * shouldComponentUpdate methods are called, then (assuming the update isn't<br/></span><span style=\"color:#629755;font-style:italic;\"> * skipped) the remaining update lifecycle methods are called and the DOM<br/></span><span style=\"color:#629755;font-style:italic;\"> * representation is updated.<br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * By default, this implements React's rendering and reconciliation algorithm.<br/></span><span style=\"color:#629755;font-style:italic;\"> * Sophisticated clients may wish to override this.<br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction} transaction<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactElement} prevParentElement<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactElement} nextParentElement<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@internal<br/></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\" /><span style=\"color:#629755;font-style:italic;\">* </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@overridable<br/></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\" /><span style=\"color:#629755;font-style:italic;\">*/<br/></span>updateComponent: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br/>    transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>prevParentElement<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>nextParentElement<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>prevUnmaskedContext<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>nextUnmaskedContext<br/>) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>inst = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_instance</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>willReceive = <span style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextContext<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// Determine if the context has changed or not<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_context </span>=== nextUnmaskedContext) {<br/>        nextContext = inst.<span style=\"color:#9876aa;\">context</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>        nextContext = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_processContext</span>(nextUnmaskedContext)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>willReceive = <span style=\"color:#cc7832;font-weight:bold;\">true</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/><br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>prevProps = prevParentElement.<span style=\"color:#9876aa;\">props</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextProps = nextParentElement.<span style=\"color:#9876aa;\">props</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// Not a simple state update but a props update<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(prevParentElement !== nextParentElement) {<br/>        willReceive = <span style=\"color:#cc7832;font-weight:bold;\">true</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/><br/>    <span style=\"color:#808080;\">// An update here will schedule an update but immediately set<br/></span><span style=\"color:#808080;\">    // _pendingStateQueue which will ensure that any state updates gets<br/></span><span style=\"color:#808080;\">    // immediately reconciled instead of waiting for the next batch.<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(willReceive &amp;&amp; inst.<span style=\"color:#ffc66d;\">componentWillReceiveProps</span>) {<br/>        inst.<span style=\"color:#ffc66d;\">componentWillReceiveProps</span>(nextProps<span style=\"color:#cc7832;\">, </span>nextContext)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/><br/>    <span style=\"color:#808080;\">// If updating happens to enqueue any new updates, we shouldn't execute new<br/></span><span style=\"color:#808080;\">    // callbacks until the next render happens, so stash the callbacks first.<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>callbacks = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingCallbacks</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingCallbacks </span>= <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextState = <span style=\"color:#cc7832;font-weight:bold;\">this</span>._processPendingState(nextProps<span style=\"color:#cc7832;\">, </span>nextContext)<span style=\"color:#cc7832;\">; </span><span style=\"color:#808080;\">//获得nextState<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>shouldUpdate = <span style=\"color:#cc7832;font-weight:bold;\">true</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(!<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingForceUpdate</span>) { <span style=\"color:#808080;\">//没设置forseupdate<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>prevState = inst.<span style=\"color:#9876aa;\">state</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>shouldUpdate = willReceive || nextState !== prevState<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//如果提供shouldComponentUpdate，调用函数，否则新旧state和props浅比较确定是否更新<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(inst.<span style=\"color:#ffc66d;\">shouldComponentUpdate</span>) {<br/>            shouldUpdate = inst.<span style=\"color:#ffc66d;\">shouldComponentUpdate</span>(nextProps<span style=\"color:#cc7832;\">, </span>nextState<span style=\"color:#cc7832;\">, </span>nextContext)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>            <span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_compositeType </span>=== ReactCompositeComponentTypes.<span style=\"color:#9876aa;\">PureClass</span>) {<br/>                shouldUpdate =<br/>                    !shallowEqual(prevProps<span style=\"color:#cc7832;\">, </span>nextProps) ||<br/>                    !shallowEqual(inst.<span style=\"color:#9876aa;\">state</span><span style=\"color:#cc7832;\">, </span>nextState)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span>}<br/>        }<br/>    }<br/><br/>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_updateBatchNumber </span>= <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(shouldUpdate) {<br/>        <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingForceUpdate </span>= <span style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">// Will set `this.props`, `this.state` and `this.context`.<br/></span><span style=\"color:#808080;\">        //设置新props、state，调用生命周期函数（如果提供），更新dom<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>._performComponentUpdate(<br/>            nextParentElement<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>nextProps<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>nextState<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>nextContext<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>nextUnmaskedContext<br/>        )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>        <span style=\"color:#808080;\">// If it's determined that a component should not update, we still want<br/></span><span style=\"color:#808080;\">        // to set props and state but we shortcut the rest of the update.<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement </span>= nextParentElement<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_context </span>= nextUnmaskedContext<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>inst.<span style=\"color:#9876aa;\">props </span>= nextProps<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>inst.<span style=\"color:#9876aa;\">state </span>= nextState<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>inst.<span style=\"color:#9876aa;\">context </span>= nextContext<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/>    <span style=\"color:#808080;\">//render之后调用的事件队列<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(callbacks) {<br/>        <span style=\"color:#cc7832;font-weight:bold;\">for </span>(<span style=\"color:#cc7832;font-weight:bold;\">var </span>j = <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">; </span>j &lt; callbacks.<span style=\"color:#9876aa;\">length</span><span style=\"color:#cc7832;\">; </span>j++) {<br/>            transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<br/>                callbacks[j]<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">                </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">getPublicInstance</span>()<br/>            )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/>    }<br/>}<span style=\"color:#cc7832;\">,</span>\n</pre><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Merges new props and state, notifies delegate methods of update and<br/></span><span style=\"color:#629755;font-style:italic;\"> * performs update.<br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactElement} nextElement Next element<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{object} nextProps Next public object to set as properties.<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?object} nextState Next object to set as state.<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?object} nextContext Next public object to set as context.<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction} transaction<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?object} unmaskedContext<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@private<br/></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\" /><span style=\"color:#629755;font-style:italic;\">*/<br/></span>_performComponentUpdate: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br/>  nextElement<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>nextProps<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>nextState<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>nextContext<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>unmaskedContext<br/>) {<br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>inst = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_instance</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>hasComponentDidUpdate = Boolean(inst.<span style=\"color:#ffc66d;\">componentDidUpdate</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>prevProps<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>prevState<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>prevContext<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(hasComponentDidUpdate) {<br/>    prevProps = inst.<span style=\"color:#9876aa;\">props</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>prevState = inst.<span style=\"color:#9876aa;\">state</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>prevContext = inst.<span style=\"color:#9876aa;\">context</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><br/>  <span style=\"color:#cc7832;font-weight:bold;\">if </span>(inst.<span style=\"color:#ffc66d;\">componentWillUpdate</span>) {<br/>     inst.<span style=\"color:#ffc66d;\">componentWillUpdate</span>(nextProps<span style=\"color:#cc7832;\">, </span>nextState<span style=\"color:#cc7832;\">, </span>nextContext)<span style=\"color:#cc7832;\">;</span><br/>  }<br/><br/>  <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement </span>= nextElement<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_context </span>= unmaskedContext<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>inst.<span style=\"color:#9876aa;\">props </span>= nextProps<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>inst.<span style=\"color:#9876aa;\">state </span>= nextState<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>inst.<span style=\"color:#9876aa;\">context </span>= nextContext<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(inst.<span style=\"color:#ffc66d;\">unstable_handleError</span>) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>._updateRenderedComponentWithErrorHandling(transaction<span style=\"color:#cc7832;\">, </span>unmaskedContext)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>._updateRenderedComponent(transaction<span style=\"color:#cc7832;\">, </span>unmaskedContext)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><br/>  <span style=\"color:#cc7832;font-weight:bold;\">if </span>(hasComponentDidUpdate) {<br/>      transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<br/>        inst.<span style=\"color:#ffc66d;\">componentDidUpdate</span>.<span style=\"color:#ffc66d;\">bind</span>(inst<span style=\"color:#cc7832;\">, </span>prevProps<span style=\"color:#cc7832;\">, </span>prevState<span style=\"color:#cc7832;\">, </span>prevContext)<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>inst<br/>      )<span style=\"color:#cc7832;\">;</span><br/>  }<br/>}<span style=\"color:#cc7832;\">,</span>\n</pre><br/></div><div>3）unmountComponent 调用生命周期函数componentWillUnmount（如果提供），调用当前组件对应的React Component实例对应的unmountComponent函数，重置一堆变量。</div><div><br/></div><div><br/></div><div/><ol start=\"2\"><li>渲染组件的工作主要在这个函数，通过<font style=\"font-family: Helvetica; color: rgb(69, 69, 69);\">instantiateReactComponent</font>得到了各种类型组件对应的ReactComponent实例（可以理解为一个ReactComponent实例的树，包含所有子节点的ReactComponent实例），然后调用实例的mountComponent方法（上面讲解过）得到要渲染的‘markup’可能是一个dom树，或一个DOMLazyTree结构保存将子节点的dom结构树保存到数组里，最后插入到container中。</li></ol></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Mounts this component and inserts it into the DOM.<br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactComponent} componentInstance The instance to mount.<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{DOMElement} container DOM element to mount into.<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction} transaction<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{boolean} shouldReuseMarkup If true, do not insert markup<br/></span><span style=\"color:#629755;font-style:italic;\"> */<br/></span><span style=\"color:#cc7832;font-weight:bold;\">function </span><span style=\"color:#ffc66d;\">mountComponentIntoNode</span>(<br/>  wrapperInstance<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>container<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>shouldReuseMarkup<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>context<br/>) {<br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>markerName<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(ReactFeatureFlags.<span style=\"color:#9876aa;\">logTopLevelRenders</span>) { //记录拼接组件对应的dom模板所用的时长<br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>wrappedElement = wrapperInstance.<span style=\"color:#9876aa;\">_currentElement</span>.<span style=\"color:#9876aa;\">props</span>.child<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>type = wrappedElement.<span style=\"color:#9876aa;\">type</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>markerName = <span style=\"color:#6a8759;\">'React mount: ' </span>+ (<br/>      <span style=\"color:#cc7832;font-weight:bold;\">typeof </span>type === <span style=\"color:#6a8759;\">'string' </span>? type :<br/>      type.<span style=\"color:#9876aa;\">displayName </span>|| type.<span style=\"color:#9876aa;\">name<br/></span><span style=\"color:#9876aa;\">    </span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#9876aa;\">console</span>.<span style=\"color:#ffc66d;\">time</span>(markerName)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>markup = ReactReconciler.<span style=\"color:#ffc66d;\">mountComponent</span>( //调用组件实例的mountComponent方法获得要渲染的结构（可能是一个html片段或一个src/<font style=\"font-size: 12px; color: rgb(169, 183, 198); font-family: Menlo;\">renderers/dom/stack/client/DOMLazyTree.js结构）</font>，添加事件以及ref属性<br/>    wrapperInstance<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>ReactDOMContainerInfo(wrapperInstance<span style=\"color:#cc7832;\">, </span>container)<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>context<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#6897bb;\">0 </span><span style=\"color:#808080;\">/* parentDebugID */<br/></span><span style=\"color:#808080;\">  </span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(markerName) {<br/>    <span style=\"color:#9876aa;\">console</span>.<span style=\"color:#ffc66d;\">timeEnd</span>(markerName)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><br/>  wrapperInstance.<span style=\"color:#9876aa;\">_renderedComponent</span>.<span style=\"color:#9876aa;\">_topLevelWrapper </span>= wrapperInstance<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>ReactMount.<span style=\"color:#ffc66d;\">_mountImageIntoNode</span>( //将上面得到的结构（递归）渲染到container dom节点中，显示在页面上<br/>    markup<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>container<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>wrapperInstance<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>shouldReuseMarkup<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>transaction<br/>  )<span style=\"color:#cc7832;\">;<br/></span>}\n</pre><br/></div><div>以上是对虚拟dom和渲染策略的讲解。</div><div><br/></div><div>推荐阅读：</div><div><span style=\"font: 12.0px Helvetica; color: #e4af09\"><a href=\"https://zhuanlan.zhihu.com/purerender\">https://zhuanlan.zhihu.com/purerender</a></span><span style=\"font: 12.0px Helvetica; color: #454545\" /><span style=\"font: 12.0px 'PingFang SC'; color: #454545\">关于</span><span style=\"font: 12.0px Helvetica; color: #454545\">react</span><span style=\"font: 12.0px 'PingFang SC'; color: #454545\">源码解析系列文章</span><span style=\"font: 12.0px Helvetica; color: #454545\"><br/>\n<span style=\"color: #e4af09\"><a href=\"http://purplebamboo.github.io/2015/09/15/reactjs_source_analyze_part_one/\">http://purplebamboo.github.io/2015/09/15/reactjs_source_analyze_part_one/</a></span></span></div><div><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-size: 12px; font-family: Helvetica;\"><font color=\"#e4af09\">《深入React技术栈》这本书的第三章（有需要可以找我借）<br/></font>\n</span><br/></div><div><br/></div><div><br/></div>","slug":"react源码学习——Virtual Dom和渲染、更新原理","published":1,"updated":"2017-02-13T08:40:31.000Z","_id":"ciz3uj47f000082hyu8g3a6tb","comments":1,"photos":[],"link":"","content":"\n<div><span style=\"color: rgb(68, 68, 68); font-family: 'Helvetica Neue', Helvetica, 'Lucida Grande', Arial, 'Hiragino Sans GB', 微软雅黑, 'WenQuanYi Micro Hei', STHeiti, SimSun, sans-serif; font-size: 14px; orphans: 2; widows: 2;\">前端开发过程中，更新页面的数据、样式等操作都要操作dom，而复杂的dom操作通常是产品性能瓶颈原因之一，为此React引入了Virtual Dom的概念，Virtual Dom其实是用js实现了一套dom api，包括虚拟dom模型、生命周期管理、diff算法等。React会将传入的JSX片段转化成虚拟dom节点，当数据更新时，通过diff算法找到要变更的dom节点，并只对变化的部分进行实际的浏览器dom更新，而不是重新渲染整个dom树。下面我们结合组件渲染流程结合源码介绍一下React如何创建虚拟节点，以及如何渲染、更新节点的整个流程。</span><br></div><div><span style=\"color: rgb(68, 68, 68); font-family: 'Helvetica Neue', Helvetica, 'Lucida Grande', Arial, 'Hiragino Sans GB', 微软雅黑, 'WenQuanYi Micro Hei', STHeiti, SimSun, sans-serif; font-size: 14px; orphans: 2; widows: 2;\">——以下代码是React v15.4.2版本——<br></span></div><div>React项目渲染组件的方法是：ReactDom.render，将父组件连带所有包含在内的子组件渲染出来。render方法最终调用了 src/renderers/dom/stack/client/ReactMount.js 的render方法。</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#629755;font-style:italic;\">/**<br></span><span style=\"color:#629755;font-style:italic;\"> * Renders a React component into the DOM in the supplied `container`.<br></span><span style=\"color:#629755;font-style:italic;\"> * See <a href=\"https://facebook.github.io/react/docs/react-dom.html#render\" target=\"_blank\" rel=\"external\">https://facebook.github.io/react/docs/react-dom.html#render</a><br></span><span style=\"color:#629755;font-style:italic;\"> *<br></span><span style=\"color:#629755;font-style:italic;\"> * If the React component was previously rendered into `container`, this will<br></span><span style=\"color:#629755;font-style:italic;\"> * perform an update on it and only mutate the DOM as necessary to reflect the<br></span><span style=\"color:#629755;font-style:italic;\"> * latest React component.<br></span><span style=\"color:#629755;font-style:italic;\"> *<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactElement} nextElement Component element to render.<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{DOMElement} container DOM element to render into.<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?function} callback function triggered on completion<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@return </span><span style=\"color:#629755;font-style:italic;\">{ReactComponent} Component instance rendered in `container`.<br></span><span style=\"color:#629755;font-style:italic;\"> */<br></span><span style=\"color:#ffc66d;\">render</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(nextElement<span style=\"color:#cc7832;\">, </span>container<span style=\"color:#cc7832;\">, </span>callback) {<br>  <span style=\"color:#cc7832;font-weight:bold;\">return </span>ReactMount.<span style=\"color:#ffc66d;\">_renderSubtreeIntoContainer</span>(<span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">, </span>nextElement<span style=\"color:#cc7832;\">, </span>container<span style=\"color:#cc7832;\">, </span>callback)<span style=\"color:#cc7832;\">;<br></span>}<span style=\"color:#cc7832;\">,</span></pre></div><div>注意这里第一个参数是ReactElement类型，通常为了可读性和开发效率我们传入JSX写的结构，最终会编译转换成调用React的createElement方法生成虚拟元素ReactElement结构传入render中。这里我们先看一下React.createElement做了哪些事情（src/isomorphic/classic/element/ReactElement.js）</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><br><span style=\"color:#629755;font-style:italic;\">/**<br></span><span style=\"color:#629755;font-style:italic;\"> * Create and return a new ReactElement of the given type.<br></span><span style=\"color:#629755;font-style:italic;\"> * See <a href=\"https://facebook.github.io/react/docs/react-api.html#createelement\" target=\"_blank\" rel=\"external\">https://facebook.github.io/react/docs/react-api.html#createelement</a><br></span><span style=\"color:#629755;font-style:italic;\"> */<br></span><span style=\"color:#ffc66d;\">ReactElement</span>.<span style=\"color:#ffc66d;\">createElement </span>= <span style=\"color:#cc7832;font-weight:bold;\">function</span>(type<span style=\"color:#cc7832;\">, </span>config<span style=\"color:#cc7832;\">, </span>children) {<br>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>propName<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// Reserved names are extracted<br></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>props = {}<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>key = <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>ref = <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>self = <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>source = <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(config != <span style=\"color:#cc7832;font-weight:bold;\">null</span>) {<br>        <span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#ffc66d;\">hasValidRef</span>(config)) {<br>            ref = config.<span style=\"color:#9876aa;\">ref</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span>}<br>        <span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#ffc66d;\">hasValidKey</span>(config)) {<br>            key = <span style=\"color:#6a8759;\">'' </span>+ config.key<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span>}<br><br>        self = config.<span style=\"color:#9876aa;\">__self </span>=== <span style=\"color:#9876aa;\">undefined </span>? <span style=\"color:#cc7832;font-weight:bold;\">null </span>: config.<span style=\"color:#9876aa;\">__self</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span>source = config.<span style=\"color:#9876aa;\">__source </span>=== <span style=\"color:#9876aa;\">undefined </span>? <span style=\"color:#cc7832;font-weight:bold;\">null </span>: config.<span style=\"color:#9876aa;\">__source</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">// config中的内容复制到props<br></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(propName <span style=\"color:#cc7832;font-weight:bold;\">in </span>config) {<br>            <span style=\"color:#cc7832;font-weight:bold;\">if </span>(hasOwnProperty.<span style=\"color:#ffc66d;\">call</span>(config<span style=\"color:#cc7832;\">, </span>propName) &amp;&amp;<br>                !RESERVED_PROPS.<span style=\"color:#ffc66d;\">hasOwnProperty</span>(propName)) {<br>                props[propName] = config[propName]<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">            </span>}<br>        }<br>    }<br><br>    <span style=\"color:#808080;\">//将第三个及之后的参数作为children赋值给props的children属性<br></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>childrenLength = arguments.<span style=\"color:#9876aa;\">length </span>- <span style=\"color:#6897bb;\">2</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(childrenLength === <span style=\"color:#6897bb;\">1</span>) {<br>        props.<span style=\"color:#9876aa;\">children </span>= children<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(childrenLength &gt; <span style=\"color:#6897bb;\">1</span>) {<br>        <span style=\"color:#cc7832;font-weight:bold;\">var </span>childArray = Array(childrenLength)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(<span style=\"color:#cc7832;font-weight:bold;\">var </span>i = <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">; </span>i &lt; childrenLength<span style=\"color:#cc7832;\">; </span>i++) {<br>            childArray[i] = arguments[i + <span style=\"color:#6897bb;\">2</span>]<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span>}<br><br>        props.<span style=\"color:#9876aa;\">children </span>= childArray<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>}<br><br>    <span style=\"color:#808080;\">// 如果某个props为空且存在默认props，赋值<br></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(type &amp;&amp; type.<span style=\"color:#9876aa;font-style:italic;\">defaultProps</span>) {<br>        <span style=\"color:#cc7832;font-weight:bold;\">var </span>defaultProps = type.<span style=\"color:#9876aa;font-style:italic;\">defaultProps</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(propName <span style=\"color:#cc7832;font-weight:bold;\">in </span>defaultProps) {<br>            <span style=\"color:#cc7832;font-weight:bold;\">if </span>(props[propName] === <span style=\"color:#9876aa;\">undefined</span>) {<br>                props[propName] = defaultProps[propName]<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">            </span>}<br>        }<br>    }<br><br>    <span style=\"color:#cc7832;font-weight:bold;\">return </span><span style=\"color:#ffc66d;\">ReactElement</span>(<br>        type<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">        </span>key<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">        </span>ref<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">        </span>self<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">        </span>source<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">        </span>ReactCurrentOwner.<span style=\"color:#9876aa;\">current</span><span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">        </span>props<br>    )<span style=\"color:#cc7832;\">;<br></span>}<span style=\"color:#cc7832;\">;</span>\n</pre></div><div><br></div><div>下面结合源码详细讲解整个渲染的过程。</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#ffc66d;\">render</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(nextElement<span style=\"color:#cc7832;\">, </span>container<span style=\"color:#cc7832;\">, </span>callback) {<br>  <span style=\"color:#cc7832;font-weight:bold;\">return </span>ReactMount.<span style=\"color:#ffc66d;\">_renderSubtreeIntoContainer</span>(<span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">, </span>nextElement<span style=\"color:#cc7832;\">, </span>container<span style=\"color:#cc7832;\">, </span>callback)<span style=\"color:#cc7832;\">;<br></span>}<span style=\"color:#cc7832;\">,</span>\n</pre>去掉各种检查后的代码如下：</div><div>思路：首先获得dom container里原有的ReactElement，如果存在则将实际需要渲染的ReactElement（上一步用<font style=\"font-family: Menlo; font-size: 12px; background-color: rgb(43, 43, 43); color: rgb(128, 128, 128);\">TopLevelWrapper</font>包裹的child）和新的ReactElement做比较（1），如果应该更新则更新组件（2），否则清空container内之前渲染的组件（3），生成新的根ReactComponent渲染到container中（4）。</div><div>主要流程图如下：<br><img src=\"/images/2017-01-20/%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B%E5%9B%BE.png\" height=\"558\" width=\"650\"><br></div><div><pre style=\"background-color: rgb(43, 43, 43);\"><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">_renderSubtreeIntoContainer</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">: </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">function</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(parentComponent</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">, </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">nextElement</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">, </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">container</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">, </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">callback) {</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\"><br></span><pre style=\"font-family: Menlo; font-size: 9pt; background-color: rgb(43, 43, 43);\"><span style=\"font-size: 9pt;\"><font><pre style=\"background-color: rgb(43, 43, 43); font-family: Menlo; font-size: 9pt;\">   <span style=\"color: rgb(128, 128, 128);\">//nextElement外包一层react定义的TopLevelWrapper用于屏蔽各类组件的差异记录一些变量，比如顶层组件的计数<br></span><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">   var </span><font color=\"#a9b7c6\">nextWrappedElement = React.</font><span style=\"color: rgb(152, 118, 170);\">createElement</span><font color=\"#a9b7c6\">(<br>     </font><span style=\"color: rgb(255, 198, 109);\">TopLevelWrapper</span><span style=\"color: rgb(204, 120, 50);\">,<br></span><span style=\"color: rgb(204, 120, 50);\">     </span><font color=\"#a9b7c6\">{ </font><span style=\"color: rgb(152, 118, 170);\">child</span><font color=\"#a9b7c6\">: nextElement }<br>   )</font>;</pre></font></span></pre><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">nextContext = getContextForSubtree(parentComponent)</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;//本次调用返回null<br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">prevComponent = </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">getTopLevelWrapperInContainer</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(container)</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\"><br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">if </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(prevComponent) {<br>    </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">prevWrappedElement = prevComponent.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_currentElement</span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">prevElement = prevWrappedElement.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">props</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">.child</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">if </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(shouldUpdateReactComponent(prevElement</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">, </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">nextElement)) {      &lt;——— 1<br>      </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">publicInst = prevComponent.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_renderedComponent</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">getPublicInstance</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">()</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">      </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">updatedCallback = callback &amp;&amp; </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">function</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">() {<br>        callback.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">call</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(publicInst)</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">      </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">}</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">      </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">ReactMount.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">_updateRootComponent</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(   &lt;———— 2<br>        prevComponent</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">        </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">nextWrappedElement</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">        </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">nextContext</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">        </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">container</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">        </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">updatedCallback<br>      )</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">      </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">return </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">publicInst</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">} </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">else </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">{<br>      ReactMount.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">unmountComponentAtNode</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(container)</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;  <font style=\"font-family: Menlo; background-color: rgb(43, 43, 43); font-size: 12px; color: rgb(169, 183, 198);\">&lt;———— 3</font><br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">}<br>  }<br><br>  </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">reactRootElement = </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">getReactRootElementInContainer</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(container)</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;//获得container节点的第一个dom子节点<br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">containerHasReactMarkup =<br>    reactRootElement &amp;&amp; !!</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">internalGetID</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(reactRootElement)</font><font face=\"Menlo\" color=\"#cc7832\" size=\"2\">; //判断这个dom子节点是不是React渲染的（React渲染的会有会有一个‘data-reacted’的attribute属性）<br></font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">containerHasNonRootReactChild = </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">hasNonRootReactChild</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(container)</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">; //判断container是否包含不是React根节点的React实例<br></span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\"><br>  </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font color=\"#a9b7c6\"><font face=\"Menlo\" size=\"2\">shouldReuseMarkup =           //这里不太明白什么情况会重用markup，因为在’3’已经把container中的dom清空了，欢迎讨论<br>    containerHasReactMarkup &amp;&amp;<br>    !prevComponent &amp;&amp;<br>    !containerHasNonRootReactChild</font></font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">component = ReactMount.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">_renderNewRootComponent</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(   </font><font style=\"font-family: Menlo; font-size: 12px; color: rgb(169, 183, 198); background-color: rgb(43, 43, 43);\">&lt;———— 4</font><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\"><br>    nextWrappedElement</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">container</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">shouldReuseMarkup</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">nextContext</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">callback<br>  ).</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_renderedComponent</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">getPublicInstance</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">()</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">return </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">component</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br></span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">}</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br></span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\"></font></pre><br></div><div>下面分别展开研究四个函数：</div><div><div><ol start=\"1\"><li>shouldUpdateReactComponent.js ( src/renderers/shared/shared/shouldUpdateReactComponent.js ）</li></ol>这里只做了简单的类型比较，如果父节点的类型不同，则即使子节点相同也不做递归比较，官方文档参见<a href=\"https://facebook.github.io/react/docs/reconciliation.html#elements-of-different-types\" target=\"_blank\" rel=\"external\">这里</a>。<br></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#cc7832;font-weight:bold;\">function </span><span style=\"color:#ffc66d;\">shouldUpdateReactComponent</span>(prevElement<span style=\"color:#cc7832;\">, </span>nextElement) {<br>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>prevEmpty = prevElement === <span style=\"color:#cc7832;font-weight:bold;\">null </span>|| prevElement === <span style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextEmpty = nextElement === <span style=\"color:#cc7832;font-weight:bold;\">null </span>|| nextElement === <span style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(prevEmpty || nextEmpty) {<br>    <span style=\"color:#cc7832;font-weight:bold;\">return </span>prevEmpty === nextEmpty<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>}<br><br>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>prevType = <span style=\"color:#cc7832;font-weight:bold;\">typeof </span>prevElement<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextType = <span style=\"color:#cc7832;font-weight:bold;\">typeof </span>nextElement<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(prevType === <span style=\"color:#6a8759;\">'string' </span>|| prevType === <span style=\"color:#6a8759;\">'number'</span>) {<br>    <span style=\"color:#cc7832;font-weight:bold;\">return </span>(nextType === <span style=\"color:#6a8759;\">'string' </span>|| nextType === <span style=\"color:#6a8759;\">'number'</span>)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br>    <span style=\"color:#cc7832;font-weight:bold;\">return </span>(<br>      nextType === <span style=\"color:#6a8759;\">'object' </span>&amp;&amp;<br>      prevElement.<span style=\"color:#9876aa;\">type </span>=== nextElement.<span style=\"color:#9876aa;\">type </span>&amp;&amp;<br>      prevElement.<span style=\"color:#9876aa;\">key </span>=== nextElement.<span style=\"color:#9876aa;\">key<br></span><span style=\"color:#9876aa;\">    </span>)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>}<br>}<br>\n</pre></div></div><div><font style=\"font-size: 14px;\">  </font></div><div><font style=\"font-size: 14px;\">  2. <span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(69, 69, 69);\">ReactMount._updateRootComponent（  src/renderers/dom/stack/client/ReactMount.js ）</span><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(228, 175, 9);\"><br>\n</span></font></div><div>最主要的两句：</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\">ReactUpdateQueue.<span style=\"color:#ffc66d;\">enqueueElementInternal</span>(prevComponent<span style=\"color:#cc7832;\">, </span>nextElement<span style=\"color:#cc7832;\">, </span>nextContext)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(callback) {<br>  ReactUpdateQueue.<span style=\"color:#ffc66d;\">enqueueCallbackInternal</span>(prevComponent<span style=\"color:#cc7832;\">, </span>callback)<span style=\"color:#cc7832;\">;<br></span>}\n</pre>这里调用了src/renderers/shared/stack/reconciler/ReactUpdateQueue.js 的两个函数，分别给ReactComponent实例添加属性，要渲染的ReactElemnt、初始化上下文和在渲染完成后执行的回掉函数队列，然后调用ReactUpdates.js (src/renderers/shared/stack/reconciler/ReactUpdates.js)的enqueueUpadate加入到更新队列中（更新策略下文将详细讲解）。</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#ffc66d;\">enqueueElementInternal</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(internalInstance<span style=\"color:#cc7832;\">, </span>nextElement<span style=\"color:#cc7832;\">, </span>nextContext) {<br>  internalInstance.<span style=\"color:#9876aa;\">_pendingElement </span>= nextElement<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#808080;\">// </span><span style=\"color:#a8c023;font-style:italic;\">TODO: introduce _pendingContext instead of setting it directly.<br></span><span style=\"color:#a8c023;font-style:italic;\">  </span>internalInstance.<span style=\"color:#9876aa;\">_context </span>= nextContext<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#ffc66d;\">enqueueUpdate</span>(internalInstance)<span style=\"color:#cc7832;\">;<br></span>}<span style=\"color:#cc7832;\">,</span>\n</pre></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#ffc66d;\">enqueueCallbackInternal</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(internalInstance<span style=\"color:#cc7832;\">, </span>callback) {<br>  <span style=\"color:#cc7832;font-weight:bold;\">if </span>(internalInstance.<span style=\"color:#9876aa;\">_pendingCallbacks</span>) {<br>    internalInstance.<span style=\"color:#9876aa;\">_pendingCallbacks</span>.<span style=\"color:#ffc66d;\">push</span>(callback)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br>    internalInstance.<span style=\"color:#9876aa;\">_pendingCallbacks </span>= [callback]<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>}<br>  <span style=\"color:#ffc66d;\">enqueueUpdate</span>(internalInstance)<span style=\"color:#cc7832;\">;<br></span>}<span style=\"color:#cc7832;\">,</span>\n</pre><br></div><div> <font style=\"font-size: 14px;\"> 3.</font><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(69, 69, 69);\"><font style=\"font-size: 14px;\">ReactMount.unmountComponentAtNode</font></span></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#629755;font-style:italic;\">/**<br></span><span style=\"color:#629755;font-style:italic;\"> * Unmounts and destroys the React component rendered in the `container`.<br></span><span style=\"color:#629755;font-style:italic;\"> * See <a href=\"https://facebook.github.io/react/docs/react-dom.html#unmountcomponentatnode\" target=\"_blank\" rel=\"external\">https://facebook.github.io/react/docs/react-dom.html#unmountcomponentatnode</a><br></span><span style=\"color:#629755;font-style:italic;\"> *<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{DOMElement} container DOM element containing a React component.<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@return </span><span style=\"color:#629755;font-style:italic;\">{boolean} True if a component was found in and unmounted from<br></span><span style=\"color:#629755;font-style:italic;\"> *                   `container`<br></span><span style=\"color:#629755;font-style:italic;\"> */<br></span><span style=\"color:#ffc66d;\">unmountComponentAtNode</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(container) {<br><br>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>prevComponent = <span style=\"color:#ffc66d;\">getTopLevelWrapperInContainer</span>(container)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(!prevComponent) {<br>    <span style=\"color:#cc7832;font-weight:bold;\">return false</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>}<br>  <span style=\"color:#cc7832;font-weight:bold;\">delete </span>instancesByReactRootID[prevComponent.<span style=\"color:#9876aa;\">_instance</span>.rootID]<span style=\"color:#cc7832;\">;//devtools会用到的映射，这里可以先忽略<br></span><span style=\"color:#cc7832;\">  </span>ReactUpdates.<span style=\"color:#ffc66d;\">batchedUpdates</span>(<br>    <span style=\"color:#ffc66d;\">unmountComponentFromNode</span><span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>prevComponent<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>container<br>  )<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">return true</span><span style=\"color:#cc7832;\">;<br></span>}<span style=\"color:#cc7832;\">,</span>\n</pre>注意这里也调用ReactUpdates.js (src/renderers/shared/stack/reconciler/ReactUpdates.js)类的函数batchedUpadates更新组件（更新策略下文将详细讲解），传入三个参数，第一个参数作为更新策略执行过程中调用的函数，后两个作为参数，这里要执行的函数是：</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#cc7832;font-weight:bold;\">function </span><span style=\"color:#ffc66d;\">unmountComponentFromNode</span>(instance<span style=\"color:#cc7832;\">, </span>container) {<br>  //这个函数主要作用是：1.去掉组件中的ref引用，调用组件的unmountComponent函数，这里主要有三类组件文本组件、html标签对应的组件和自定义组件，每种对应的unmountComponent实现方式不同，主要做些清理React内部用到的缓存，组件上绑定的事件之类的工作，具体参见下文。<br>  ReactReconciler.<span style=\"color:#ffc66d;\">unmountComponent</span>(<br>    instance<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">false </span><span style=\"color:#808080;\">/* safely */</span><span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">false </span><span style=\"color:#808080;\">/* skipLifecycle */<br></span><span style=\"color:#808080;\">  </span>)<span style=\"color:#cc7832;\">;<br></span><br>  <span style=\"color:#cc7832;font-weight:bold;\">if </span>(container.nodeType === DOC_NODE_TYPE) {<br>    container = container.documentElement<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>}<br><br>  <span style=\"color:#808080;\">//可以看到这里循环移除了container节点中的全部dom元素，有很多方法可以实现，这里有个有趣的效率对比试验： <a href=\"http://jsperf.com/emptying-a-node\" target=\"_blank\" rel=\"external\">http://jsperf.com/emptying-a-node</a><br></span><span style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">while </span>(container.lastChild) {<br>    container.removeChild(container.lastChild)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>}<br><span style=\"background-color:#344134;\">}</span>\n</pre><br></div><div><ol start=\"4\"><li><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(69, 69, 69);\"><font style=\"font-size: 14px;\">ReactMount._renderNewRootComponent</font></span></li></ol><div><font face=\"Helvetica\" color=\"#454545\">先ReactElement初始<font style=\"font-size: 14px;\">化ReactComponent实例（1），这里可能是自定义组件</font><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(69, 69, 69);\"><font style=\"font-size: 14px;\">ReactCompositeComponent，文本元素对应的ReactDOMTextComponent和浏览器基本元素对应的ReactDOMComponent。然后调用更新策略将组件渲染到container中，以及做一些比如ref绑定等初始化工作（2）。</font><br>\n</span></font></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#ffc66d;\">_renderNewRootComponent</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br>  nextElement<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>container<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>shouldReuseMarkup<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>context<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>callback<br>) {<br> //<span style=\"color: rgb(98, 151, 85); font-style: italic; font-size: 9pt;\">Listens to window scroll and resize events. We cache scroll values so that </span><span style=\"color: rgb(98, 151, 85); font-style: italic; font-size: 9pt;\">application code can access them without triggering reflows.这里先不做分析</span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">  </span>ReactBrowserEventEmitter.<span style=\"color:#ffc66d;\">ensureScrollValueMonitoring</span>()<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>componentInstance = instantiateReactComponent(nextElement<span style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">false</span>)<span style=\"color:#cc7832;\">; &lt;——— 1<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(callback) {<br>    componentInstance.<span style=\"color:#9876aa;\">_pendingCallbacks </span>= [<span style=\"color:#cc7832;font-weight:bold;\">function</span>() { //初始化render完成后调用的回掉函数队列<br>      callback.<span style=\"color:#ffc66d;\">call</span>(componentInstance.<span style=\"color:#9876aa;\">_renderedComponent</span>.<span style=\"color:#ffc66d;\">getPublicInstance</span>())<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>}]<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>}<br><br>  <span style=\"color:#808080;\">// The initial render is synchronous but any updates that happen during<br></span><span style=\"color:#808080;\">  // rendering, in componentWillMount or componentDidMount, will be batched<br></span><span style=\"color:#808080;\">  // according to the current batching strategy.<br></span><span style=\"color:#808080;\"><br></span><span style=\"color:#808080;\">  </span>ReactUpdates.<span style=\"color:#ffc66d;\">batchedUpdates</span>(  &lt;———— 2<br>    <span style=\"color:#ffc66d;\">batchedMountComponentIntoNode</span><span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>componentInstance<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>container<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>shouldReuseMarkup<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>context<br>  )<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>wrapperID = componentInstance.<span style=\"color:#9876aa;\">_instance</span>.rootID<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>instancesByReactRootID[wrapperID] = componentInstance<span style=\"color:#cc7832;\">; <font style=\"font-family: Menlo; font-size: 12px; background-color: rgb(43, 43, 43); color: rgb(204, 120, 50);\">//devtools会用到的映射，先忽略</font><br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">return </span>componentInstance<span style=\"color:#cc7832;\">;<br></span>}<span style=\"color:#cc7832;\">,</span>\n</pre><br></div></div><div>下面分别展开讲解。</div><div><div><ol start=\"1\"><li><font style=\"font-size: 14px;\"> </font><font><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(69, 69, 69);\"><font><font style=\"font-size: 14px;\">instantiateReactComponent（src/<font style=\"color: rgb(69, 69, 69); font-family: Helvetica;\">renderers/shared/stack/reconciler/instantiateReactComponent.js</font>） 初始化组件实例，这里用到了工厂模式，根据传入的参数‘生产’对应的React Component实例。<span style=\"color: rgb(51, 51, 51); font-family: -apple-system, 'PingFang SC', 'Hiragino Sans GB', Arial, 'Microsoft YaHei', 'Helvetica Neue', sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); float: none;\">分别实例化</span><code style=\"box-sizing: border-box; outline: none; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 0.2em 0.4em; word-break: break-word; color: rgb(78, 89, 128); background-color: rgb(248, 248, 248); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">ReactDOMTextComponent</code><span style=\"color: rgb(51, 51, 51); font-family: -apple-system, 'PingFang SC', 'Hiragino Sans GB', Arial, 'Microsoft YaHei', 'Helvetica Neue', sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; float: none;\">, </span><code style=\"box-sizing: border-box; outline: none; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 0.2em 0.4em; word-break: break-word; color: rgb(78, 89, 128); background-color: rgb(248, 248, 248); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">ReactDOMComponent</code><span style=\"color: rgb(51, 51, 51); font-family: -apple-system, 'PingFang SC', 'Hiragino Sans GB', Arial, 'Microsoft YaHei', 'Helvetica Neue', sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); float: none;\">, </span><code style=\"box-sizing: border-box; outline: none; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 0.2em 0.4em; word-break: break-word; color: rgb(78, 89, 128); background-color: rgb(248, 248, 248); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">ReactCompositeComponent</code><span style=\"color: rgb(51, 51, 51); font-family: -apple-system, 'PingFang SC', 'Hiragino Sans GB', Arial, 'Microsoft YaHei', 'Helvetica Neue', sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; float: none;\">类。这些类用来管理</span><code style=\"box-sizing: border-box; outline: none; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 0.2em 0.4em; word-break: break-word; color: rgb(78, 89, 128); background-color: rgb(248, 248, 248); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">ReactElement</code><span style=\"color: rgb(51, 51, 51); font-family: -apple-system, 'PingFang SC', 'Hiragino Sans GB', Arial, 'Microsoft YaHei', 'Helvetica Neue', sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; float: none;\">,负责将不同的</span><code style=\"box-sizing: border-box; outline: none; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 0.2em 0.4em; word-break: break-word; color: rgb(78, 89, 128); background-color: rgb(248, 248, 248); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">ReactElement</code><span style=\"color: rgb(51, 51, 51); font-family: -apple-system, 'PingFang SC', 'Hiragino Sans GB', Arial, 'Microsoft YaHei', 'Helvetica Neue', sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; float: none;\">转化成DOM(通过mountComponent方法),负责更新DOM(通过receiveComponent方法，updateComponent方法，下面详细介绍)等。</span></font></font></span></font></li></ol><div style=\"text-align: center; \"><img src=\"/images/2017-01-20/%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B%E5%9B%BE%20(1).png\" height=\"251\" width=\"554\"><br></div><div><font face=\"Helvetica\" color=\"#454545\"></font></div></div></div><div><font face=\"Helvetica\" color=\"#454545\"><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#629755;font-style:italic;\">/**<br></span><span style=\"color:#629755;font-style:italic;\"> * Given a ReactNode, create an instance that will actually be mounted.<br></span><span style=\"color:#629755;font-style:italic;\"> *<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactNode} node<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{boolean} shouldHaveDebugID<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@return </span><span style=\"color:#629755;font-style:italic;\">{object} A new instance of the element's constructor.<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@protected<br></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\"><span style=\"color:#629755;font-style:italic;\">*/<br></span><span style=\"color:#cc7832;font-weight:bold;\">function </span><span style=\"color:#ffc66d;\">instantiateReactComponent</span>(node<span style=\"color:#cc7832;\">, </span>shouldHaveDebugID) {<br>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>instance<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(node === <span style=\"color:#cc7832;font-weight:bold;\">null </span>|| node === <span style=\"color:#cc7832;font-weight:bold;\">false</span>) {<br>    instance = ReactEmptyComponent.<span style=\"color:#ffc66d;\">create</span>(<span style=\"color:#ffc66d;\">instantiateReactComponent</span>)<span style=\"color:#cc7832;\">;//这里生成一个空的component对象</span><span style=\"font-size: 9pt;\">ReactDOMEmptyComponent，渲染一行注释，可以忽略</span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">  </span>} <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(<span style=\"color:#cc7832;font-weight:bold;\">typeof </span>node === <span style=\"color:#6a8759;\">'object'</span>) {<br>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>element = node<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>type = element.<span style=\"color:#9876aa;\">type</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\"><br></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">typeof </span>element.<span style=\"color:#9876aa;\">type </span>=== <span style=\"color:#6a8759;\">'string'</span>) { //如果类型是浏览器标签比如“div”、“span”之类 创建<font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); color: rgb(78, 89, 128);\">ReactDOMComponent 对象</font><br>      instance = ReactHostComponent.<span style=\"color:#ffc66d;\">createInternalComponent</span>(element)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(<span style=\"color:#ffc66d;\">isInternalComponentType</span>(element.<span style=\"color:#9876aa;\">type</span>)) {//这个判断是否是内部组件的方式没有遇到过（待研究补充）<br>      <span style=\"color:#808080;\">// This is temporarily available for custom components that are not string<br></span><span style=\"color:#808080;\">      // representations. I.e. ART. Once those are updated to use the string<br></span><span style=\"color:#808080;\">      // representation, we can drop this code path.<br></span><span style=\"color:#808080;\">      </span>instance = <span style=\"color:#cc7832;font-weight:bold;\">new </span>element.<span style=\"color:#9876aa;\">type</span>(element)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">      </span><span style=\"color:#808080;\">// We renamed this. Allow the old name for compat. :(<br></span><span style=\"color:#808080;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(!instance.<span style=\"color:#9876aa;\">getHostNode</span>) {<br>        instance.<span style=\"color:#9876aa;\">getHostNode </span>= instance.<span style=\"color:#ffc66d;\">getNativeNode</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">      </span>}<br>    } <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br>      instance = <span style=\"color:#cc7832;font-weight:bold;\">new </span><span style=\"color:#ffc66d;\">ReactCompositeComponentWrapper</span>(element)<span style=\"color:#cc7832;\">; //创建自定义组件<font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); color: rgb(78, 89, 128);\">ReactCompositeComponent对象</font><br></span><span style=\"color:#cc7832;\">    </span>}<br>  } <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(<span style=\"color:#cc7832;font-weight:bold;\">typeof </span>node === <span style=\"color:#6a8759;\">'string' </span>|| <span style=\"color:#cc7832;font-weight:bold;\">typeof </span>node === <span style=\"color:#6a8759;\">'number'</span>) {<span style=\"color:#cc7832;\">//创建文本节点<font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); color: rgb(78, 89, 128);\">ReactDOMTextComponent 对象</font></span><br>    instance = ReactHostComponent.<span style=\"color:#ffc66d;\">createInstanceForText</span>(node)<span style=\"color:#cc7832;\">; <br></span><span style=\"color:#cc7832;\">  </span>} <br><br>  <span style=\"color:#808080;\">// These two fields are used by the DOM and ART diffing algorithms<br></span><span style=\"color:#808080;\">  // respectively. Instead of using expandos on components, we should be<br></span><span style=\"color:#808080;\">  // storing the state needed by the diffing algorithms elsewhere.<br></span><span style=\"color:#808080;\">  </span>instance.<span style=\"color:#9876aa;\">_mountIndex </span>= <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>instance.<span style=\"color:#9876aa;\">_mountImage </span>= <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br></span><br>  <span style=\"color:#cc7832;font-weight:bold;\">return </span>instance<span style=\"color:#cc7832;\">;<br></span>}<br></span></pre></font></div><div><font face=\"Helvetica\" color=\"#454545\"><br></font></div><div><font face=\"Helvetica\" color=\"#454545\">下面分别展开介绍三种组件的渲染、更新、卸载策略。</font></div><div><br></div><div><font face=\"Helvetica\" color=\"#454545\">1.1）<font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); font-size: 12px; color: rgb(78, 89, 128);\">ReactDOMTextComponent（src/<font style=\"font-size: 12px; color: rgb(78, 89, 128); font-family: Menlo;\">renderers/dom/stack/client/ReactDOMTextComponent.js）</font></font></font></div><div><font face=\"Helvetica\" color=\"#454545\"><font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); font-size: 12px; color: rgb(78, 89, 128);\"><font style=\"font-size: 12px; color: rgb(78, 89, 128); font-family: Menlo;\"></font></font></font></div><div>重点看下三个函数：</div><div><br></div><div>    1) mountComponent 在render的时候调用，返回渲染内容，针对文本节点返回：</div><div>        &lt;!-- react-text:domId —&gt;这是文本内容&lt;!-- /react-text —&gt;</div><div><br></div><div><div>  2）receiveComponent 在setState触发更新时调用这个函数，如果文本不同，只替换了注释中的内容。</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#ffc66d;\">receiveComponent</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(nextText<span style=\"color:#cc7832;\">, </span>transaction) {<br>  <span style=\"color:#cc7832;font-weight:bold;\">if </span>(nextText !== <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span>) {<br>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement </span>= nextText<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextStringText = <span style=\"color:#6a8759;\">'' </span>+ nextText<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(nextStringText !== <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_stringText</span>) {<span style=\"color:#808080;\"><br></span><span style=\"color:#808080;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_stringText </span>= nextStringText<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>commentNodes = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">getHostNode</span>()<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">      </span>DOMChildrenOperations.<span style=\"color:#ffc66d;\">replaceDelimitedText</span>(<br>        commentNodes[<span style=\"color:#6897bb;\">0</span>]<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">        </span>commentNodes[<span style=\"color:#6897bb;\">1</span>]<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">        </span>nextStringText<br>      )<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>}<br>  }<br>}<span style=\"color:#cc7832;\">,</span>\n</pre><br></div><div>3）unmountComponent 去掉对text节点引用，重置一些变量。</div><div><br></div><div><br></div><div>1.2）<font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); color: rgb(78, 89, 128);\">ReactDOMComponent</font></div><div><br></div><div>    1）mountComponent 生成组件对应的dom结构</div><div>代码比较长，主要分为四个步骤：</div><div><ol start=\"1\"><li>做一些生成markup前的“准备工作”  ，针对不同类型做一些变量初始化以及让React事件系统捕捉指定事件。</li></ol>           以input标签为例介绍一下：<br><div><ul><li> ReactDOMInput.mountWrapper(this, props, hostParent);  <br></li></ul></div><div>           给input组件实例初始化状态，mountWrapper函数里只给实例设置了一个属性用以保存input的初始value和初始checked值。</div><div>           <span style=\"color:#cc7832;font-weight:bold;\">var </span>defaultValue = props.<span style=\"color:#9876aa;\">defaultValue</span><span style=\"color:#cc7832;\">;<br></span><span>    <span>       </span></span>inst.<span style=\"color:#9876aa;\">_wrapperState </span>= {</div><div><span style=\"color:#9876aa;\">             initialChecked</span>: props.<span style=\"color:#9876aa;\">checked </span>!= <span style=\"color:#cc7832;font-weight:bold;\">null </span>? props.<span style=\"color:#9876aa;\">checked </span>: props.<span style=\"color:#9876aa;\">defaultChecked</span><span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  <span>           </span></span><span style=\"color:#9876aa;\">initialValue</span>: props.<span style=\"color:#9876aa;\">value </span>!= <span style=\"color:#cc7832;font-weight:bold;\">null </span>? props.<span style=\"color:#9876aa;\">value </span>: defaultValue<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\"><span>    <span>  </span></span>       </span><span style=\"color:#9876aa;\">listeners</span>: <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">,<br></span>           }<span style=\"color:#cc7832;\">;</span></div><div><ul><li> props = ReactDOMInput.getHostProps(this, props); 将更多input元素要用到的属性初始化并赋给事例，如value、type、max、min等等</li><li> transaction.getReactMountReady().enqueue(trackInputValue, this);<br></li><li> transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this); 添加预定义事件，这里react添加了invalid事件</li><li> ensureListeningTo(this, 'onChange', transaction); 对于受控组件确保监听on change事件</li></ul><div><br></div><div></div><ol start=\"2\"><li>设置正确的namespace，根据父容器的namespace类型和当前实例的tag类型设置namespace 变量是html svg还是mathml<br></li><li><b>创建将渲染在页面的markup（重要！！！讲解参见注释）</b></li></ol><div><ol start=\"4\"><li>做一些“收尾”工作，比如input、texture的内容初始化以及各个元素的autofocus设置<br></li></ol></div></div><div>       </div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><br><span style=\"color:#629755;font-style:italic;\">/**<br></span><span style=\"color:#629755;font-style:italic;\"> * Generates root tag markup then recurses. This method has side effects and<br></span><span style=\"color:#629755;font-style:italic;\"> * is not idempotent.<br></span><span style=\"color:#629755;font-style:italic;\"> *<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@internal<br></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\"><span style=\"color:#629755;font-style:italic;\">* </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction|ReactServerRenderingTransaction} transaction<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?ReactDOMComponent} the parent component instance<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?object} info about the host container<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{object} context<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@return </span><span style=\"color:#629755;font-style:italic;\">{string} The computed markup.<br></span><span style=\"color:#629755;font-style:italic;\"> */<br></span>mountComponent: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br>    transaction<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>hostParent<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>hostContainerInfo<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>context<br>) {<br>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_rootNodeID </span>= globalIdCounter++<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_domID </span>= hostContainerInfo.<span style=\"color:#9876aa;\">_idCounter</span>++<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_hostParent </span>= hostParent<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_hostContainerInfo </span>= hostContainerInfo<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>props = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span>.<span style=\"color:#9876aa;\">props</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">switch </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span>) {  &lt;———— <span style=\"color:#6897bb;\">1 </span>做一些生成markup前的“准备工作”<br>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'audio'</span>:<br>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'form'</span>:<br>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'iframe'</span>:<br>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'img'</span>:<br>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'link'</span>:<br>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'object'</span>:<br>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'source'</span>:<br>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'video'</span>:<br>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'details'</span>:<br>            <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_wrapperState </span>= {<br>                <span style=\"color:#9876aa;\">listeners</span>: <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">            </span>}<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">            </span><span style=\"color:#808080;\">//针对一些特性元素预先绑定一些事件<br></span><span style=\"color:#808080;\">            </span>transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<span style=\"color:#ffc66d;\">trapBubbledEventsLocal</span><span style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">            </span><span style=\"color:#cc7832;font-weight:bold;\">break</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'input'</span>:<span style=\"color:#808080;\">//给input组件实例初始化状态<br></span><span style=\"color:#808080;\">            </span>ReactDOMInput.<span style=\"color:#ffc66d;\">mountWrapper</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>props<span style=\"color:#cc7832;\">, </span>hostParent)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">            </span>props = ReactDOMInput.<span style=\"color:#ffc66d;\">getHostProps</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>props)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">            </span>transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<span style=\"color:#ffc66d;\">trackInputValue</span><span style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">            </span>transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<span style=\"color:#ffc66d;\">trapBubbledEventsLocal</span><span style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">            </span><span style=\"color:#808080;\">// For controlled components we always need to ensure we're listening<br></span><span style=\"color:#808080;\">            // to onChange. Even if there is no listener.<br></span><span style=\"color:#808080;\">            </span><span style=\"color:#ffc66d;\">ensureListeningTo</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span><span style=\"color:#6a8759;\">'onChange'</span><span style=\"color:#cc7832;\">, </span>transaction)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">            </span><span style=\"color:#cc7832;font-weight:bold;\">break</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">       //略去其他……</span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">    </span>}<br><br>    <span style=\"color:#ffc66d;\">assertValidProps</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>props)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// We create tags in the namespace of their parent container, except HTML<br></span><span style=\"color:#808080;\">    // tags get no namespace.<br></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>namespaceURI<span style=\"color:#cc7832;\">; </span>&lt;————— <span style=\"color:#6897bb;\">2 </span>设置正确的namespace<br>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>parentTag<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(hostParent != <span style=\"color:#cc7832;font-weight:bold;\">null</span>) {<br>        namespaceURI = hostParent.<span style=\"color:#9876aa;\">_namespaceURI</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span>parentTag = hostParent.<span style=\"color:#9876aa;\">_tag</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(hostContainerInfo.<span style=\"color:#9876aa;\">_tag</span>) {<br>        namespaceURI = hostContainerInfo.<span style=\"color:#9876aa;\">_namespaceURI</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span>parentTag = hostContainerInfo.<span style=\"color:#9876aa;\">_tag</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>}<br>    <span style=\"color:#cc7832;font-weight:bold;\">if </span>(namespaceURI == <span style=\"color:#cc7832;font-weight:bold;\">null </span>||<br>        namespaceURI === DOMNamespaces.<span style=\"color:#9876aa;\">svg </span>&amp;&amp; parentTag === <span style=\"color:#6a8759;\">'foreignobject'</span>) {<br>        namespaceURI = DOMNamespaces.<span style=\"color:#9876aa;\">html</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>}<br>    <span style=\"color:#cc7832;font-weight:bold;\">if </span>(namespaceURI === DOMNamespaces.<span style=\"color:#9876aa;\">html</span>) {<br>        <span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag </span>=== <span style=\"color:#6a8759;\">'svg'</span>) {<br>            namespaceURI = DOMNamespaces.<span style=\"color:#9876aa;\">svg</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span>} <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag </span>=== <span style=\"color:#6a8759;\">'math'</span>) {<br>            namespaceURI = DOMNamespaces.<span style=\"color:#9876aa;\">mathml</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span>}<br>    }<br>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_namespaceURI </span>= namespaceURI<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>mountImage<span style=\"color:#cc7832;\">; </span>&lt;————— <span style=\"color:#6897bb;\">3 </span>创建将渲染在页面的markup<br>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>type = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span>.<span style=\"color:#9876aa;\">type</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">//默认用createElement创建<br></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(transaction.<span style=\"color:#9876aa;\">useCreateElement</span>) {<br>        <span style=\"color:#cc7832;font-weight:bold;\">var </span>ownerDocument = hostContainerInfo.<span style=\"color:#9876aa;\">_ownerDocument</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>el<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(namespaceURI === DOMNamespaces.<span style=\"color:#9876aa;\">html</span>) {<br>            <span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag </span>=== <span style=\"color:#6a8759;\">'script'</span>) {<br>                <span style=\"color:#808080;\">//如果是script标签，注意这里包在div里再获取<br></span><span style=\"color:#808080;\">                // Create the script via .innerHTML so its \"parser-inserted\" flag is<br></span><span style=\"color:#808080;\">                // set to true and it does not execute<br></span><span style=\"color:#808080;\">                </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>div = ownerDocument.<span style=\"color:#ffc66d;\">createElement</span>(<span style=\"color:#6a8759;\">'div'</span>)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">                </span>div.<span style=\"color:#9876aa;\">innerHTML </span>= <span style=\"color:#6a8759;\">`&lt;</span>${type}<span style=\"color:#6a8759;\">&gt;&lt;/</span>${type}<span style=\"color:#6a8759;\">&gt;`</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">                </span>el = div.<span style=\"color:#ffc66d;\">removeChild</span>(div.<span style=\"color:#9876aa;\">firstChild</span>)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">            </span>} <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(props.<span style=\"color:#9876aa;\">is</span>) {<br>                <span style=\"color:#808080;\">//和用户自定义元素相关，参见：https://developer.<a href=\"http://mozilla.org/en-US/docs/Web/API/Document/createElement\" target=\"_blank\" rel=\"external\">mozilla.org/en-US/docs/Web/API/Document/createElement</a> <br></span><span style=\"color:#808080;\">                //https://www.<a href=\"http://w3.org/TR/custom-elements/#customized-built-in-element\" target=\"_blank\" rel=\"external\">w3.org/TR/custom-elements/#customized-built-in-element</a> 同时也是为了解决firefox下createElement的bug<br></span><span style=\"color:#808080;\">                </span>el = ownerDocument.<span style=\"color:#ffc66d;\">createElement</span>(type<span style=\"color:#cc7832;\">, </span>props.<span style=\"color:#9876aa;\">is</span>)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">            </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br>                <span style=\"color:#808080;\">// Separate else branch instead of using `props.is || undefined` above becuase of a Firefox bug.<br></span><span style=\"color:#808080;\">                // See discussion in <a href=\"https://github.com/facebook/react/pull/6896\" target=\"_blank\" rel=\"external\">https://github.com/facebook/react/pull/6896</a><br></span><span style=\"color:#808080;\">                // and discussion in <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1276240\" target=\"_blank\" rel=\"external\">https://bugzilla.mozilla.org/show_bug.cgi?id=1276240</a><br></span><span style=\"color:#808080;\">                </span>el = ownerDocument.<span style=\"color:#ffc66d;\">createElement</span>(type)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">            </span>}<br>        } <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br>            el = ownerDocument.<span style=\"color:#ffc66d;\">createElementNS</span>(<br>                namespaceURI<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">                </span>type<br>            )<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span>}<br>        <span style=\"color:#808080;\">//如果tag名包含’－’或指定“is”属性认为是用户自定义标签<br></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>isCustomComponentTag = <span style=\"color:#ffc66d;\">isCustomComponent</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span><span style=\"color:#cc7832;\">, </span>props)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//分别在react实例添加属性指向刚创建的节点，同时给节点添加属性指向当前实例<br></span><span style=\"color:#808080;\">        </span>ReactDOMComponentTree.<span style=\"color:#ffc66d;\">precacheNode</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>el)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_flags </span>|= Flags.<span style=\"color:#9876aa;\">hasCachedChildNodes</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//如果是最外层标签，不是递归创建的子节点，则设置为React根元素，比如ReactDom.render(‘&lt;div&gt;&lt;input/&gt;&lt;/div&gt;’,node) 在创建到div层的时候设置为根元素，然后递归渲染子元素（input）的时候hostParent不为空了。<br></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(!<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_hostParent</span>) {<br>            DOMPropertyOperations.<span style=\"color:#ffc66d;\">setAttributeForRoot</span>(el)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span>}<br>        <span style=\"color:#808080;\">//根据新旧props的差异更新对应dom元素上的属性，首次渲染没有旧props<br></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_updateDOMProperties</span>(<span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">, </span>props<span style=\"color:#cc7832;\">, </span>transaction<span style=\"color:#cc7832;\">, </span>isCustomComponentTag)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//初始化DOMLazyTree结构，根据不同浏览器选择不同的渲染策略，参见（src/renderers/dom/stack/client/DOMLazyTree.js）<br></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>lazyTree = DOMLazyTree(el)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//如果有子节点，则遍历子节点递归调用ReactReconciler.mountComponent（这个函数主要还是调用子节点实例对应的mountComponent）生成子节点的markup（可以简单理解为子节点dom树），保存到lazyTree中，<br></span><span style=\"color:#808080;\">        //根据不同浏览器渲染dom的效率选择将子元素缓存在DOMLazyTree的队列中延迟渲染还是直接拼成一个完整的dom树返回<br></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_createInitialChildren</span>(transaction<span style=\"color:#cc7832;\">, </span>props<span style=\"color:#cc7832;\">, </span>context<span style=\"color:#cc7832;\">, </span>lazyTree)<span style=\"color:#cc7832;\">;    &lt;============<br></span><span style=\"color:#cc7832;\">        </span>mountImage = lazyTree<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br>        <span style=\"color:#808080;\">//判断是否是合法的tag名（用正则）<br></span><span style=\"color:#808080;\">        </span><span style=\"color:#ffc66d;\">validateDangerousTag</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span>)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//用字符串拼接的方式创建起始标签，并添加事件监听、属性和样式内容<br></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>tagOpen = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_createOpenTagMarkupAndPutListeners</span>(transaction<span style=\"color:#cc7832;\">, </span>props)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//如果有子节点，则遍历子节点递归生成每一个子节点的ReactComponent实例，然后调用每个实例的ReactReconciler.mountComponent生成子节点的dom树<br></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>tagContent = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_createContentMarkup</span>(transaction<span style=\"color:#cc7832;\">, </span>props<span style=\"color:#cc7832;\">, </span>context)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//闭合标签<br></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(!tagContent &amp;&amp; omittedCloseTags[<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span>]) {<br>            mountImage = tagOpen + <span style=\"color:#6a8759;\">'/&gt;'</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br>            mountImage = tagOpen + <span style=\"color:#6a8759;\">'&gt;' </span>+ tagContent + <span style=\"color:#6a8759;\">'&lt;/' </span>+ type + <span style=\"color:#6a8759;\">'&gt;'</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span>}<br>    }<br><br>    <span style=\"color:#cc7832;font-weight:bold;\">switch </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span>) { &lt;—————<span style=\"color:#6897bb;\">4 </span>给事务添加组件渲染完毕后做的事情<br>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'input'</span>:<br>            transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<br>                <span style=\"color:#ffc66d;\">inputPostMount</span><span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">                </span><span style=\"color:#cc7832;font-weight:bold;\">this<br></span><span style=\"color:#cc7832;font-weight:bold;\">            </span>)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">            </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(props.<span style=\"color:#9876aa;\">autoFocus</span>) {<br>                transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<br>                    AutoFocusUtils.<span style=\"color:#ffc66d;\">focusDOMComponent</span><span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">                    </span><span style=\"color:#cc7832;font-weight:bold;\">this<br></span><span style=\"color:#cc7832;font-weight:bold;\">                </span>)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">            </span>}<br>            <span style=\"color:#cc7832;font-weight:bold;\">break</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">       //略去其他……  </span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">    </span>}<br><br>    <span style=\"color:#cc7832;font-weight:bold;\">return </span>mountImage<span style=\"color:#cc7832;\">;<br></span>}\n</span></pre>这里额外讲一下 <b>this._createInitialChildren(transaction, props, context, lazyTree)</b>生成子元素dom树的函数，如果props.children是数组，调用以下函数。</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#ffc66d;\">mountChildren</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(nestedChildren<span style=\"color:#cc7832;\">, </span>transaction<span style=\"color:#cc7832;\">, </span>context) {<br>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>children = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_reconcilerInstantiateChildren</span>(<span style=\"color:#808080;\">//深度遍历子节点获得所有子节点，同时调用</span><span style=\"font-size: 9pt; background-color: rgb(52, 65, 52);\">instantiateReactComponent生成子节点对应的</span><span style=\"font-size: 9pt; color: rgb(128, 128, 128);\">ReactComponent组</span><span style=\"color:#808080;\"><br></span><span style=\"color:#808080;\">    </span>nestedChildren<span style=\"color:#cc7832;\">, </span>transaction<span style=\"color:#cc7832;\">, </span>context<br>  )<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_renderedChildren </span>= children<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>mountImages = []<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>index = <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(<span style=\"color:#cc7832;font-weight:bold;\">var </span>name <span style=\"color:#cc7832;font-weight:bold;\">in </span>children) {<br>    <span style=\"color:#cc7832;font-weight:bold;\">if </span>(children.<span style=\"color:#9876aa;\">hasOwnProperty</span>(name)) {<br>      <span style=\"color:#cc7832;font-weight:bold;\">var </span>child = children[name]<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>selfDebugID = <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">     </span><br>      <span style=\"color:#cc7832;font-weight:bold;\">var </span>mountImage = ReactReconciler.<span style=\"color:#ffc66d;\">mountComponent</span>(//调用每个子节点的ReactComponent实例的mountComponent递归渲染所有子节点<br>        child<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">        </span>transaction<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_hostContainerInfo</span><span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">        </span>context<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">        </span>selfDebugID<br>      )<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">      </span>child.<span style=\"color:#9876aa;\">_mountIndex </span>= index++<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">      </span>mountImages.<span style=\"color:#ffc66d;\">push</span>(mountImage)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>}<br>  }<br>  <span style=\"color:#cc7832;font-weight:bold;\">return </span>mountImages<span style=\"color:#cc7832;\">;<br></span>}<span style=\"color:#cc7832;\">,<br></span>\n</pre> </div><div><div><div>再顺便提一下，源码中用到了DOMLazyTree，并根据不同浏览器对dom片段生成的速度做了优化。</div><div><pre style=\"background-color: rgb(43, 43, 43); font-family: Menlo; font-size: 9pt;\"><pre style=\"background-color: rgb(43, 43, 43); font-family: Menlo; font-size: 9pt;\"><span style=\"color: rgb(98, 151, 85); font-style: italic;\">/**<br></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> * In IE (8-11) and Edge, appending nodes with no children is dramatically<br></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> * faster than appending a full subtree, so we essentially queue up the<br></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> * .appendChild calls here and apply them so each node is added to its parent<br></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> * before any children are added.<br></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> *<br></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> * In other browsers, doing so is slower or neutral compared to the other order<br></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> * (in Firefox, twice as slow) so we only do this inversion in IE.<br></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> *<br></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> * See <a href=\"https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode\" target=\"_blank\" rel=\"external\">https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode</a>.<br></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> */<br></span><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">var </span><font color=\"#a9b7c6\">enableLazy = (<br>  </font><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">typeof </span><span style=\"color: rgb(152, 118, 170);\">document </span><font color=\"#a9b7c6\">!== </font><span style=\"color: rgb(106, 135, 89);\">'undefined' </span><font color=\"#a9b7c6\">&amp;&amp;<br>  </font><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">typeof </span><span style=\"color: rgb(152, 118, 170);\">document</span><font color=\"#a9b7c6\">.</font><span style=\"color: rgb(152, 118, 170);\">documentMode </span><font color=\"#a9b7c6\">=== </font><span style=\"color: rgb(106, 135, 89);\">'number'<br></span><span style=\"color: rgb(106, 135, 89);\">  </span><font color=\"#a9b7c6\">||<br>  </font><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">typeof </span><span style=\"color: rgb(152, 118, 170);\">navigator </span><font color=\"#a9b7c6\">!== </font><span style=\"color: rgb(106, 135, 89);\">'undefined' </span><font color=\"#a9b7c6\">&amp;&amp;<br>  </font><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">typeof </span><span style=\"color: rgb(152, 118, 170);\">navigator</span><font color=\"#a9b7c6\">.</font><span style=\"color: rgb(152, 118, 170);\">userAgent </span><font color=\"#a9b7c6\">=== </font><span style=\"color: rgb(106, 135, 89);\">'string' </span><font color=\"#a9b7c6\">&amp;&amp;<br>  </font><span style=\"color: rgb(106, 135, 89);\">/\\bEdge\\/\\d/</span><font color=\"#a9b7c6\">.</font><span style=\"color: rgb(255, 198, 109);\">test</span><font color=\"#a9b7c6\">(</font><span style=\"color: rgb(152, 118, 170);\">navigator</span><font color=\"#a9b7c6\">.</font><span style=\"color: rgb(152, 118, 170);\">userAgent</span><font color=\"#a9b7c6\">)<br>)</font>;</pre><pre style=\"background-color: rgb(43, 43, 43); font-family: Menlo; font-size: 9pt;\"><span style=\"font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\"> function </span><span style=\"font-size: 9pt; color: rgb(255, 198, 109);\">queueChild</span><font style=\"font-size: 9pt;\" color=\"#a9b7c6\">(parentTree</font><span style=\"font-size: 9pt; color: rgb(204, 120, 50);\">, </span><font style=\"font-size: 9pt;\" color=\"#a9b7c6\">childTree) {</font><br></pre><pre style=\"background-color: rgb(43, 43, 43); font-family: Menlo; font-size: 9pt;\"><pre style=\"background-color: rgb(43, 43, 43); font-family: Menlo; font-size: 9pt;\"><font color=\"#a9b7c6\">  </font><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">if </span><font color=\"#a9b7c6\">(enableLazy) {<br>    parentTree.</font><span style=\"color: rgb(152, 118, 170);\">children</span><font color=\"#a9b7c6\">.</font><span style=\"color: rgb(255, 198, 109);\">push</span><font color=\"#a9b7c6\">(childTree)</font><span style=\"color: rgb(204, 120, 50);\">;<br></span><span style=\"color: rgb(204, 120, 50);\">  </span><font color=\"#a9b7c6\">} </font><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">else </span><font color=\"#a9b7c6\">{<br>    parentTree.node.</font><span style=\"color: rgb(152, 118, 170);\">appendChild</span><font color=\"#a9b7c6\">(childTree.node)</font><span style=\"color: rgb(204, 120, 50);\">;<br></span><span style=\"color: rgb(204, 120, 50);\">  </span><font color=\"#a9b7c6\">}<br></font><span style=\"color: rgb(169, 183, 198); background-color: rgb(52, 65, 52);\">}</span><font color=\"#a9b7c6\"></font></pre><br></pre></pre></div><div><font face=\"Helvetica\" color=\"#454545\"><font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); font-size: 12px; color: rgb(78, 89, 128);\"></font></font></div></div><div><div>然后会在这里判断是把子节点缓存起来还是直接挂到父节点上。缓存起来的节点会在ReactMount的_mountImageIntoNode递归地将子节点逐个挂到父节点上，主要用在<code style=\"box-sizing: border-box; outline: none; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 0.2em 0.4em; word-break: break-word; color: rgb(78, 89, 128); background-color: rgb(248, 248, 248); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">ReactDOMComponent</code><span style=\"color: rgb(51, 51, 51); font-family: -apple-system, 'PingFang SC', 'Hiragino Sans GB', Arial, 'Microsoft YaHei', 'Helvetica Neue', sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); float: none;\">, </span><code style=\"box-sizing: border-box; outline: none; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 0.2em 0.4em; word-break: break-word; color: rgb(78, 89, 128); background-color: rgb(248, 248, 248); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">ReactCompositeComponent。</code></div><div><div><br></div>  </div><div>2）receiveComponent 在setState触发更新时调用这个函</div><div><div></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"></pre></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#629755;font-style:italic;\">/**<br></span><span style=\"color:#629755;font-style:italic;\"> * Updates a DOM component after it has already been allocated and<br></span><span style=\"color:#629755;font-style:italic;\"> * attached to the DOM. Reconciles the root DOM node, then recurses.<br></span><span style=\"color:#629755;font-style:italic;\"> *<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction} transaction<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactElement} prevElement<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactElement} nextElement<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@internal<br></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\"><span style=\"color:#629755;font-style:italic;\">* </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@overridable<br></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\"><span style=\"color:#629755;font-style:italic;\">*/<br></span><span style=\"color:#ffc66d;\">updateComponent</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(transaction<span style=\"color:#cc7832;\">, </span>prevElement<span style=\"color:#cc7832;\">, </span>nextElement<span style=\"color:#cc7832;\">, </span>context) {<br>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>lastProps = prevElement.props<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextProps = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span>.props<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  //获得last 和next props<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">switch </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span>) {<br>    <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'input'</span>:<br>      lastProps = ReactDOMInput.<span style=\"color:#ffc66d;\">getHostProps</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>lastProps)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">      </span>nextProps = ReactDOMInput.<span style=\"color:#ffc66d;\">getHostProps</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>nextProps)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">break</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    //略去其他……</span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">default</span>:<br>      <span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">typeof </span>lastProps.<span style=\"color:#9876aa;\">onClick </span>!== <span style=\"color:#6a8759;\">'function' </span>&amp;&amp;<br>          <span style=\"color:#cc7832;font-weight:bold;\">typeof </span>nextProps.<span style=\"color:#9876aa;\">onClick </span>=== <span style=\"color:#6a8759;\">'function'</span>) {<br>        transaction.getReactMountReady().<span style=\"color:#ffc66d;\">enqueue</span>(<br>          <span style=\"color:#ffc66d;\">trapClickOnNonInteractiveElement</span><span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">          </span><span style=\"color:#cc7832;font-weight:bold;\">this<br></span><span style=\"color:#cc7832;font-weight:bold;\">        </span>)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">      </span>}<br>      <span style=\"color:#cc7832;font-weight:bold;\">break</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>}<br><br>  <span style=\"color:#ffc66d;\">assertValidProps</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>nextProps)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>isCustomComponentTag = <span style=\"color:#ffc66d;\">isCustomComponent</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span><span style=\"color:#cc7832;\">, </span>nextProps)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#808080;\">//根据新旧props的差异更新对应dom元素上的属性<br></span><span style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_updateDOMProperties</span>(lastProps<span style=\"color:#cc7832;\">, </span>nextProps<span style=\"color:#cc7832;\">, </span>transaction<span style=\"color:#cc7832;\">, </span>isCustomComponentTag)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#808080;\">//更新子节点内容，diff算法（diff算法下文将详细介绍）<br></span><span style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_updateDOMChildren</span>(<br>    lastProps<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>nextProps<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>transaction<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>context<br>  )<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#808080;\">//更新节点后根据新的props中的值设置dom属性比如value、checked等<br></span><span style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">switch </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span>) {<br>    <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'input'</span>:<br>      <span style=\"color:#808080;\">// Update the wrapper around inputs *after* updating props. This has to<br></span><span style=\"color:#808080;\">      // happen after `_updateDOMProperties`. Otherwise HTML5 input validations<br></span><span style=\"color:#808080;\">      // raise warnings and prevent the new value from being assigned.<br></span><span style=\"color:#808080;\">      </span>ReactDOMInput.<span style=\"color:#ffc66d;\">updateWrapper</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">break</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    <b>//略去其他……</b></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">  </span>}<br>}<span style=\"color:#cc7832;\">,</span>\n</span></span></pre><br></div><div>3）unmountComponent 去掉React Component实例上的事件监听器，循环调用子组件的unmountComponent方法，不直接删除dom节点，由父节点统一清除。</div><div><br></div><div>1.3）<font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); color: rgb(78, 89, 128);\">ReactCompositeComponent</font></div><div><br></div><div> 1）mountComponent</div><div style=\"text-align: center; \"><img src=\"/images/2017-01-20/%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B%E5%9B%BE%20(2).png\" height=\"548\" width=\"213\"><br></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><br><span style=\"color:#629755;font-style:italic;\">/**<br></span><span style=\"color:#629755;font-style:italic;\"> * Initializes the component, renders markup, and registers event listeners.<br></span><span style=\"color:#629755;font-style:italic;\"> *<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction|ReactServerRenderingTransaction} transaction<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?object} hostParent<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?object} hostContainerInfo<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?object} context<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@return </span><span style=\"color:#629755;font-style:italic;\">{?string} Rendered markup to be inserted into the DOM.<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@final<br></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\"><span style=\"color:#629755;font-style:italic;\">* </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@internal<br></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\"><span style=\"color:#629755;font-style:italic;\">*/<br></span>mountComponent: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br>    transaction<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>hostParent<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>hostContainerInfo<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>context<br>) {<br>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_context </span>= context<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_mountOrder </span>= nextMountID++<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_hostParent </span>= hostParent<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_hostContainerInfo </span>= hostContainerInfo<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>publicProps = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span>.<span style=\"color:#9876aa;\">props</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>publicContext = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_processContext</span>(context)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>Component = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span>.<span style=\"color:#9876aa;\">type</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>updateQueue = transaction.<span style=\"color:#ffc66d;\">getUpdateQueue</span>()<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// Initialize the public class<br></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>doConstruct = <span style=\"color:#ffc66d;\">shouldConstruct</span>(Component)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>inst = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_constructComponent</span>(<br>        doConstruct<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">        </span>publicProps<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">        </span>publicContext<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">        </span>updateQueue<br>    )<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>renderedElement<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// Support functional components<br></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(!doConstruct &amp;&amp; (inst == <span style=\"color:#cc7832;font-weight:bold;\">null </span>|| inst.<span style=\"color:#ffc66d;\">render </span>== <span style=\"color:#cc7832;font-weight:bold;\">null</span>)) {<br>        renderedElement = inst<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span>inst = <span style=\"color:#cc7832;font-weight:bold;\">new </span><span style=\"color:#ffc66d;\">StatelessComponent</span>(Component)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_compositeType </span>= ReactCompositeComponentTypes.<span style=\"color:#9876aa;\">StatelessFunctional</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br>        <span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#ffc66d;\">isPureComponent</span>(Component)) {<br>            <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_compositeType </span>= ReactCompositeComponentTypes.<span style=\"color:#9876aa;\">PureClass</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br>            <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_compositeType </span>= ReactCompositeComponentTypes.<span style=\"color:#9876aa;\">ImpureClass</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span>}<br>    }<br><br>    <span style=\"color:#808080;\">// These should be set up in the constructor, but as a convenience for<br></span><span style=\"color:#808080;\">    // simpler class abstractions, we set them up after the fact.<br></span><span style=\"color:#808080;\">    </span>inst.<span style=\"color:#9876aa;\">props </span>= publicProps<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>inst.<span style=\"color:#9876aa;\">context </span>= publicContext<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>inst.<span style=\"color:#9876aa;\">refs </span>= emptyObject<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>inst.<span style=\"color:#9876aa;\">updater </span>= updateQueue<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_instance </span>= inst<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// Store a reference from the instance back to the internal representation<br></span><span style=\"color:#808080;\">    </span>ReactInstanceMap.<span style=\"color:#ffc66d;\">set</span>(inst<span style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>initialState = inst.<span style=\"color:#9876aa;\">state</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(initialState === <span style=\"color:#9876aa;\">undefined</span>) {<br>        inst.<span style=\"color:#9876aa;\">state </span>= initialState = <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>}<br><br>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingStateQueue </span>= <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingReplaceState </span>= <span style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingForceUpdate </span>= <span style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">//调用生命周期函数<br></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(inst.<span style=\"color:#9876aa;\">componentWillMount</span>) {<br>        inst.<span style=\"color:#9876aa;\">componentWillMount</span>()<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">// When mounting, calls to `setState` by `componentWillMount` will set<br></span><span style=\"color:#808080;\">        // `this._pendingStateQueue` without triggering a re-render.注意这里新的state是在</span><span style=\"color: rgb(152, 118, 170); font-size: 9pt;\">componentWillMount执行完后更新的，因此在<font style=\"font-family: Menlo; font-size: 12px; background-color: rgb(43, 43, 43); color: rgb(152, 118, 170);\">componentWillMount</font>里的this.state不是最新的</span><span style=\"color:#808080;\"><br></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingStateQueue</span>) {<br>            inst.<span style=\"color:#9876aa;\">state </span>= <span style=\"color:#cc7832;font-weight:bold;\">this</span>._processPendingState(inst.<span style=\"color:#9876aa;\">props</span><span style=\"color:#cc7832;\">, </span>inst.<span style=\"color:#9876aa;\">context</span>)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span>}<br>    }<br><br>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>markup<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">//带错误监听，内部调用performInitialMount，render函数返回的内容用来初始化一个ReactComponent实例，然后调用ReactReconciler.mountComponent获得dom树<br></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(inst.<span style=\"color:#ffc66d;\">unstable_handleError</span>) {<br>        markup = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">performInitialMountWithErrorHandling</span>(<br>            renderedElement<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">            </span>hostParent<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">            </span>hostContainerInfo<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">            </span>transaction<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">            </span>context<br>        )<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br>        markup = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">performInitialMount</span>(<br>            renderedElement<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">            </span>hostParent<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">            </span>hostContainerInfo<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">            </span>transaction<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">            </span>context<br>        )<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>}<br>    <span style=\"color:#808080;\">//<font style=\"font-family: Menlo; font-size: 12px; background-color: rgb(43, 43, 43); color: rgb(255, 198, 109);\">componentDidMount执行</font><br></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(inst.<span style=\"color:#ffc66d;\">componentDidMount</span>) {<br>        transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(inst.<span style=\"color:#ffc66d;\">componentDidMount</span><span style=\"color:#cc7832;\">, </span>inst)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>}<br><br>    <span style=\"color:#808080;\">// setState callbacks during willMount should end up here<br></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">const </span>callbacks = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingCallbacks</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(callbacks) {<br>        <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingCallbacks </span>= <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(let i = <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">; </span>i &lt; callbacks.<span style=\"color:#9876aa;\">length</span><span style=\"color:#cc7832;\">; </span>i++) {<br>            transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<br>                callbacks[i]<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">                </span>inst<br>            )<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span>}<br>    }<br><br>    <span style=\"color:#cc7832;font-weight:bold;\">return </span>markup<span style=\"color:#cc7832;\">;<br></span>}<span style=\"color:#cc7832;\">,</span>\n</span></span></pre><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#cc7832;\"><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#ffc66d;\">performInitialMount</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br>  renderedElement<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>hostParent<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>hostContainerInfo<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>transaction<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>context<br>) {<br>  <span style=\"color:#808080;\">// If not a stateless component, we now render<br></span><span style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(renderedElement === <span style=\"color:#9876aa;\">undefined</span>) {<br>    renderedElement = <span style=\"color:#cc7832;font-weight:bold;\">this</span>._renderValidatedComponent()<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>}<br><br>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>nodeType = ReactNodeTypes.<span style=\"color:#ffc66d;\">getType</span>(renderedElement)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_renderedNodeType </span>= nodeType<span style=\"color:#cc7832;\">;</span></pre><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#cc7832;\">  //得到当前ReactElement对应的ReactComponent实例<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>child = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_instantiateReactComponent</span>(<br>    renderedElement<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>nodeType !== ReactNodeTypes.<span style=\"color:#9876aa;\">EMPTY </span><span style=\"color:#808080;\">/* shouldHaveDebugID */<br></span><span style=\"color:#808080;\">  </span>)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_renderedComponent </span>= child<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>debugID = <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">;</span><br>  //递归生成子节点dom树<br>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>markup = ReactReconciler.<span style=\"color:#ffc66d;\">mountComponent</span>(<br>    child<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>transaction<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>hostParent<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>hostContainerInfo<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_processChildContext</span>(context)<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>debugID<br>  )<span style=\"color:#cc7832;\">;</span><br><br>  <span style=\"color:#cc7832;font-weight:bold;\">return </span>markup<span style=\"color:#cc7832;\">;<br></span>}<span style=\"color:#cc7832;\">,<br></span>\n</pre><br></span></pre>2）receiveComponent </div><div>这里负责生命周期的componentWillReceiveProps、shouldComponentUpdate、componentWillUpdate、render、componentDidUpdate。注意在前三个生命周期函数中调用this.state无法获取更新后的this.state因为为实例更新state的inst.state=nextState在componentWillUpdate之后调用，即render和componentDidUpdate中可以，禁止在shouldComponentUpdate和componentWillUpdate中调用setState，会造成循环调用（原因参见src/renderers/shared/stack/reconciler/ReactCompositeComponent.js的performUpdateIfNecessary方法）</div><div style=\"text-align: center; \"><img src=\"/images/2017-01-20/%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B%E5%9B%BE%20(3).png\" height=\"685\" width=\"564\"><br></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><br><span style=\"color:#629755;font-style:italic;\">/**<br></span><span style=\"color:#629755;font-style:italic;\"> * Perform an update to a mounted component. The componentWillReceiveProps and<br></span><span style=\"color:#629755;font-style:italic;\"> * shouldComponentUpdate methods are called, then (assuming the update isn't<br></span><span style=\"color:#629755;font-style:italic;\"> * skipped) the remaining update lifecycle methods are called and the DOM<br></span><span style=\"color:#629755;font-style:italic;\"> * representation is updated.<br></span><span style=\"color:#629755;font-style:italic;\"> *<br></span><span style=\"color:#629755;font-style:italic;\"> * By default, this implements React's rendering and reconciliation algorithm.<br></span><span style=\"color:#629755;font-style:italic;\"> * Sophisticated clients may wish to override this.<br></span><span style=\"color:#629755;font-style:italic;\"> *<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction} transaction<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactElement} prevParentElement<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactElement} nextParentElement<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@internal<br></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\"><span style=\"color:#629755;font-style:italic;\">* </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@overridable<br></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\"><span style=\"color:#629755;font-style:italic;\">*/<br></span>updateComponent: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br>    transaction<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>prevParentElement<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>nextParentElement<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>prevUnmaskedContext<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>nextUnmaskedContext<br>) {<br>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>inst = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_instance</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>willReceive = <span style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextContext<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// Determine if the context has changed or not<br></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_context </span>=== nextUnmaskedContext) {<br>        nextContext = inst.<span style=\"color:#9876aa;\">context</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br>        nextContext = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_processContext</span>(nextUnmaskedContext)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span>willReceive = <span style=\"color:#cc7832;font-weight:bold;\">true</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>}<br><br>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>prevProps = prevParentElement.<span style=\"color:#9876aa;\">props</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextProps = nextParentElement.<span style=\"color:#9876aa;\">props</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// Not a simple state update but a props update<br></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(prevParentElement !== nextParentElement) {<br>        willReceive = <span style=\"color:#cc7832;font-weight:bold;\">true</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>}<br><br>    <span style=\"color:#808080;\">// An update here will schedule an update but immediately set<br></span><span style=\"color:#808080;\">    // _pendingStateQueue which will ensure that any state updates gets<br></span><span style=\"color:#808080;\">    // immediately reconciled instead of waiting for the next batch.<br></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(willReceive &amp;&amp; inst.<span style=\"color:#ffc66d;\">componentWillReceiveProps</span>) {<br>        inst.<span style=\"color:#ffc66d;\">componentWillReceiveProps</span>(nextProps<span style=\"color:#cc7832;\">, </span>nextContext)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>}<br><br>    <span style=\"color:#808080;\">// If updating happens to enqueue any new updates, we shouldn't execute new<br></span><span style=\"color:#808080;\">    // callbacks until the next render happens, so stash the callbacks first.<br></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>callbacks = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingCallbacks</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingCallbacks </span>= <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextState = <span style=\"color:#cc7832;font-weight:bold;\">this</span>._processPendingState(nextProps<span style=\"color:#cc7832;\">, </span>nextContext)<span style=\"color:#cc7832;\">; </span><span style=\"color:#808080;\">//获得nextState<br></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>shouldUpdate = <span style=\"color:#cc7832;font-weight:bold;\">true</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(!<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingForceUpdate</span>) { <span style=\"color:#808080;\">//没设置forseupdate<br></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>prevState = inst.<span style=\"color:#9876aa;\">state</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span>shouldUpdate = willReceive || nextState !== prevState<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//如果提供shouldComponentUpdate，调用函数，否则新旧state和props浅比较确定是否更新<br></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(inst.<span style=\"color:#ffc66d;\">shouldComponentUpdate</span>) {<br>            shouldUpdate = inst.<span style=\"color:#ffc66d;\">shouldComponentUpdate</span>(nextProps<span style=\"color:#cc7832;\">, </span>nextState<span style=\"color:#cc7832;\">, </span>nextContext)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br>            <span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_compositeType </span>=== ReactCompositeComponentTypes.<span style=\"color:#9876aa;\">PureClass</span>) {<br>                shouldUpdate =<br>                    !shallowEqual(prevProps<span style=\"color:#cc7832;\">, </span>nextProps) ||<br>                    !shallowEqual(inst.<span style=\"color:#9876aa;\">state</span><span style=\"color:#cc7832;\">, </span>nextState)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">            </span>}<br>        }<br>    }<br><br>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_updateBatchNumber </span>= <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(shouldUpdate) {<br>        <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingForceUpdate </span>= <span style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">// Will set `this.props`, `this.state` and `this.context`.<br></span><span style=\"color:#808080;\">        //设置新props、state，调用生命周期函数（如果提供），更新dom<br></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>._performComponentUpdate(<br>            nextParentElement<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">            </span>nextProps<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">            </span>nextState<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">            </span>nextContext<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">            </span>transaction<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">            </span>nextUnmaskedContext<br>        )<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br>        <span style=\"color:#808080;\">// If it's determined that a component should not update, we still want<br></span><span style=\"color:#808080;\">        // to set props and state but we shortcut the rest of the update.<br></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement </span>= nextParentElement<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_context </span>= nextUnmaskedContext<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span>inst.<span style=\"color:#9876aa;\">props </span>= nextProps<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span>inst.<span style=\"color:#9876aa;\">state </span>= nextState<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span>inst.<span style=\"color:#9876aa;\">context </span>= nextContext<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>}<br>    <span style=\"color:#808080;\">//render之后调用的事件队列<br></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(callbacks) {<br>        <span style=\"color:#cc7832;font-weight:bold;\">for </span>(<span style=\"color:#cc7832;font-weight:bold;\">var </span>j = <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">; </span>j &lt; callbacks.<span style=\"color:#9876aa;\">length</span><span style=\"color:#cc7832;\">; </span>j++) {<br>            transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<br>                callbacks[j]<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">                </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">getPublicInstance</span>()<br>            )<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span>}<br>    }<br>}<span style=\"color:#cc7832;\">,</span>\n</span></span></pre><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#629755;font-style:italic;\">/**<br></span><span style=\"color:#629755;font-style:italic;\"> * Merges new props and state, notifies delegate methods of update and<br></span><span style=\"color:#629755;font-style:italic;\"> * performs update.<br></span><span style=\"color:#629755;font-style:italic;\"> *<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactElement} nextElement Next element<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{object} nextProps Next public object to set as properties.<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?object} nextState Next object to set as state.<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?object} nextContext Next public object to set as context.<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction} transaction<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?object} unmaskedContext<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@private<br></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\"><span style=\"color:#629755;font-style:italic;\">*/<br></span>_performComponentUpdate: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br>  nextElement<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>nextProps<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>nextState<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>nextContext<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>transaction<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>unmaskedContext<br>) {<br>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>inst = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_instance</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>hasComponentDidUpdate = Boolean(inst.<span style=\"color:#ffc66d;\">componentDidUpdate</span>)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>prevProps<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>prevState<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>prevContext<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(hasComponentDidUpdate) {<br>    prevProps = inst.<span style=\"color:#9876aa;\">props</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>prevState = inst.<span style=\"color:#9876aa;\">state</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>prevContext = inst.<span style=\"color:#9876aa;\">context</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>}<br><br>  <span style=\"color:#cc7832;font-weight:bold;\">if </span>(inst.<span style=\"color:#ffc66d;\">componentWillUpdate</span>) {<br>     inst.<span style=\"color:#ffc66d;\">componentWillUpdate</span>(nextProps<span style=\"color:#cc7832;\">, </span>nextState<span style=\"color:#cc7832;\">, </span>nextContext)<span style=\"color:#cc7832;\">;</span><br>  }<br><br>  <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement </span>= nextElement<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_context </span>= unmaskedContext<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>inst.<span style=\"color:#9876aa;\">props </span>= nextProps<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>inst.<span style=\"color:#9876aa;\">state </span>= nextState<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>inst.<span style=\"color:#9876aa;\">context </span>= nextContext<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(inst.<span style=\"color:#ffc66d;\">unstable_handleError</span>) {<br>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>._updateRenderedComponentWithErrorHandling(transaction<span style=\"color:#cc7832;\">, </span>unmaskedContext)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>._updateRenderedComponent(transaction<span style=\"color:#cc7832;\">, </span>unmaskedContext)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>}<br><br>  <span style=\"color:#cc7832;font-weight:bold;\">if </span>(hasComponentDidUpdate) {<br>      transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<br>        inst.<span style=\"color:#ffc66d;\">componentDidUpdate</span>.<span style=\"color:#ffc66d;\">bind</span>(inst<span style=\"color:#cc7832;\">, </span>prevProps<span style=\"color:#cc7832;\">, </span>prevState<span style=\"color:#cc7832;\">, </span>prevContext)<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">        </span>inst<br>      )<span style=\"color:#cc7832;\">;</span><br>  }<br>}<span style=\"color:#cc7832;\">,</span>\n</span></pre><br></div><div>3）unmountComponent 调用生命周期函数componentWillUnmount（如果提供），调用当前组件对应的React Component实例对应的unmountComponent函数，重置一堆变量。</div><div><br></div><div><br></div><div><ol start=\"2\"><li>渲染组件的工作主要在这个函数，通过<font style=\"font-family: Helvetica; color: rgb(69, 69, 69);\">instantiateReactComponent</font>得到了各种类型组件对应的ReactComponent实例（可以理解为一个ReactComponent实例的树，包含所有子节点的ReactComponent实例），然后调用实例的mountComponent方法（上面讲解过）得到要渲染的‘markup’可能是一个dom树，或一个DOMLazyTree结构保存将子节点的dom结构树保存到数组里，最后插入到container中。</li></ol></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#629755;font-style:italic;\">/**<br></span><span style=\"color:#629755;font-style:italic;\"> * Mounts this component and inserts it into the DOM.<br></span><span style=\"color:#629755;font-style:italic;\"> *<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactComponent} componentInstance The instance to mount.<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{DOMElement} container DOM element to mount into.<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction} transaction<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{boolean} shouldReuseMarkup If true, do not insert markup<br></span><span style=\"color:#629755;font-style:italic;\"> */<br></span><span style=\"color:#cc7832;font-weight:bold;\">function </span><span style=\"color:#ffc66d;\">mountComponentIntoNode</span>(<br>  wrapperInstance<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>container<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>transaction<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>shouldReuseMarkup<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>context<br>) {<br>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>markerName<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(ReactFeatureFlags.<span style=\"color:#9876aa;\">logTopLevelRenders</span>) { //记录拼接组件对应的dom模板所用的时长<br>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>wrappedElement = wrapperInstance.<span style=\"color:#9876aa;\">_currentElement</span>.<span style=\"color:#9876aa;\">props</span>.child<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>type = wrappedElement.<span style=\"color:#9876aa;\">type</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>markerName = <span style=\"color:#6a8759;\">'React mount: ' </span>+ (<br>      <span style=\"color:#cc7832;font-weight:bold;\">typeof </span>type === <span style=\"color:#6a8759;\">'string' </span>? type :<br>      type.<span style=\"color:#9876aa;\">displayName </span>|| type.<span style=\"color:#9876aa;\">name<br></span><span style=\"color:#9876aa;\">    </span>)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#9876aa;\">console</span>.<span style=\"color:#ffc66d;\">time</span>(markerName)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>}<br><br>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>markup = ReactReconciler.<span style=\"color:#ffc66d;\">mountComponent</span>( //调用组件实例的mountComponent方法获得要渲染的结构（可能是一个html片段或一个src/<font style=\"font-size: 12px; color: rgb(169, 183, 198); font-family: Menlo;\">renderers/dom/stack/client/DOMLazyTree.js结构）</font>，添加事件以及ref属性<br>    wrapperInstance<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>transaction<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>ReactDOMContainerInfo(wrapperInstance<span style=\"color:#cc7832;\">, </span>container)<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>context<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#6897bb;\">0 </span><span style=\"color:#808080;\">/* parentDebugID */<br></span><span style=\"color:#808080;\">  </span>)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(markerName) {<br>    <span style=\"color:#9876aa;\">console</span>.<span style=\"color:#ffc66d;\">timeEnd</span>(markerName)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>}<br><br>  wrapperInstance.<span style=\"color:#9876aa;\">_renderedComponent</span>.<span style=\"color:#9876aa;\">_topLevelWrapper </span>= wrapperInstance<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>ReactMount.<span style=\"color:#ffc66d;\">_mountImageIntoNode</span>( //将上面得到的结构（递归）渲染到container dom节点中，显示在页面上<br>    markup<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>container<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>wrapperInstance<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>shouldReuseMarkup<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>transaction<br>  )<span style=\"color:#cc7832;\">;<br></span>}\n</pre><br></div><div>以上是对虚拟dom和渲染策略的讲解。</div><div><br></div><div>推荐阅读：</div><div><span style=\"font: 12.0px Helvetica; color: #e4af09\"><a href=\"https://zhuanlan.zhihu.com/purerender\" target=\"_blank\" rel=\"external\">https://zhuanlan.zhihu.com/purerender</a></span><span style=\"font: 12.0px Helvetica; color: #454545\"><span style=\"font: 12.0px 'PingFang SC'; color: #454545\">关于</span><span style=\"font: 12.0px Helvetica; color: #454545\">react</span><span style=\"font: 12.0px 'PingFang SC'; color: #454545\">源码解析系列文章</span><span style=\"font: 12.0px Helvetica; color: #454545\"><br>\n<span style=\"color: #e4af09\"><a href=\"http://purplebamboo.github.io/2015/09/15/reactjs_source_analyze_part_one/\" target=\"_blank\" rel=\"external\">http://purplebamboo.github.io/2015/09/15/reactjs_source_analyze_part_one/</a></span></span></span></div><div><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-size: 12px; font-family: Helvetica;\"><font color=\"#e4af09\">《深入React技术栈》这本书的第三章（有需要可以找我借）<br></font>\n</span><br></div><div><br></div><div><br></div></div></div></div></div></div>","excerpt":"","more":"\n<div><span style=\"color: rgb(68, 68, 68); font-family: 'Helvetica Neue', Helvetica, 'Lucida Grande', Arial, 'Hiragino Sans GB', 微软雅黑, 'WenQuanYi Micro Hei', STHeiti, SimSun, sans-serif; font-size: 14px; orphans: 2; widows: 2;\">前端开发过程中，更新页面的数据、样式等操作都要操作dom，而复杂的dom操作通常是产品性能瓶颈原因之一，为此React引入了Virtual Dom的概念，Virtual Dom其实是用js实现了一套dom api，包括虚拟dom模型、生命周期管理、diff算法等。React会将传入的JSX片段转化成虚拟dom节点，当数据更新时，通过diff算法找到要变更的dom节点，并只对变化的部分进行实际的浏览器dom更新，而不是重新渲染整个dom树。下面我们结合组件渲染流程结合源码介绍一下React如何创建虚拟节点，以及如何渲染、更新节点的整个流程。</span><br/></div><div><span style=\"color: rgb(68, 68, 68); font-family: 'Helvetica Neue', Helvetica, 'Lucida Grande', Arial, 'Hiragino Sans GB', 微软雅黑, 'WenQuanYi Micro Hei', STHeiti, SimSun, sans-serif; font-size: 14px; orphans: 2; widows: 2;\">——以下代码是React v15.4.2版本——<br/></span></div><div>React项目渲染组件的方法是：ReactDom.render，将父组件连带所有包含在内的子组件渲染出来。render方法最终调用了 src/renderers/dom/stack/client/ReactMount.js 的render方法。</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Renders a React component into the DOM in the supplied `container`.<br/></span><span style=\"color:#629755;font-style:italic;\"> * See <a href=\"https://facebook.github.io/react/docs/react-dom.html#render\">https://facebook.github.io/react/docs/react-dom.html#render</a><br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * If the React component was previously rendered into `container`, this will<br/></span><span style=\"color:#629755;font-style:italic;\"> * perform an update on it and only mutate the DOM as necessary to reflect the<br/></span><span style=\"color:#629755;font-style:italic;\"> * latest React component.<br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactElement} nextElement Component element to render.<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{DOMElement} container DOM element to render into.<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?function} callback function triggered on completion<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@return </span><span style=\"color:#629755;font-style:italic;\">{ReactComponent} Component instance rendered in `container`.<br/></span><span style=\"color:#629755;font-style:italic;\"> */<br/></span><span style=\"color:#ffc66d;\">render</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(nextElement<span style=\"color:#cc7832;\">, </span>container<span style=\"color:#cc7832;\">, </span>callback) {<br/>  <span style=\"color:#cc7832;font-weight:bold;\">return </span>ReactMount.<span style=\"color:#ffc66d;\">_renderSubtreeIntoContainer</span>(<span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">, </span>nextElement<span style=\"color:#cc7832;\">, </span>container<span style=\"color:#cc7832;\">, </span>callback)<span style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">,</span></pre></div><div>注意这里第一个参数是ReactElement类型，通常为了可读性和开发效率我们传入JSX写的结构，最终会编译转换成调用React的createElement方法生成虚拟元素ReactElement结构传入render中。这里我们先看一下React.createElement做了哪些事情（src/isomorphic/classic/element/ReactElement.js）</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><br/><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Create and return a new ReactElement of the given type.<br/></span><span style=\"color:#629755;font-style:italic;\"> * See <a href=\"https://facebook.github.io/react/docs/react-api.html#createelement\">https://facebook.github.io/react/docs/react-api.html#createelement</a><br/></span><span style=\"color:#629755;font-style:italic;\"> */<br/></span><span style=\"color:#ffc66d;\">ReactElement</span>.<span style=\"color:#ffc66d;\">createElement </span>= <span style=\"color:#cc7832;font-weight:bold;\">function</span>(type<span style=\"color:#cc7832;\">, </span>config<span style=\"color:#cc7832;\">, </span>children) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>propName<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// Reserved names are extracted<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>props = {}<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>key = <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>ref = <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>self = <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>source = <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(config != <span style=\"color:#cc7832;font-weight:bold;\">null</span>) {<br/>        <span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#ffc66d;\">hasValidRef</span>(config)) {<br/>            ref = config.<span style=\"color:#9876aa;\">ref</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/>        <span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#ffc66d;\">hasValidKey</span>(config)) {<br/>            key = <span style=\"color:#6a8759;\">'' </span>+ config.key<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/><br/>        self = config.<span style=\"color:#9876aa;\">__self </span>=== <span style=\"color:#9876aa;\">undefined </span>? <span style=\"color:#cc7832;font-weight:bold;\">null </span>: config.<span style=\"color:#9876aa;\">__self</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>source = config.<span style=\"color:#9876aa;\">__source </span>=== <span style=\"color:#9876aa;\">undefined </span>? <span style=\"color:#cc7832;font-weight:bold;\">null </span>: config.<span style=\"color:#9876aa;\">__source</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">// config中的内容复制到props<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(propName <span style=\"color:#cc7832;font-weight:bold;\">in </span>config) {<br/>            <span style=\"color:#cc7832;font-weight:bold;\">if </span>(hasOwnProperty.<span style=\"color:#ffc66d;\">call</span>(config<span style=\"color:#cc7832;\">, </span>propName) &amp;&amp;<br/>                !RESERVED_PROPS.<span style=\"color:#ffc66d;\">hasOwnProperty</span>(propName)) {<br/>                props[propName] = config[propName]<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span>}<br/>        }<br/>    }<br/><br/>    <span style=\"color:#808080;\">//将第三个及之后的参数作为children赋值给props的children属性<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>childrenLength = arguments.<span style=\"color:#9876aa;\">length </span>- <span style=\"color:#6897bb;\">2</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(childrenLength === <span style=\"color:#6897bb;\">1</span>) {<br/>        props.<span style=\"color:#9876aa;\">children </span>= children<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(childrenLength &gt; <span style=\"color:#6897bb;\">1</span>) {<br/>        <span style=\"color:#cc7832;font-weight:bold;\">var </span>childArray = Array(childrenLength)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(<span style=\"color:#cc7832;font-weight:bold;\">var </span>i = <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">; </span>i &lt; childrenLength<span style=\"color:#cc7832;\">; </span>i++) {<br/>            childArray[i] = arguments[i + <span style=\"color:#6897bb;\">2</span>]<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/><br/>        props.<span style=\"color:#9876aa;\">children </span>= childArray<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/><br/>    <span style=\"color:#808080;\">// 如果某个props为空且存在默认props，赋值<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(type &amp;&amp; type.<span style=\"color:#9876aa;font-style:italic;\">defaultProps</span>) {<br/>        <span style=\"color:#cc7832;font-weight:bold;\">var </span>defaultProps = type.<span style=\"color:#9876aa;font-style:italic;\">defaultProps</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(propName <span style=\"color:#cc7832;font-weight:bold;\">in </span>defaultProps) {<br/>            <span style=\"color:#cc7832;font-weight:bold;\">if </span>(props[propName] === <span style=\"color:#9876aa;\">undefined</span>) {<br/>                props[propName] = defaultProps[propName]<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span>}<br/>        }<br/>    }<br/><br/>    <span style=\"color:#cc7832;font-weight:bold;\">return </span><span style=\"color:#ffc66d;\">ReactElement</span>(<br/>        type<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>key<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>ref<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>self<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>source<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>ReactCurrentOwner.<span style=\"color:#9876aa;\">current</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>props<br/>    )<span style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">;</span>\n</pre></div><div><br/></div><div>下面结合源码详细讲解整个渲染的过程。</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#ffc66d;\">render</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(nextElement<span style=\"color:#cc7832;\">, </span>container<span style=\"color:#cc7832;\">, </span>callback) {<br/>  <span style=\"color:#cc7832;font-weight:bold;\">return </span>ReactMount.<span style=\"color:#ffc66d;\">_renderSubtreeIntoContainer</span>(<span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">, </span>nextElement<span style=\"color:#cc7832;\">, </span>container<span style=\"color:#cc7832;\">, </span>callback)<span style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">,</span>\n</pre>去掉各种检查后的代码如下：</div><div>思路：首先获得dom container里原有的ReactElement，如果存在则将实际需要渲染的ReactElement（上一步用<font style=\"font-family: Menlo; font-size: 12px; background-color: rgb(43, 43, 43); color: rgb(128, 128, 128);\">TopLevelWrapper</font>包裹的child）和新的ReactElement做比较（1），如果应该更新则更新组件（2），否则清空container内之前渲染的组件（3），生成新的根ReactComponent渲染到container中（4）。</div><div>主要流程图如下：<br/><img src=\"/images/2017-01-20/%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B%E5%9B%BE.png\" height=\"558\" width=\"650\"/><br/></div><div><pre style=\"background-color: rgb(43, 43, 43);\"><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">_renderSubtreeIntoContainer</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">: </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">function</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(parentComponent</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">, </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">nextElement</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">, </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">container</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">, </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">callback) {</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\"><br/></span><pre style=\"font-family: Menlo; font-size: 9pt; background-color: rgb(43, 43, 43);\"><span style=\"font-size: 9pt;\"><font><pre style=\"background-color: rgb(43, 43, 43); font-family: Menlo; font-size: 9pt;\">   <span style=\"color: rgb(128, 128, 128);\">//nextElement外包一层react定义的TopLevelWrapper用于屏蔽各类组件的差异记录一些变量，比如顶层组件的计数<br/></span><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">   var </span><font color=\"#a9b7c6\">nextWrappedElement = React.</font><span style=\"color: rgb(152, 118, 170);\">createElement</span><font color=\"#a9b7c6\">(<br/>     </font><span style=\"color: rgb(255, 198, 109);\">TopLevelWrapper</span><span style=\"color: rgb(204, 120, 50);\">,<br/></span><span style=\"color: rgb(204, 120, 50);\">     </span><font color=\"#a9b7c6\">{ </font><span style=\"color: rgb(152, 118, 170);\">child</span><font color=\"#a9b7c6\">: nextElement }<br/>   )</font>;</pre></font></span></pre><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">nextContext = getContextForSubtree(parentComponent)</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;//本次调用返回null<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">prevComponent = </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">getTopLevelWrapperInContainer</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(container)</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\"><br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">if </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(prevComponent) {<br/>    </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">prevWrappedElement = prevComponent.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_currentElement</span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">prevElement = prevWrappedElement.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">props</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">.child</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">if </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(shouldUpdateReactComponent(prevElement</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">, </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">nextElement)) {      &lt;——— 1<br/>      </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">publicInst = prevComponent.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_renderedComponent</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">getPublicInstance</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">()</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">      </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">updatedCallback = callback &amp;&amp; </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">function</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">() {<br/>        callback.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">call</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(publicInst)</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">      </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">}</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">      </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">ReactMount.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">_updateRootComponent</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(   &lt;———— 2<br/>        prevComponent</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">        </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">nextWrappedElement</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">        </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">nextContext</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">        </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">container</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">        </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">updatedCallback<br/>      )</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">      </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">return </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">publicInst</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">} </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">else </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">{<br/>      ReactMount.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">unmountComponentAtNode</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(container)</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;  <font style=\"font-family: Menlo; background-color: rgb(43, 43, 43); font-size: 12px; color: rgb(169, 183, 198);\">&lt;———— 3</font><br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">}<br/>  }<br/><br/>  </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">reactRootElement = </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">getReactRootElementInContainer</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(container)</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;//获得container节点的第一个dom子节点<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">containerHasReactMarkup =<br/>    reactRootElement &amp;&amp; !!</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">internalGetID</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(reactRootElement)</font><font face=\"Menlo\" color=\"#cc7832\" size=\"2\">; //判断这个dom子节点是不是React渲染的（React渲染的会有会有一个‘data-reacted’的attribute属性）<br/></font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">containerHasNonRootReactChild = </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">hasNonRootReactChild</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(container)</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">; //判断container是否包含不是React根节点的React实例<br/></span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\"><br/>  </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font color=\"#a9b7c6\"><font face=\"Menlo\" size=\"2\">shouldReuseMarkup =           //这里不太明白什么情况会重用markup，因为在’3’已经把container中的dom清空了，欢迎讨论<br/>    containerHasReactMarkup &amp;&amp;<br/>    !prevComponent &amp;&amp;<br/>    !containerHasNonRootReactChild</font></font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">component = ReactMount.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">_renderNewRootComponent</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(   </font><font style=\"font-family: Menlo; font-size: 12px; color: rgb(169, 183, 198); background-color: rgb(43, 43, 43);\">&lt;———— 4</font><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\"><br/>    nextWrappedElement</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">container</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">shouldReuseMarkup</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">nextContext</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">callback<br/>  ).</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_renderedComponent</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">getPublicInstance</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">()</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">return </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">component</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">}</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br/></span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\"\n/></pre><br/></div><div>下面分别展开研究四个函数：</div><div><div><ol start=\"1\"><li>shouldUpdateReactComponent.js ( src/renderers/shared/shared/shouldUpdateReactComponent.js ）</li></ol>这里只做了简单的类型比较，如果父节点的类型不同，则即使子节点相同也不做递归比较，官方文档参见<a href=\"https://facebook.github.io/react/docs/reconciliation.html#elements-of-different-types\">这里</a>。<br/></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#cc7832;font-weight:bold;\">function </span><span style=\"color:#ffc66d;\">shouldUpdateReactComponent</span>(prevElement<span style=\"color:#cc7832;\">, </span>nextElement) {<br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>prevEmpty = prevElement === <span style=\"color:#cc7832;font-weight:bold;\">null </span>|| prevElement === <span style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextEmpty = nextElement === <span style=\"color:#cc7832;font-weight:bold;\">null </span>|| nextElement === <span style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(prevEmpty || nextEmpty) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">return </span>prevEmpty === nextEmpty<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>prevType = <span style=\"color:#cc7832;font-weight:bold;\">typeof </span>prevElement<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextType = <span style=\"color:#cc7832;font-weight:bold;\">typeof </span>nextElement<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(prevType === <span style=\"color:#6a8759;\">'string' </span>|| prevType === <span style=\"color:#6a8759;\">'number'</span>) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">return </span>(nextType === <span style=\"color:#6a8759;\">'string' </span>|| nextType === <span style=\"color:#6a8759;\">'number'</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>    <span style=\"color:#cc7832;font-weight:bold;\">return </span>(<br/>      nextType === <span style=\"color:#6a8759;\">'object' </span>&amp;&amp;<br/>      prevElement.<span style=\"color:#9876aa;\">type </span>=== nextElement.<span style=\"color:#9876aa;\">type </span>&amp;&amp;<br/>      prevElement.<span style=\"color:#9876aa;\">key </span>=== nextElement.<span style=\"color:#9876aa;\">key<br/></span><span style=\"color:#9876aa;\">    </span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/>}<br/>\n</pre></div></div><div><font style=\"font-size: 14px;\">  </font></div><div><font style=\"font-size: 14px;\">  2. <span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(69, 69, 69);\">ReactMount._updateRootComponent（  src/renderers/dom/stack/client/ReactMount.js ）</span><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(228, 175, 9);\"><br/>\n</span></font></div><div>最主要的两句：</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\">ReactUpdateQueue.<span style=\"color:#ffc66d;\">enqueueElementInternal</span>(prevComponent<span style=\"color:#cc7832;\">, </span>nextElement<span style=\"color:#cc7832;\">, </span>nextContext)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(callback) {<br/>  ReactUpdateQueue.<span style=\"color:#ffc66d;\">enqueueCallbackInternal</span>(prevComponent<span style=\"color:#cc7832;\">, </span>callback)<span style=\"color:#cc7832;\">;<br/></span>}\n</pre>这里调用了src/renderers/shared/stack/reconciler/ReactUpdateQueue.js 的两个函数，分别给ReactComponent实例添加属性，要渲染的ReactElemnt、初始化上下文和在渲染完成后执行的回掉函数队列，然后调用ReactUpdates.js (src/renderers/shared/stack/reconciler/ReactUpdates.js)的enqueueUpadate加入到更新队列中（更新策略下文将详细讲解）。</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#ffc66d;\">enqueueElementInternal</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(internalInstance<span style=\"color:#cc7832;\">, </span>nextElement<span style=\"color:#cc7832;\">, </span>nextContext) {<br/>  internalInstance.<span style=\"color:#9876aa;\">_pendingElement </span>= nextElement<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#808080;\">// </span><span style=\"color:#a8c023;font-style:italic;\">TODO: introduce _pendingContext instead of setting it directly.<br/></span><span style=\"color:#a8c023;font-style:italic;\">  </span>internalInstance.<span style=\"color:#9876aa;\">_context </span>= nextContext<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#ffc66d;\">enqueueUpdate</span>(internalInstance)<span style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">,</span>\n</pre></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#ffc66d;\">enqueueCallbackInternal</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(internalInstance<span style=\"color:#cc7832;\">, </span>callback) {<br/>  <span style=\"color:#cc7832;font-weight:bold;\">if </span>(internalInstance.<span style=\"color:#9876aa;\">_pendingCallbacks</span>) {<br/>    internalInstance.<span style=\"color:#9876aa;\">_pendingCallbacks</span>.<span style=\"color:#ffc66d;\">push</span>(callback)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>    internalInstance.<span style=\"color:#9876aa;\">_pendingCallbacks </span>= [callback]<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/>  <span style=\"color:#ffc66d;\">enqueueUpdate</span>(internalInstance)<span style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">,</span>\n</pre><br/></div><div> <font style=\"font-size: 14px;\"> 3.</font><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(69, 69, 69);\"><font style=\"font-size: 14px;\">ReactMount.unmountComponentAtNode</font></span></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Unmounts and destroys the React component rendered in the `container`.<br/></span><span style=\"color:#629755;font-style:italic;\"> * See <a href=\"https://facebook.github.io/react/docs/react-dom.html#unmountcomponentatnode\">https://facebook.github.io/react/docs/react-dom.html#unmountcomponentatnode</a><br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{DOMElement} container DOM element containing a React component.<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@return </span><span style=\"color:#629755;font-style:italic;\">{boolean} True if a component was found in and unmounted from<br/></span><span style=\"color:#629755;font-style:italic;\"> *                   `container`<br/></span><span style=\"color:#629755;font-style:italic;\"> */<br/></span><span style=\"color:#ffc66d;\">unmountComponentAtNode</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(container) {<br/><br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>prevComponent = <span style=\"color:#ffc66d;\">getTopLevelWrapperInContainer</span>(container)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(!prevComponent) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">return false</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/>  <span style=\"color:#cc7832;font-weight:bold;\">delete </span>instancesByReactRootID[prevComponent.<span style=\"color:#9876aa;\">_instance</span>.rootID]<span style=\"color:#cc7832;\">;//devtools会用到的映射，这里可以先忽略<br/></span><span style=\"color:#cc7832;\">  </span>ReactUpdates.<span style=\"color:#ffc66d;\">batchedUpdates</span>(<br/>    <span style=\"color:#ffc66d;\">unmountComponentFromNode</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>prevComponent<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>container<br/>  )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">return true</span><span style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">,</span>\n</pre>注意这里也调用ReactUpdates.js (src/renderers/shared/stack/reconciler/ReactUpdates.js)类的函数batchedUpadates更新组件（更新策略下文将详细讲解），传入三个参数，第一个参数作为更新策略执行过程中调用的函数，后两个作为参数，这里要执行的函数是：</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#cc7832;font-weight:bold;\">function </span><span style=\"color:#ffc66d;\">unmountComponentFromNode</span>(instance<span style=\"color:#cc7832;\">, </span>container) {<br/>  //这个函数主要作用是：1.去掉组件中的ref引用，调用组件的unmountComponent函数，这里主要有三类组件文本组件、html标签对应的组件和自定义组件，每种对应的unmountComponent实现方式不同，主要做些清理React内部用到的缓存，组件上绑定的事件之类的工作，具体参见下文。<br/>  ReactReconciler.<span style=\"color:#ffc66d;\">unmountComponent</span>(<br/>    instance<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">false </span><span style=\"color:#808080;\">/* safely */</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">false </span><span style=\"color:#808080;\">/* skipLifecycle */<br/></span><span style=\"color:#808080;\">  </span>)<span style=\"color:#cc7832;\">;<br/></span><br/>  <span style=\"color:#cc7832;font-weight:bold;\">if </span>(container.nodeType === DOC_NODE_TYPE) {<br/>    container = container.documentElement<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><br/>  <span style=\"color:#808080;\">//可以看到这里循环移除了container节点中的全部dom元素，有很多方法可以实现，这里有个有趣的效率对比试验： <a href=\"http://jsperf.com/emptying-a-node\">http://jsperf.com/emptying-a-node</a><br/></span><span style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">while </span>(container.lastChild) {<br/>    container.removeChild(container.lastChild)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><span style=\"background-color:#344134;\">}</span>\n</pre><br/></div><div><ol start=\"4\"><li><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(69, 69, 69);\"><font style=\"font-size: 14px;\">ReactMount._renderNewRootComponent</font></span></li></ol><div><font face=\"Helvetica\" color=\"#454545\">先ReactElement初始<font style=\"font-size: 14px;\">化ReactComponent实例（1），这里可能是自定义组件</font><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(69, 69, 69);\"><font style=\"font-size: 14px;\">ReactCompositeComponent，文本元素对应的ReactDOMTextComponent和浏览器基本元素对应的ReactDOMComponent。然后调用更新策略将组件渲染到container中，以及做一些比如ref绑定等初始化工作（2）。</font><br/>\n</span></font></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#ffc66d;\">_renderNewRootComponent</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br/>  nextElement<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>container<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>shouldReuseMarkup<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>context<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>callback<br/>) {<br/> //<span style=\"color: rgb(98, 151, 85); font-style: italic; font-size: 9pt;\">Listens to window scroll and resize events. We cache scroll values so that </span><span style=\"color: rgb(98, 151, 85); font-style: italic; font-size: 9pt;\">application code can access them without triggering reflows.这里先不做分析</span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span>ReactBrowserEventEmitter.<span style=\"color:#ffc66d;\">ensureScrollValueMonitoring</span>()<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>componentInstance = instantiateReactComponent(nextElement<span style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">false</span>)<span style=\"color:#cc7832;\">; &lt;——— 1<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(callback) {<br/>    componentInstance.<span style=\"color:#9876aa;\">_pendingCallbacks </span>= [<span style=\"color:#cc7832;font-weight:bold;\">function</span>() { //初始化render完成后调用的回掉函数队列<br/>      callback.<span style=\"color:#ffc66d;\">call</span>(componentInstance.<span style=\"color:#9876aa;\">_renderedComponent</span>.<span style=\"color:#ffc66d;\">getPublicInstance</span>())<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}]<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><br/>  <span style=\"color:#808080;\">// The initial render is synchronous but any updates that happen during<br/></span><span style=\"color:#808080;\">  // rendering, in componentWillMount or componentDidMount, will be batched<br/></span><span style=\"color:#808080;\">  // according to the current batching strategy.<br/></span><span style=\"color:#808080;\"><br/></span><span style=\"color:#808080;\">  </span>ReactUpdates.<span style=\"color:#ffc66d;\">batchedUpdates</span>(  &lt;———— 2<br/>    <span style=\"color:#ffc66d;\">batchedMountComponentIntoNode</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>componentInstance<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>container<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>shouldReuseMarkup<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>context<br/>  )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>wrapperID = componentInstance.<span style=\"color:#9876aa;\">_instance</span>.rootID<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>instancesByReactRootID[wrapperID] = componentInstance<span style=\"color:#cc7832;\">; <font style=\"font-family: Menlo; font-size: 12px; background-color: rgb(43, 43, 43); color: rgb(204, 120, 50);\">//devtools会用到的映射，先忽略</font><br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">return </span>componentInstance<span style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">,</span>\n</pre><br/></div></div><div>下面分别展开讲解。</div><div><div><ol start=\"1\"><li><font style=\"font-size: 14px;\"> </font><font><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(69, 69, 69);\"><font><font style=\"font-size: 14px;\">instantiateReactComponent（src/<font style=\"color: rgb(69, 69, 69); font-family: Helvetica;\">renderers/shared/stack/reconciler/instantiateReactComponent.js</font>） 初始化组件实例，这里用到了工厂模式，根据传入的参数‘生产’对应的React Component实例。<span style=\"color: rgb(51, 51, 51); font-family: -apple-system, 'PingFang SC', 'Hiragino Sans GB', Arial, 'Microsoft YaHei', 'Helvetica Neue', sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); float: none;\">分别实例化</span><code style=\"box-sizing: border-box; outline: none; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 0.2em 0.4em; word-break: break-word; color: rgb(78, 89, 128); background-color: rgb(248, 248, 248); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">ReactDOMTextComponent</code><span style=\"color: rgb(51, 51, 51); font-family: -apple-system, 'PingFang SC', 'Hiragino Sans GB', Arial, 'Microsoft YaHei', 'Helvetica Neue', sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; float: none;\">, </span><code style=\"box-sizing: border-box; outline: none; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 0.2em 0.4em; word-break: break-word; color: rgb(78, 89, 128); background-color: rgb(248, 248, 248); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">ReactDOMComponent</code><span style=\"color: rgb(51, 51, 51); font-family: -apple-system, 'PingFang SC', 'Hiragino Sans GB', Arial, 'Microsoft YaHei', 'Helvetica Neue', sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); float: none;\">, </span><code style=\"box-sizing: border-box; outline: none; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 0.2em 0.4em; word-break: break-word; color: rgb(78, 89, 128); background-color: rgb(248, 248, 248); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">ReactCompositeComponent</code><span style=\"color: rgb(51, 51, 51); font-family: -apple-system, 'PingFang SC', 'Hiragino Sans GB', Arial, 'Microsoft YaHei', 'Helvetica Neue', sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; float: none;\">类。这些类用来管理</span><code style=\"box-sizing: border-box; outline: none; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 0.2em 0.4em; word-break: break-word; color: rgb(78, 89, 128); background-color: rgb(248, 248, 248); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">ReactElement</code><span style=\"color: rgb(51, 51, 51); font-family: -apple-system, 'PingFang SC', 'Hiragino Sans GB', Arial, 'Microsoft YaHei', 'Helvetica Neue', sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; float: none;\">,负责将不同的</span><code style=\"box-sizing: border-box; outline: none; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 0.2em 0.4em; word-break: break-word; color: rgb(78, 89, 128); background-color: rgb(248, 248, 248); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">ReactElement</code><span style=\"color: rgb(51, 51, 51); font-family: -apple-system, 'PingFang SC', 'Hiragino Sans GB', Arial, 'Microsoft YaHei', 'Helvetica Neue', sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; float: none;\">转化成DOM(通过mountComponent方法),负责更新DOM(通过receiveComponent方法，updateComponent方法，下面详细介绍)等。</span></font></font></span></font></li></ol><div style=\"text-align: center; \"><img src=\"/images/2017-01-20/%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B%E5%9B%BE%20(1).png\" height=\"251\" width=\"554\"/><br/></div><div><font face=\"Helvetica\" color=\"#454545\"/></div></div></div><div><font face=\"Helvetica\" color=\"#454545\"><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Given a ReactNode, create an instance that will actually be mounted.<br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactNode} node<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{boolean} shouldHaveDebugID<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@return </span><span style=\"color:#629755;font-style:italic;\">{object} A new instance of the element's constructor.<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@protected<br/></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\" /><span style=\"color:#629755;font-style:italic;\">*/<br/></span><span style=\"color:#cc7832;font-weight:bold;\">function </span><span style=\"color:#ffc66d;\">instantiateReactComponent</span>(node<span style=\"color:#cc7832;\">, </span>shouldHaveDebugID) {<br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>instance<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(node === <span style=\"color:#cc7832;font-weight:bold;\">null </span>|| node === <span style=\"color:#cc7832;font-weight:bold;\">false</span>) {<br/>    instance = ReactEmptyComponent.<span style=\"color:#ffc66d;\">create</span>(<span style=\"color:#ffc66d;\">instantiateReactComponent</span>)<span style=\"color:#cc7832;\">;//这里生成一个空的component对象</span><span style=\"font-size: 9pt;\">ReactDOMEmptyComponent，渲染一行注释，可以忽略</span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span>} <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(<span style=\"color:#cc7832;font-weight:bold;\">typeof </span>node === <span style=\"color:#6a8759;\">'object'</span>) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>element = node<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>type = element.<span style=\"color:#9876aa;\">type</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\"><br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">typeof </span>element.<span style=\"color:#9876aa;\">type </span>=== <span style=\"color:#6a8759;\">'string'</span>) { //如果类型是浏览器标签比如“div”、“span”之类 创建<font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); color: rgb(78, 89, 128);\">ReactDOMComponent 对象</font><br/>      instance = ReactHostComponent.<span style=\"color:#ffc66d;\">createInternalComponent</span>(element)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(<span style=\"color:#ffc66d;\">isInternalComponentType</span>(element.<span style=\"color:#9876aa;\">type</span>)) {//这个判断是否是内部组件的方式没有遇到过（待研究补充）<br/>      <span style=\"color:#808080;\">// This is temporarily available for custom components that are not string<br/></span><span style=\"color:#808080;\">      // representations. I.e. ART. Once those are updated to use the string<br/></span><span style=\"color:#808080;\">      // representation, we can drop this code path.<br/></span><span style=\"color:#808080;\">      </span>instance = <span style=\"color:#cc7832;font-weight:bold;\">new </span>element.<span style=\"color:#9876aa;\">type</span>(element)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">      </span><span style=\"color:#808080;\">// We renamed this. Allow the old name for compat. :(<br/></span><span style=\"color:#808080;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(!instance.<span style=\"color:#9876aa;\">getHostNode</span>) {<br/>        instance.<span style=\"color:#9876aa;\">getHostNode </span>= instance.<span style=\"color:#ffc66d;\">getNativeNode</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>}<br/>    } <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>      instance = <span style=\"color:#cc7832;font-weight:bold;\">new </span><span style=\"color:#ffc66d;\">ReactCompositeComponentWrapper</span>(element)<span style=\"color:#cc7832;\">; //创建自定义组件<font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); color: rgb(78, 89, 128);\">ReactCompositeComponent对象</font><br/></span><span style=\"color:#cc7832;\">    </span>}<br/>  } <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(<span style=\"color:#cc7832;font-weight:bold;\">typeof </span>node === <span style=\"color:#6a8759;\">'string' </span>|| <span style=\"color:#cc7832;font-weight:bold;\">typeof </span>node === <span style=\"color:#6a8759;\">'number'</span>) {<span style=\"color:#cc7832;\">//创建文本节点<font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); color: rgb(78, 89, 128);\">ReactDOMTextComponent 对象</font></span><br/>    instance = ReactHostComponent.<span style=\"color:#ffc66d;\">createInstanceForText</span>(node)<span style=\"color:#cc7832;\">; <br/></span><span style=\"color:#cc7832;\">  </span>} <br/><br/>  <span style=\"color:#808080;\">// These two fields are used by the DOM and ART diffing algorithms<br/></span><span style=\"color:#808080;\">  // respectively. Instead of using expandos on components, we should be<br/></span><span style=\"color:#808080;\">  // storing the state needed by the diffing algorithms elsewhere.<br/></span><span style=\"color:#808080;\">  </span>instance.<span style=\"color:#9876aa;\">_mountIndex </span>= <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>instance.<span style=\"color:#9876aa;\">_mountImage </span>= <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><br/>  <span style=\"color:#cc7832;font-weight:bold;\">return </span>instance<span style=\"color:#cc7832;\">;<br/></span>}<br/></pre></font></div><div><font face=\"Helvetica\" color=\"#454545\"><br/></font></div><div><font face=\"Helvetica\" color=\"#454545\">下面分别展开介绍三种组件的渲染、更新、卸载策略。</font></div><div><br/></div><div><font face=\"Helvetica\" color=\"#454545\">1.1）<font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); font-size: 12px; color: rgb(78, 89, 128);\">ReactDOMTextComponent（src/<font style=\"font-size: 12px; color: rgb(78, 89, 128); font-family: Menlo;\">renderers/dom/stack/client/ReactDOMTextComponent.js）</font></font></font></div><div><font face=\"Helvetica\" color=\"#454545\"><font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); font-size: 12px; color: rgb(78, 89, 128);\"><font style=\"font-size: 12px; color: rgb(78, 89, 128); font-family: Menlo;\"/></font></font></div><div>重点看下三个函数：</div><div><br/></div><div>    1) mountComponent 在render的时候调用，返回渲染内容，针对文本节点返回：</div><div>        &lt;!-- react-text:domId —&gt;这是文本内容&lt;!-- /react-text —&gt;</div><div><br/></div><div><div>  2）receiveComponent 在setState触发更新时调用这个函数，如果文本不同，只替换了注释中的内容。</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#ffc66d;\">receiveComponent</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(nextText<span style=\"color:#cc7832;\">, </span>transaction) {<br/>  <span style=\"color:#cc7832;font-weight:bold;\">if </span>(nextText !== <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span>) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement </span>= nextText<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextStringText = <span style=\"color:#6a8759;\">'' </span>+ nextText<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(nextStringText !== <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_stringText</span>) {<span style=\"color:#808080;\"><br/></span><span style=\"color:#808080;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_stringText </span>= nextStringText<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>commentNodes = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">getHostNode</span>()<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>DOMChildrenOperations.<span style=\"color:#ffc66d;\">replaceDelimitedText</span>(<br/>        commentNodes[<span style=\"color:#6897bb;\">0</span>]<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>commentNodes[<span style=\"color:#6897bb;\">1</span>]<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>nextStringText<br/>      )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/>  }<br/>}<span style=\"color:#cc7832;\">,</span>\n</pre><br/></div><div>3）unmountComponent 去掉对text节点引用，重置一些变量。</div><div><br/></div><div><br/></div><div>1.2）<font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); color: rgb(78, 89, 128);\">ReactDOMComponent</font></div><div><br/></div><div>    1）mountComponent 生成组件对应的dom结构</div><div>代码比较长，主要分为四个步骤：</div><div><ol start=\"1\"><li>做一些生成markup前的“准备工作”  ，针对不同类型做一些变量初始化以及让React事件系统捕捉指定事件。</li></ol>           以input标签为例介绍一下：<br/><div><ul><li> ReactDOMInput.mountWrapper(this, props, hostParent);  <br/></li></ul></div><div>           给input组件实例初始化状态，mountWrapper函数里只给实例设置了一个属性用以保存input的初始value和初始checked值。</div><div>           <span style=\"color:#cc7832;font-weight:bold;\">var </span>defaultValue = props.<span style=\"color:#9876aa;\">defaultValue</span><span style=\"color:#cc7832;\">;<br/></span><span>    <span>       </span></span>inst.<span style=\"color:#9876aa;\">_wrapperState </span>= {</div><div><span style=\"color:#9876aa;\">             initialChecked</span>: props.<span style=\"color:#9876aa;\">checked </span>!= <span style=\"color:#cc7832;font-weight:bold;\">null </span>? props.<span style=\"color:#9876aa;\">checked </span>: props.<span style=\"color:#9876aa;\">defaultChecked</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  <span>           </span></span><span style=\"color:#9876aa;\">initialValue</span>: props.<span style=\"color:#9876aa;\">value </span>!= <span style=\"color:#cc7832;font-weight:bold;\">null </span>? props.<span style=\"color:#9876aa;\">value </span>: defaultValue<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\"><span>    <span>  </span></span>       </span><span style=\"color:#9876aa;\">listeners</span>: <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">,<br/></span>           }<span style=\"color:#cc7832;\">;</span></div><div><ul><li> props = ReactDOMInput.getHostProps(this, props); 将更多input元素要用到的属性初始化并赋给事例，如value、type、max、min等等</li><li> transaction.getReactMountReady().enqueue(trackInputValue, this);<br/></li><li> transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this); 添加预定义事件，这里react添加了invalid事件</li><li> ensureListeningTo(this, 'onChange', transaction); 对于受控组件确保监听on change事件</li></ul><div><br/></div><div/></div><ol start=\"2\"><li>设置正确的namespace，根据父容器的namespace类型和当前实例的tag类型设置namespace 变量是html svg还是mathml<br/></li><li><b>创建将渲染在页面的markup（重要！！！讲解参见注释）</b></li></ol><div><ol start=\"4\"><li>做一些“收尾”工作，比如input、texture的内容初始化以及各个元素的autofocus设置<br/></li></ol></div></div><div>       </div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><br/><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Generates root tag markup then recurses. This method has side effects and<br/></span><span style=\"color:#629755;font-style:italic;\"> * is not idempotent.<br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@internal<br/></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\" /><span style=\"color:#629755;font-style:italic;\">* </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction|ReactServerRenderingTransaction} transaction<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?ReactDOMComponent} the parent component instance<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?object} info about the host container<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{object} context<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@return </span><span style=\"color:#629755;font-style:italic;\">{string} The computed markup.<br/></span><span style=\"color:#629755;font-style:italic;\"> */<br/></span>mountComponent: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br/>    transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>hostParent<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>hostContainerInfo<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>context<br/>) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_rootNodeID </span>= globalIdCounter++<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_domID </span>= hostContainerInfo.<span style=\"color:#9876aa;\">_idCounter</span>++<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_hostParent </span>= hostParent<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_hostContainerInfo </span>= hostContainerInfo<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>props = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span>.<span style=\"color:#9876aa;\">props</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">switch </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span>) {  &lt;———— <span style=\"color:#6897bb;\">1 </span>做一些生成markup前的“准备工作”<br/>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'audio'</span>:<br/>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'form'</span>:<br/>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'iframe'</span>:<br/>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'img'</span>:<br/>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'link'</span>:<br/>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'object'</span>:<br/>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'source'</span>:<br/>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'video'</span>:<br/>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'details'</span>:<br/>            <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_wrapperState </span>= {<br/>                <span style=\"color:#9876aa;\">listeners</span>: <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>}<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span><span style=\"color:#808080;\">//针对一些特性元素预先绑定一些事件<br/></span><span style=\"color:#808080;\">            </span>transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<span style=\"color:#ffc66d;\">trapBubbledEventsLocal</span><span style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span><span style=\"color:#cc7832;font-weight:bold;\">break</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'input'</span>:<span style=\"color:#808080;\">//给input组件实例初始化状态<br/></span><span style=\"color:#808080;\">            </span>ReactDOMInput.<span style=\"color:#ffc66d;\">mountWrapper</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>props<span style=\"color:#cc7832;\">, </span>hostParent)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span>props = ReactDOMInput.<span style=\"color:#ffc66d;\">getHostProps</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>props)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span>transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<span style=\"color:#ffc66d;\">trackInputValue</span><span style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span>transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<span style=\"color:#ffc66d;\">trapBubbledEventsLocal</span><span style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span><span style=\"color:#808080;\">// For controlled components we always need to ensure we're listening<br/></span><span style=\"color:#808080;\">            // to onChange. Even if there is no listener.<br/></span><span style=\"color:#808080;\">            </span><span style=\"color:#ffc66d;\">ensureListeningTo</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span><span style=\"color:#6a8759;\">'onChange'</span><span style=\"color:#cc7832;\">, </span>transaction)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span><span style=\"color:#cc7832;font-weight:bold;\">break</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">       //略去其他……</span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span>}<br/><br/>    <span style=\"color:#ffc66d;\">assertValidProps</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>props)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// We create tags in the namespace of their parent container, except HTML<br/></span><span style=\"color:#808080;\">    // tags get no namespace.<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>namespaceURI<span style=\"color:#cc7832;\">; </span>&lt;————— <span style=\"color:#6897bb;\">2 </span>设置正确的namespace<br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>parentTag<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(hostParent != <span style=\"color:#cc7832;font-weight:bold;\">null</span>) {<br/>        namespaceURI = hostParent.<span style=\"color:#9876aa;\">_namespaceURI</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>parentTag = hostParent.<span style=\"color:#9876aa;\">_tag</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(hostContainerInfo.<span style=\"color:#9876aa;\">_tag</span>) {<br/>        namespaceURI = hostContainerInfo.<span style=\"color:#9876aa;\">_namespaceURI</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>parentTag = hostContainerInfo.<span style=\"color:#9876aa;\">_tag</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/>    <span style=\"color:#cc7832;font-weight:bold;\">if </span>(namespaceURI == <span style=\"color:#cc7832;font-weight:bold;\">null </span>||<br/>        namespaceURI === DOMNamespaces.<span style=\"color:#9876aa;\">svg </span>&amp;&amp; parentTag === <span style=\"color:#6a8759;\">'foreignobject'</span>) {<br/>        namespaceURI = DOMNamespaces.<span style=\"color:#9876aa;\">html</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/>    <span style=\"color:#cc7832;font-weight:bold;\">if </span>(namespaceURI === DOMNamespaces.<span style=\"color:#9876aa;\">html</span>) {<br/>        <span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag </span>=== <span style=\"color:#6a8759;\">'svg'</span>) {<br/>            namespaceURI = DOMNamespaces.<span style=\"color:#9876aa;\">svg</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>} <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag </span>=== <span style=\"color:#6a8759;\">'math'</span>) {<br/>            namespaceURI = DOMNamespaces.<span style=\"color:#9876aa;\">mathml</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/>    }<br/>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_namespaceURI </span>= namespaceURI<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>mountImage<span style=\"color:#cc7832;\">; </span>&lt;————— <span style=\"color:#6897bb;\">3 </span>创建将渲染在页面的markup<br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>type = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span>.<span style=\"color:#9876aa;\">type</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">//默认用createElement创建<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(transaction.<span style=\"color:#9876aa;\">useCreateElement</span>) {<br/>        <span style=\"color:#cc7832;font-weight:bold;\">var </span>ownerDocument = hostContainerInfo.<span style=\"color:#9876aa;\">_ownerDocument</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>el<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(namespaceURI === DOMNamespaces.<span style=\"color:#9876aa;\">html</span>) {<br/>            <span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag </span>=== <span style=\"color:#6a8759;\">'script'</span>) {<br/>                <span style=\"color:#808080;\">//如果是script标签，注意这里包在div里再获取<br/></span><span style=\"color:#808080;\">                // Create the script via .innerHTML so its \"parser-inserted\" flag is<br/></span><span style=\"color:#808080;\">                // set to true and it does not execute<br/></span><span style=\"color:#808080;\">                </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>div = ownerDocument.<span style=\"color:#ffc66d;\">createElement</span>(<span style=\"color:#6a8759;\">'div'</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">                </span>div.<span style=\"color:#9876aa;\">innerHTML </span>= <span style=\"color:#6a8759;\">`&lt;</span>${type}<span style=\"color:#6a8759;\">&gt;&lt;/</span>${type}<span style=\"color:#6a8759;\">&gt;`</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">                </span>el = div.<span style=\"color:#ffc66d;\">removeChild</span>(div.<span style=\"color:#9876aa;\">firstChild</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span>} <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(props.<span style=\"color:#9876aa;\">is</span>) {<br/>                <span style=\"color:#808080;\">//和用户自定义元素相关，参见：https://developer.<a href=\"http://mozilla.org/en-US/docs/Web/API/Document/createElement\">mozilla.org/en-US/docs/Web/API/Document/createElement</a> <br/></span><span style=\"color:#808080;\">                //https://www.<a href=\"http://w3.org/TR/custom-elements/#customized-built-in-element\">w3.org/TR/custom-elements/#customized-built-in-element</a> 同时也是为了解决firefox下createElement的bug<br/></span><span style=\"color:#808080;\">                </span>el = ownerDocument.<span style=\"color:#ffc66d;\">createElement</span>(type<span style=\"color:#cc7832;\">, </span>props.<span style=\"color:#9876aa;\">is</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>                <span style=\"color:#808080;\">// Separate else branch instead of using `props.is || undefined` above becuase of a Firefox bug.<br/></span><span style=\"color:#808080;\">                // See discussion in <a href=\"https://github.com/facebook/react/pull/6896\">https://github.com/facebook/react/pull/6896</a><br/></span><span style=\"color:#808080;\">                // and discussion in <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1276240\">https://bugzilla.mozilla.org/show_bug.cgi?id=1276240</a><br/></span><span style=\"color:#808080;\">                </span>el = ownerDocument.<span style=\"color:#ffc66d;\">createElement</span>(type)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span>}<br/>        } <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>            el = ownerDocument.<span style=\"color:#ffc66d;\">createElementNS</span>(<br/>                namespaceURI<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">                </span>type<br/>            )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/>        <span style=\"color:#808080;\">//如果tag名包含’－’或指定“is”属性认为是用户自定义标签<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>isCustomComponentTag = <span style=\"color:#ffc66d;\">isCustomComponent</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span><span style=\"color:#cc7832;\">, </span>props)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//分别在react实例添加属性指向刚创建的节点，同时给节点添加属性指向当前实例<br/></span><span style=\"color:#808080;\">        </span>ReactDOMComponentTree.<span style=\"color:#ffc66d;\">precacheNode</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>el)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_flags </span>|= Flags.<span style=\"color:#9876aa;\">hasCachedChildNodes</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//如果是最外层标签，不是递归创建的子节点，则设置为React根元素，比如ReactDom.render(‘&lt;div&gt;&lt;input/&gt;&lt;/div&gt;’,node) 在创建到div层的时候设置为根元素，然后递归渲染子元素（input）的时候hostParent不为空了。<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(!<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_hostParent</span>) {<br/>            DOMPropertyOperations.<span style=\"color:#ffc66d;\">setAttributeForRoot</span>(el)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/>        <span style=\"color:#808080;\">//根据新旧props的差异更新对应dom元素上的属性，首次渲染没有旧props<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_updateDOMProperties</span>(<span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">, </span>props<span style=\"color:#cc7832;\">, </span>transaction<span style=\"color:#cc7832;\">, </span>isCustomComponentTag)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//初始化DOMLazyTree结构，根据不同浏览器选择不同的渲染策略，参见（src/renderers/dom/stack/client/DOMLazyTree.js）<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>lazyTree = DOMLazyTree(el)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//如果有子节点，则遍历子节点递归调用ReactReconciler.mountComponent（这个函数主要还是调用子节点实例对应的mountComponent）生成子节点的markup（可以简单理解为子节点dom树），保存到lazyTree中，<br/></span><span style=\"color:#808080;\">        //根据不同浏览器渲染dom的效率选择将子元素缓存在DOMLazyTree的队列中延迟渲染还是直接拼成一个完整的dom树返回<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_createInitialChildren</span>(transaction<span style=\"color:#cc7832;\">, </span>props<span style=\"color:#cc7832;\">, </span>context<span style=\"color:#cc7832;\">, </span>lazyTree)<span style=\"color:#cc7832;\">;    &lt;============<br/></span><span style=\"color:#cc7832;\">        </span>mountImage = lazyTree<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>        <span style=\"color:#808080;\">//判断是否是合法的tag名（用正则）<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#ffc66d;\">validateDangerousTag</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//用字符串拼接的方式创建起始标签，并添加事件监听、属性和样式内容<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>tagOpen = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_createOpenTagMarkupAndPutListeners</span>(transaction<span style=\"color:#cc7832;\">, </span>props)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//如果有子节点，则遍历子节点递归生成每一个子节点的ReactComponent实例，然后调用每个实例的ReactReconciler.mountComponent生成子节点的dom树<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>tagContent = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_createContentMarkup</span>(transaction<span style=\"color:#cc7832;\">, </span>props<span style=\"color:#cc7832;\">, </span>context)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//闭合标签<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(!tagContent &amp;&amp; omittedCloseTags[<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span>]) {<br/>            mountImage = tagOpen + <span style=\"color:#6a8759;\">'/&gt;'</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>            mountImage = tagOpen + <span style=\"color:#6a8759;\">'&gt;' </span>+ tagContent + <span style=\"color:#6a8759;\">'&lt;/' </span>+ type + <span style=\"color:#6a8759;\">'&gt;'</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/>    }<br/><br/>    <span style=\"color:#cc7832;font-weight:bold;\">switch </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span>) { &lt;—————<span style=\"color:#6897bb;\">4 </span>给事务添加组件渲染完毕后做的事情<br/>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'input'</span>:<br/>            transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<br/>                <span style=\"color:#ffc66d;\">inputPostMount</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">                </span><span style=\"color:#cc7832;font-weight:bold;\">this<br/></span><span style=\"color:#cc7832;font-weight:bold;\">            </span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(props.<span style=\"color:#9876aa;\">autoFocus</span>) {<br/>                transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<br/>                    AutoFocusUtils.<span style=\"color:#ffc66d;\">focusDOMComponent</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">                    </span><span style=\"color:#cc7832;font-weight:bold;\">this<br/></span><span style=\"color:#cc7832;font-weight:bold;\">                </span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span>}<br/>            <span style=\"color:#cc7832;font-weight:bold;\">break</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">       //略去其他……  </span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span>}<br/><br/>    <span style=\"color:#cc7832;font-weight:bold;\">return </span>mountImage<span style=\"color:#cc7832;\">;<br/></span>}\n</pre>这里额外讲一下 <b>this._createInitialChildren(transaction, props, context, lazyTree)</b>生成子元素dom树的函数，如果props.children是数组，调用以下函数。</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#ffc66d;\">mountChildren</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(nestedChildren<span style=\"color:#cc7832;\">, </span>transaction<span style=\"color:#cc7832;\">, </span>context) {<br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>children = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_reconcilerInstantiateChildren</span>(<span style=\"color:#808080;\">//深度遍历子节点获得所有子节点，同时调用</span><span style=\"font-size: 9pt; background-color: rgb(52, 65, 52);\">instantiateReactComponent生成子节点对应的</span><span style=\"font-size: 9pt; color: rgb(128, 128, 128);\">ReactComponent组</span><span style=\"color:#808080;\"><br/></span><span style=\"color:#808080;\">    </span>nestedChildren<span style=\"color:#cc7832;\">, </span>transaction<span style=\"color:#cc7832;\">, </span>context<br/>  )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_renderedChildren </span>= children<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>mountImages = []<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>index = <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(<span style=\"color:#cc7832;font-weight:bold;\">var </span>name <span style=\"color:#cc7832;font-weight:bold;\">in </span>children) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">if </span>(children.<span style=\"color:#9876aa;\">hasOwnProperty</span>(name)) {<br/>      <span style=\"color:#cc7832;font-weight:bold;\">var </span>child = children[name]<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>selfDebugID = <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">     </span><br/>      <span style=\"color:#cc7832;font-weight:bold;\">var </span>mountImage = ReactReconciler.<span style=\"color:#ffc66d;\">mountComponent</span>(//调用每个子节点的ReactComponent实例的mountComponent递归渲染所有子节点<br/>        child<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_hostContainerInfo</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>context<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>selfDebugID<br/>      )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>child.<span style=\"color:#9876aa;\">_mountIndex </span>= index++<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>mountImages.<span style=\"color:#ffc66d;\">push</span>(mountImage)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/>  }<br/>  <span style=\"color:#cc7832;font-weight:bold;\">return </span>mountImages<span style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">,<br/></span>\n</pre> </div><div><div/><div>再顺便提一下，源码中用到了DOMLazyTree，并根据不同浏览器对dom片段生成的速度做了优化。</div><div><pre style=\"background-color: rgb(43, 43, 43); font-family: Menlo; font-size: 9pt;\"><pre style=\"background-color: rgb(43, 43, 43); font-family: Menlo; font-size: 9pt;\"><span style=\"color: rgb(98, 151, 85); font-style: italic;\">/**<br/></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> * In IE (8-11) and Edge, appending nodes with no children is dramatically<br/></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> * faster than appending a full subtree, so we essentially queue up the<br/></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> * .appendChild calls here and apply them so each node is added to its parent<br/></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> * before any children are added.<br/></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> *<br/></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> * In other browsers, doing so is slower or neutral compared to the other order<br/></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> * (in Firefox, twice as slow) so we only do this inversion in IE.<br/></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> *<br/></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> * See <a href=\"https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode\">https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode</a>.<br/></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> */<br/></span><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">var </span><font color=\"#a9b7c6\">enableLazy = (<br/>  </font><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">typeof </span><span style=\"color: rgb(152, 118, 170);\">document </span><font color=\"#a9b7c6\">!== </font><span style=\"color: rgb(106, 135, 89);\">'undefined' </span><font color=\"#a9b7c6\">&amp;&amp;<br/>  </font><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">typeof </span><span style=\"color: rgb(152, 118, 170);\">document</span><font color=\"#a9b7c6\">.</font><span style=\"color: rgb(152, 118, 170);\">documentMode </span><font color=\"#a9b7c6\">=== </font><span style=\"color: rgb(106, 135, 89);\">'number'<br/></span><span style=\"color: rgb(106, 135, 89);\">  </span><font color=\"#a9b7c6\">||<br/>  </font><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">typeof </span><span style=\"color: rgb(152, 118, 170);\">navigator </span><font color=\"#a9b7c6\">!== </font><span style=\"color: rgb(106, 135, 89);\">'undefined' </span><font color=\"#a9b7c6\">&amp;&amp;<br/>  </font><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">typeof </span><span style=\"color: rgb(152, 118, 170);\">navigator</span><font color=\"#a9b7c6\">.</font><span style=\"color: rgb(152, 118, 170);\">userAgent </span><font color=\"#a9b7c6\">=== </font><span style=\"color: rgb(106, 135, 89);\">'string' </span><font color=\"#a9b7c6\">&amp;&amp;<br/>  </font><span style=\"color: rgb(106, 135, 89);\">/\\bEdge\\/\\d/</span><font color=\"#a9b7c6\">.</font><span style=\"color: rgb(255, 198, 109);\">test</span><font color=\"#a9b7c6\">(</font><span style=\"color: rgb(152, 118, 170);\">navigator</span><font color=\"#a9b7c6\">.</font><span style=\"color: rgb(152, 118, 170);\">userAgent</span><font color=\"#a9b7c6\">)<br/>)</font>;</pre><pre style=\"background-color: rgb(43, 43, 43); font-family: Menlo; font-size: 9pt;\"><span style=\"font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\"> function </span><span style=\"font-size: 9pt; color: rgb(255, 198, 109);\">queueChild</span><font style=\"font-size: 9pt;\" color=\"#a9b7c6\">(parentTree</font><span style=\"font-size: 9pt; color: rgb(204, 120, 50);\">, </span><font style=\"font-size: 9pt;\" color=\"#a9b7c6\">childTree) {</font><br/></pre><pre style=\"background-color: rgb(43, 43, 43); font-family: Menlo; font-size: 9pt;\"><pre style=\"background-color: rgb(43, 43, 43); font-family: Menlo; font-size: 9pt;\"><font color=\"#a9b7c6\">  </font><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">if </span><font color=\"#a9b7c6\">(enableLazy) {<br/>    parentTree.</font><span style=\"color: rgb(152, 118, 170);\">children</span><font color=\"#a9b7c6\">.</font><span style=\"color: rgb(255, 198, 109);\">push</span><font color=\"#a9b7c6\">(childTree)</font><span style=\"color: rgb(204, 120, 50);\">;<br/></span><span style=\"color: rgb(204, 120, 50);\">  </span><font color=\"#a9b7c6\">} </font><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">else </span><font color=\"#a9b7c6\">{<br/>    parentTree.node.</font><span style=\"color: rgb(152, 118, 170);\">appendChild</span><font color=\"#a9b7c6\">(childTree.node)</font><span style=\"color: rgb(204, 120, 50);\">;<br/></span><span style=\"color: rgb(204, 120, 50);\">  </span><font color=\"#a9b7c6\">}<br/></font><span style=\"color: rgb(169, 183, 198); background-color: rgb(52, 65, 52);\">}</span><font color=\"#a9b7c6\"\n/></pre><br/></pre></pre></div><div><font face=\"Helvetica\" color=\"#454545\"><font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); font-size: 12px; color: rgb(78, 89, 128);\"/></font></div></div><div><div>然后会在这里判断是把子节点缓存起来还是直接挂到父节点上。缓存起来的节点会在ReactMount的_mountImageIntoNode递归地将子节点逐个挂到父节点上，主要用在<code style=\"box-sizing: border-box; outline: none; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 0.2em 0.4em; word-break: break-word; color: rgb(78, 89, 128); background-color: rgb(248, 248, 248); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">ReactDOMComponent</code><span style=\"color: rgb(51, 51, 51); font-family: -apple-system, 'PingFang SC', 'Hiragino Sans GB', Arial, 'Microsoft YaHei', 'Helvetica Neue', sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); float: none;\">, </span><code style=\"box-sizing: border-box; outline: none; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 0.2em 0.4em; word-break: break-word; color: rgb(78, 89, 128); background-color: rgb(248, 248, 248); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">ReactCompositeComponent。</code></div><div/><div><br/></div>  </div><div>2）receiveComponent 在setState触发更新时调用这个函</div><div><div/></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"/></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Updates a DOM component after it has already been allocated and<br/></span><span style=\"color:#629755;font-style:italic;\"> * attached to the DOM. Reconciles the root DOM node, then recurses.<br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction} transaction<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactElement} prevElement<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactElement} nextElement<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@internal<br/></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\" /><span style=\"color:#629755;font-style:italic;\">* </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@overridable<br/></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\" /><span style=\"color:#629755;font-style:italic;\">*/<br/></span><span style=\"color:#ffc66d;\">updateComponent</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(transaction<span style=\"color:#cc7832;\">, </span>prevElement<span style=\"color:#cc7832;\">, </span>nextElement<span style=\"color:#cc7832;\">, </span>context) {<br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>lastProps = prevElement.props<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextProps = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span>.props<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  //获得last 和next props<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">switch </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span>) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'input'</span>:<br/>      lastProps = ReactDOMInput.<span style=\"color:#ffc66d;\">getHostProps</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>lastProps)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>nextProps = ReactDOMInput.<span style=\"color:#ffc66d;\">getHostProps</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>nextProps)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">break</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    //略去其他……</span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">default</span>:<br/>      <span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">typeof </span>lastProps.<span style=\"color:#9876aa;\">onClick </span>!== <span style=\"color:#6a8759;\">'function' </span>&amp;&amp;<br/>          <span style=\"color:#cc7832;font-weight:bold;\">typeof </span>nextProps.<span style=\"color:#9876aa;\">onClick </span>=== <span style=\"color:#6a8759;\">'function'</span>) {<br/>        transaction.getReactMountReady().<span style=\"color:#ffc66d;\">enqueue</span>(<br/>          <span style=\"color:#ffc66d;\">trapClickOnNonInteractiveElement</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">          </span><span style=\"color:#cc7832;font-weight:bold;\">this<br/></span><span style=\"color:#cc7832;font-weight:bold;\">        </span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>}<br/>      <span style=\"color:#cc7832;font-weight:bold;\">break</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><br/>  <span style=\"color:#ffc66d;\">assertValidProps</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>nextProps)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>isCustomComponentTag = <span style=\"color:#ffc66d;\">isCustomComponent</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span><span style=\"color:#cc7832;\">, </span>nextProps)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#808080;\">//根据新旧props的差异更新对应dom元素上的属性<br/></span><span style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_updateDOMProperties</span>(lastProps<span style=\"color:#cc7832;\">, </span>nextProps<span style=\"color:#cc7832;\">, </span>transaction<span style=\"color:#cc7832;\">, </span>isCustomComponentTag)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#808080;\">//更新子节点内容，diff算法（diff算法下文将详细介绍）<br/></span><span style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_updateDOMChildren</span>(<br/>    lastProps<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>nextProps<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>context<br/>  )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#808080;\">//更新节点后根据新的props中的值设置dom属性比如value、checked等<br/></span><span style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">switch </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span>) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'input'</span>:<br/>      <span style=\"color:#808080;\">// Update the wrapper around inputs *after* updating props. This has to<br/></span><span style=\"color:#808080;\">      // happen after `_updateDOMProperties`. Otherwise HTML5 input validations<br/></span><span style=\"color:#808080;\">      // raise warnings and prevent the new value from being assigned.<br/></span><span style=\"color:#808080;\">      </span>ReactDOMInput.<span style=\"color:#ffc66d;\">updateWrapper</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">break</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    <b>//略去其他……</b></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span>}<br/>}<span style=\"color:#cc7832;\">,</span>\n</pre><br/></div><div>3）unmountComponent 去掉React Component实例上的事件监听器，循环调用子组件的unmountComponent方法，不直接删除dom节点，由父节点统一清除。</div><div><br/></div><div>1.3）<font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); color: rgb(78, 89, 128);\">ReactCompositeComponent</font></div><div><br/></div><div> 1）mountComponent</div><div style=\"text-align: center; \"><img src=\"/images/2017-01-20/%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B%E5%9B%BE%20(2).png\" height=\"548\" width=\"213\"/><br/></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><br/><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Initializes the component, renders markup, and registers event listeners.<br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction|ReactServerRenderingTransaction} transaction<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?object} hostParent<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?object} hostContainerInfo<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?object} context<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@return </span><span style=\"color:#629755;font-style:italic;\">{?string} Rendered markup to be inserted into the DOM.<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@final<br/></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\" /><span style=\"color:#629755;font-style:italic;\">* </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@internal<br/></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\" /><span style=\"color:#629755;font-style:italic;\">*/<br/></span>mountComponent: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br/>    transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>hostParent<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>hostContainerInfo<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>context<br/>) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_context </span>= context<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_mountOrder </span>= nextMountID++<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_hostParent </span>= hostParent<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_hostContainerInfo </span>= hostContainerInfo<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>publicProps = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span>.<span style=\"color:#9876aa;\">props</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>publicContext = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_processContext</span>(context)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>Component = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span>.<span style=\"color:#9876aa;\">type</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>updateQueue = transaction.<span style=\"color:#ffc66d;\">getUpdateQueue</span>()<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// Initialize the public class<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>doConstruct = <span style=\"color:#ffc66d;\">shouldConstruct</span>(Component)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>inst = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_constructComponent</span>(<br/>        doConstruct<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>publicProps<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>publicContext<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>updateQueue<br/>    )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>renderedElement<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// Support functional components<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(!doConstruct &amp;&amp; (inst == <span style=\"color:#cc7832;font-weight:bold;\">null </span>|| inst.<span style=\"color:#ffc66d;\">render </span>== <span style=\"color:#cc7832;font-weight:bold;\">null</span>)) {<br/>        renderedElement = inst<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>inst = <span style=\"color:#cc7832;font-weight:bold;\">new </span><span style=\"color:#ffc66d;\">StatelessComponent</span>(Component)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_compositeType </span>= ReactCompositeComponentTypes.<span style=\"color:#9876aa;\">StatelessFunctional</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>        <span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#ffc66d;\">isPureComponent</span>(Component)) {<br/>            <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_compositeType </span>= ReactCompositeComponentTypes.<span style=\"color:#9876aa;\">PureClass</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>            <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_compositeType </span>= ReactCompositeComponentTypes.<span style=\"color:#9876aa;\">ImpureClass</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/>    }<br/><br/>    <span style=\"color:#808080;\">// These should be set up in the constructor, but as a convenience for<br/></span><span style=\"color:#808080;\">    // simpler class abstractions, we set them up after the fact.<br/></span><span style=\"color:#808080;\">    </span>inst.<span style=\"color:#9876aa;\">props </span>= publicProps<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>inst.<span style=\"color:#9876aa;\">context </span>= publicContext<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>inst.<span style=\"color:#9876aa;\">refs </span>= emptyObject<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>inst.<span style=\"color:#9876aa;\">updater </span>= updateQueue<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_instance </span>= inst<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// Store a reference from the instance back to the internal representation<br/></span><span style=\"color:#808080;\">    </span>ReactInstanceMap.<span style=\"color:#ffc66d;\">set</span>(inst<span style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>initialState = inst.<span style=\"color:#9876aa;\">state</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(initialState === <span style=\"color:#9876aa;\">undefined</span>) {<br/>        inst.<span style=\"color:#9876aa;\">state </span>= initialState = <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/><br/>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingStateQueue </span>= <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingReplaceState </span>= <span style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingForceUpdate </span>= <span style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">//调用生命周期函数<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(inst.<span style=\"color:#9876aa;\">componentWillMount</span>) {<br/>        inst.<span style=\"color:#9876aa;\">componentWillMount</span>()<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">// When mounting, calls to `setState` by `componentWillMount` will set<br/></span><span style=\"color:#808080;\">        // `this._pendingStateQueue` without triggering a re-render.注意这里新的state是在</span><span style=\"color: rgb(152, 118, 170); font-size: 9pt;\">componentWillMount执行完后更新的，因此在<font style=\"font-family: Menlo; font-size: 12px; background-color: rgb(43, 43, 43); color: rgb(152, 118, 170);\">componentWillMount</font>里的this.state不是最新的</span><span style=\"color:#808080;\"><br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingStateQueue</span>) {<br/>            inst.<span style=\"color:#9876aa;\">state </span>= <span style=\"color:#cc7832;font-weight:bold;\">this</span>._processPendingState(inst.<span style=\"color:#9876aa;\">props</span><span style=\"color:#cc7832;\">, </span>inst.<span style=\"color:#9876aa;\">context</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/>    }<br/><br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>markup<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">//带错误监听，内部调用performInitialMount，render函数返回的内容用来初始化一个ReactComponent实例，然后调用ReactReconciler.mountComponent获得dom树<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(inst.<span style=\"color:#ffc66d;\">unstable_handleError</span>) {<br/>        markup = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">performInitialMountWithErrorHandling</span>(<br/>            renderedElement<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>hostParent<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>hostContainerInfo<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>context<br/>        )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>        markup = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">performInitialMount</span>(<br/>            renderedElement<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>hostParent<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>hostContainerInfo<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>context<br/>        )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/>    <span style=\"color:#808080;\">//<font style=\"font-family: Menlo; font-size: 12px; background-color: rgb(43, 43, 43); color: rgb(255, 198, 109);\">componentDidMount执行</font><br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(inst.<span style=\"color:#ffc66d;\">componentDidMount</span>) {<br/>        transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(inst.<span style=\"color:#ffc66d;\">componentDidMount</span><span style=\"color:#cc7832;\">, </span>inst)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/><br/>    <span style=\"color:#808080;\">// setState callbacks during willMount should end up here<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">const </span>callbacks = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingCallbacks</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(callbacks) {<br/>        <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingCallbacks </span>= <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(let i = <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">; </span>i &lt; callbacks.<span style=\"color:#9876aa;\">length</span><span style=\"color:#cc7832;\">; </span>i++) {<br/>            transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<br/>                callbacks[i]<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">                </span>inst<br/>            )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/>    }<br/><br/>    <span style=\"color:#cc7832;font-weight:bold;\">return </span>markup<span style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">,</span>\n</pre><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#cc7832;\"><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#ffc66d;\">performInitialMount</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br/>  renderedElement<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>hostParent<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>hostContainerInfo<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>context<br/>) {<br/>  <span style=\"color:#808080;\">// If not a stateless component, we now render<br/></span><span style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(renderedElement === <span style=\"color:#9876aa;\">undefined</span>) {<br/>    renderedElement = <span style=\"color:#cc7832;font-weight:bold;\">this</span>._renderValidatedComponent()<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>nodeType = ReactNodeTypes.<span style=\"color:#ffc66d;\">getType</span>(renderedElement)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_renderedNodeType </span>= nodeType<span style=\"color:#cc7832;\">;</span></pre><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#cc7832;\">  //得到当前ReactElement对应的ReactComponent实例<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>child = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_instantiateReactComponent</span>(<br/>    renderedElement<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>nodeType !== ReactNodeTypes.<span style=\"color:#9876aa;\">EMPTY </span><span style=\"color:#808080;\">/* shouldHaveDebugID */<br/></span><span style=\"color:#808080;\">  </span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_renderedComponent </span>= child<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>debugID = <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">;</span><br/>  //递归生成子节点dom树<br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>markup = ReactReconciler.<span style=\"color:#ffc66d;\">mountComponent</span>(<br/>    child<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>hostParent<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>hostContainerInfo<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_processChildContext</span>(context)<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>debugID<br/>  )<span style=\"color:#cc7832;\">;</span><br/><br/>  <span style=\"color:#cc7832;font-weight:bold;\">return </span>markup<span style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">,<br/></span>\n</pre><br/></span></pre>2）receiveComponent </div><div>这里负责生命周期的componentWillReceiveProps、shouldComponentUpdate、componentWillUpdate、render、componentDidUpdate。注意在前三个生命周期函数中调用this.state无法获取更新后的this.state因为为实例更新state的inst.state=nextState在componentWillUpdate之后调用，即render和componentDidUpdate中可以，禁止在shouldComponentUpdate和componentWillUpdate中调用setState，会造成循环调用（原因参见src/renderers/shared/stack/reconciler/ReactCompositeComponent.js的performUpdateIfNecessary方法）</div><div style=\"text-align: center; \"><img src=\"/images/2017-01-20/%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B%E5%9B%BE%20(3).png\" height=\"685\" width=\"564\"/><br/></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><br/><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Perform an update to a mounted component. The componentWillReceiveProps and<br/></span><span style=\"color:#629755;font-style:italic;\"> * shouldComponentUpdate methods are called, then (assuming the update isn't<br/></span><span style=\"color:#629755;font-style:italic;\"> * skipped) the remaining update lifecycle methods are called and the DOM<br/></span><span style=\"color:#629755;font-style:italic;\"> * representation is updated.<br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * By default, this implements React's rendering and reconciliation algorithm.<br/></span><span style=\"color:#629755;font-style:italic;\"> * Sophisticated clients may wish to override this.<br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction} transaction<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactElement} prevParentElement<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactElement} nextParentElement<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@internal<br/></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\" /><span style=\"color:#629755;font-style:italic;\">* </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@overridable<br/></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\" /><span style=\"color:#629755;font-style:italic;\">*/<br/></span>updateComponent: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br/>    transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>prevParentElement<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>nextParentElement<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>prevUnmaskedContext<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>nextUnmaskedContext<br/>) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>inst = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_instance</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>willReceive = <span style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextContext<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// Determine if the context has changed or not<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_context </span>=== nextUnmaskedContext) {<br/>        nextContext = inst.<span style=\"color:#9876aa;\">context</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>        nextContext = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_processContext</span>(nextUnmaskedContext)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>willReceive = <span style=\"color:#cc7832;font-weight:bold;\">true</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/><br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>prevProps = prevParentElement.<span style=\"color:#9876aa;\">props</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextProps = nextParentElement.<span style=\"color:#9876aa;\">props</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// Not a simple state update but a props update<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(prevParentElement !== nextParentElement) {<br/>        willReceive = <span style=\"color:#cc7832;font-weight:bold;\">true</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/><br/>    <span style=\"color:#808080;\">// An update here will schedule an update but immediately set<br/></span><span style=\"color:#808080;\">    // _pendingStateQueue which will ensure that any state updates gets<br/></span><span style=\"color:#808080;\">    // immediately reconciled instead of waiting for the next batch.<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(willReceive &amp;&amp; inst.<span style=\"color:#ffc66d;\">componentWillReceiveProps</span>) {<br/>        inst.<span style=\"color:#ffc66d;\">componentWillReceiveProps</span>(nextProps<span style=\"color:#cc7832;\">, </span>nextContext)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/><br/>    <span style=\"color:#808080;\">// If updating happens to enqueue any new updates, we shouldn't execute new<br/></span><span style=\"color:#808080;\">    // callbacks until the next render happens, so stash the callbacks first.<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>callbacks = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingCallbacks</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingCallbacks </span>= <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextState = <span style=\"color:#cc7832;font-weight:bold;\">this</span>._processPendingState(nextProps<span style=\"color:#cc7832;\">, </span>nextContext)<span style=\"color:#cc7832;\">; </span><span style=\"color:#808080;\">//获得nextState<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>shouldUpdate = <span style=\"color:#cc7832;font-weight:bold;\">true</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(!<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingForceUpdate</span>) { <span style=\"color:#808080;\">//没设置forseupdate<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>prevState = inst.<span style=\"color:#9876aa;\">state</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>shouldUpdate = willReceive || nextState !== prevState<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//如果提供shouldComponentUpdate，调用函数，否则新旧state和props浅比较确定是否更新<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(inst.<span style=\"color:#ffc66d;\">shouldComponentUpdate</span>) {<br/>            shouldUpdate = inst.<span style=\"color:#ffc66d;\">shouldComponentUpdate</span>(nextProps<span style=\"color:#cc7832;\">, </span>nextState<span style=\"color:#cc7832;\">, </span>nextContext)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>            <span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_compositeType </span>=== ReactCompositeComponentTypes.<span style=\"color:#9876aa;\">PureClass</span>) {<br/>                shouldUpdate =<br/>                    !shallowEqual(prevProps<span style=\"color:#cc7832;\">, </span>nextProps) ||<br/>                    !shallowEqual(inst.<span style=\"color:#9876aa;\">state</span><span style=\"color:#cc7832;\">, </span>nextState)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span>}<br/>        }<br/>    }<br/><br/>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_updateBatchNumber </span>= <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(shouldUpdate) {<br/>        <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingForceUpdate </span>= <span style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">// Will set `this.props`, `this.state` and `this.context`.<br/></span><span style=\"color:#808080;\">        //设置新props、state，调用生命周期函数（如果提供），更新dom<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>._performComponentUpdate(<br/>            nextParentElement<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>nextProps<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>nextState<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>nextContext<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>nextUnmaskedContext<br/>        )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>        <span style=\"color:#808080;\">// If it's determined that a component should not update, we still want<br/></span><span style=\"color:#808080;\">        // to set props and state but we shortcut the rest of the update.<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement </span>= nextParentElement<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_context </span>= nextUnmaskedContext<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>inst.<span style=\"color:#9876aa;\">props </span>= nextProps<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>inst.<span style=\"color:#9876aa;\">state </span>= nextState<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>inst.<span style=\"color:#9876aa;\">context </span>= nextContext<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/>    <span style=\"color:#808080;\">//render之后调用的事件队列<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(callbacks) {<br/>        <span style=\"color:#cc7832;font-weight:bold;\">for </span>(<span style=\"color:#cc7832;font-weight:bold;\">var </span>j = <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">; </span>j &lt; callbacks.<span style=\"color:#9876aa;\">length</span><span style=\"color:#cc7832;\">; </span>j++) {<br/>            transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<br/>                callbacks[j]<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">                </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">getPublicInstance</span>()<br/>            )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/>    }<br/>}<span style=\"color:#cc7832;\">,</span>\n</pre><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Merges new props and state, notifies delegate methods of update and<br/></span><span style=\"color:#629755;font-style:italic;\"> * performs update.<br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactElement} nextElement Next element<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{object} nextProps Next public object to set as properties.<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?object} nextState Next object to set as state.<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?object} nextContext Next public object to set as context.<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction} transaction<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?object} unmaskedContext<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@private<br/></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\" /><span style=\"color:#629755;font-style:italic;\">*/<br/></span>_performComponentUpdate: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br/>  nextElement<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>nextProps<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>nextState<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>nextContext<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>unmaskedContext<br/>) {<br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>inst = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_instance</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>hasComponentDidUpdate = Boolean(inst.<span style=\"color:#ffc66d;\">componentDidUpdate</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>prevProps<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>prevState<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>prevContext<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(hasComponentDidUpdate) {<br/>    prevProps = inst.<span style=\"color:#9876aa;\">props</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>prevState = inst.<span style=\"color:#9876aa;\">state</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>prevContext = inst.<span style=\"color:#9876aa;\">context</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><br/>  <span style=\"color:#cc7832;font-weight:bold;\">if </span>(inst.<span style=\"color:#ffc66d;\">componentWillUpdate</span>) {<br/>     inst.<span style=\"color:#ffc66d;\">componentWillUpdate</span>(nextProps<span style=\"color:#cc7832;\">, </span>nextState<span style=\"color:#cc7832;\">, </span>nextContext)<span style=\"color:#cc7832;\">;</span><br/>  }<br/><br/>  <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement </span>= nextElement<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_context </span>= unmaskedContext<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>inst.<span style=\"color:#9876aa;\">props </span>= nextProps<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>inst.<span style=\"color:#9876aa;\">state </span>= nextState<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>inst.<span style=\"color:#9876aa;\">context </span>= nextContext<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(inst.<span style=\"color:#ffc66d;\">unstable_handleError</span>) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>._updateRenderedComponentWithErrorHandling(transaction<span style=\"color:#cc7832;\">, </span>unmaskedContext)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>._updateRenderedComponent(transaction<span style=\"color:#cc7832;\">, </span>unmaskedContext)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><br/>  <span style=\"color:#cc7832;font-weight:bold;\">if </span>(hasComponentDidUpdate) {<br/>      transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<br/>        inst.<span style=\"color:#ffc66d;\">componentDidUpdate</span>.<span style=\"color:#ffc66d;\">bind</span>(inst<span style=\"color:#cc7832;\">, </span>prevProps<span style=\"color:#cc7832;\">, </span>prevState<span style=\"color:#cc7832;\">, </span>prevContext)<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>inst<br/>      )<span style=\"color:#cc7832;\">;</span><br/>  }<br/>}<span style=\"color:#cc7832;\">,</span>\n</pre><br/></div><div>3）unmountComponent 调用生命周期函数componentWillUnmount（如果提供），调用当前组件对应的React Component实例对应的unmountComponent函数，重置一堆变量。</div><div><br/></div><div><br/></div><div/><ol start=\"2\"><li>渲染组件的工作主要在这个函数，通过<font style=\"font-family: Helvetica; color: rgb(69, 69, 69);\">instantiateReactComponent</font>得到了各种类型组件对应的ReactComponent实例（可以理解为一个ReactComponent实例的树，包含所有子节点的ReactComponent实例），然后调用实例的mountComponent方法（上面讲解过）得到要渲染的‘markup’可能是一个dom树，或一个DOMLazyTree结构保存将子节点的dom结构树保存到数组里，最后插入到container中。</li></ol></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Mounts this component and inserts it into the DOM.<br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactComponent} componentInstance The instance to mount.<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{DOMElement} container DOM element to mount into.<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction} transaction<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{boolean} shouldReuseMarkup If true, do not insert markup<br/></span><span style=\"color:#629755;font-style:italic;\"> */<br/></span><span style=\"color:#cc7832;font-weight:bold;\">function </span><span style=\"color:#ffc66d;\">mountComponentIntoNode</span>(<br/>  wrapperInstance<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>container<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>shouldReuseMarkup<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>context<br/>) {<br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>markerName<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(ReactFeatureFlags.<span style=\"color:#9876aa;\">logTopLevelRenders</span>) { //记录拼接组件对应的dom模板所用的时长<br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>wrappedElement = wrapperInstance.<span style=\"color:#9876aa;\">_currentElement</span>.<span style=\"color:#9876aa;\">props</span>.child<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>type = wrappedElement.<span style=\"color:#9876aa;\">type</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>markerName = <span style=\"color:#6a8759;\">'React mount: ' </span>+ (<br/>      <span style=\"color:#cc7832;font-weight:bold;\">typeof </span>type === <span style=\"color:#6a8759;\">'string' </span>? type :<br/>      type.<span style=\"color:#9876aa;\">displayName </span>|| type.<span style=\"color:#9876aa;\">name<br/></span><span style=\"color:#9876aa;\">    </span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#9876aa;\">console</span>.<span style=\"color:#ffc66d;\">time</span>(markerName)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>markup = ReactReconciler.<span style=\"color:#ffc66d;\">mountComponent</span>( //调用组件实例的mountComponent方法获得要渲染的结构（可能是一个html片段或一个src/<font style=\"font-size: 12px; color: rgb(169, 183, 198); font-family: Menlo;\">renderers/dom/stack/client/DOMLazyTree.js结构）</font>，添加事件以及ref属性<br/>    wrapperInstance<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>ReactDOMContainerInfo(wrapperInstance<span style=\"color:#cc7832;\">, </span>container)<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>context<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#6897bb;\">0 </span><span style=\"color:#808080;\">/* parentDebugID */<br/></span><span style=\"color:#808080;\">  </span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(markerName) {<br/>    <span style=\"color:#9876aa;\">console</span>.<span style=\"color:#ffc66d;\">timeEnd</span>(markerName)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><br/>  wrapperInstance.<span style=\"color:#9876aa;\">_renderedComponent</span>.<span style=\"color:#9876aa;\">_topLevelWrapper </span>= wrapperInstance<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>ReactMount.<span style=\"color:#ffc66d;\">_mountImageIntoNode</span>( //将上面得到的结构（递归）渲染到container dom节点中，显示在页面上<br/>    markup<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>container<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>wrapperInstance<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>shouldReuseMarkup<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>transaction<br/>  )<span style=\"color:#cc7832;\">;<br/></span>}\n</pre><br/></div><div>以上是对虚拟dom和渲染策略的讲解。</div><div><br/></div><div>推荐阅读：</div><div><span style=\"font: 12.0px Helvetica; color: #e4af09\"><a href=\"https://zhuanlan.zhihu.com/purerender\">https://zhuanlan.zhihu.com/purerender</a></span><span style=\"font: 12.0px Helvetica; color: #454545\" /><span style=\"font: 12.0px 'PingFang SC'; color: #454545\">关于</span><span style=\"font: 12.0px Helvetica; color: #454545\">react</span><span style=\"font: 12.0px 'PingFang SC'; color: #454545\">源码解析系列文章</span><span style=\"font: 12.0px Helvetica; color: #454545\"><br/>\n<span style=\"color: #e4af09\"><a href=\"http://purplebamboo.github.io/2015/09/15/reactjs_source_analyze_part_one/\">http://purplebamboo.github.io/2015/09/15/reactjs_source_analyze_part_one/</a></span></span></div><div><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-size: 12px; font-family: Helvetica;\"><font color=\"#e4af09\">《深入React技术栈》这本书的第三章（有需要可以找我借）<br/></font>\n</span><br/></div><div><br/></div><div><br/></div>"}],"PostAsset":[],"PostCategory":[{"post_id":"ciz3tqj7t000949hyicbwpauy","category_id":"ciz3thwgj000549hygfrb2z2t","_id":"ciz3tqj7x000b49hyy94pz18o"},{"post_id":"ciz3uj47f000082hyu8g3a6tb","category_id":"ciz3thwgj000549hygfrb2z2t","_id":"ciz3ujqee000282hyafw0yped"}],"PostTag":[{"post_id":"ciz3tqj7t000949hyicbwpauy","tag_id":"ciz3thwgk000649hynuskfvwa","_id":"ciz3tqj7v000a49hyxreg23ej"},{"post_id":"ciz3uj47f000082hyu8g3a6tb","tag_id":"ciz3thwgk000649hynuskfvwa","_id":"ciz3ujqed000182hy8qw6gib2"},{"post_id":"ciz3uj47f000082hyu8g3a6tb","tag_id":"ciz3uli3x000382hy2vh1np6o","_id":"ciz3uli3x000482hywc1ihapp"},{"post_id":"ciz3tqj7t000949hyicbwpauy","tag_id":"ciz3uli3x000382hy2vh1np6o","_id":"ciz3vyqit0000wvhy95piizsn"}],"Tag":[{"name":"jekyll welcome","_id":"ciz3tf2rq000249hy576vxpi0"},{"name":"react","_id":"ciz3thwgk000649hynuskfvwa"},{"name":"源码解读","_id":"ciz3uli3x000382hy2vh1np6o"}]}}