{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/2015-01-04/49A49378-4E4E-47C0-ACE3-E9819A21CD27.png","path":"images/2015-01-04/49A49378-4E4E-47C0-ACE3-E9819A21CD27.png","modified":1,"renderable":0},{"_id":"source/images/2017-01-20/基本流程图 (1).png","path":"images/2017-01-20/基本流程图 (1).png","modified":1,"renderable":0},{"_id":"source/images/2017-01-20/基本流程图 (2).png","path":"images/2017-01-20/基本流程图 (2).png","modified":1,"renderable":0},{"_id":"source/images/2017-01-20/基本流程图.png","path":"images/2017-01-20/基本流程图.png","modified":1,"renderable":0},{"_id":"source/images/2017-01-20/基本流程图 (3).png","path":"images/2017-01-20/基本流程图 (3).png","modified":1,"renderable":0},{"_id":"source/images/2017-02-14/3C5D0315-7718-4DC6-89B9-0C7A281294F2.png","path":"images/2017-02-14/3C5D0315-7718-4DC6-89B9-0C7A281294F2.png","modified":1,"renderable":0},{"_id":"source/images/2017-02-14/xxx.png","path":"images/2017-02-14/xxx.png","modified":1,"renderable":0},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/anatole/source/css/blog_basic.css","path":"css/blog_basic.css","modified":1,"renderable":1},{"_id":"themes/anatole/source/images/favicon.png","path":"images/favicon.png","modified":1,"renderable":1},{"_id":"themes/anatole/source/css/style.css","path":"css/style.css","modified":1,"renderable":1},{"_id":"themes/anatole/source/images/logo.png","path":"images/logo.png","modified":1,"renderable":1},{"_id":"themes/anatole/source/css/style.scss","path":"css/style.scss","modified":1,"renderable":1},{"_id":"themes/anatole/source/images/logo@2x.png","path":"images/logo@2x.png","modified":1,"renderable":1},{"_id":"themes/anatole/source/css/font-awesome.min.css","path":"css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/anatole/source/js/jquery-migrate-1.2.1.min.js","path":"js/jquery-migrate-1.2.1.min.js","modified":1,"renderable":1},{"_id":"themes/anatole/source/js/jquery.appear.js","path":"js/jquery.appear.js","modified":1,"renderable":1},{"_id":"source/images/2015-05-04/010F6EB7-2FC9-4567-B594-AAF65CB82188.png","path":"images/2015-05-04/010F6EB7-2FC9-4567-B594-AAF65CB82188.png","modified":1,"renderable":0},{"_id":"source/images/2015-05-04/1BFC3912-BD3A-451B-A51D-F1A8C2D29A0C.png","path":"images/2015-05-04/1BFC3912-BD3A-451B-A51D-F1A8C2D29A0C.png","modified":1,"renderable":0},{"_id":"source/images/2017-02-14/FE612576-70BB-4B9C-9343-07DFAC12DCB4.png","path":"images/2017-02-14/FE612576-70BB-4B9C-9343-07DFAC12DCB4.png","modified":1,"renderable":0},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"source/images/2015-05-04/26BB7BBC-9ED0-4BFD-A6E3-3A71E0F0E81F.png","path":"images/2015-05-04/26BB7BBC-9ED0-4BFD-A6E3-3A71E0F0E81F.png","modified":1,"renderable":0},{"_id":"source/images/2015-05-04/99331BCC-E2F2-44F8-B0C2-95C09B14015C.png","path":"images/2015-05-04/99331BCC-E2F2-44F8-B0C2-95C09B14015C.png","modified":1,"renderable":0},{"_id":"source/images/2015-05-04/550ADFD1-FDE1-4FBB-A24D-08027881614C.png","path":"images/2015-05-04/550ADFD1-FDE1-4FBB-A24D-08027881614C.png","modified":1,"renderable":0},{"_id":"source/images/2015-05-04/B7434509-17F9-4386-8AD1-AC6A7F78A933.png","path":"images/2015-05-04/B7434509-17F9-4386-8AD1-AC6A7F78A933.png","modified":1,"renderable":0},{"_id":"source/images/2015-05-04/407BEEEA-DA8C-4380-AD24-A332A3EAEB04.png","path":"images/2015-05-04/407BEEEA-DA8C-4380-AD24-A332A3EAEB04.png","modified":1,"renderable":0},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/anatole/source/js/jquery.js","path":"js/jquery.js","modified":1,"renderable":1},{"_id":"source/images/2015-05-04/9A49FB27-D8FE-463A-B772-72C6ADFC1461.png","path":"images/2015-05-04/9A49FB27-D8FE-463A-B772-72C6ADFC1461.png","modified":1,"renderable":0}],"Cache":[{"_id":"themes/anatole/LICENSE","hash":"359cb81298c1fdbccf531548fc097466b0151be4","modified":1486971114000},{"_id":"themes/anatole/README.md","hash":"4542a2cc948bc8143abd49025ce3c27c3fa2ee27","modified":1486971114000},{"_id":"themes/anatole/_config.yml","hash":"bb469236b93b591342877a899cae70578c300969","modified":1486982587000},{"_id":"themes/anatole/package.json","hash":"cf731a3ebf3913747fccb6c4c6615eba7d7e88a4","modified":1486971114000},{"_id":"source/_posts/effectivejs读书笔记.md","hash":"960138ba2c9df5aeda1ecc3dd78b89bf3b5ab44c","modified":1487000230000},{"_id":"source/_posts/ios推送功能添加以及模拟后端自测.md","hash":"8164c887eb3b12fc12cea7876d3e0edfdbd3ab8d","modified":1486987670000},{"_id":"source/_posts/javascript模式读书笔记.md","hash":"caaee40b264e1e1ff83a15903c1f1ff7512587c5","modified":1487000622000},{"_id":"source/_posts/javatopo.md","hash":"fa94f46b80285fb101380645334ebdccfee0ade7","modified":1486992629000},{"_id":"source/_posts/reactnative_ios_动画效果实现.md","hash":"89e832a89f68e99175fec10afd53d945662c2a1b","modified":1487991519000},{"_id":"source/_posts/新手引导效果实现.html","hash":"ea18858d3486509836d950d2f241e31a52eeaeb7","modified":1487001662000},{"_id":"source/_posts/taskmanager.md","hash":"dd98cd51795ba4ee5d019e3eecbc9f2f9bcfa540","modified":1486991650000},{"_id":"themes/anatole/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1486971114000},{"_id":"themes/anatole/.git/config","hash":"831e9fdc6bb9fa56130a1292e248c5ad420f7229","modified":1486971114000},{"_id":"themes/anatole/.git/index","hash":"e56e902ec0b5c542c00447735ba612e4a9846ff0","modified":1486982714000},{"_id":"themes/anatole/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1486971108000},{"_id":"source/_posts/网站压测.html","hash":"c1ef350c22d7d3ef9981f3a44ab744757b88de22","modified":1487039893000},{"_id":"themes/anatole/.git/packed-refs","hash":"7df0801e5dce7db41df56e8878714755bd00c43d","modified":1486971114000},{"_id":"themes/anatole/layout/index.jade","hash":"53da3cfd498951148acb33de1574df80ae282dc5","modified":1486971114000},{"_id":"themes/anatole/layout/archive.jade","hash":"8f58996b55dc3db3c96d69e88b0a6db4167d025b","modified":1486971114000},{"_id":"themes/anatole/layout/category.jade","hash":"2f2f113e99eb1ebdac475edba23a330dbd2e77bd","modified":1486971114000},{"_id":"themes/anatole/languages/zh-cn.yml","hash":"dab1823e036f4adb3b7ae9efe95a37a15e47bec2","modified":1486971114000},{"_id":"themes/anatole/layout/page.jade","hash":"300e3fa98fd7cb2627589d3555ab4863cfeedd0c","modified":1486971114000},{"_id":"themes/anatole/layout/post.jade","hash":"0b830bf13f3c82a936fa44c687b3911606cd8bec","modified":1486971114000},{"_id":"themes/anatole/layout/mixins.jade","hash":"ae76c27b41e7d46c74c0442ff2a475330ab0448d","modified":1486971114000},{"_id":"themes/anatole/layout/tag.jade","hash":"b2dde91815560830b6a0f1dfbdd83aca88aba969","modified":1486971114000},{"_id":"source/_posts/react源码学习——setState原理.html","hash":"3f4ffa0a3ac9e473aa2da691acb1a830d1c1c11f","modified":1486977459000},{"_id":"source/images/2015-01-04/49A49378-4E4E-47C0-ACE3-E9819A21CD27.png","hash":"f83ec7a146f93c943aaaca7b46459ab0bbe0542c","modified":1487001211000},{"_id":"source/images/2017-01-20/基本流程图 (1).png","hash":"3bda0c8ce9f1007636be61151c074a8716eda06a","modified":1486916062000},{"_id":"source/images/2017-01-20/基本流程图 (2).png","hash":"eff0ddedfd53076055a2b38a2d4508ccd465e004","modified":1486916062000},{"_id":"source/images/2017-01-20/基本流程图.png","hash":"b89892f08ec0d0100e6e8035e03371bb25487d73","modified":1486916062000},{"_id":"source/images/2017-01-20/基本流程图 (3).png","hash":"9e3e74fef181e1669a5d4c2e3236bfc9ad5a6527","modified":1486916062000},{"_id":"source/images/2017-02-14/3C5D0315-7718-4DC6-89B9-0C7A281294F2.png","hash":"2547dd9686672159033f86adc1013a6b1fb58f08","modified":1486729958000},{"_id":"source/images/2017-02-14/xxx.png","hash":"b33011e50180c6e02d45dd6a28a74476d9598c5e","modified":1486729958000},{"_id":"source/_posts/react源码学习——Virtual Dom和渲染、更新原理.html","hash":"d79f2f38e18eb1b713514478a3a2d6488ca2e38e","modified":1486987008000},{"_id":"themes/anatole/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1486971108000},{"_id":"themes/anatole/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1486971108000},{"_id":"themes/anatole/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1486971108000},{"_id":"themes/anatole/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1486971108000},{"_id":"themes/anatole/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1486971108000},{"_id":"themes/anatole/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1486971108000},{"_id":"themes/anatole/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1486971108000},{"_id":"themes/anatole/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1486971108000},{"_id":"themes/anatole/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1486971108000},{"_id":"themes/anatole/.git/logs/HEAD","hash":"ce9191114e033b050e22c721053a16d289873a41","modified":1486971114000},{"_id":"themes/anatole/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1486971108000},{"_id":"themes/anatole/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1486971108000},{"_id":"themes/anatole/layout/partial/head.jade","hash":"3d6126d0b53a889a46ad61eb8cc0ab1b35446c49","modified":1486971114000},{"_id":"themes/anatole/layout/partial/sidebar.jade","hash":"0e46a60cd56254da51c9073360fee74f81cedd74","modified":1486978449000},{"_id":"themes/anatole/layout/partial/footer.jade","hash":"103db6611e4574d2284772c90423d2dc0a7cceb6","modified":1486978201000},{"_id":"themes/anatole/layout/partial/comments.jade","hash":"ee43e2fa9bed77868f2340435e455a3e647428df","modified":1486971114000},{"_id":"themes/anatole/layout/partial/layout.jade","hash":"174050fa9ee919f5bcb2c5426224ec1968db672c","modified":1486971114000},{"_id":"themes/anatole/layout/partial/nav.jade","hash":"6ef30551de7b22d99b6a0980caf7899d7c303093","modified":1486971114000},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.eot","hash":"0183979056f0b87616cd99d5c54a48f3b771eee6","modified":1486971114000},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.woff","hash":"7d65e0227d0d7cdc1718119cd2a7dce0638f151c","modified":1486971114000},{"_id":"themes/anatole/source/css/blog_basic.css","hash":"7d32bbc353e1a5130374aa69fcaca9c7d298a7ee","modified":1486974599000},{"_id":"themes/anatole/source/images/favicon.png","hash":"d659236704308954da9d64b101c4f54cc3f3255c","modified":1486971114000},{"_id":"themes/anatole/source/css/style.css","hash":"8d45c3fd27c96d047058e0146d7692c93992f4ca","modified":1486971249000},{"_id":"themes/anatole/source/images/logo.png","hash":"41bdf2ebd8cc193ad82a211758af827d891b1a90","modified":1486971114000},{"_id":"themes/anatole/source/css/style.scss","hash":"8bf6290fba289890f0f8dd9df3d3e50c1710a656","modified":1486971249000},{"_id":"themes/anatole/source/images/logo@2x.png","hash":"49c3fa97724abf53861bf11356ea9ba5bcb11576","modified":1486971114000},{"_id":"themes/anatole/source/css/font-awesome.min.css","hash":"95d0b0c4d11105c81be1857b744076a1d2bed918","modified":1486971114000},{"_id":"themes/anatole/source/js/jquery-migrate-1.2.1.min.js","hash":"743052320809514fb788fe1d3df37fc87ce90452","modified":1486971114000},{"_id":"themes/anatole/source/js/jquery.appear.js","hash":"1f8067d7bd4c0bde30785e8016100f239e14394f","modified":1486971114000},{"_id":"source/images/2015-05-04/010F6EB7-2FC9-4567-B594-AAF65CB82188.png","hash":"22bf92a908f1d2fbcfc365987cd27fcab5ad3449","modified":1487039594000},{"_id":"source/images/2015-05-04/1BFC3912-BD3A-451B-A51D-F1A8C2D29A0C.png","hash":"79d2ec3e19f291c81ca261d65262b51688bd21ed","modified":1487039594000},{"_id":"source/images/2017-02-14/FE612576-70BB-4B9C-9343-07DFAC12DCB4.png","hash":"b1d2e39776f1a1beed5ba70beb1deec64faf524b","modified":1486729958000},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.ttf","hash":"6225ccc4ec94d060f19efab97ca42d842845b949","modified":1486971114000},{"_id":"source/images/2015-05-04/26BB7BBC-9ED0-4BFD-A6E3-3A71E0F0E81F.png","hash":"3f9777752ab189538a950e0b07e1c13b2ea4c3f3","modified":1487039594000},{"_id":"source/images/2015-05-04/99331BCC-E2F2-44F8-B0C2-95C09B14015C.png","hash":"abce5250969bd896227e8c006f9f23b32c1acb9e","modified":1487039594000},{"_id":"themes/anatole/.git/objects/4f/0b2523b82d3da188c873ec1d9908f61db9e65a","hash":"9a963f76e50553f91ddb4f72dc6afced2ffc473c","modified":1486982714000},{"_id":"themes/anatole/.git/objects/d0/eba3194eee71e1421cb448d51fdc4127672433","hash":"a921b9ce34fb773814e4e76bc6353c7fa6db1b67","modified":1486982714000},{"_id":"themes/anatole/.git/objects/pack/pack-bc1983eee4892afd38510f0db245ef51aa639b0b.idx","hash":"1977ef60190bd1204f5fe67998da0f9702e7a142","modified":1486971114000},{"_id":"themes/anatole/.git/objects/d7/425faf7000932800b73cd99259def9db49a1b2","hash":"a05637ab19fd926294f8b844a1cd8d1719474df6","modified":1486982714000},{"_id":"themes/anatole/.git/objects/d7/b068e86070d2d0777cfb0794029487eca2c480","hash":"d9c3b98129f4054b30ff8e8bc5d497e5229e9123","modified":1486982714000},{"_id":"themes/anatole/.git/refs/heads/master","hash":"b78c9c74c8596337fb20e865008b7b3208713faa","modified":1486971114000},{"_id":"themes/anatole/.git/objects/be/2797be2a6ec491436fc1bf8515c9ed42377067","hash":"51135079ab3b4c4ca51b5b21e2589ced2bca1ed0","modified":1486982714000},{"_id":"themes/anatole/.git/objects/e3/fa491c1ac154e7ac5e4abbf2c05cb6df6ef684","hash":"6aeda56829eb786651c431c259045ce122db7472","modified":1486982714000},{"_id":"source/images/2015-05-04/550ADFD1-FDE1-4FBB-A24D-08027881614C.png","hash":"5f94318f47587439417e3e34401043a104f3b383","modified":1487039594000},{"_id":"source/images/2015-05-04/B7434509-17F9-4386-8AD1-AC6A7F78A933.png","hash":"bd6d0ab2692693bd33f011c39f613db9c49838eb","modified":1487039594000},{"_id":"source/images/2015-05-04/407BEEEA-DA8C-4380-AD24-A332A3EAEB04.png","hash":"901adff9c87629d1fcf1a1fdaf0310cc5ca10025","modified":1487039594000},{"_id":"themes/anatole/.git/logs/refs/heads/master","hash":"ce9191114e033b050e22c721053a16d289873a41","modified":1486971114000},{"_id":"themes/anatole/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1486971114000},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.svg","hash":"cd980eab6db5fa57db670cb2e4278e67e1a4d6c9","modified":1486971114000},{"_id":"themes/anatole/source/js/jquery.js","hash":"bfc05b695dfa4f23e11d04b84993585da7a764bf","modified":1486971114000},{"_id":"themes/anatole/.git/logs/refs/remotes/origin/HEAD","hash":"ce9191114e033b050e22c721053a16d289873a41","modified":1486971114000},{"_id":"source/images/2015-05-04/9A49FB27-D8FE-463A-B772-72C6ADFC1461.png","hash":"1bb1e14f7d6ca9c9dc6b6a5ec66a0d107012e197","modified":1487039594000},{"_id":"themes/anatole/.git/objects/pack/pack-bc1983eee4892afd38510f0db245ef51aa639b0b.pack","hash":"2ddfe490a96dae23aad3fd419fd46408d87bf3c0","modified":1486971114000}],"Category":[{"name":"frontend","_id":"cizknqup7000295c4wmypf84m"},{"name":"ios","_id":"cizknqupj000795c4l6nre0ec"},{"name":"java","_id":"cizknqupt000j95c47ku1hw3r"},{"name":"backend","_id":"cizknqupv000n95c49j3sis26"}],"Data":[],"Page":[],"Post":[{"layout":"post","title":"Effective Javascript读书笔记","date":"2015-01-12T00:43:59.000Z","author":"Lily","_content":"\n最近读了《Effective Javascript》这本书，有个习惯是会把觉得有用的内容记下来，之后只看这部分内容 ：）\n\n1. 了解你使用的javascript版本\n   为了保证程序在所有浏览器都运行正常，但是程序员没有办法指定js执行版本，es5引入‘严格模式’限制js中易出错或者问题较多的特性。可以在函数体的开始处和整个脚本的开始处加入“use strict”;如果一个页面引入多个js文件，有的是严格模式，有的不是，那么引入顺序会导致是否按照严格模式运行，严格模式先加载，那么都会按照严格模式运行，反之都按照非严格模式。避免这种问题的方法是从脚本级别或者函数级别封装到立即调用的函数表达式里以做到互不干扰。如：\n\n    ```js\n    (function(){\n        \"use strict\";\n         function a(){\n         }\n    })();\n    ```\n\n2. 理解javascript浮点数\n   js黄宗所有数字都是双精度浮点数，位操作时比较特殊，js会将操作数转换成32位有符号整数后进行。浮点数运算注意精度问题，可能会有误差。尽量转换成整数再运算。\n\n3. 当心隐式类型转换\n    \"- * /\"会把左右两端的操作数转换成数字，+ 比较特殊，如果至少有一个字符串，结果就是字符串（内容和字符串顺序相关），if || && 判断传入 false 0 -0 undefined NaN null \"\" 会返回false，其他都为true，因此判断是否undefined用 if(typeof xx ==='undefined') 或 if(xx === undefined)\n如果只重写了toString，对象转换时会无视valueOf的存在来进行转换。但是，如果只重写了valueOf方法，在要转换为字符串的时候会优先考虑valueOf方法。其他情况一般是有类型转换成字符串的时候会调用toString，进行运算符操作调用valueOf。\n\n4. 原始类型优于封装对象\n   javascript有5个原始类型，布尔，数字，字符串，null，undefined\n   相等比较时，原始类型和封装对象表现不一样：\n   var a = new String('aaa');\n    var b = new String('aaa');\n    a === b  =>false\n\n    var a = 'aaa';\n    var b = 'aaa';\n    a === b =>true\n    获取和设置原始类型属性会隐式地创建封装对象。不过设置一个自定义属性的值是不会被保留下来的。\n    \"hello\".someProperty=17;\n    \"hello\".someProperty; =>undefined\n\n5. 避免对混合类型使用 == 运算符\n    建议使用严格的等号运算符比较 === 以保证在比较过程中没有任何转换，否则执行一些转换规则\n    null == undefined =>true  null === undefined =>false\n\n    == 运算符的强制转换规则\n\n    当比较不同类型的值时，用自定义的转换程序使程序的行为更清晰。\n\n6. 了解分号插入的局限\n   * 分号在}标记之前、一个或多个换行之后和程序输入的结果被插入。\n     分号在随后的输入不能被解析时插入。如：\n     a = b\n     (f());    => a = b(f());\n     如果某条语句的下一行的初始标记不能被解析为一个语句的延续，那么不能省略该条语句的分号。 如：\n     a = b\n     f(); 会报错\n\n   * 在以 (  [  + - / 字符开头的语句不能省略分号，因为不会被自动插入分号。如：\n      a = b\n      [\"r\",\"g\",\"b\"].forEach(function(key){ });\n      会被解析成 a= b[\"r\",\"g\",\"b\"].forEach(function(key){ });\n      / 可能在一些正则表达式中会出现在语句的开头\n      a = b\n      /Error/i.test(str) 被解析成  a = b/Error/i.test(str)  /变成除法运算符。\n\n      a = b                 var x\n      var x    不等于    a = b\n      (f())                   (f())\n      前者是三条语句，后者后两条合并。想省略分号时，可以在该语句后面加一个变量声明。为了保证安全在(f())前加一个；以保证三条语句顺序乱了也可以被解析。\n\n   * 注意在脚本连接时可以在脚本之间显示地插入分号。\n     ;(function(){})()\n\n   * 在 return throw break continue ++ --的参数之前绝不要加入换行（break continue是带显式标签的）。\n     a\n     ++   => a; ++b;\n     b\n\n   * for条件内 和 空循环体语句不要缺少分号！ wihle(true);  否则报错。\n\n\n闭包存储的是外部变量的引用，而不是副本，并能读写这些变量。\n\n变量声明的提升，函数声明也会提升。js没有块级作用域只有函数级作用域，变量声明会提升到包含这个变量的函数顶部，但初始化仍停留在原地，例外！！！try catch语句将捕获的异常绑定到一个变量，该变量的作用域只是catch语句块。\n\n```js\nfunction test(){\n   var x =\"test\", result = [];\n   result.push(x);\n   try{\n      throw \"exception\"\n   }catch(x){\n      x  =\"catch\";\n   }\n   result.push(x);\n   return result;   =>[\"test\",\"test\"]\n}\n```\n\narguments 严格模式下是实参的副本，非严格模式下是引用。[].slice.call(arguments) 将arguments复制到一个真正的数组中再修改比较安全。 arguments没有数组的某些函数，可以通过[].xxx.call(arguments)方式来对其进行操作。\n\n\n```js\nvar buffer={\n     entries:[],\n     add:function(s){\n          this.entries.push(s);\n     },\n     concat：function(){\n          return this.entries.join(\"\");\n     }\n}\nvar source = [\"333\",\"egerge\"];\nsource.forEach(buffer.add); // 这里报entries undefined\n```\n\n因为this此时绑定的是全局对象。forEach参数第二个参数作为接受者 source.forEach(buffer.add,buffer)\n或者用匿名函数\nsource.forEach(function(s){\n    buffer.add(s);\n});\n或者用bind\nsource.forEach(buffer.add.bind(buffer));\n\n将字符串传递给evel函数时不要在字符串中包含局部变量的引用。\n\n函数toString 方法不会暴露存储在闭包中的局部变量的值。\n\n```js\n(function(x){\n    return function(y){\n          return x+y;\n    }\n})(40).toString();//functino(y){return x+y}\n```\n\n非严格模式下调用函数，函数中的this是全局对象，严格模式下是undefined。\n\n\n```js\nfunction C(){};\nC.prototype = null;\nvar o = new C();\nObject.getPrototypeOf(o) === null;//false;\nObject.getPrototypeOf(o) === Object.prototype;//true\n\nvar x  =Object.create(null);\nObject.getPrototypeOf(o) === null;//true;\n```\n\nfor...in 循环枚举对象属性时与顺序无关。使用数组而不是字典存储有序集合。\n\n如果要在一个对象上（如Object.prototype)添加属性并不会出现在for...in循环中，可以用es5的Obejct.defineProperty Object.defineProperties定义属性并将它的enumerable设为false（value,writable,enumerable,configurable)\n\n\n```js\nObject.defineProperty(Object.prototype, \"newKey\",{\n    value:xxx,\n    writable:true,\n    enumerable:false,\n    configurable:true\n};\n```\n\n如果被枚举的对象在枚举期间添加了新的属性，那么在枚举期间并不能保证for...in 能访问到新添加的成员。因为for...in 枚举对象是无序的，可以考虑用while 和 for。\n\n\n```js\nvar scores = [12,2,3,4,5,5,6,2,3];\nvar total  = 0;\nfor(var score in scores){\n    total+=score;\n}\nvar mean = total / scores.length;\n```\n\n这里不会得到正确的结果，因为for...in遍历 score此时是索引值，而且是字符串，这里total执行是的是字符串拼接。total得到0123456xxx 所以建议用传统的for循环而且条件部分建议写成\nfor(var i = 0,n=scores.length;i<n;i++) 以避免每次循环都重复计算一次score.length\n\n\n类数组对象：\n有一个范围在0 到 2^32-1的整型length属性。\nlength属性大于该对象的最大索引。索引是范围在0到2^32-2的整数\n这就是一个对象需要实现与Array.prototype中任意方法兼容的所有行为。\nvar arrayLike = {0:\"a\",1:\"b\",length:2};\nvar result = Array.prototype.map.call(arrayLike,function(s){\n    return s.toUpperCase();\n});// [\"A\",\"B\"]\n\n字符串也可表现为不可变数组，因为它们是可索引的，并且长度可以通过length属性获取。\nvar result  =Array.prototype.map.call(\"abc\",function(s){\n    return s.toUpperCase();\n});//[\"A\",\"B\",\"C\"]\n数组有两规则类数组比较难以实现：\n1. 将length设置为较小的数会截断数组。\n2. 插入一个索引大于length的元素会将length设置为索引+1\n但是用Array.prototype中的方法，这两条规则都不是必须的，因为增加或删除索引属性的时候他们回强制更新length属性。\n只有一个concat方法不是通用的。如果参数不是真实的数组，会将参数作为一个元素连接起来。\nfunction namesColumn(){\n    return [\"names\"].concat(arguments);\n}\nnamesColumn(\"alice\",\"lily\");//[\"names\",{0:\"alice\",1:\"lily\"}]\n\n解决方法：\nfunction namesColumn(){\n    return [\"names\"].concat([].slice.call(arguments)) ;\n}\n\n使用选项对象使得API更具可读性，更容易记忆。\n所有通过选项对象提供的参数应当被视为可选的。\n使用extend函数抽象出的从选项对象中提取的逻辑。\nvar alert = new Alert(app,150,140,true,false......);//很多参数\n可以提取必填的参数，将可选的参数放到对象中传递\n\n```js\nfuntion Alert(parent,message,opts){\n     opts = opts || {};\n     this.width = opts.width === undefined ? 320:opts.width;\n     this.height = opts.height === undefined ? 240:opts.height;\n     this.x = ....\n     this.y = ....\n     this.xxx= ...\n     ....\n}//每个参数都做这种判断也很麻烦\n```\n\n用extend函数\n\n```js\nfunction Alert(parent,message,opt){\n     opts = extend({\n         width:320;\n         height:240\n     });\n\n     opts.extend({\n       //各种参数的默认值\n     },opts);\n\n     extend(this,opts);\n}\n```\n\n\n判断是否是数组的函数 ：\nES5中的Array.isArray\nObject.prototype.toString.call(x) === \"[object Array]\";\n\n","source":"_posts/effectivejs读书笔记.md","raw":"---\nlayout: post\ntitle:  Effective Javascript读书笔记\ndate:   2015-01-12 08:43:59\nauthor: Lily\ncategories: frontend\ntags:\n- effective javascript\n- 读书笔记\n---\n\n最近读了《Effective Javascript》这本书，有个习惯是会把觉得有用的内容记下来，之后只看这部分内容 ：）\n\n1. 了解你使用的javascript版本\n   为了保证程序在所有浏览器都运行正常，但是程序员没有办法指定js执行版本，es5引入‘严格模式’限制js中易出错或者问题较多的特性。可以在函数体的开始处和整个脚本的开始处加入“use strict”;如果一个页面引入多个js文件，有的是严格模式，有的不是，那么引入顺序会导致是否按照严格模式运行，严格模式先加载，那么都会按照严格模式运行，反之都按照非严格模式。避免这种问题的方法是从脚本级别或者函数级别封装到立即调用的函数表达式里以做到互不干扰。如：\n\n    ```js\n    (function(){\n        \"use strict\";\n         function a(){\n         }\n    })();\n    ```\n\n2. 理解javascript浮点数\n   js黄宗所有数字都是双精度浮点数，位操作时比较特殊，js会将操作数转换成32位有符号整数后进行。浮点数运算注意精度问题，可能会有误差。尽量转换成整数再运算。\n\n3. 当心隐式类型转换\n    \"- * /\"会把左右两端的操作数转换成数字，+ 比较特殊，如果至少有一个字符串，结果就是字符串（内容和字符串顺序相关），if || && 判断传入 false 0 -0 undefined NaN null \"\" 会返回false，其他都为true，因此判断是否undefined用 if(typeof xx ==='undefined') 或 if(xx === undefined)\n如果只重写了toString，对象转换时会无视valueOf的存在来进行转换。但是，如果只重写了valueOf方法，在要转换为字符串的时候会优先考虑valueOf方法。其他情况一般是有类型转换成字符串的时候会调用toString，进行运算符操作调用valueOf。\n\n4. 原始类型优于封装对象\n   javascript有5个原始类型，布尔，数字，字符串，null，undefined\n   相等比较时，原始类型和封装对象表现不一样：\n   var a = new String('aaa');\n    var b = new String('aaa');\n    a === b  =>false\n\n    var a = 'aaa';\n    var b = 'aaa';\n    a === b =>true\n    获取和设置原始类型属性会隐式地创建封装对象。不过设置一个自定义属性的值是不会被保留下来的。\n    \"hello\".someProperty=17;\n    \"hello\".someProperty; =>undefined\n\n5. 避免对混合类型使用 == 运算符\n    建议使用严格的等号运算符比较 === 以保证在比较过程中没有任何转换，否则执行一些转换规则\n    null == undefined =>true  null === undefined =>false\n\n    == 运算符的强制转换规则\n\n    当比较不同类型的值时，用自定义的转换程序使程序的行为更清晰。\n\n6. 了解分号插入的局限\n   * 分号在}标记之前、一个或多个换行之后和程序输入的结果被插入。\n     分号在随后的输入不能被解析时插入。如：\n     a = b\n     (f());    => a = b(f());\n     如果某条语句的下一行的初始标记不能被解析为一个语句的延续，那么不能省略该条语句的分号。 如：\n     a = b\n     f(); 会报错\n\n   * 在以 (  [  + - / 字符开头的语句不能省略分号，因为不会被自动插入分号。如：\n      a = b\n      [\"r\",\"g\",\"b\"].forEach(function(key){ });\n      会被解析成 a= b[\"r\",\"g\",\"b\"].forEach(function(key){ });\n      / 可能在一些正则表达式中会出现在语句的开头\n      a = b\n      /Error/i.test(str) 被解析成  a = b/Error/i.test(str)  /变成除法运算符。\n\n      a = b                 var x\n      var x    不等于    a = b\n      (f())                   (f())\n      前者是三条语句，后者后两条合并。想省略分号时，可以在该语句后面加一个变量声明。为了保证安全在(f())前加一个；以保证三条语句顺序乱了也可以被解析。\n\n   * 注意在脚本连接时可以在脚本之间显示地插入分号。\n     ;(function(){})()\n\n   * 在 return throw break continue ++ --的参数之前绝不要加入换行（break continue是带显式标签的）。\n     a\n     ++   => a; ++b;\n     b\n\n   * for条件内 和 空循环体语句不要缺少分号！ wihle(true);  否则报错。\n\n\n闭包存储的是外部变量的引用，而不是副本，并能读写这些变量。\n\n变量声明的提升，函数声明也会提升。js没有块级作用域只有函数级作用域，变量声明会提升到包含这个变量的函数顶部，但初始化仍停留在原地，例外！！！try catch语句将捕获的异常绑定到一个变量，该变量的作用域只是catch语句块。\n\n```js\nfunction test(){\n   var x =\"test\", result = [];\n   result.push(x);\n   try{\n      throw \"exception\"\n   }catch(x){\n      x  =\"catch\";\n   }\n   result.push(x);\n   return result;   =>[\"test\",\"test\"]\n}\n```\n\narguments 严格模式下是实参的副本，非严格模式下是引用。[].slice.call(arguments) 将arguments复制到一个真正的数组中再修改比较安全。 arguments没有数组的某些函数，可以通过[].xxx.call(arguments)方式来对其进行操作。\n\n\n```js\nvar buffer={\n     entries:[],\n     add:function(s){\n          this.entries.push(s);\n     },\n     concat：function(){\n          return this.entries.join(\"\");\n     }\n}\nvar source = [\"333\",\"egerge\"];\nsource.forEach(buffer.add); // 这里报entries undefined\n```\n\n因为this此时绑定的是全局对象。forEach参数第二个参数作为接受者 source.forEach(buffer.add,buffer)\n或者用匿名函数\nsource.forEach(function(s){\n    buffer.add(s);\n});\n或者用bind\nsource.forEach(buffer.add.bind(buffer));\n\n将字符串传递给evel函数时不要在字符串中包含局部变量的引用。\n\n函数toString 方法不会暴露存储在闭包中的局部变量的值。\n\n```js\n(function(x){\n    return function(y){\n          return x+y;\n    }\n})(40).toString();//functino(y){return x+y}\n```\n\n非严格模式下调用函数，函数中的this是全局对象，严格模式下是undefined。\n\n\n```js\nfunction C(){};\nC.prototype = null;\nvar o = new C();\nObject.getPrototypeOf(o) === null;//false;\nObject.getPrototypeOf(o) === Object.prototype;//true\n\nvar x  =Object.create(null);\nObject.getPrototypeOf(o) === null;//true;\n```\n\nfor...in 循环枚举对象属性时与顺序无关。使用数组而不是字典存储有序集合。\n\n如果要在一个对象上（如Object.prototype)添加属性并不会出现在for...in循环中，可以用es5的Obejct.defineProperty Object.defineProperties定义属性并将它的enumerable设为false（value,writable,enumerable,configurable)\n\n\n```js\nObject.defineProperty(Object.prototype, \"newKey\",{\n    value:xxx,\n    writable:true,\n    enumerable:false,\n    configurable:true\n};\n```\n\n如果被枚举的对象在枚举期间添加了新的属性，那么在枚举期间并不能保证for...in 能访问到新添加的成员。因为for...in 枚举对象是无序的，可以考虑用while 和 for。\n\n\n```js\nvar scores = [12,2,3,4,5,5,6,2,3];\nvar total  = 0;\nfor(var score in scores){\n    total+=score;\n}\nvar mean = total / scores.length;\n```\n\n这里不会得到正确的结果，因为for...in遍历 score此时是索引值，而且是字符串，这里total执行是的是字符串拼接。total得到0123456xxx 所以建议用传统的for循环而且条件部分建议写成\nfor(var i = 0,n=scores.length;i<n;i++) 以避免每次循环都重复计算一次score.length\n\n\n类数组对象：\n有一个范围在0 到 2^32-1的整型length属性。\nlength属性大于该对象的最大索引。索引是范围在0到2^32-2的整数\n这就是一个对象需要实现与Array.prototype中任意方法兼容的所有行为。\nvar arrayLike = {0:\"a\",1:\"b\",length:2};\nvar result = Array.prototype.map.call(arrayLike,function(s){\n    return s.toUpperCase();\n});// [\"A\",\"B\"]\n\n字符串也可表现为不可变数组，因为它们是可索引的，并且长度可以通过length属性获取。\nvar result  =Array.prototype.map.call(\"abc\",function(s){\n    return s.toUpperCase();\n});//[\"A\",\"B\",\"C\"]\n数组有两规则类数组比较难以实现：\n1. 将length设置为较小的数会截断数组。\n2. 插入一个索引大于length的元素会将length设置为索引+1\n但是用Array.prototype中的方法，这两条规则都不是必须的，因为增加或删除索引属性的时候他们回强制更新length属性。\n只有一个concat方法不是通用的。如果参数不是真实的数组，会将参数作为一个元素连接起来。\nfunction namesColumn(){\n    return [\"names\"].concat(arguments);\n}\nnamesColumn(\"alice\",\"lily\");//[\"names\",{0:\"alice\",1:\"lily\"}]\n\n解决方法：\nfunction namesColumn(){\n    return [\"names\"].concat([].slice.call(arguments)) ;\n}\n\n使用选项对象使得API更具可读性，更容易记忆。\n所有通过选项对象提供的参数应当被视为可选的。\n使用extend函数抽象出的从选项对象中提取的逻辑。\nvar alert = new Alert(app,150,140,true,false......);//很多参数\n可以提取必填的参数，将可选的参数放到对象中传递\n\n```js\nfuntion Alert(parent,message,opts){\n     opts = opts || {};\n     this.width = opts.width === undefined ? 320:opts.width;\n     this.height = opts.height === undefined ? 240:opts.height;\n     this.x = ....\n     this.y = ....\n     this.xxx= ...\n     ....\n}//每个参数都做这种判断也很麻烦\n```\n\n用extend函数\n\n```js\nfunction Alert(parent,message,opt){\n     opts = extend({\n         width:320;\n         height:240\n     });\n\n     opts.extend({\n       //各种参数的默认值\n     },opts);\n\n     extend(this,opts);\n}\n```\n\n\n判断是否是数组的函数 ：\nES5中的Array.isArray\nObject.prototype.toString.call(x) === \"[object Array]\";\n\n","slug":"effectivejs读书笔记","published":1,"updated":"2017-02-13T15:37:10.000Z","comments":1,"photos":[],"link":"","_id":"cizknqup1000095c4hr3mh5fr","content":"<p>最近读了《Effective Javascript》这本书，有个习惯是会把觉得有用的内容记下来，之后只看这部分内容 ：）</p>\n<ol>\n<li><p>了解你使用的javascript版本<br>为了保证程序在所有浏览器都运行正常，但是程序员没有办法指定js执行版本，es5引入‘严格模式’限制js中易出错或者问题较多的特性。可以在函数体的开始处和整个脚本的开始处加入“use strict”;如果一个页面引入多个js文件，有的是严格模式，有的不是，那么引入顺序会导致是否按照严格模式运行，严格模式先加载，那么都会按照严格模式运行，反之都按照非严格模式。避免这种问题的方法是从脚本级别或者函数级别封装到立即调用的函数表达式里以做到互不干扰。如：</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"><span class=\"meta\">    \"use strict\"</span>;</div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">     &#125;</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>\n</li>\n<li><p>理解javascript浮点数<br>js黄宗所有数字都是双精度浮点数，位操作时比较特殊，js会将操作数转换成32位有符号整数后进行。浮点数运算注意精度问题，可能会有误差。尽量转换成整数再运算。</p>\n</li>\n<li><p>当心隐式类型转换<br> “- * /“会把左右两端的操作数转换成数字，+ 比较特殊，如果至少有一个字符串，结果就是字符串（内容和字符串顺序相关），if || &amp;&amp; 判断传入 false 0 -0 undefined NaN null “” 会返回false，其他都为true，因此判断是否undefined用 if(typeof xx ===’undefined’) 或 if(xx === undefined)<br>如果只重写了toString，对象转换时会无视valueOf的存在来进行转换。但是，如果只重写了valueOf方法，在要转换为字符串的时候会优先考虑valueOf方法。其他情况一般是有类型转换成字符串的时候会调用toString，进行运算符操作调用valueOf。</p>\n</li>\n<li><p>原始类型优于封装对象<br>javascript有5个原始类型，布尔，数字，字符串，null，undefined<br>相等比较时，原始类型和封装对象表现不一样：<br>var a = new String(‘aaa’);<br> var b = new String(‘aaa’);<br> a === b  =&gt;false</p>\n<p> var a = ‘aaa’;<br> var b = ‘aaa’;<br> a === b =&gt;true<br> 获取和设置原始类型属性会隐式地创建封装对象。不过设置一个自定义属性的值是不会被保留下来的。<br> “hello”.someProperty=17;<br> “hello”.someProperty; =&gt;undefined</p>\n</li>\n<li><p>避免对混合类型使用 == 运算符<br> 建议使用严格的等号运算符比较 === 以保证在比较过程中没有任何转换，否则执行一些转换规则<br> null == undefined =&gt;true  null === undefined =&gt;false</p>\n<p> == 运算符的强制转换规则</p>\n<p> 当比较不同类型的值时，用自定义的转换程序使程序的行为更清晰。</p>\n</li>\n<li><p>了解分号插入的局限</p>\n<ul>\n<li><p>分号在}标记之前、一个或多个换行之后和程序输入的结果被插入。<br>分号在随后的输入不能被解析时插入。如：<br>a = b<br>(f());    =&gt; a = b(f());<br>如果某条语句的下一行的初始标记不能被解析为一个语句的延续，那么不能省略该条语句的分号。 如：<br>a = b<br>f(); 会报错</p>\n</li>\n<li><p>在以 (  [  + - / 字符开头的语句不能省略分号，因为不会被自动插入分号。如：<br> a = b<br> [“r”,”g”,”b”].forEach(function(key){ });<br> 会被解析成 a= b[“r”,”g”,”b”].forEach(function(key){ });<br> / 可能在一些正则表达式中会出现在语句的开头<br> a = b<br> /Error/i.test(str) 被解析成  a = b/Error/i.test(str)  /变成除法运算符。</p>\n<p> a = b                 var x<br> var x    不等于    a = b<br> (f())                   (f())<br> 前者是三条语句，后者后两条合并。想省略分号时，可以在该语句后面加一个变量声明。为了保证安全在(f())前加一个；以保证三条语句顺序乱了也可以被解析。</p>\n</li>\n<li><p>注意在脚本连接时可以在脚本之间显示地插入分号。<br>;(function(){})()</p>\n</li>\n<li><p>在 return throw break continue ++ –的参数之前绝不要加入换行（break continue是带显式标签的）。<br>a<br>++   =&gt; a; ++b;<br>b</p>\n</li>\n<li><p>for条件内 和 空循环体语句不要缺少分号！ wihle(true);  否则报错。</p>\n</li>\n</ul>\n</li>\n</ol>\n<p>闭包存储的是外部变量的引用，而不是副本，并能读写这些变量。</p>\n<p>变量声明的提升，函数声明也会提升。js没有块级作用域只有函数级作用域，变量声明会提升到包含这个变量的函数顶部，但初始化仍停留在原地，例外！！！try catch语句将捕获的异常绑定到一个变量，该变量的作用域只是catch语句块。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">   <span class=\"keyword\">var</span> x =<span class=\"string\">\"test\"</span>, result = [];</div><div class=\"line\">   result.push(x);</div><div class=\"line\">   <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"string\">\"exception\"</span></div><div class=\"line\">   &#125;<span class=\"keyword\">catch</span>(x)&#123;</div><div class=\"line\">      x  =<span class=\"string\">\"catch\"</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\">   result.push(x);</div><div class=\"line\">   <span class=\"keyword\">return</span> result;   =&gt;[<span class=\"string\">\"test\"</span>,<span class=\"string\">\"test\"</span>]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>arguments 严格模式下是实参的副本，非严格模式下是引用。[].slice.call(arguments) 将arguments复制到一个真正的数组中再修改比较安全。 arguments没有数组的某些函数，可以通过[].xxx.call(arguments)方式来对其进行操作。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> buffer=&#123;</div><div class=\"line\">     <span class=\"attr\">entries</span>:[],</div><div class=\"line\">     <span class=\"attr\">add</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>)</span>&#123;</div><div class=\"line\">          <span class=\"keyword\">this</span>.entries.push(s);</div><div class=\"line\">     &#125;,</div><div class=\"line\">     concat：<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.entries.join(<span class=\"string\">\"\"</span>);</div><div class=\"line\">     &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> source = [<span class=\"string\">\"333\"</span>,<span class=\"string\">\"egerge\"</span>];</div><div class=\"line\">source.forEach(buffer.add); <span class=\"comment\">// 这里报entries undefined</span></div></pre></td></tr></table></figure>\n<p>因为this此时绑定的是全局对象。forEach参数第二个参数作为接受者 source.forEach(buffer.add,buffer)<br>或者用匿名函数<br>source.forEach(function(s){<br>    buffer.add(s);<br>});<br>或者用bind<br>source.forEach(buffer.add.bind(buffer));</p>\n<p>将字符串传递给evel函数时不要在字符串中包含局部变量的引用。</p>\n<p>函数toString 方法不会暴露存储在闭包中的局部变量的值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">y</span>)</span>&#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> x+y;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)(<span class=\"number\">40</span>).toString();<span class=\"comment\">//functino(y)&#123;return x+y&#125;</span></div></pre></td></tr></table></figure>\n<p>非严格模式下调用函数，函数中的this是全局对象，严格模式下是undefined。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">C</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\">C.prototype = <span class=\"literal\">null</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> C();</div><div class=\"line\"><span class=\"built_in\">Object</span>.getPrototypeOf(o) === <span class=\"literal\">null</span>;<span class=\"comment\">//false;</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.getPrototypeOf(o) === <span class=\"built_in\">Object</span>.prototype;<span class=\"comment\">//true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> x  =<span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>);</div><div class=\"line\"><span class=\"built_in\">Object</span>.getPrototypeOf(o) === <span class=\"literal\">null</span>;<span class=\"comment\">//true;</span></div></pre></td></tr></table></figure>\n<p>for…in 循环枚举对象属性时与顺序无关。使用数组而不是字典存储有序集合。</p>\n<p>如果要在一个对象上（如Object.prototype)添加属性并不会出现在for…in循环中，可以用es5的Obejct.defineProperty Object.defineProperties定义属性并将它的enumerable设为false（value,writable,enumerable,configurable)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(<span class=\"built_in\">Object</span>.prototype, <span class=\"string\">\"newKey\"</span>,&#123;</div><div class=\"line\">    <span class=\"attr\">value</span>:xxx,</div><div class=\"line\">    <span class=\"attr\">writable</span>:<span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">enumerable</span>:<span class=\"literal\">false</span>,</div><div class=\"line\">    <span class=\"attr\">configurable</span>:<span class=\"literal\">true</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>如果被枚举的对象在枚举期间添加了新的属性，那么在枚举期间并不能保证for…in 能访问到新添加的成员。因为for…in 枚举对象是无序的，可以考虑用while 和 for。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> scores = [<span class=\"number\">12</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> total  = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> score <span class=\"keyword\">in</span> scores)&#123;</div><div class=\"line\">    total+=score;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> mean = total / scores.length;</div></pre></td></tr></table></figure>\n<p>这里不会得到正确的结果，因为for…in遍历 score此时是索引值，而且是字符串，这里total执行是的是字符串拼接。total得到0123456xxx 所以建议用传统的for循环而且条件部分建议写成<br>for(var i = 0,n=scores.length;i&lt;n;i++) 以避免每次循环都重复计算一次score.length</p>\n<p>类数组对象：<br>有一个范围在0 到 2^32-1的整型length属性。<br>length属性大于该对象的最大索引。索引是范围在0到2^32-2的整数<br>这就是一个对象需要实现与Array.prototype中任意方法兼容的所有行为。<br>var arrayLike = {0:”a”,1:”b”,length:2};<br>var result = Array.prototype.map.call(arrayLike,function(s){<br>    return s.toUpperCase();<br>});// [“A”,”B”]</p>\n<p>字符串也可表现为不可变数组，因为它们是可索引的，并且长度可以通过length属性获取。<br>var result  =Array.prototype.map.call(“abc”,function(s){<br>    return s.toUpperCase();<br>});//[“A”,”B”,”C”]<br>数组有两规则类数组比较难以实现：</p>\n<ol>\n<li>将length设置为较小的数会截断数组。</li>\n<li>插入一个索引大于length的元素会将length设置为索引+1<br>但是用Array.prototype中的方法，这两条规则都不是必须的，因为增加或删除索引属性的时候他们回强制更新length属性。<br>只有一个concat方法不是通用的。如果参数不是真实的数组，会将参数作为一个元素连接起来。<br>function namesColumn(){<br> return [“names”].concat(arguments);<br>}<br>namesColumn(“alice”,”lily”);//[“names”,{0:”alice”,1:”lily”}]</li>\n</ol>\n<p>解决方法：<br>function namesColumn(){<br>    return [“names”].concat([].slice.call(arguments)) ;<br>}</p>\n<p>使用选项对象使得API更具可读性，更容易记忆。<br>所有通过选项对象提供的参数应当被视为可选的。<br>使用extend函数抽象出的从选项对象中提取的逻辑。<br>var alert = new Alert(app,150,140,true,false……);//很多参数<br>可以提取必填的参数，将可选的参数放到对象中传递</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">funtion Alert(parent,message,opts)&#123;</div><div class=\"line\">     opts = opts || &#123;&#125;;</div><div class=\"line\">     <span class=\"keyword\">this</span>.width = opts.width === <span class=\"literal\">undefined</span> ? <span class=\"number\">320</span>:opts.width;</div><div class=\"line\">     <span class=\"keyword\">this</span>.height = opts.height === <span class=\"literal\">undefined</span> ? <span class=\"number\">240</span>:opts.height;</div><div class=\"line\">     <span class=\"keyword\">this</span>.x = ....</div><div class=\"line\">     this.y = ....</div><div class=\"line\">     this.xxx= ...</div><div class=\"line\">     ....</div><div class=\"line\">&#125;<span class=\"comment\">//每个参数都做这种判断也很麻烦</span></div></pre></td></tr></table></figure>\n<p>用extend函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Alert</span>(<span class=\"params\">parent,message,opt</span>)</span>&#123;</div><div class=\"line\">     opts = extend(&#123;</div><div class=\"line\">         <span class=\"attr\">width</span>:<span class=\"number\">320</span>;</div><div class=\"line\">         height:<span class=\"number\">240</span></div><div class=\"line\">     &#125;);</div><div class=\"line\"></div><div class=\"line\">     opts.extend(&#123;</div><div class=\"line\">       <span class=\"comment\">//各种参数的默认值</span></div><div class=\"line\">     &#125;,opts);</div><div class=\"line\"></div><div class=\"line\">     extend(<span class=\"keyword\">this</span>,opts);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>判断是否是数组的函数 ：<br>ES5中的Array.isArray<br>Object.prototype.toString.call(x) === “[object Array]”;</p>\n","excerpt":"","more":"<p>最近读了《Effective Javascript》这本书，有个习惯是会把觉得有用的内容记下来，之后只看这部分内容 ：）</p>\n<ol>\n<li><p>了解你使用的javascript版本<br>为了保证程序在所有浏览器都运行正常，但是程序员没有办法指定js执行版本，es5引入‘严格模式’限制js中易出错或者问题较多的特性。可以在函数体的开始处和整个脚本的开始处加入“use strict”;如果一个页面引入多个js文件，有的是严格模式，有的不是，那么引入顺序会导致是否按照严格模式运行，严格模式先加载，那么都会按照严格模式运行，反之都按照非严格模式。避免这种问题的方法是从脚本级别或者函数级别封装到立即调用的函数表达式里以做到互不干扰。如：</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"><span class=\"meta\">    \"use strict\"</span>;</div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">     &#125;</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>\n</li>\n<li><p>理解javascript浮点数<br>js黄宗所有数字都是双精度浮点数，位操作时比较特殊，js会将操作数转换成32位有符号整数后进行。浮点数运算注意精度问题，可能会有误差。尽量转换成整数再运算。</p>\n</li>\n<li><p>当心隐式类型转换<br> “- * /“会把左右两端的操作数转换成数字，+ 比较特殊，如果至少有一个字符串，结果就是字符串（内容和字符串顺序相关），if || &amp;&amp; 判断传入 false 0 -0 undefined NaN null “” 会返回false，其他都为true，因此判断是否undefined用 if(typeof xx ===’undefined’) 或 if(xx === undefined)<br>如果只重写了toString，对象转换时会无视valueOf的存在来进行转换。但是，如果只重写了valueOf方法，在要转换为字符串的时候会优先考虑valueOf方法。其他情况一般是有类型转换成字符串的时候会调用toString，进行运算符操作调用valueOf。</p>\n</li>\n<li><p>原始类型优于封装对象<br>javascript有5个原始类型，布尔，数字，字符串，null，undefined<br>相等比较时，原始类型和封装对象表现不一样：<br>var a = new String(‘aaa’);<br> var b = new String(‘aaa’);<br> a === b  =&gt;false</p>\n<p> var a = ‘aaa’;<br> var b = ‘aaa’;<br> a === b =&gt;true<br> 获取和设置原始类型属性会隐式地创建封装对象。不过设置一个自定义属性的值是不会被保留下来的。<br> “hello”.someProperty=17;<br> “hello”.someProperty; =&gt;undefined</p>\n</li>\n<li><p>避免对混合类型使用 == 运算符<br> 建议使用严格的等号运算符比较 === 以保证在比较过程中没有任何转换，否则执行一些转换规则<br> null == undefined =&gt;true  null === undefined =&gt;false</p>\n<p> == 运算符的强制转换规则</p>\n<p> 当比较不同类型的值时，用自定义的转换程序使程序的行为更清晰。</p>\n</li>\n<li><p>了解分号插入的局限</p>\n<ul>\n<li><p>分号在}标记之前、一个或多个换行之后和程序输入的结果被插入。<br>分号在随后的输入不能被解析时插入。如：<br>a = b<br>(f());    =&gt; a = b(f());<br>如果某条语句的下一行的初始标记不能被解析为一个语句的延续，那么不能省略该条语句的分号。 如：<br>a = b<br>f(); 会报错</p>\n</li>\n<li><p>在以 (  [  + - / 字符开头的语句不能省略分号，因为不会被自动插入分号。如：<br> a = b<br> [“r”,”g”,”b”].forEach(function(key){ });<br> 会被解析成 a= b[“r”,”g”,”b”].forEach(function(key){ });<br> / 可能在一些正则表达式中会出现在语句的开头<br> a = b<br> /Error/i.test(str) 被解析成  a = b/Error/i.test(str)  /变成除法运算符。</p>\n<p> a = b                 var x<br> var x    不等于    a = b<br> (f())                   (f())<br> 前者是三条语句，后者后两条合并。想省略分号时，可以在该语句后面加一个变量声明。为了保证安全在(f())前加一个；以保证三条语句顺序乱了也可以被解析。</p>\n</li>\n<li><p>注意在脚本连接时可以在脚本之间显示地插入分号。<br>;(function(){})()</p>\n</li>\n<li><p>在 return throw break continue ++ –的参数之前绝不要加入换行（break continue是带显式标签的）。<br>a<br>++   =&gt; a; ++b;<br>b</p>\n</li>\n<li><p>for条件内 和 空循环体语句不要缺少分号！ wihle(true);  否则报错。</p>\n</li>\n</ul>\n</li>\n</ol>\n<p>闭包存储的是外部变量的引用，而不是副本，并能读写这些变量。</p>\n<p>变量声明的提升，函数声明也会提升。js没有块级作用域只有函数级作用域，变量声明会提升到包含这个变量的函数顶部，但初始化仍停留在原地，例外！！！try catch语句将捕获的异常绑定到一个变量，该变量的作用域只是catch语句块。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">   <span class=\"keyword\">var</span> x =<span class=\"string\">\"test\"</span>, result = [];</div><div class=\"line\">   result.push(x);</div><div class=\"line\">   <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"string\">\"exception\"</span></div><div class=\"line\">   &#125;<span class=\"keyword\">catch</span>(x)&#123;</div><div class=\"line\">      x  =<span class=\"string\">\"catch\"</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\">   result.push(x);</div><div class=\"line\">   <span class=\"keyword\">return</span> result;   =&gt;[<span class=\"string\">\"test\"</span>,<span class=\"string\">\"test\"</span>]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>arguments 严格模式下是实参的副本，非严格模式下是引用。[].slice.call(arguments) 将arguments复制到一个真正的数组中再修改比较安全。 arguments没有数组的某些函数，可以通过[].xxx.call(arguments)方式来对其进行操作。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> buffer=&#123;</div><div class=\"line\">     <span class=\"attr\">entries</span>:[],</div><div class=\"line\">     <span class=\"attr\">add</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>)</span>&#123;</div><div class=\"line\">          <span class=\"keyword\">this</span>.entries.push(s);</div><div class=\"line\">     &#125;,</div><div class=\"line\">     concat：<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.entries.join(<span class=\"string\">\"\"</span>);</div><div class=\"line\">     &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> source = [<span class=\"string\">\"333\"</span>,<span class=\"string\">\"egerge\"</span>];</div><div class=\"line\">source.forEach(buffer.add); <span class=\"comment\">// 这里报entries undefined</span></div></pre></td></tr></table></figure>\n<p>因为this此时绑定的是全局对象。forEach参数第二个参数作为接受者 source.forEach(buffer.add,buffer)<br>或者用匿名函数<br>source.forEach(function(s){<br>    buffer.add(s);<br>});<br>或者用bind<br>source.forEach(buffer.add.bind(buffer));</p>\n<p>将字符串传递给evel函数时不要在字符串中包含局部变量的引用。</p>\n<p>函数toString 方法不会暴露存储在闭包中的局部变量的值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">y</span>)</span>&#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> x+y;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)(<span class=\"number\">40</span>).toString();<span class=\"comment\">//functino(y)&#123;return x+y&#125;</span></div></pre></td></tr></table></figure>\n<p>非严格模式下调用函数，函数中的this是全局对象，严格模式下是undefined。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">C</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\">C.prototype = <span class=\"literal\">null</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> C();</div><div class=\"line\"><span class=\"built_in\">Object</span>.getPrototypeOf(o) === <span class=\"literal\">null</span>;<span class=\"comment\">//false;</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.getPrototypeOf(o) === <span class=\"built_in\">Object</span>.prototype;<span class=\"comment\">//true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> x  =<span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>);</div><div class=\"line\"><span class=\"built_in\">Object</span>.getPrototypeOf(o) === <span class=\"literal\">null</span>;<span class=\"comment\">//true;</span></div></pre></td></tr></table></figure>\n<p>for…in 循环枚举对象属性时与顺序无关。使用数组而不是字典存储有序集合。</p>\n<p>如果要在一个对象上（如Object.prototype)添加属性并不会出现在for…in循环中，可以用es5的Obejct.defineProperty Object.defineProperties定义属性并将它的enumerable设为false（value,writable,enumerable,configurable)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(<span class=\"built_in\">Object</span>.prototype, <span class=\"string\">\"newKey\"</span>,&#123;</div><div class=\"line\">    <span class=\"attr\">value</span>:xxx,</div><div class=\"line\">    <span class=\"attr\">writable</span>:<span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">enumerable</span>:<span class=\"literal\">false</span>,</div><div class=\"line\">    <span class=\"attr\">configurable</span>:<span class=\"literal\">true</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>如果被枚举的对象在枚举期间添加了新的属性，那么在枚举期间并不能保证for…in 能访问到新添加的成员。因为for…in 枚举对象是无序的，可以考虑用while 和 for。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> scores = [<span class=\"number\">12</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> total  = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> score <span class=\"keyword\">in</span> scores)&#123;</div><div class=\"line\">    total+=score;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> mean = total / scores.length;</div></pre></td></tr></table></figure>\n<p>这里不会得到正确的结果，因为for…in遍历 score此时是索引值，而且是字符串，这里total执行是的是字符串拼接。total得到0123456xxx 所以建议用传统的for循环而且条件部分建议写成<br>for(var i = 0,n=scores.length;i&lt;n;i++) 以避免每次循环都重复计算一次score.length</p>\n<p>类数组对象：<br>有一个范围在0 到 2^32-1的整型length属性。<br>length属性大于该对象的最大索引。索引是范围在0到2^32-2的整数<br>这就是一个对象需要实现与Array.prototype中任意方法兼容的所有行为。<br>var arrayLike = {0:”a”,1:”b”,length:2};<br>var result = Array.prototype.map.call(arrayLike,function(s){<br>    return s.toUpperCase();<br>});// [“A”,”B”]</p>\n<p>字符串也可表现为不可变数组，因为它们是可索引的，并且长度可以通过length属性获取。<br>var result  =Array.prototype.map.call(“abc”,function(s){<br>    return s.toUpperCase();<br>});//[“A”,”B”,”C”]<br>数组有两规则类数组比较难以实现：</p>\n<ol>\n<li>将length设置为较小的数会截断数组。</li>\n<li>插入一个索引大于length的元素会将length设置为索引+1<br>但是用Array.prototype中的方法，这两条规则都不是必须的，因为增加或删除索引属性的时候他们回强制更新length属性。<br>只有一个concat方法不是通用的。如果参数不是真实的数组，会将参数作为一个元素连接起来。<br>function namesColumn(){<br> return [“names”].concat(arguments);<br>}<br>namesColumn(“alice”,”lily”);//[“names”,{0:”alice”,1:”lily”}]</li>\n</ol>\n<p>解决方法：<br>function namesColumn(){<br>    return [“names”].concat([].slice.call(arguments)) ;<br>}</p>\n<p>使用选项对象使得API更具可读性，更容易记忆。<br>所有通过选项对象提供的参数应当被视为可选的。<br>使用extend函数抽象出的从选项对象中提取的逻辑。<br>var alert = new Alert(app,150,140,true,false……);//很多参数<br>可以提取必填的参数，将可选的参数放到对象中传递</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">funtion Alert(parent,message,opts)&#123;</div><div class=\"line\">     opts = opts || &#123;&#125;;</div><div class=\"line\">     <span class=\"keyword\">this</span>.width = opts.width === <span class=\"literal\">undefined</span> ? <span class=\"number\">320</span>:opts.width;</div><div class=\"line\">     <span class=\"keyword\">this</span>.height = opts.height === <span class=\"literal\">undefined</span> ? <span class=\"number\">240</span>:opts.height;</div><div class=\"line\">     <span class=\"keyword\">this</span>.x = ....</div><div class=\"line\">     this.y = ....</div><div class=\"line\">     this.xxx= ...</div><div class=\"line\">     ....</div><div class=\"line\">&#125;<span class=\"comment\">//每个参数都做这种判断也很麻烦</span></div></pre></td></tr></table></figure>\n<p>用extend函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Alert</span>(<span class=\"params\">parent,message,opt</span>)</span>&#123;</div><div class=\"line\">     opts = extend(&#123;</div><div class=\"line\">         <span class=\"attr\">width</span>:<span class=\"number\">320</span>;</div><div class=\"line\">         height:<span class=\"number\">240</span></div><div class=\"line\">     &#125;);</div><div class=\"line\"></div><div class=\"line\">     opts.extend(&#123;</div><div class=\"line\">       <span class=\"comment\">//各种参数的默认值</span></div><div class=\"line\">     &#125;,opts);</div><div class=\"line\"></div><div class=\"line\">     extend(<span class=\"keyword\">this</span>,opts);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>判断是否是数组的函数 ：<br>ES5中的Array.isArray<br>Object.prototype.toString.call(x) === “[object Array]”;</p>\n"},{"layout":"post","title":"ios推送功能添加以及模拟后端自测","date":"2017-01-04T00:43:59.000Z","author":"Lily","_content":"  1.apns简介：\n     参见：[apns原理](https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/APNSOverview.html#//apple_ref/doc/uid/TP40008194-CH8-SW1)\n  2. 配置证书\n     参见: [ios官网](https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/HandlingRemoteNotifications.html#//apple_ref/doc/uid/TP40008194-CH6-SW1) 和 [这里](https://github.com/node-apn/node-apn/wiki/Preparing-Certificates)\n     将上面生成的两个pem文件 key.pem 和 cert.pem 以及app id 给后端同学即可。\n  3. ios接受处理push逻辑\n\n  TKMPushNotificationCenter.h\n\n\n ```ios\n\n //  TKMPushNotificationCenter.h\n //\n //  Created by 01 on 16/12/17.\n //  Copyright © 2016年 Facebook. All rights reserved.\n //\n\n #import <Foundation/Foundation.h>\n #import <UIKit/UIKit.h>\n /**\n  *  推送相关\n  */\n\n @interface TKMPushNotificationCenter : NSObject\n /**\n  *  Device Token\n  */\n @property (nonatomic, copy, readonly) NSString *deviceTokenString;\n\n\n /**\n  *  推送单例\n  */\n + (instancetype)sharedPushCenter;\n\n /**\n *  是否开启系统的APNs\n */\n + (BOOL)APNsEnabled;\n\n /**\n  *  是否从APNs的通知启动APP\n  */\n + (BOOL)isLaunchFromAPNs;\n\n /**\n  *  注册远程通知<向用户请求，获取推送通知权限>\n  */\n + (void)registerRemoteNotificationAfterDelay:(NSTimeInterval)delay;\n\n /**\n  *  iOS10推送，APP enter foreground\n  */\n + (void)applicationWillEnterForegroundForIOS10Push:(UIApplication *)application;\n\n /**\n  *  当APP处于terminate状态，通过通知启动APP，launchOptions中包含远程通知信息\n  */\n + (void)application:(UIApplication *)application didReceiveRemoteNotificationFromLaunchingWithOptions:(NSDictionary *)launchOptions;\n\n /**\n  *  注册用户通知设置\n  */\n + (void)application:(UIApplication *)application didRegisterUserNotificationSettings:(UIUserNotificationSettings *)notificationSettings;\n\n /**\n  *  注册远程通知成功\n  */\n + (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken;\n\n /**\n  *  注册远程通知失败\n  */\n + (void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error;\n\n /**\n  *  当APP处理background状态时，点击收到的远程通知会调用该方法\n  *  当APP处理foreground状态时，会直接调用该方法\n  */\n + (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo;\n\n /**\n  *  收到本地通知\n  */\n + (void)application:(UIApplication *)application didReceiveLocalNotification:(UILocalNotification *)notification;\n\n @end\n ```\n\n  TKMPushNotificationCenter.m\n\n ```ios\n //\n //  TKMPushNotificationCenter.m\n //  kuaima\n //\n //  Created by 01 on 16/12/17.\n //  Copyright © 2016年 Facebook. All rights reserved.\n //\n\n #import <UserNotifications/UserNotifications.h>\n #import \"TKMPushNotificationCenter.h\"\n #import <TTInfoHelper.h>\n #import <NSObject+TTAdditions.h>\n\n /**\n 注： ttinfohelper是ios组封装的一个查询设备操作系统版本的工具类，此处只用到判断当前系统的方法\n */\n\n\n NSString * const TKMRemoteNotificationDeviceTokenKey = @\"toutiao.kuaima.push_notification.device_token\";\n\n /**\n  *  推送通知block\n  */\n typedef void(^TEUPushNotificationCompletionBlock) (void);\n\n @interface TKMPushNotificationCenter () <Singleton,UNUserNotificationCenterDelegate>\n /**\n  *  标记是否从通知栏启动APP\n  */\n @property (nonatomic, assign) BOOL launchFromAPNs;\n\n @property (nonatomic, strong) NSDictionary *launchOptions;\n\n @property (nonatomic,   copy) TEUPushNotificationCompletionBlock completionBlock;\n /**\n  *  Push Notification device token\n  */\n @property (nonatomic, copy, readwrite) NSString *deviceTokenString;\n @end\n @implementation TKMPushNotificationCenter\n @synthesize deviceTokenString = _deviceTokenString;\n\n + (instancetype)sharedPushCenter\n {\n   return [self sharedInstance_tt];\n }\n\n - (instancetype)init\n {\n   if ((self = [super init])) {\n     _launchFromAPNs = NO;\n       }\n   return self;\n }\n\n - (void)dealloc\n {\n   _launchFromAPNs = NO;\n   _launchOptions  = nil;\n   [[NSNotificationCenter defaultCenter] removeObserver:self];\n }\n\n - (void)handleDidEyeuLogin:(NSNotification *)notification\n {\n   [self registerRemoteNotificationAfterDelay:2.f];\n }\n\n\n + (BOOL)isLaunchFromAPNs\n {\n   return [[TKMPushNotificationCenter sharedPushCenter] launchFromAPNs];\n }\n\n #pragma mark - handle remote notification\n\n + (void)application:(UIApplication *)application didReceiveRemoteNotificationFromLaunchingWithOptions:(NSDictionary *)launchOptions\n {\n   [[self sharedPushCenter] application:application didReceiveRemoteNotificationFromLaunchingWithOptions:launchOptions];\n }\n\n - (void)application:(UIApplication *)application didReceiveRemoteNotificationFromLaunchingWithOptions:(NSDictionary *)launchOptions\n {\n   // 注册远程通知\n   [self registerRemoteNotificationAfterDelay:0.f];\n\n\n   // 处理从通知栏点击通知启动App的情况【iOS10之后会调用[userNotificationCenter:didReceiveNotificationResponse]】\n   BOOL isFromAPNs = [launchOptions objectForKey:UIApplicationLaunchOptionsRemoteNotificationKey] != nil;\n   [TKMPushNotificationCenter sharedPushCenter].launchFromAPNs = YES;\n   [TKMPushNotificationCenter sharedPushCenter].launchOptions = [launchOptions copy];\n\n   if ([TTInfoHelper OSVersionNumber] < 10.0 && isFromAPNs) {\n     // apns should be handled after mainViewController is load completely\n     NSDictionary *payload = [launchOptions objectForKey:UIApplicationLaunchOptionsRemoteNotificationKey];\n     [[TKMPushNotificationCenter sharedPushCenter] handleRemoteNotification:payload delay:1.f];\n   }\n }\n\n + (void)application:(UIApplication *)application didRegisterUserNotificationSettings:(UIUserNotificationSettings *)notificationSettings\n {\n   [[self sharedPushCenter] application:application didRegisterUserNotificationSettings:notificationSettings];\n }\n\n + (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken\n {\n   [[self sharedPushCenter] application:application didRegisterForRemoteNotificationsWithDeviceToken:deviceToken];\n }\n\n + (void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error\n {\n   [[self sharedPushCenter] application:application didFailToRegisterForRemoteNotificationsWithError:error];\n }\n\n + (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo\n {\n   [[self sharedPushCenter] application:application didReceiveRemoteNotification:userInfo];\n }\n\n + (void)application:(UIApplication *)application didReceiveLocalNotification:(UILocalNotification *)notification\n {\n   [[self sharedPushCenter] application:application didReceiveLocalNotification:notification];\n }\n\n - (void)application:(UIApplication *)application didRegisterUserNotificationSettings:(UIUserNotificationSettings *)notificationSettings\n {\n   if (notificationSettings.types != UIUserNotificationTypeNone) {\n     [application registerForRemoteNotifications];\n   }\n }\n\n - (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken\n {\n   self.deviceTokenString = [[[[deviceToken description]\n                               stringByReplacingOccurrencesOfString: @\"<\" withString: @\"\"]\n                              stringByReplacingOccurrencesOfString: @\">\" withString: @\"\"]\n                             stringByReplacingOccurrencesOfString: @\" \" withString: @\"\"];\n   NSLog(@\">>>>> Success: device token: %@\", self.deviceTokenString);\n }\n\n - (void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error\n {\n   NSLog(@\">>>>> Failed: registerRemoteNotificiation: %@\", error);\n }\n\n - (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo\n {\n   NSLog(@\">>>>> Launch: receiveRemoteNotification: %@\",userInfo);\n\n   application.applicationIconBadgeNumber = [[userInfo objectForKey:@\"badge\"] integerValue];\n   if ([[UIApplication sharedApplication] applicationState] != UIApplicationStateActive) {\n     [self handleRemoteNotification:userInfo];\n   } else {\n     if ([[userInfo objectForKey:@\"importance\"] isEqualToString:@\"important\"]) {\n\n     }\n   }\n }\n\n #pragma mark - iOS10 UNNotificationCenterDelegate\n\n + (void)applicationWillEnterForegroundForIOS10Push:(UIApplication *)application\n {\n   if ([TTInfoHelper OSVersionNumber] >= 10.0) {\n     dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n\n     });\n   }\n }\n\n - (void)userNotificationCenter:(UNUserNotificationCenter *)center willPresentNotification:(UNNotification *)notification withCompletionHandler:(void (^)(UNNotificationPresentationOptions options))completionHandler\n {\n   NSDictionary *payload __unused = notification.request.content.userInfo;\n   UNNotificationRequest *request = notification.request; // 收到推送的请求\n   UNNotificationContent *content = request.content; // 收到推送的消息内容\n   NSNumber *badge __unused = content.badge;  // 推送消息的角标\n   NSString *body  __unused= content.body;    // 推送消息体\n   UNNotificationSound *sound __unused= content.sound;  // 推送消息的声音\n   NSString *subtitle __unused = content.subtitle;  // 推送消息的副标题\n   NSString *title __unused = content.title;  // 推送消息的标题\n\n   if([request.trigger isKindOfClass:[UNPushNotificationTrigger class]]) {\n\n   }\n   else {\n     // 判断为本地通知\n\n   }\n\n   // 需要执行这个方法，选择是否提醒用户，有Badge、Sound、Alert三种类型可以设置\n   completionHandler(UNNotificationPresentationOptionBadge | UNNotificationPresentationOptionSound | UNNotificationPresentationOptionAlert);\n }\n\n - (void)userNotificationCenter:(UNUserNotificationCenter *)center didReceiveNotificationResponse:(UNNotificationResponse *)response withCompletionHandler:(void (^)())completionHandler\n {\n   NSDictionary *payload = response.notification.request.content.userInfo;\n   UNNotificationRequest *request = response.notification.request; // 收到推送的请求\n\n   NSLog(@\">>>>>iOS10: UNNotificationResponse: %@, payload: %@\", response, payload);\n\n   if ([request.trigger isKindOfClass:[UNPushNotificationTrigger class]]) {\n     // 远程通知\n     if ([self.launchOptions objectForKey:UIApplicationLaunchOptionsRemoteNotificationKey]) {\n       self.launchOptions = nil;\n       [self handleRemoteNotification:payload delay:1.f];\n     } else {\n       [self handleRemoteNotification:payload];\n     }\n   }\n\n\n   if ([response.actionIdentifier isEqualToString:UNNotificationDefaultActionIdentifier]) {\n\n   }\n   else if ([response.actionIdentifier isEqualToString:UNNotificationDismissActionIdentifier]) {\n\n   }\n   else {\n\n   }\n\n   completionHandler();\n }\n\n\n #pragma mark - register remote notification\n /**\n  *  注册远程通知<向用户请求，获取推送通知权限>\n  */\n + (void)registerRemoteNotificationAfterDelay:(NSTimeInterval)delay\n {\n   [[self sharedPushCenter] registerRemoteNotificationAfterDelay:delay];\n }\n\n - (void)registerRemoteNotificationAfterDelay:(NSTimeInterval)delay\n {\n   void (^TEURegisterRemoteNotificationBlock)() = ^() {\n     if ([TTInfoHelper OSVersionNumber] >= 10.0) {\n       UNUserNotificationCenter *userNotificationCenter = [UNUserNotificationCenter currentNotificationCenter];\n       userNotificationCenter.delegate = self;\n       [userNotificationCenter requestAuthorizationWithOptions:UNAuthorizationOptionAlert | UNAuthorizationOptionBadge | UNAuthorizationOptionSound completionHandler:^(BOOL granted, NSError * _Nullable error) {\n         if (granted) {\n           NSLog(@\"iOS10 > 注册通知成功\");\n           // initiate to get device token from APNs\n           [[UIApplication sharedApplication] registerForRemoteNotifications];\n         } else {\n           NSLog(@\"iOS10 > 注册通知失败\");\n         }\n       }];\n     }\n     else if ([TTInfoHelper OSVersionNumber] >= 8.0) {\n #pragma clang diagnostic push\n #pragma clang diagnostic ignored \"-Wdeprecated-declarations\"\n       UIUserNotificationSettings *settings = [UIUserNotificationSettings settingsForTypes:(UIRemoteNotificationTypeBadge | UIRemoteNotificationTypeSound | UIRemoteNotificationTypeAlert) categories:nil];\n       [[UIApplication sharedApplication] registerUserNotificationSettings:settings];\n #pragma clang diagnostic pop\n     }\n     else {\n #pragma clang diagnostic push\n #pragma clang diagnostic ignored \"-Wdeprecated-declarations\"\n       [[UIApplication sharedApplication] registerForRemoteNotificationTypes:(UIRemoteNotificationTypeBadge | UIRemoteNotificationTypeAlert | UIRemoteNotificationTypeSound)];\n #pragma clang diagnostic pop\n     }\n   };\n\n   if(delay > 0) {\n     dispatch_after(dispatch_time(DISPATCH_TIME_NOW, delay * NSEC_PER_SEC), dispatch_get_main_queue(), ^(void){\n       TEURegisterRemoteNotificationBlock();\n     });\n   } else {\n     TEURegisterRemoteNotificationBlock();\n   }\n }\n\n #pragma mark - handle when receiving remote push\n\n\n - (void)handleRemoteNotification:(NSDictionary *)playload delay:(NSTimeInterval)delay\n {\n   if (delay > 0) {\n     dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delay * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{\n       [self handleRemoteNotification:playload];\n     });\n   } else {\n     [self handleRemoteNotification:playload];\n   }\n }\n\n - (void)handleRemoteNotification:(NSDictionary *)playload\n {\n   NSLog(@\"handleRemoteNotification -> playload = %@\", playload);\n\n   [self.class clearAppBadgeAndNotificationCenter];\n   //此处添加payload处理逻辑\n }\n\n + (void)clearAppBadgeAndNotificationCenter\n {\n   // iOS只会在有badge的情况下清除通知中心的消息，因此需要先设置badge为1才能保证用户每次点击都能清楚通知中心的消息\n   [[UIApplication sharedApplication] setApplicationIconBadgeNumber:1];\n   [[UIApplication sharedApplication] setApplicationIconBadgeNumber:0];\n   [[UIApplication sharedApplication] cancelAllLocalNotifications];\n }\n\n #pragma mark - setter/getter\n\n - (NSString *)deviceTokenString\n {\n   if (_deviceTokenString) {\n     return _deviceTokenString;\n   }\n\n   _deviceTokenString = [[NSUserDefaults standardUserDefaults] valueForKey:TKMRemoteNotificationDeviceTokenKey];\n   return _deviceTokenString;\n }\n\n - (void)setDeviceTokenString:(NSString *)deviceTokenString\n {\n   if (_deviceTokenString != deviceTokenString) {\n     _deviceTokenString = deviceTokenString;\n\n     [[NSUserDefaults standardUserDefaults] setObject:_deviceTokenString forKey:TKMRemoteNotificationDeviceTokenKey];\n     [[NSUserDefaults standardUserDefaults] synchronize];\n   }\n }\n\n @end\n\n ```\n\n  4. 模拟后端发送push消息：\n     所用组件库：https://github.com/node-apn/node-apn\n 简易版推送源码如下：\n ```js\n \"use strict\";\n\n /**\n  Send individualised notifications\n  */\n\n const apn = require(\"apn\");\n\n //内容随意定制，可以写多个想要测试的设备device token，device token从(void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken回调函数中获得\n var users = [\n   { content: \"baby\", \"devices\": [\"2c3267a5f1e8d075ecc41d4cfa28b2df9b80a72d870f29d4c714cec0a0c59307\"]}];\n\n\n var service = new apn.Provider({\n   cert: \"cert.pem\", //路径根据文件位置改动\n   key: \"key.pem\", //路径根据文件位置改动\n });\n\n users.forEach( function(user){\n\n   var note = new apn.Notification({\n       alert: users.content, //自己定制，可以写成根据不同user发不同内容\n       payload: {\n           \"liveId\": 5719,\n       }\n   });\n\n   //app id 非常重要，要和应用的保持一致\n   note.topic = \"com.bytedance.kuaima\";\n\n   console.log('Sending:{} to {}',note.compile(),user.devices);\n\n   service.send(note, user.devices).then( function(result) {\n       console.log(\"sent:\", result.sent.length);\n       console.log(\"failed:\", result.failed.length);\n       console.log(result.failed);\n   });\n });\n\n // For one-shot notification tasks you may wish to shutdown the connection\n // after everything is sent, but only call shutdown if you need your\n // application to terminate.\n service.shutdown();\n ```","source":"_posts/ios推送功能添加以及模拟后端自测.md","raw":"---\nlayout: post\ntitle:  ios推送功能添加以及模拟后端自测\ndate:   2017-01-04 08:43:59\nauthor: Lily\ncategories: ios\ntags:\n- push notification\n- apns\n- node-apn\n---\n  1.apns简介：\n     参见：[apns原理](https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/APNSOverview.html#//apple_ref/doc/uid/TP40008194-CH8-SW1)\n  2. 配置证书\n     参见: [ios官网](https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/HandlingRemoteNotifications.html#//apple_ref/doc/uid/TP40008194-CH6-SW1) 和 [这里](https://github.com/node-apn/node-apn/wiki/Preparing-Certificates)\n     将上面生成的两个pem文件 key.pem 和 cert.pem 以及app id 给后端同学即可。\n  3. ios接受处理push逻辑\n\n  TKMPushNotificationCenter.h\n\n\n ```ios\n\n //  TKMPushNotificationCenter.h\n //\n //  Created by 01 on 16/12/17.\n //  Copyright © 2016年 Facebook. All rights reserved.\n //\n\n #import <Foundation/Foundation.h>\n #import <UIKit/UIKit.h>\n /**\n  *  推送相关\n  */\n\n @interface TKMPushNotificationCenter : NSObject\n /**\n  *  Device Token\n  */\n @property (nonatomic, copy, readonly) NSString *deviceTokenString;\n\n\n /**\n  *  推送单例\n  */\n + (instancetype)sharedPushCenter;\n\n /**\n *  是否开启系统的APNs\n */\n + (BOOL)APNsEnabled;\n\n /**\n  *  是否从APNs的通知启动APP\n  */\n + (BOOL)isLaunchFromAPNs;\n\n /**\n  *  注册远程通知<向用户请求，获取推送通知权限>\n  */\n + (void)registerRemoteNotificationAfterDelay:(NSTimeInterval)delay;\n\n /**\n  *  iOS10推送，APP enter foreground\n  */\n + (void)applicationWillEnterForegroundForIOS10Push:(UIApplication *)application;\n\n /**\n  *  当APP处于terminate状态，通过通知启动APP，launchOptions中包含远程通知信息\n  */\n + (void)application:(UIApplication *)application didReceiveRemoteNotificationFromLaunchingWithOptions:(NSDictionary *)launchOptions;\n\n /**\n  *  注册用户通知设置\n  */\n + (void)application:(UIApplication *)application didRegisterUserNotificationSettings:(UIUserNotificationSettings *)notificationSettings;\n\n /**\n  *  注册远程通知成功\n  */\n + (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken;\n\n /**\n  *  注册远程通知失败\n  */\n + (void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error;\n\n /**\n  *  当APP处理background状态时，点击收到的远程通知会调用该方法\n  *  当APP处理foreground状态时，会直接调用该方法\n  */\n + (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo;\n\n /**\n  *  收到本地通知\n  */\n + (void)application:(UIApplication *)application didReceiveLocalNotification:(UILocalNotification *)notification;\n\n @end\n ```\n\n  TKMPushNotificationCenter.m\n\n ```ios\n //\n //  TKMPushNotificationCenter.m\n //  kuaima\n //\n //  Created by 01 on 16/12/17.\n //  Copyright © 2016年 Facebook. All rights reserved.\n //\n\n #import <UserNotifications/UserNotifications.h>\n #import \"TKMPushNotificationCenter.h\"\n #import <TTInfoHelper.h>\n #import <NSObject+TTAdditions.h>\n\n /**\n 注： ttinfohelper是ios组封装的一个查询设备操作系统版本的工具类，此处只用到判断当前系统的方法\n */\n\n\n NSString * const TKMRemoteNotificationDeviceTokenKey = @\"toutiao.kuaima.push_notification.device_token\";\n\n /**\n  *  推送通知block\n  */\n typedef void(^TEUPushNotificationCompletionBlock) (void);\n\n @interface TKMPushNotificationCenter () <Singleton,UNUserNotificationCenterDelegate>\n /**\n  *  标记是否从通知栏启动APP\n  */\n @property (nonatomic, assign) BOOL launchFromAPNs;\n\n @property (nonatomic, strong) NSDictionary *launchOptions;\n\n @property (nonatomic,   copy) TEUPushNotificationCompletionBlock completionBlock;\n /**\n  *  Push Notification device token\n  */\n @property (nonatomic, copy, readwrite) NSString *deviceTokenString;\n @end\n @implementation TKMPushNotificationCenter\n @synthesize deviceTokenString = _deviceTokenString;\n\n + (instancetype)sharedPushCenter\n {\n   return [self sharedInstance_tt];\n }\n\n - (instancetype)init\n {\n   if ((self = [super init])) {\n     _launchFromAPNs = NO;\n       }\n   return self;\n }\n\n - (void)dealloc\n {\n   _launchFromAPNs = NO;\n   _launchOptions  = nil;\n   [[NSNotificationCenter defaultCenter] removeObserver:self];\n }\n\n - (void)handleDidEyeuLogin:(NSNotification *)notification\n {\n   [self registerRemoteNotificationAfterDelay:2.f];\n }\n\n\n + (BOOL)isLaunchFromAPNs\n {\n   return [[TKMPushNotificationCenter sharedPushCenter] launchFromAPNs];\n }\n\n #pragma mark - handle remote notification\n\n + (void)application:(UIApplication *)application didReceiveRemoteNotificationFromLaunchingWithOptions:(NSDictionary *)launchOptions\n {\n   [[self sharedPushCenter] application:application didReceiveRemoteNotificationFromLaunchingWithOptions:launchOptions];\n }\n\n - (void)application:(UIApplication *)application didReceiveRemoteNotificationFromLaunchingWithOptions:(NSDictionary *)launchOptions\n {\n   // 注册远程通知\n   [self registerRemoteNotificationAfterDelay:0.f];\n\n\n   // 处理从通知栏点击通知启动App的情况【iOS10之后会调用[userNotificationCenter:didReceiveNotificationResponse]】\n   BOOL isFromAPNs = [launchOptions objectForKey:UIApplicationLaunchOptionsRemoteNotificationKey] != nil;\n   [TKMPushNotificationCenter sharedPushCenter].launchFromAPNs = YES;\n   [TKMPushNotificationCenter sharedPushCenter].launchOptions = [launchOptions copy];\n\n   if ([TTInfoHelper OSVersionNumber] < 10.0 && isFromAPNs) {\n     // apns should be handled after mainViewController is load completely\n     NSDictionary *payload = [launchOptions objectForKey:UIApplicationLaunchOptionsRemoteNotificationKey];\n     [[TKMPushNotificationCenter sharedPushCenter] handleRemoteNotification:payload delay:1.f];\n   }\n }\n\n + (void)application:(UIApplication *)application didRegisterUserNotificationSettings:(UIUserNotificationSettings *)notificationSettings\n {\n   [[self sharedPushCenter] application:application didRegisterUserNotificationSettings:notificationSettings];\n }\n\n + (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken\n {\n   [[self sharedPushCenter] application:application didRegisterForRemoteNotificationsWithDeviceToken:deviceToken];\n }\n\n + (void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error\n {\n   [[self sharedPushCenter] application:application didFailToRegisterForRemoteNotificationsWithError:error];\n }\n\n + (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo\n {\n   [[self sharedPushCenter] application:application didReceiveRemoteNotification:userInfo];\n }\n\n + (void)application:(UIApplication *)application didReceiveLocalNotification:(UILocalNotification *)notification\n {\n   [[self sharedPushCenter] application:application didReceiveLocalNotification:notification];\n }\n\n - (void)application:(UIApplication *)application didRegisterUserNotificationSettings:(UIUserNotificationSettings *)notificationSettings\n {\n   if (notificationSettings.types != UIUserNotificationTypeNone) {\n     [application registerForRemoteNotifications];\n   }\n }\n\n - (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken\n {\n   self.deviceTokenString = [[[[deviceToken description]\n                               stringByReplacingOccurrencesOfString: @\"<\" withString: @\"\"]\n                              stringByReplacingOccurrencesOfString: @\">\" withString: @\"\"]\n                             stringByReplacingOccurrencesOfString: @\" \" withString: @\"\"];\n   NSLog(@\">>>>> Success: device token: %@\", self.deviceTokenString);\n }\n\n - (void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error\n {\n   NSLog(@\">>>>> Failed: registerRemoteNotificiation: %@\", error);\n }\n\n - (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo\n {\n   NSLog(@\">>>>> Launch: receiveRemoteNotification: %@\",userInfo);\n\n   application.applicationIconBadgeNumber = [[userInfo objectForKey:@\"badge\"] integerValue];\n   if ([[UIApplication sharedApplication] applicationState] != UIApplicationStateActive) {\n     [self handleRemoteNotification:userInfo];\n   } else {\n     if ([[userInfo objectForKey:@\"importance\"] isEqualToString:@\"important\"]) {\n\n     }\n   }\n }\n\n #pragma mark - iOS10 UNNotificationCenterDelegate\n\n + (void)applicationWillEnterForegroundForIOS10Push:(UIApplication *)application\n {\n   if ([TTInfoHelper OSVersionNumber] >= 10.0) {\n     dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n\n     });\n   }\n }\n\n - (void)userNotificationCenter:(UNUserNotificationCenter *)center willPresentNotification:(UNNotification *)notification withCompletionHandler:(void (^)(UNNotificationPresentationOptions options))completionHandler\n {\n   NSDictionary *payload __unused = notification.request.content.userInfo;\n   UNNotificationRequest *request = notification.request; // 收到推送的请求\n   UNNotificationContent *content = request.content; // 收到推送的消息内容\n   NSNumber *badge __unused = content.badge;  // 推送消息的角标\n   NSString *body  __unused= content.body;    // 推送消息体\n   UNNotificationSound *sound __unused= content.sound;  // 推送消息的声音\n   NSString *subtitle __unused = content.subtitle;  // 推送消息的副标题\n   NSString *title __unused = content.title;  // 推送消息的标题\n\n   if([request.trigger isKindOfClass:[UNPushNotificationTrigger class]]) {\n\n   }\n   else {\n     // 判断为本地通知\n\n   }\n\n   // 需要执行这个方法，选择是否提醒用户，有Badge、Sound、Alert三种类型可以设置\n   completionHandler(UNNotificationPresentationOptionBadge | UNNotificationPresentationOptionSound | UNNotificationPresentationOptionAlert);\n }\n\n - (void)userNotificationCenter:(UNUserNotificationCenter *)center didReceiveNotificationResponse:(UNNotificationResponse *)response withCompletionHandler:(void (^)())completionHandler\n {\n   NSDictionary *payload = response.notification.request.content.userInfo;\n   UNNotificationRequest *request = response.notification.request; // 收到推送的请求\n\n   NSLog(@\">>>>>iOS10: UNNotificationResponse: %@, payload: %@\", response, payload);\n\n   if ([request.trigger isKindOfClass:[UNPushNotificationTrigger class]]) {\n     // 远程通知\n     if ([self.launchOptions objectForKey:UIApplicationLaunchOptionsRemoteNotificationKey]) {\n       self.launchOptions = nil;\n       [self handleRemoteNotification:payload delay:1.f];\n     } else {\n       [self handleRemoteNotification:payload];\n     }\n   }\n\n\n   if ([response.actionIdentifier isEqualToString:UNNotificationDefaultActionIdentifier]) {\n\n   }\n   else if ([response.actionIdentifier isEqualToString:UNNotificationDismissActionIdentifier]) {\n\n   }\n   else {\n\n   }\n\n   completionHandler();\n }\n\n\n #pragma mark - register remote notification\n /**\n  *  注册远程通知<向用户请求，获取推送通知权限>\n  */\n + (void)registerRemoteNotificationAfterDelay:(NSTimeInterval)delay\n {\n   [[self sharedPushCenter] registerRemoteNotificationAfterDelay:delay];\n }\n\n - (void)registerRemoteNotificationAfterDelay:(NSTimeInterval)delay\n {\n   void (^TEURegisterRemoteNotificationBlock)() = ^() {\n     if ([TTInfoHelper OSVersionNumber] >= 10.0) {\n       UNUserNotificationCenter *userNotificationCenter = [UNUserNotificationCenter currentNotificationCenter];\n       userNotificationCenter.delegate = self;\n       [userNotificationCenter requestAuthorizationWithOptions:UNAuthorizationOptionAlert | UNAuthorizationOptionBadge | UNAuthorizationOptionSound completionHandler:^(BOOL granted, NSError * _Nullable error) {\n         if (granted) {\n           NSLog(@\"iOS10 > 注册通知成功\");\n           // initiate to get device token from APNs\n           [[UIApplication sharedApplication] registerForRemoteNotifications];\n         } else {\n           NSLog(@\"iOS10 > 注册通知失败\");\n         }\n       }];\n     }\n     else if ([TTInfoHelper OSVersionNumber] >= 8.0) {\n #pragma clang diagnostic push\n #pragma clang diagnostic ignored \"-Wdeprecated-declarations\"\n       UIUserNotificationSettings *settings = [UIUserNotificationSettings settingsForTypes:(UIRemoteNotificationTypeBadge | UIRemoteNotificationTypeSound | UIRemoteNotificationTypeAlert) categories:nil];\n       [[UIApplication sharedApplication] registerUserNotificationSettings:settings];\n #pragma clang diagnostic pop\n     }\n     else {\n #pragma clang diagnostic push\n #pragma clang diagnostic ignored \"-Wdeprecated-declarations\"\n       [[UIApplication sharedApplication] registerForRemoteNotificationTypes:(UIRemoteNotificationTypeBadge | UIRemoteNotificationTypeAlert | UIRemoteNotificationTypeSound)];\n #pragma clang diagnostic pop\n     }\n   };\n\n   if(delay > 0) {\n     dispatch_after(dispatch_time(DISPATCH_TIME_NOW, delay * NSEC_PER_SEC), dispatch_get_main_queue(), ^(void){\n       TEURegisterRemoteNotificationBlock();\n     });\n   } else {\n     TEURegisterRemoteNotificationBlock();\n   }\n }\n\n #pragma mark - handle when receiving remote push\n\n\n - (void)handleRemoteNotification:(NSDictionary *)playload delay:(NSTimeInterval)delay\n {\n   if (delay > 0) {\n     dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delay * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{\n       [self handleRemoteNotification:playload];\n     });\n   } else {\n     [self handleRemoteNotification:playload];\n   }\n }\n\n - (void)handleRemoteNotification:(NSDictionary *)playload\n {\n   NSLog(@\"handleRemoteNotification -> playload = %@\", playload);\n\n   [self.class clearAppBadgeAndNotificationCenter];\n   //此处添加payload处理逻辑\n }\n\n + (void)clearAppBadgeAndNotificationCenter\n {\n   // iOS只会在有badge的情况下清除通知中心的消息，因此需要先设置badge为1才能保证用户每次点击都能清楚通知中心的消息\n   [[UIApplication sharedApplication] setApplicationIconBadgeNumber:1];\n   [[UIApplication sharedApplication] setApplicationIconBadgeNumber:0];\n   [[UIApplication sharedApplication] cancelAllLocalNotifications];\n }\n\n #pragma mark - setter/getter\n\n - (NSString *)deviceTokenString\n {\n   if (_deviceTokenString) {\n     return _deviceTokenString;\n   }\n\n   _deviceTokenString = [[NSUserDefaults standardUserDefaults] valueForKey:TKMRemoteNotificationDeviceTokenKey];\n   return _deviceTokenString;\n }\n\n - (void)setDeviceTokenString:(NSString *)deviceTokenString\n {\n   if (_deviceTokenString != deviceTokenString) {\n     _deviceTokenString = deviceTokenString;\n\n     [[NSUserDefaults standardUserDefaults] setObject:_deviceTokenString forKey:TKMRemoteNotificationDeviceTokenKey];\n     [[NSUserDefaults standardUserDefaults] synchronize];\n   }\n }\n\n @end\n\n ```\n\n  4. 模拟后端发送push消息：\n     所用组件库：https://github.com/node-apn/node-apn\n 简易版推送源码如下：\n ```js\n \"use strict\";\n\n /**\n  Send individualised notifications\n  */\n\n const apn = require(\"apn\");\n\n //内容随意定制，可以写多个想要测试的设备device token，device token从(void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken回调函数中获得\n var users = [\n   { content: \"baby\", \"devices\": [\"2c3267a5f1e8d075ecc41d4cfa28b2df9b80a72d870f29d4c714cec0a0c59307\"]}];\n\n\n var service = new apn.Provider({\n   cert: \"cert.pem\", //路径根据文件位置改动\n   key: \"key.pem\", //路径根据文件位置改动\n });\n\n users.forEach( function(user){\n\n   var note = new apn.Notification({\n       alert: users.content, //自己定制，可以写成根据不同user发不同内容\n       payload: {\n           \"liveId\": 5719,\n       }\n   });\n\n   //app id 非常重要，要和应用的保持一致\n   note.topic = \"com.bytedance.kuaima\";\n\n   console.log('Sending:{} to {}',note.compile(),user.devices);\n\n   service.send(note, user.devices).then( function(result) {\n       console.log(\"sent:\", result.sent.length);\n       console.log(\"failed:\", result.failed.length);\n       console.log(result.failed);\n   });\n });\n\n // For one-shot notification tasks you may wish to shutdown the connection\n // after everything is sent, but only call shutdown if you need your\n // application to terminate.\n service.shutdown();\n ```","slug":"ios推送功能添加以及模拟后端自测","published":1,"updated":"2017-02-13T12:07:50.000Z","comments":1,"photos":[],"link":"","_id":"cizknqup5000195c4ik3l0rez","content":"<p>  1.apns简介：<br>     参见：<a href=\"https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/APNSOverview.html#//apple_ref/doc/uid/TP40008194-CH8-SW1\" target=\"_blank\" rel=\"external\">apns原理</a></p>\n<ol>\n<li>配置证书<br>参见: <a href=\"https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/HandlingRemoteNotifications.html#//apple_ref/doc/uid/TP40008194-CH6-SW1\" target=\"_blank\" rel=\"external\">ios官网</a> 和 <a href=\"https://github.com/node-apn/node-apn/wiki/Preparing-Certificates\" target=\"_blank\" rel=\"external\">这里</a><br>将上面生成的两个pem文件 key.pem 和 cert.pem 以及app id 给后端同学即可。</li>\n<li><p>ios接受处理push逻辑</p>\n<p>TKMPushNotificationCenter.h</p>\n</li>\n</ol>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">//  TKMPushNotificationCenter.h</div><div class=\"line\">//</div><div class=\"line\">//  Created by 01 on 16/12/17.</div><div class=\"line\">//  Copyright © 2016年 Facebook. All rights reserved.</div><div class=\"line\">//</div><div class=\"line\"></div><div class=\"line\">#import &lt;Foundation/Foundation.h&gt;</div><div class=\"line\">#import &lt;UIKit/UIKit.h&gt;</div><div class=\"line\">/**</div><div class=\"line\"> *  推送相关</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\">@interface TKMPushNotificationCenter : NSObject</div><div class=\"line\">/**</div><div class=\"line\"> *  Device Token</div><div class=\"line\"> */</div><div class=\"line\">@property (nonatomic, copy, readonly) NSString *deviceTokenString;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> *  推送单例</div><div class=\"line\"> */</div><div class=\"line\">+ (instancetype)sharedPushCenter;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\">*  是否开启系统的APNs</div><div class=\"line\">*/</div><div class=\"line\">+ (BOOL)APNsEnabled;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> *  是否从APNs的通知启动APP</div><div class=\"line\"> */</div><div class=\"line\">+ (BOOL)isLaunchFromAPNs;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> *  注册远程通知&lt;向用户请求，获取推送通知权限&gt;</div><div class=\"line\"> */</div><div class=\"line\">+ (void)registerRemoteNotificationAfterDelay:(NSTimeInterval)delay;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> *  iOS10推送，APP enter foreground</div><div class=\"line\"> */</div><div class=\"line\">+ (void)applicationWillEnterForegroundForIOS10Push:(UIApplication *)application;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> *  当APP处于terminate状态，通过通知启动APP，launchOptions中包含远程通知信息</div><div class=\"line\"> */</div><div class=\"line\">+ (void)application:(UIApplication *)application didReceiveRemoteNotificationFromLaunchingWithOptions:(NSDictionary *)launchOptions;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> *  注册用户通知设置</div><div class=\"line\"> */</div><div class=\"line\">+ (void)application:(UIApplication *)application didRegisterUserNotificationSettings:(UIUserNotificationSettings *)notificationSettings;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> *  注册远程通知成功</div><div class=\"line\"> */</div><div class=\"line\">+ (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> *  注册远程通知失败</div><div class=\"line\"> */</div><div class=\"line\">+ (void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> *  当APP处理background状态时，点击收到的远程通知会调用该方法</div><div class=\"line\"> *  当APP处理foreground状态时，会直接调用该方法</div><div class=\"line\"> */</div><div class=\"line\">+ (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> *  收到本地通知</div><div class=\"line\"> */</div><div class=\"line\">+ (void)application:(UIApplication *)application didReceiveLocalNotification:(UILocalNotification *)notification;</div><div class=\"line\"></div><div class=\"line\">@end</div></pre></td></tr></table></figure>\n<p>  TKMPushNotificationCenter.m</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div><div class=\"line\">316</div><div class=\"line\">317</div><div class=\"line\">318</div><div class=\"line\">319</div><div class=\"line\">320</div><div class=\"line\">321</div><div class=\"line\">322</div><div class=\"line\">323</div><div class=\"line\">324</div><div class=\"line\">325</div><div class=\"line\">326</div></pre></td><td class=\"code\"><pre><div class=\"line\">//</div><div class=\"line\">//  TKMPushNotificationCenter.m</div><div class=\"line\">//  kuaima</div><div class=\"line\">//</div><div class=\"line\">//  Created by 01 on 16/12/17.</div><div class=\"line\">//  Copyright © 2016年 Facebook. All rights reserved.</div><div class=\"line\">//</div><div class=\"line\"></div><div class=\"line\">#import &lt;UserNotifications/UserNotifications.h&gt;</div><div class=\"line\">#import &quot;TKMPushNotificationCenter.h&quot;</div><div class=\"line\">#import &lt;TTInfoHelper.h&gt;</div><div class=\"line\">#import &lt;NSObject+TTAdditions.h&gt;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\">注： ttinfohelper是ios组封装的一个查询设备操作系统版本的工具类，此处只用到判断当前系统的方法</div><div class=\"line\">*/</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">NSString * const TKMRemoteNotificationDeviceTokenKey = @&quot;toutiao.kuaima.push_notification.device_token&quot;;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> *  推送通知block</div><div class=\"line\"> */</div><div class=\"line\">typedef void(^TEUPushNotificationCompletionBlock) (void);</div><div class=\"line\"></div><div class=\"line\">@interface TKMPushNotificationCenter () &lt;Singleton,UNUserNotificationCenterDelegate&gt;</div><div class=\"line\">/**</div><div class=\"line\"> *  标记是否从通知栏启动APP</div><div class=\"line\"> */</div><div class=\"line\">@property (nonatomic, assign) BOOL launchFromAPNs;</div><div class=\"line\"></div><div class=\"line\">@property (nonatomic, strong) NSDictionary *launchOptions;</div><div class=\"line\"></div><div class=\"line\">@property (nonatomic,   copy) TEUPushNotificationCompletionBlock completionBlock;</div><div class=\"line\">/**</div><div class=\"line\"> *  Push Notification device token</div><div class=\"line\"> */</div><div class=\"line\">@property (nonatomic, copy, readwrite) NSString *deviceTokenString;</div><div class=\"line\">@end</div><div class=\"line\">@implementation TKMPushNotificationCenter</div><div class=\"line\">@synthesize deviceTokenString = _deviceTokenString;</div><div class=\"line\"></div><div class=\"line\">+ (instancetype)sharedPushCenter</div><div class=\"line\">&#123;</div><div class=\"line\">  return [self sharedInstance_tt];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (instancetype)init</div><div class=\"line\">&#123;</div><div class=\"line\">  if ((self = [super init])) &#123;</div><div class=\"line\">    _launchFromAPNs = NO;</div><div class=\"line\">      &#125;</div><div class=\"line\">  return self;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)dealloc</div><div class=\"line\">&#123;</div><div class=\"line\">  _launchFromAPNs = NO;</div><div class=\"line\">  _launchOptions  = nil;</div><div class=\"line\">  [[NSNotificationCenter defaultCenter] removeObserver:self];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)handleDidEyeuLogin:(NSNotification *)notification</div><div class=\"line\">&#123;</div><div class=\"line\">  [self registerRemoteNotificationAfterDelay:2.f];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">+ (BOOL)isLaunchFromAPNs</div><div class=\"line\">&#123;</div><div class=\"line\">  return [[TKMPushNotificationCenter sharedPushCenter] launchFromAPNs];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">#pragma mark - handle remote notification</div><div class=\"line\"></div><div class=\"line\">+ (void)application:(UIApplication *)application didReceiveRemoteNotificationFromLaunchingWithOptions:(NSDictionary *)launchOptions</div><div class=\"line\">&#123;</div><div class=\"line\">  [[self sharedPushCenter] application:application didReceiveRemoteNotificationFromLaunchingWithOptions:launchOptions];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)application:(UIApplication *)application didReceiveRemoteNotificationFromLaunchingWithOptions:(NSDictionary *)launchOptions</div><div class=\"line\">&#123;</div><div class=\"line\">  // 注册远程通知</div><div class=\"line\">  [self registerRemoteNotificationAfterDelay:0.f];</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  // 处理从通知栏点击通知启动App的情况【iOS10之后会调用[userNotificationCenter:didReceiveNotificationResponse]】</div><div class=\"line\">  BOOL isFromAPNs = [launchOptions objectForKey:UIApplicationLaunchOptionsRemoteNotificationKey] != nil;</div><div class=\"line\">  [TKMPushNotificationCenter sharedPushCenter].launchFromAPNs = YES;</div><div class=\"line\">  [TKMPushNotificationCenter sharedPushCenter].launchOptions = [launchOptions copy];</div><div class=\"line\"></div><div class=\"line\">  if ([TTInfoHelper OSVersionNumber] &lt; 10.0 &amp;&amp; isFromAPNs) &#123;</div><div class=\"line\">    // apns should be handled after mainViewController is load completely</div><div class=\"line\">    NSDictionary *payload = [launchOptions objectForKey:UIApplicationLaunchOptionsRemoteNotificationKey];</div><div class=\"line\">    [[TKMPushNotificationCenter sharedPushCenter] handleRemoteNotification:payload delay:1.f];</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">+ (void)application:(UIApplication *)application didRegisterUserNotificationSettings:(UIUserNotificationSettings *)notificationSettings</div><div class=\"line\">&#123;</div><div class=\"line\">  [[self sharedPushCenter] application:application didRegisterUserNotificationSettings:notificationSettings];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">+ (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken</div><div class=\"line\">&#123;</div><div class=\"line\">  [[self sharedPushCenter] application:application didRegisterForRemoteNotificationsWithDeviceToken:deviceToken];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">+ (void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error</div><div class=\"line\">&#123;</div><div class=\"line\">  [[self sharedPushCenter] application:application didFailToRegisterForRemoteNotificationsWithError:error];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">+ (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo</div><div class=\"line\">&#123;</div><div class=\"line\">  [[self sharedPushCenter] application:application didReceiveRemoteNotification:userInfo];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">+ (void)application:(UIApplication *)application didReceiveLocalNotification:(UILocalNotification *)notification</div><div class=\"line\">&#123;</div><div class=\"line\">  [[self sharedPushCenter] application:application didReceiveLocalNotification:notification];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)application:(UIApplication *)application didRegisterUserNotificationSettings:(UIUserNotificationSettings *)notificationSettings</div><div class=\"line\">&#123;</div><div class=\"line\">  if (notificationSettings.types != UIUserNotificationTypeNone) &#123;</div><div class=\"line\">    [application registerForRemoteNotifications];</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken</div><div class=\"line\">&#123;</div><div class=\"line\">  self.deviceTokenString = [[[[deviceToken description]</div><div class=\"line\">                              stringByReplacingOccurrencesOfString: @&quot;&lt;&quot; withString: @&quot;&quot;]</div><div class=\"line\">                             stringByReplacingOccurrencesOfString: @&quot;&gt;&quot; withString: @&quot;&quot;]</div><div class=\"line\">                            stringByReplacingOccurrencesOfString: @&quot; &quot; withString: @&quot;&quot;];</div><div class=\"line\">  NSLog(@&quot;&gt;&gt;&gt;&gt;&gt; Success: device token: %@&quot;, self.deviceTokenString);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error</div><div class=\"line\">&#123;</div><div class=\"line\">  NSLog(@&quot;&gt;&gt;&gt;&gt;&gt; Failed: registerRemoteNotificiation: %@&quot;, error);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo</div><div class=\"line\">&#123;</div><div class=\"line\">  NSLog(@&quot;&gt;&gt;&gt;&gt;&gt; Launch: receiveRemoteNotification: %@&quot;,userInfo);</div><div class=\"line\"></div><div class=\"line\">  application.applicationIconBadgeNumber = [[userInfo objectForKey:@&quot;badge&quot;] integerValue];</div><div class=\"line\">  if ([[UIApplication sharedApplication] applicationState] != UIApplicationStateActive) &#123;</div><div class=\"line\">    [self handleRemoteNotification:userInfo];</div><div class=\"line\">  &#125; else &#123;</div><div class=\"line\">    if ([[userInfo objectForKey:@&quot;importance&quot;] isEqualToString:@&quot;important&quot;]) &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">#pragma mark - iOS10 UNNotificationCenterDelegate</div><div class=\"line\"></div><div class=\"line\">+ (void)applicationWillEnterForegroundForIOS10Push:(UIApplication *)application</div><div class=\"line\">&#123;</div><div class=\"line\">  if ([TTInfoHelper OSVersionNumber] &gt;= 10.0) &#123;</div><div class=\"line\">    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)userNotificationCenter:(UNUserNotificationCenter *)center willPresentNotification:(UNNotification *)notification withCompletionHandler:(void (^)(UNNotificationPresentationOptions options))completionHandler</div><div class=\"line\">&#123;</div><div class=\"line\">  NSDictionary *payload __unused = notification.request.content.userInfo;</div><div class=\"line\">  UNNotificationRequest *request = notification.request; // 收到推送的请求</div><div class=\"line\">  UNNotificationContent *content = request.content; // 收到推送的消息内容</div><div class=\"line\">  NSNumber *badge __unused = content.badge;  // 推送消息的角标</div><div class=\"line\">  NSString *body  __unused= content.body;    // 推送消息体</div><div class=\"line\">  UNNotificationSound *sound __unused= content.sound;  // 推送消息的声音</div><div class=\"line\">  NSString *subtitle __unused = content.subtitle;  // 推送消息的副标题</div><div class=\"line\">  NSString *title __unused = content.title;  // 推送消息的标题</div><div class=\"line\"></div><div class=\"line\">  if([request.trigger isKindOfClass:[UNPushNotificationTrigger class]]) &#123;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">  else &#123;</div><div class=\"line\">    // 判断为本地通知</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  // 需要执行这个方法，选择是否提醒用户，有Badge、Sound、Alert三种类型可以设置</div><div class=\"line\">  completionHandler(UNNotificationPresentationOptionBadge | UNNotificationPresentationOptionSound | UNNotificationPresentationOptionAlert);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)userNotificationCenter:(UNUserNotificationCenter *)center didReceiveNotificationResponse:(UNNotificationResponse *)response withCompletionHandler:(void (^)())completionHandler</div><div class=\"line\">&#123;</div><div class=\"line\">  NSDictionary *payload = response.notification.request.content.userInfo;</div><div class=\"line\">  UNNotificationRequest *request = response.notification.request; // 收到推送的请求</div><div class=\"line\"></div><div class=\"line\">  NSLog(@&quot;&gt;&gt;&gt;&gt;&gt;iOS10: UNNotificationResponse: %@, payload: %@&quot;, response, payload);</div><div class=\"line\"></div><div class=\"line\">  if ([request.trigger isKindOfClass:[UNPushNotificationTrigger class]]) &#123;</div><div class=\"line\">    // 远程通知</div><div class=\"line\">    if ([self.launchOptions objectForKey:UIApplicationLaunchOptionsRemoteNotificationKey]) &#123;</div><div class=\"line\">      self.launchOptions = nil;</div><div class=\"line\">      [self handleRemoteNotification:payload delay:1.f];</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">      [self handleRemoteNotification:payload];</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  if ([response.actionIdentifier isEqualToString:UNNotificationDefaultActionIdentifier]) &#123;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">  else if ([response.actionIdentifier isEqualToString:UNNotificationDismissActionIdentifier]) &#123;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">  else &#123;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  completionHandler();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">#pragma mark - register remote notification</div><div class=\"line\">/**</div><div class=\"line\"> *  注册远程通知&lt;向用户请求，获取推送通知权限&gt;</div><div class=\"line\"> */</div><div class=\"line\">+ (void)registerRemoteNotificationAfterDelay:(NSTimeInterval)delay</div><div class=\"line\">&#123;</div><div class=\"line\">  [[self sharedPushCenter] registerRemoteNotificationAfterDelay:delay];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)registerRemoteNotificationAfterDelay:(NSTimeInterval)delay</div><div class=\"line\">&#123;</div><div class=\"line\">  void (^TEURegisterRemoteNotificationBlock)() = ^() &#123;</div><div class=\"line\">    if ([TTInfoHelper OSVersionNumber] &gt;= 10.0) &#123;</div><div class=\"line\">      UNUserNotificationCenter *userNotificationCenter = [UNUserNotificationCenter currentNotificationCenter];</div><div class=\"line\">      userNotificationCenter.delegate = self;</div><div class=\"line\">      [userNotificationCenter requestAuthorizationWithOptions:UNAuthorizationOptionAlert | UNAuthorizationOptionBadge | UNAuthorizationOptionSound completionHandler:^(BOOL granted, NSError * _Nullable error) &#123;</div><div class=\"line\">        if (granted) &#123;</div><div class=\"line\">          NSLog(@&quot;iOS10 &gt; 注册通知成功&quot;);</div><div class=\"line\">          // initiate to get device token from APNs</div><div class=\"line\">          [[UIApplication sharedApplication] registerForRemoteNotifications];</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">          NSLog(@&quot;iOS10 &gt; 注册通知失败&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;];</div><div class=\"line\">    &#125;</div><div class=\"line\">    else if ([TTInfoHelper OSVersionNumber] &gt;= 8.0) &#123;</div><div class=\"line\">#pragma clang diagnostic push</div><div class=\"line\">#pragma clang diagnostic ignored &quot;-Wdeprecated-declarations&quot;</div><div class=\"line\">      UIUserNotificationSettings *settings = [UIUserNotificationSettings settingsForTypes:(UIRemoteNotificationTypeBadge | UIRemoteNotificationTypeSound | UIRemoteNotificationTypeAlert) categories:nil];</div><div class=\"line\">      [[UIApplication sharedApplication] registerUserNotificationSettings:settings];</div><div class=\"line\">#pragma clang diagnostic pop</div><div class=\"line\">    &#125;</div><div class=\"line\">    else &#123;</div><div class=\"line\">#pragma clang diagnostic push</div><div class=\"line\">#pragma clang diagnostic ignored &quot;-Wdeprecated-declarations&quot;</div><div class=\"line\">      [[UIApplication sharedApplication] registerForRemoteNotificationTypes:(UIRemoteNotificationTypeBadge | UIRemoteNotificationTypeAlert | UIRemoteNotificationTypeSound)];</div><div class=\"line\">#pragma clang diagnostic pop</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  if(delay &gt; 0) &#123;</div><div class=\"line\">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, delay * NSEC_PER_SEC), dispatch_get_main_queue(), ^(void)&#123;</div><div class=\"line\">      TEURegisterRemoteNotificationBlock();</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125; else &#123;</div><div class=\"line\">    TEURegisterRemoteNotificationBlock();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">#pragma mark - handle when receiving remote push</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">- (void)handleRemoteNotification:(NSDictionary *)playload delay:(NSTimeInterval)delay</div><div class=\"line\">&#123;</div><div class=\"line\">  if (delay &gt; 0) &#123;</div><div class=\"line\">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delay * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">      [self handleRemoteNotification:playload];</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125; else &#123;</div><div class=\"line\">    [self handleRemoteNotification:playload];</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)handleRemoteNotification:(NSDictionary *)playload</div><div class=\"line\">&#123;</div><div class=\"line\">  NSLog(@&quot;handleRemoteNotification -&gt; playload = %@&quot;, playload);</div><div class=\"line\"></div><div class=\"line\">  [self.class clearAppBadgeAndNotificationCenter];</div><div class=\"line\">  //此处添加payload处理逻辑</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">+ (void)clearAppBadgeAndNotificationCenter</div><div class=\"line\">&#123;</div><div class=\"line\">  // iOS只会在有badge的情况下清除通知中心的消息，因此需要先设置badge为1才能保证用户每次点击都能清楚通知中心的消息</div><div class=\"line\">  [[UIApplication sharedApplication] setApplicationIconBadgeNumber:1];</div><div class=\"line\">  [[UIApplication sharedApplication] setApplicationIconBadgeNumber:0];</div><div class=\"line\">  [[UIApplication sharedApplication] cancelAllLocalNotifications];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">#pragma mark - setter/getter</div><div class=\"line\"></div><div class=\"line\">- (NSString *)deviceTokenString</div><div class=\"line\">&#123;</div><div class=\"line\">  if (_deviceTokenString) &#123;</div><div class=\"line\">    return _deviceTokenString;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  _deviceTokenString = [[NSUserDefaults standardUserDefaults] valueForKey:TKMRemoteNotificationDeviceTokenKey];</div><div class=\"line\">  return _deviceTokenString;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)setDeviceTokenString:(NSString *)deviceTokenString</div><div class=\"line\">&#123;</div><div class=\"line\">  if (_deviceTokenString != deviceTokenString) &#123;</div><div class=\"line\">    _deviceTokenString = deviceTokenString;</div><div class=\"line\"></div><div class=\"line\">    [[NSUserDefaults standardUserDefaults] setObject:_deviceTokenString forKey:TKMRemoteNotificationDeviceTokenKey];</div><div class=\"line\">    [[NSUserDefaults standardUserDefaults] synchronize];</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@end</div></pre></td></tr></table></figure>\n<ol>\n<li>模拟后端发送push消息：<br>所用组件库：<a href=\"https://github.com/node-apn/node-apn\" target=\"_blank\" rel=\"external\">https://github.com/node-apn/node-apn</a><br>简易版推送源码如下：<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">\"use strict\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> Send individualised notifications</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> apn = <span class=\"built_in\">require</span>(<span class=\"string\">\"apn\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//内容随意定制，可以写多个想要测试的设备device token，device token从(void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken回调函数中获得</span></div><div class=\"line\"><span class=\"keyword\">var</span> users = [</div><div class=\"line\">  &#123; <span class=\"attr\">content</span>: <span class=\"string\">\"baby\"</span>, <span class=\"string\">\"devices\"</span>: [<span class=\"string\">\"2c3267a5f1e8d075ecc41d4cfa28b2df9b80a72d870f29d4c714cec0a0c59307\"</span>]&#125;];</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> service = <span class=\"keyword\">new</span> apn.Provider(&#123;</div><div class=\"line\">  <span class=\"attr\">cert</span>: <span class=\"string\">\"cert.pem\"</span>, <span class=\"comment\">//路径根据文件位置改动</span></div><div class=\"line\">  key: <span class=\"string\">\"key.pem\"</span>, <span class=\"comment\">//路径根据文件位置改动</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">users.forEach( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">user</span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> note = <span class=\"keyword\">new</span> apn.Notification(&#123;</div><div class=\"line\">      <span class=\"attr\">alert</span>: users.content, <span class=\"comment\">//自己定制，可以写成根据不同user发不同内容</span></div><div class=\"line\">      payload: &#123;</div><div class=\"line\">          <span class=\"string\">\"liveId\"</span>: <span class=\"number\">5719</span>,</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//app id 非常重要，要和应用的保持一致</span></div><div class=\"line\">  note.topic = <span class=\"string\">\"com.bytedance.kuaima\"</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Sending:&#123;&#125; to &#123;&#125;'</span>,note.compile(),user.devices);</div><div class=\"line\"></div><div class=\"line\">  service.send(note, user.devices).then( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"sent:\"</span>, result.sent.length);</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"failed:\"</span>, result.failed.length);</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(result.failed);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// For one-shot notification tasks you may wish to shutdown the connection</span></div><div class=\"line\"><span class=\"comment\">// after everything is sent, but only call shutdown if you need your</span></div><div class=\"line\"><span class=\"comment\">// application to terminate.</span></div><div class=\"line\">service.shutdown();</div></pre></td></tr></table></figure></li>\n</ol>\n","excerpt":"","more":"<p>  1.apns简介：<br>     参见：<a href=\"https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/APNSOverview.html#//apple_ref/doc/uid/TP40008194-CH8-SW1\">apns原理</a></p>\n<ol>\n<li>配置证书<br>参见: <a href=\"https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/HandlingRemoteNotifications.html#//apple_ref/doc/uid/TP40008194-CH6-SW1\">ios官网</a> 和 <a href=\"https://github.com/node-apn/node-apn/wiki/Preparing-Certificates\">这里</a><br>将上面生成的两个pem文件 key.pem 和 cert.pem 以及app id 给后端同学即可。</li>\n<li><p>ios接受处理push逻辑</p>\n<p>TKMPushNotificationCenter.h</p>\n</li>\n</ol>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">//  TKMPushNotificationCenter.h</div><div class=\"line\">//</div><div class=\"line\">//  Created by 01 on 16/12/17.</div><div class=\"line\">//  Copyright © 2016年 Facebook. All rights reserved.</div><div class=\"line\">//</div><div class=\"line\"></div><div class=\"line\">#import &lt;Foundation/Foundation.h&gt;</div><div class=\"line\">#import &lt;UIKit/UIKit.h&gt;</div><div class=\"line\">/**</div><div class=\"line\"> *  推送相关</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\">@interface TKMPushNotificationCenter : NSObject</div><div class=\"line\">/**</div><div class=\"line\"> *  Device Token</div><div class=\"line\"> */</div><div class=\"line\">@property (nonatomic, copy, readonly) NSString *deviceTokenString;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> *  推送单例</div><div class=\"line\"> */</div><div class=\"line\">+ (instancetype)sharedPushCenter;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\">*  是否开启系统的APNs</div><div class=\"line\">*/</div><div class=\"line\">+ (BOOL)APNsEnabled;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> *  是否从APNs的通知启动APP</div><div class=\"line\"> */</div><div class=\"line\">+ (BOOL)isLaunchFromAPNs;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> *  注册远程通知&lt;向用户请求，获取推送通知权限&gt;</div><div class=\"line\"> */</div><div class=\"line\">+ (void)registerRemoteNotificationAfterDelay:(NSTimeInterval)delay;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> *  iOS10推送，APP enter foreground</div><div class=\"line\"> */</div><div class=\"line\">+ (void)applicationWillEnterForegroundForIOS10Push:(UIApplication *)application;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> *  当APP处于terminate状态，通过通知启动APP，launchOptions中包含远程通知信息</div><div class=\"line\"> */</div><div class=\"line\">+ (void)application:(UIApplication *)application didReceiveRemoteNotificationFromLaunchingWithOptions:(NSDictionary *)launchOptions;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> *  注册用户通知设置</div><div class=\"line\"> */</div><div class=\"line\">+ (void)application:(UIApplication *)application didRegisterUserNotificationSettings:(UIUserNotificationSettings *)notificationSettings;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> *  注册远程通知成功</div><div class=\"line\"> */</div><div class=\"line\">+ (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> *  注册远程通知失败</div><div class=\"line\"> */</div><div class=\"line\">+ (void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> *  当APP处理background状态时，点击收到的远程通知会调用该方法</div><div class=\"line\"> *  当APP处理foreground状态时，会直接调用该方法</div><div class=\"line\"> */</div><div class=\"line\">+ (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> *  收到本地通知</div><div class=\"line\"> */</div><div class=\"line\">+ (void)application:(UIApplication *)application didReceiveLocalNotification:(UILocalNotification *)notification;</div><div class=\"line\"></div><div class=\"line\">@end</div></pre></td></tr></table></figure>\n<p>  TKMPushNotificationCenter.m</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div><div class=\"line\">316</div><div class=\"line\">317</div><div class=\"line\">318</div><div class=\"line\">319</div><div class=\"line\">320</div><div class=\"line\">321</div><div class=\"line\">322</div><div class=\"line\">323</div><div class=\"line\">324</div><div class=\"line\">325</div><div class=\"line\">326</div></pre></td><td class=\"code\"><pre><div class=\"line\">//</div><div class=\"line\">//  TKMPushNotificationCenter.m</div><div class=\"line\">//  kuaima</div><div class=\"line\">//</div><div class=\"line\">//  Created by 01 on 16/12/17.</div><div class=\"line\">//  Copyright © 2016年 Facebook. All rights reserved.</div><div class=\"line\">//</div><div class=\"line\"></div><div class=\"line\">#import &lt;UserNotifications/UserNotifications.h&gt;</div><div class=\"line\">#import &quot;TKMPushNotificationCenter.h&quot;</div><div class=\"line\">#import &lt;TTInfoHelper.h&gt;</div><div class=\"line\">#import &lt;NSObject+TTAdditions.h&gt;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\">注： ttinfohelper是ios组封装的一个查询设备操作系统版本的工具类，此处只用到判断当前系统的方法</div><div class=\"line\">*/</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">NSString * const TKMRemoteNotificationDeviceTokenKey = @&quot;toutiao.kuaima.push_notification.device_token&quot;;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> *  推送通知block</div><div class=\"line\"> */</div><div class=\"line\">typedef void(^TEUPushNotificationCompletionBlock) (void);</div><div class=\"line\"></div><div class=\"line\">@interface TKMPushNotificationCenter () &lt;Singleton,UNUserNotificationCenterDelegate&gt;</div><div class=\"line\">/**</div><div class=\"line\"> *  标记是否从通知栏启动APP</div><div class=\"line\"> */</div><div class=\"line\">@property (nonatomic, assign) BOOL launchFromAPNs;</div><div class=\"line\"></div><div class=\"line\">@property (nonatomic, strong) NSDictionary *launchOptions;</div><div class=\"line\"></div><div class=\"line\">@property (nonatomic,   copy) TEUPushNotificationCompletionBlock completionBlock;</div><div class=\"line\">/**</div><div class=\"line\"> *  Push Notification device token</div><div class=\"line\"> */</div><div class=\"line\">@property (nonatomic, copy, readwrite) NSString *deviceTokenString;</div><div class=\"line\">@end</div><div class=\"line\">@implementation TKMPushNotificationCenter</div><div class=\"line\">@synthesize deviceTokenString = _deviceTokenString;</div><div class=\"line\"></div><div class=\"line\">+ (instancetype)sharedPushCenter</div><div class=\"line\">&#123;</div><div class=\"line\">  return [self sharedInstance_tt];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (instancetype)init</div><div class=\"line\">&#123;</div><div class=\"line\">  if ((self = [super init])) &#123;</div><div class=\"line\">    _launchFromAPNs = NO;</div><div class=\"line\">      &#125;</div><div class=\"line\">  return self;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)dealloc</div><div class=\"line\">&#123;</div><div class=\"line\">  _launchFromAPNs = NO;</div><div class=\"line\">  _launchOptions  = nil;</div><div class=\"line\">  [[NSNotificationCenter defaultCenter] removeObserver:self];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)handleDidEyeuLogin:(NSNotification *)notification</div><div class=\"line\">&#123;</div><div class=\"line\">  [self registerRemoteNotificationAfterDelay:2.f];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">+ (BOOL)isLaunchFromAPNs</div><div class=\"line\">&#123;</div><div class=\"line\">  return [[TKMPushNotificationCenter sharedPushCenter] launchFromAPNs];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">#pragma mark - handle remote notification</div><div class=\"line\"></div><div class=\"line\">+ (void)application:(UIApplication *)application didReceiveRemoteNotificationFromLaunchingWithOptions:(NSDictionary *)launchOptions</div><div class=\"line\">&#123;</div><div class=\"line\">  [[self sharedPushCenter] application:application didReceiveRemoteNotificationFromLaunchingWithOptions:launchOptions];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)application:(UIApplication *)application didReceiveRemoteNotificationFromLaunchingWithOptions:(NSDictionary *)launchOptions</div><div class=\"line\">&#123;</div><div class=\"line\">  // 注册远程通知</div><div class=\"line\">  [self registerRemoteNotificationAfterDelay:0.f];</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  // 处理从通知栏点击通知启动App的情况【iOS10之后会调用[userNotificationCenter:didReceiveNotificationResponse]】</div><div class=\"line\">  BOOL isFromAPNs = [launchOptions objectForKey:UIApplicationLaunchOptionsRemoteNotificationKey] != nil;</div><div class=\"line\">  [TKMPushNotificationCenter sharedPushCenter].launchFromAPNs = YES;</div><div class=\"line\">  [TKMPushNotificationCenter sharedPushCenter].launchOptions = [launchOptions copy];</div><div class=\"line\"></div><div class=\"line\">  if ([TTInfoHelper OSVersionNumber] &lt; 10.0 &amp;&amp; isFromAPNs) &#123;</div><div class=\"line\">    // apns should be handled after mainViewController is load completely</div><div class=\"line\">    NSDictionary *payload = [launchOptions objectForKey:UIApplicationLaunchOptionsRemoteNotificationKey];</div><div class=\"line\">    [[TKMPushNotificationCenter sharedPushCenter] handleRemoteNotification:payload delay:1.f];</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">+ (void)application:(UIApplication *)application didRegisterUserNotificationSettings:(UIUserNotificationSettings *)notificationSettings</div><div class=\"line\">&#123;</div><div class=\"line\">  [[self sharedPushCenter] application:application didRegisterUserNotificationSettings:notificationSettings];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">+ (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken</div><div class=\"line\">&#123;</div><div class=\"line\">  [[self sharedPushCenter] application:application didRegisterForRemoteNotificationsWithDeviceToken:deviceToken];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">+ (void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error</div><div class=\"line\">&#123;</div><div class=\"line\">  [[self sharedPushCenter] application:application didFailToRegisterForRemoteNotificationsWithError:error];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">+ (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo</div><div class=\"line\">&#123;</div><div class=\"line\">  [[self sharedPushCenter] application:application didReceiveRemoteNotification:userInfo];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">+ (void)application:(UIApplication *)application didReceiveLocalNotification:(UILocalNotification *)notification</div><div class=\"line\">&#123;</div><div class=\"line\">  [[self sharedPushCenter] application:application didReceiveLocalNotification:notification];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)application:(UIApplication *)application didRegisterUserNotificationSettings:(UIUserNotificationSettings *)notificationSettings</div><div class=\"line\">&#123;</div><div class=\"line\">  if (notificationSettings.types != UIUserNotificationTypeNone) &#123;</div><div class=\"line\">    [application registerForRemoteNotifications];</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken</div><div class=\"line\">&#123;</div><div class=\"line\">  self.deviceTokenString = [[[[deviceToken description]</div><div class=\"line\">                              stringByReplacingOccurrencesOfString: @&quot;&lt;&quot; withString: @&quot;&quot;]</div><div class=\"line\">                             stringByReplacingOccurrencesOfString: @&quot;&gt;&quot; withString: @&quot;&quot;]</div><div class=\"line\">                            stringByReplacingOccurrencesOfString: @&quot; &quot; withString: @&quot;&quot;];</div><div class=\"line\">  NSLog(@&quot;&gt;&gt;&gt;&gt;&gt; Success: device token: %@&quot;, self.deviceTokenString);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error</div><div class=\"line\">&#123;</div><div class=\"line\">  NSLog(@&quot;&gt;&gt;&gt;&gt;&gt; Failed: registerRemoteNotificiation: %@&quot;, error);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo</div><div class=\"line\">&#123;</div><div class=\"line\">  NSLog(@&quot;&gt;&gt;&gt;&gt;&gt; Launch: receiveRemoteNotification: %@&quot;,userInfo);</div><div class=\"line\"></div><div class=\"line\">  application.applicationIconBadgeNumber = [[userInfo objectForKey:@&quot;badge&quot;] integerValue];</div><div class=\"line\">  if ([[UIApplication sharedApplication] applicationState] != UIApplicationStateActive) &#123;</div><div class=\"line\">    [self handleRemoteNotification:userInfo];</div><div class=\"line\">  &#125; else &#123;</div><div class=\"line\">    if ([[userInfo objectForKey:@&quot;importance&quot;] isEqualToString:@&quot;important&quot;]) &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">#pragma mark - iOS10 UNNotificationCenterDelegate</div><div class=\"line\"></div><div class=\"line\">+ (void)applicationWillEnterForegroundForIOS10Push:(UIApplication *)application</div><div class=\"line\">&#123;</div><div class=\"line\">  if ([TTInfoHelper OSVersionNumber] &gt;= 10.0) &#123;</div><div class=\"line\">    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)userNotificationCenter:(UNUserNotificationCenter *)center willPresentNotification:(UNNotification *)notification withCompletionHandler:(void (^)(UNNotificationPresentationOptions options))completionHandler</div><div class=\"line\">&#123;</div><div class=\"line\">  NSDictionary *payload __unused = notification.request.content.userInfo;</div><div class=\"line\">  UNNotificationRequest *request = notification.request; // 收到推送的请求</div><div class=\"line\">  UNNotificationContent *content = request.content; // 收到推送的消息内容</div><div class=\"line\">  NSNumber *badge __unused = content.badge;  // 推送消息的角标</div><div class=\"line\">  NSString *body  __unused= content.body;    // 推送消息体</div><div class=\"line\">  UNNotificationSound *sound __unused= content.sound;  // 推送消息的声音</div><div class=\"line\">  NSString *subtitle __unused = content.subtitle;  // 推送消息的副标题</div><div class=\"line\">  NSString *title __unused = content.title;  // 推送消息的标题</div><div class=\"line\"></div><div class=\"line\">  if([request.trigger isKindOfClass:[UNPushNotificationTrigger class]]) &#123;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">  else &#123;</div><div class=\"line\">    // 判断为本地通知</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  // 需要执行这个方法，选择是否提醒用户，有Badge、Sound、Alert三种类型可以设置</div><div class=\"line\">  completionHandler(UNNotificationPresentationOptionBadge | UNNotificationPresentationOptionSound | UNNotificationPresentationOptionAlert);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)userNotificationCenter:(UNUserNotificationCenter *)center didReceiveNotificationResponse:(UNNotificationResponse *)response withCompletionHandler:(void (^)())completionHandler</div><div class=\"line\">&#123;</div><div class=\"line\">  NSDictionary *payload = response.notification.request.content.userInfo;</div><div class=\"line\">  UNNotificationRequest *request = response.notification.request; // 收到推送的请求</div><div class=\"line\"></div><div class=\"line\">  NSLog(@&quot;&gt;&gt;&gt;&gt;&gt;iOS10: UNNotificationResponse: %@, payload: %@&quot;, response, payload);</div><div class=\"line\"></div><div class=\"line\">  if ([request.trigger isKindOfClass:[UNPushNotificationTrigger class]]) &#123;</div><div class=\"line\">    // 远程通知</div><div class=\"line\">    if ([self.launchOptions objectForKey:UIApplicationLaunchOptionsRemoteNotificationKey]) &#123;</div><div class=\"line\">      self.launchOptions = nil;</div><div class=\"line\">      [self handleRemoteNotification:payload delay:1.f];</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">      [self handleRemoteNotification:payload];</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  if ([response.actionIdentifier isEqualToString:UNNotificationDefaultActionIdentifier]) &#123;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">  else if ([response.actionIdentifier isEqualToString:UNNotificationDismissActionIdentifier]) &#123;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">  else &#123;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  completionHandler();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">#pragma mark - register remote notification</div><div class=\"line\">/**</div><div class=\"line\"> *  注册远程通知&lt;向用户请求，获取推送通知权限&gt;</div><div class=\"line\"> */</div><div class=\"line\">+ (void)registerRemoteNotificationAfterDelay:(NSTimeInterval)delay</div><div class=\"line\">&#123;</div><div class=\"line\">  [[self sharedPushCenter] registerRemoteNotificationAfterDelay:delay];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)registerRemoteNotificationAfterDelay:(NSTimeInterval)delay</div><div class=\"line\">&#123;</div><div class=\"line\">  void (^TEURegisterRemoteNotificationBlock)() = ^() &#123;</div><div class=\"line\">    if ([TTInfoHelper OSVersionNumber] &gt;= 10.0) &#123;</div><div class=\"line\">      UNUserNotificationCenter *userNotificationCenter = [UNUserNotificationCenter currentNotificationCenter];</div><div class=\"line\">      userNotificationCenter.delegate = self;</div><div class=\"line\">      [userNotificationCenter requestAuthorizationWithOptions:UNAuthorizationOptionAlert | UNAuthorizationOptionBadge | UNAuthorizationOptionSound completionHandler:^(BOOL granted, NSError * _Nullable error) &#123;</div><div class=\"line\">        if (granted) &#123;</div><div class=\"line\">          NSLog(@&quot;iOS10 &gt; 注册通知成功&quot;);</div><div class=\"line\">          // initiate to get device token from APNs</div><div class=\"line\">          [[UIApplication sharedApplication] registerForRemoteNotifications];</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">          NSLog(@&quot;iOS10 &gt; 注册通知失败&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;];</div><div class=\"line\">    &#125;</div><div class=\"line\">    else if ([TTInfoHelper OSVersionNumber] &gt;= 8.0) &#123;</div><div class=\"line\">#pragma clang diagnostic push</div><div class=\"line\">#pragma clang diagnostic ignored &quot;-Wdeprecated-declarations&quot;</div><div class=\"line\">      UIUserNotificationSettings *settings = [UIUserNotificationSettings settingsForTypes:(UIRemoteNotificationTypeBadge | UIRemoteNotificationTypeSound | UIRemoteNotificationTypeAlert) categories:nil];</div><div class=\"line\">      [[UIApplication sharedApplication] registerUserNotificationSettings:settings];</div><div class=\"line\">#pragma clang diagnostic pop</div><div class=\"line\">    &#125;</div><div class=\"line\">    else &#123;</div><div class=\"line\">#pragma clang diagnostic push</div><div class=\"line\">#pragma clang diagnostic ignored &quot;-Wdeprecated-declarations&quot;</div><div class=\"line\">      [[UIApplication sharedApplication] registerForRemoteNotificationTypes:(UIRemoteNotificationTypeBadge | UIRemoteNotificationTypeAlert | UIRemoteNotificationTypeSound)];</div><div class=\"line\">#pragma clang diagnostic pop</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  if(delay &gt; 0) &#123;</div><div class=\"line\">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, delay * NSEC_PER_SEC), dispatch_get_main_queue(), ^(void)&#123;</div><div class=\"line\">      TEURegisterRemoteNotificationBlock();</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125; else &#123;</div><div class=\"line\">    TEURegisterRemoteNotificationBlock();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">#pragma mark - handle when receiving remote push</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">- (void)handleRemoteNotification:(NSDictionary *)playload delay:(NSTimeInterval)delay</div><div class=\"line\">&#123;</div><div class=\"line\">  if (delay &gt; 0) &#123;</div><div class=\"line\">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delay * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">      [self handleRemoteNotification:playload];</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125; else &#123;</div><div class=\"line\">    [self handleRemoteNotification:playload];</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)handleRemoteNotification:(NSDictionary *)playload</div><div class=\"line\">&#123;</div><div class=\"line\">  NSLog(@&quot;handleRemoteNotification -&gt; playload = %@&quot;, playload);</div><div class=\"line\"></div><div class=\"line\">  [self.class clearAppBadgeAndNotificationCenter];</div><div class=\"line\">  //此处添加payload处理逻辑</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">+ (void)clearAppBadgeAndNotificationCenter</div><div class=\"line\">&#123;</div><div class=\"line\">  // iOS只会在有badge的情况下清除通知中心的消息，因此需要先设置badge为1才能保证用户每次点击都能清楚通知中心的消息</div><div class=\"line\">  [[UIApplication sharedApplication] setApplicationIconBadgeNumber:1];</div><div class=\"line\">  [[UIApplication sharedApplication] setApplicationIconBadgeNumber:0];</div><div class=\"line\">  [[UIApplication sharedApplication] cancelAllLocalNotifications];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">#pragma mark - setter/getter</div><div class=\"line\"></div><div class=\"line\">- (NSString *)deviceTokenString</div><div class=\"line\">&#123;</div><div class=\"line\">  if (_deviceTokenString) &#123;</div><div class=\"line\">    return _deviceTokenString;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  _deviceTokenString = [[NSUserDefaults standardUserDefaults] valueForKey:TKMRemoteNotificationDeviceTokenKey];</div><div class=\"line\">  return _deviceTokenString;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)setDeviceTokenString:(NSString *)deviceTokenString</div><div class=\"line\">&#123;</div><div class=\"line\">  if (_deviceTokenString != deviceTokenString) &#123;</div><div class=\"line\">    _deviceTokenString = deviceTokenString;</div><div class=\"line\"></div><div class=\"line\">    [[NSUserDefaults standardUserDefaults] setObject:_deviceTokenString forKey:TKMRemoteNotificationDeviceTokenKey];</div><div class=\"line\">    [[NSUserDefaults standardUserDefaults] synchronize];</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@end</div></pre></td></tr></table></figure>\n<ol>\n<li>模拟后端发送push消息：<br>所用组件库：<a href=\"https://github.com/node-apn/node-apn\">https://github.com/node-apn/node-apn</a><br>简易版推送源码如下：<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">\"use strict\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> Send individualised notifications</div><div class=\"line\"> */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> apn = <span class=\"built_in\">require</span>(<span class=\"string\">\"apn\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//内容随意定制，可以写多个想要测试的设备device token，device token从(void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken回调函数中获得</span></div><div class=\"line\"><span class=\"keyword\">var</span> users = [</div><div class=\"line\">  &#123; <span class=\"attr\">content</span>: <span class=\"string\">\"baby\"</span>, <span class=\"string\">\"devices\"</span>: [<span class=\"string\">\"2c3267a5f1e8d075ecc41d4cfa28b2df9b80a72d870f29d4c714cec0a0c59307\"</span>]&#125;];</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> service = <span class=\"keyword\">new</span> apn.Provider(&#123;</div><div class=\"line\">  <span class=\"attr\">cert</span>: <span class=\"string\">\"cert.pem\"</span>, <span class=\"comment\">//路径根据文件位置改动</span></div><div class=\"line\">  key: <span class=\"string\">\"key.pem\"</span>, <span class=\"comment\">//路径根据文件位置改动</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">users.forEach( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">user</span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> note = <span class=\"keyword\">new</span> apn.Notification(&#123;</div><div class=\"line\">      <span class=\"attr\">alert</span>: users.content, <span class=\"comment\">//自己定制，可以写成根据不同user发不同内容</span></div><div class=\"line\">      payload: &#123;</div><div class=\"line\">          <span class=\"string\">\"liveId\"</span>: <span class=\"number\">5719</span>,</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//app id 非常重要，要和应用的保持一致</span></div><div class=\"line\">  note.topic = <span class=\"string\">\"com.bytedance.kuaima\"</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Sending:&#123;&#125; to &#123;&#125;'</span>,note.compile(),user.devices);</div><div class=\"line\"></div><div class=\"line\">  service.send(note, user.devices).then( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"sent:\"</span>, result.sent.length);</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"failed:\"</span>, result.failed.length);</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(result.failed);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// For one-shot notification tasks you may wish to shutdown the connection</span></div><div class=\"line\"><span class=\"comment\">// after everything is sent, but only call shutdown if you need your</span></div><div class=\"line\"><span class=\"comment\">// application to terminate.</span></div><div class=\"line\">service.shutdown();</div></pre></td></tr></table></figure></li>\n</ol>\n"},{"layout":"post","title":"Javascript设计模式 读书笔记","date":"2014-06-12T00:43:59.000Z","author":"Lily","_content":"\n最近读了《Javascript设计模式》这本书，有个习惯是会把觉得有用的内容记下来，之后只看这部分内容 ：）\n\n使用var创建的全局变量不能删除，不适用var创建的隐含全局变量可以删除。\n遍历数组时注意缓存长度：\nfor(var i = 0,max = arr.length;i<max;i++){} =>var i = arr.length;while(i--){} 更有效率，因为和0比较更快。\n\nfor...in 遍历对象，如果想过滤原型属性，如clone，toString等 可以用hasOwnProerty，如：\nfor(var i in obj){\n  if(obj.hasOwnProperty(i){\n       ///\n   }\n}\n或写成：\nvar i, hasOwn = Object.prototype.hasOwnProperty;\nfor(i in obj){\n    if(hasOwn.call(obj,i){ }\n}\n\nnew Function()中的代码将在局部函数空间中云心个，因此代码中任何采用var定义的变量不会自动成为全局变量。另一个避免自动成为全局变量的方法是将eval()调用封装到一个及时函数中。\nvar str = \"var j = 1;console.log(j)\";\n\n1. eval(str);\n2. new Function(str);\n3. (function(){\n      eval(str);\n    }());\n\n=>三个方法之后再执行console.log(j);只有第一个eval会定义成全局变量，另两个都是undefined；\n另一个区别是 eval可以访问和修改外部作用域的变量，Function不行:\n(function(){\n    var a = 1;\n    eval(\"a = 3;\");    new Function(\"console.log(a);\");=> undefined\n    console.log(a); // a = 3\n}());\n\n\nparseInt 要注意！ES3中 0开头的字符串会被当成八进制，ES5正常，所以第二个表示进制的参数尽量指定。否则\nparseInt(\"09\") =>0\n简单的做法是+\"08\"  或者 Number(\"08\") 这种做法会比parseInt快，但是parseInt可以用在输入比较复杂的情况 如 parseInt(\"08 hahahah\");\n\n判断一个对象是否是数组 ES5引入Array.isArray();通用的写法是：\nif(typeof Array.isArray === \"undefined\"){\n    Array.isArray = function(arg){\n        return Object.prototype.toString.call(arg) === \"[object Array]\";\n    }\n}\n\n可以使用Number String Boolean 创建包装对象。但是一般使用字面量定义就够了 ，var str = 'str'; 除非是想扩充对象，比如 var greet = \"hello\"; greet.smile = true;这样写smile属性是不会被保留的，不报错，返回undefined，的那是用new String(\"hello\") 初始化的变量就可以加属性并且被保留。但是不影响其他变量使用new String初始化。\n没使用new，包装构造函数将传递给他们的参数转换成一个基本类型。\ntypeof Number(1) => \"number\"\ntypeof String(1) => \"string\"\ntypeof Boolean(1) => \"boolean\"\n反之 typeof new xxx 都返回 “object”\n\n\njs内置的错误构造函数 Error()、SyntaxError()、TypeError()以及其他都有name 和message两个属性，可以自定义错误处理方式。\n\n```js\ntry{\n     throw{\n         name:\"myerror\",\n         message:\"opps\",\n         extra:\"hi\",\n         errorHandle:handle//自定义错误处理函数\n     };\n}catch(e){\n     alert(e.message);\n     e.errorHandle();\n}\n```\n\n静态方法：\nvar Person = function(){}\nPerson.isProgramer = function(){ }//静态方法 这里的this === Person this指向构造函数\nPerson.prototype.isKind = function(){}//实例方法 这里的this !== Person 是一个对象\ntypeof Person.isKind ; =>undefined\ntypeof new Person().isProgramer; =>undefined\n静态方法不需要对象直接用 类名调用，实例方法需要一个对象才能运行。以静态方式调用实例方法无法运行，用对象.静态方法 方式调用静态方法也不能运行。\n\n私有静态成员：\n1. 同一个构造函数创建的所有对象共享该成员\n2. 构造函数外部不可访问该成员\n可以通过闭包实现，如：\n\n```js\nvar Person = (function(){\n     var counter = 0,\n         RealPerson;\n    RealPerson = function(){\n        counter += 1;//私有静态成员变量\n    };\n    RealPerson.prototype.getId = function(){\n        return counter;\n    }\n    return RealPerson;\n}());\nvar p1 = new Person();\np1.getId(); =>1\nvar p2 = new Person();\np2.getId(); =>2\n```\n\n继承模式：\n\n```js\nvar inherit = (function(){\n    var F = function(){};\n    return function(C,P){\n        F.prototype = P.prototype;\n        C.prototype = new F();\n        C.uper = P.prototype;\n        C.prototype.constructor = C;\n    }\n})());\n```\n\n\n通过复制实现继承\n浅复制：\n\n```js\nfunction extend(parent,child){\n    var i ;\n    child = child || {};\n    for( i in parent){\n         if(parent.hasOwnProperty(i)){\n             child[i] = parent[i];\n         }\n    }\nreturn child;\n}\n```\n\n深复制:\n\n```js\nfunction extendDeep(parent,child){\n     var i,\n         toString = Object.prototype.toString(),\n         arrStr = \"[object Array]\";\n     child = child || {};\n\n     for(i in parent){\n         if(typeof patrent[i] === \"object\"){\n             child[i] = (toString.call(parent[i]) === arrStr)?[]:{};\n             extendDeep(parent[i],child[i]);\n         }else{\n             child[i] = parent[i];\n         }\n     }\n     return child;\n}\n```\n\n混入，从多个对象中复制成员并组合成新的对象，相当于组合。\n\n```js\nfunction mix(){\n     var arg,prop,child = {};\n     for(arg = 0;arg <arguments.length;arg+=1){\n         for(prop in arguments[arg]){\n             if(arguments[arg].hasOwnProperty(prop)){\n                child[prop] = arguments[arg][prop];\n             }\n         }\n     }\n     return child;\n}\n```\n\n这里重复属性会被覆盖，可以做判断\n\n```js\nvar cake = mix(\n     {eggs:2},\n     {milk:30}\n);\n```\n\n借用方法，有时候只想用某个对象的一些方法，而不是继承全部属性和方法，这时候可以用call apply\nyourObject.doStuff.call(myObj, p1,p2);\nyourObject.doStuff.apply(myObj, [p1,p2]);\n如：借用数组方法：\n\n```js\nfunction f(){\n    var args = [].slice.call(arguments,1,2);//这里可以是Array.prototype.slice.call 可以减少空数组创建\n    return args;\n}\n```\n\ncall  apply 和 bind区别：\nWhen you want that function to later be called with a certain context, useful in events.\n\nCall/apply call the function immediately, whereas bind returns a function that when later executed will have the correct context set for calling the original function. This way you can maintain context in async callbacks, and events.\n\nI do this a lot:\n\n```js\nfunction MyObject(element) {\n    this.elm = element;\n\n    element.addEventListener('click', this.onClick.bind(this), false);};\n\nMyObject.prototype.onClick = function(e) {\n     var t=this;  //do something with [t]...\n    //without bind the context of this function wouldn't be a MyObject\n    //instance as you would normally expect.\n};\n```\nI use it extensively in node.js for async callbacks that I want to pass a member method for, but still want the context to be the instance that started the async action.\n\nA simple, naive implementation of bind would be like:\n\n```js\nFunction.prototype.bind = function(ctx) {\n    var fn = this;\n    return function() {\n        fn.apply(ctx, arguments);\n    };};\n```","source":"_posts/javascript模式读书笔记.md","raw":"---\nlayout: post\ntitle:  Javascript设计模式 读书笔记\ndate:   2014-06-12 08:43:59\nauthor: Lily\ncategories: frontend\ntags:\n- javascript设计模式\n- 读书笔记\n---\n\n最近读了《Javascript设计模式》这本书，有个习惯是会把觉得有用的内容记下来，之后只看这部分内容 ：）\n\n使用var创建的全局变量不能删除，不适用var创建的隐含全局变量可以删除。\n遍历数组时注意缓存长度：\nfor(var i = 0,max = arr.length;i<max;i++){} =>var i = arr.length;while(i--){} 更有效率，因为和0比较更快。\n\nfor...in 遍历对象，如果想过滤原型属性，如clone，toString等 可以用hasOwnProerty，如：\nfor(var i in obj){\n  if(obj.hasOwnProperty(i){\n       ///\n   }\n}\n或写成：\nvar i, hasOwn = Object.prototype.hasOwnProperty;\nfor(i in obj){\n    if(hasOwn.call(obj,i){ }\n}\n\nnew Function()中的代码将在局部函数空间中云心个，因此代码中任何采用var定义的变量不会自动成为全局变量。另一个避免自动成为全局变量的方法是将eval()调用封装到一个及时函数中。\nvar str = \"var j = 1;console.log(j)\";\n\n1. eval(str);\n2. new Function(str);\n3. (function(){\n      eval(str);\n    }());\n\n=>三个方法之后再执行console.log(j);只有第一个eval会定义成全局变量，另两个都是undefined；\n另一个区别是 eval可以访问和修改外部作用域的变量，Function不行:\n(function(){\n    var a = 1;\n    eval(\"a = 3;\");    new Function(\"console.log(a);\");=> undefined\n    console.log(a); // a = 3\n}());\n\n\nparseInt 要注意！ES3中 0开头的字符串会被当成八进制，ES5正常，所以第二个表示进制的参数尽量指定。否则\nparseInt(\"09\") =>0\n简单的做法是+\"08\"  或者 Number(\"08\") 这种做法会比parseInt快，但是parseInt可以用在输入比较复杂的情况 如 parseInt(\"08 hahahah\");\n\n判断一个对象是否是数组 ES5引入Array.isArray();通用的写法是：\nif(typeof Array.isArray === \"undefined\"){\n    Array.isArray = function(arg){\n        return Object.prototype.toString.call(arg) === \"[object Array]\";\n    }\n}\n\n可以使用Number String Boolean 创建包装对象。但是一般使用字面量定义就够了 ，var str = 'str'; 除非是想扩充对象，比如 var greet = \"hello\"; greet.smile = true;这样写smile属性是不会被保留的，不报错，返回undefined，的那是用new String(\"hello\") 初始化的变量就可以加属性并且被保留。但是不影响其他变量使用new String初始化。\n没使用new，包装构造函数将传递给他们的参数转换成一个基本类型。\ntypeof Number(1) => \"number\"\ntypeof String(1) => \"string\"\ntypeof Boolean(1) => \"boolean\"\n反之 typeof new xxx 都返回 “object”\n\n\njs内置的错误构造函数 Error()、SyntaxError()、TypeError()以及其他都有name 和message两个属性，可以自定义错误处理方式。\n\n```js\ntry{\n     throw{\n         name:\"myerror\",\n         message:\"opps\",\n         extra:\"hi\",\n         errorHandle:handle//自定义错误处理函数\n     };\n}catch(e){\n     alert(e.message);\n     e.errorHandle();\n}\n```\n\n静态方法：\nvar Person = function(){}\nPerson.isProgramer = function(){ }//静态方法 这里的this === Person this指向构造函数\nPerson.prototype.isKind = function(){}//实例方法 这里的this !== Person 是一个对象\ntypeof Person.isKind ; =>undefined\ntypeof new Person().isProgramer; =>undefined\n静态方法不需要对象直接用 类名调用，实例方法需要一个对象才能运行。以静态方式调用实例方法无法运行，用对象.静态方法 方式调用静态方法也不能运行。\n\n私有静态成员：\n1. 同一个构造函数创建的所有对象共享该成员\n2. 构造函数外部不可访问该成员\n可以通过闭包实现，如：\n\n```js\nvar Person = (function(){\n     var counter = 0,\n         RealPerson;\n    RealPerson = function(){\n        counter += 1;//私有静态成员变量\n    };\n    RealPerson.prototype.getId = function(){\n        return counter;\n    }\n    return RealPerson;\n}());\nvar p1 = new Person();\np1.getId(); =>1\nvar p2 = new Person();\np2.getId(); =>2\n```\n\n继承模式：\n\n```js\nvar inherit = (function(){\n    var F = function(){};\n    return function(C,P){\n        F.prototype = P.prototype;\n        C.prototype = new F();\n        C.uper = P.prototype;\n        C.prototype.constructor = C;\n    }\n})());\n```\n\n\n通过复制实现继承\n浅复制：\n\n```js\nfunction extend(parent,child){\n    var i ;\n    child = child || {};\n    for( i in parent){\n         if(parent.hasOwnProperty(i)){\n             child[i] = parent[i];\n         }\n    }\nreturn child;\n}\n```\n\n深复制:\n\n```js\nfunction extendDeep(parent,child){\n     var i,\n         toString = Object.prototype.toString(),\n         arrStr = \"[object Array]\";\n     child = child || {};\n\n     for(i in parent){\n         if(typeof patrent[i] === \"object\"){\n             child[i] = (toString.call(parent[i]) === arrStr)?[]:{};\n             extendDeep(parent[i],child[i]);\n         }else{\n             child[i] = parent[i];\n         }\n     }\n     return child;\n}\n```\n\n混入，从多个对象中复制成员并组合成新的对象，相当于组合。\n\n```js\nfunction mix(){\n     var arg,prop,child = {};\n     for(arg = 0;arg <arguments.length;arg+=1){\n         for(prop in arguments[arg]){\n             if(arguments[arg].hasOwnProperty(prop)){\n                child[prop] = arguments[arg][prop];\n             }\n         }\n     }\n     return child;\n}\n```\n\n这里重复属性会被覆盖，可以做判断\n\n```js\nvar cake = mix(\n     {eggs:2},\n     {milk:30}\n);\n```\n\n借用方法，有时候只想用某个对象的一些方法，而不是继承全部属性和方法，这时候可以用call apply\nyourObject.doStuff.call(myObj, p1,p2);\nyourObject.doStuff.apply(myObj, [p1,p2]);\n如：借用数组方法：\n\n```js\nfunction f(){\n    var args = [].slice.call(arguments,1,2);//这里可以是Array.prototype.slice.call 可以减少空数组创建\n    return args;\n}\n```\n\ncall  apply 和 bind区别：\nWhen you want that function to later be called with a certain context, useful in events.\n\nCall/apply call the function immediately, whereas bind returns a function that when later executed will have the correct context set for calling the original function. This way you can maintain context in async callbacks, and events.\n\nI do this a lot:\n\n```js\nfunction MyObject(element) {\n    this.elm = element;\n\n    element.addEventListener('click', this.onClick.bind(this), false);};\n\nMyObject.prototype.onClick = function(e) {\n     var t=this;  //do something with [t]...\n    //without bind the context of this function wouldn't be a MyObject\n    //instance as you would normally expect.\n};\n```\nI use it extensively in node.js for async callbacks that I want to pass a member method for, but still want the context to be the instance that started the async action.\n\nA simple, naive implementation of bind would be like:\n\n```js\nFunction.prototype.bind = function(ctx) {\n    var fn = this;\n    return function() {\n        fn.apply(ctx, arguments);\n    };};\n```","slug":"javascript模式读书笔记","published":1,"updated":"2017-02-13T15:43:42.000Z","comments":1,"photos":[],"link":"","_id":"cizknqupb000495c4bahzoqy2","content":"<p>最近读了《Javascript设计模式》这本书，有个习惯是会把觉得有用的内容记下来，之后只看这部分内容 ：）</p>\n<p>使用var创建的全局变量不能删除，不适用var创建的隐含全局变量可以删除。<br>遍历数组时注意缓存长度：<br>for(var i = 0,max = arr.length;i<max;i++){} ==\"\">var i = arr.length;while(i–){} 更有效率，因为和0比较更快。</max;i++){}></p>\n<p>for…in 遍历对象，如果想过滤原型属性，如clone，toString等 可以用hasOwnProerty，如：<br>for(var i in obj){<br>  if(obj.hasOwnProperty(i){<br>       ///<br>   }<br>}<br>或写成：<br>var i, hasOwn = Object.prototype.hasOwnProperty;<br>for(i in obj){<br>    if(hasOwn.call(obj,i){ }<br>}</p>\n<p>new Function()中的代码将在局部函数空间中云心个，因此代码中任何采用var定义的变量不会自动成为全局变量。另一个避免自动成为全局变量的方法是将eval()调用封装到一个及时函数中。<br>var str = “var j = 1;console.log(j)”;</p>\n<ol>\n<li>eval(str);</li>\n<li>new Function(str);</li>\n<li>(function(){<br>   eval(str);<br> }());</li>\n</ol>\n<p>=&gt;三个方法之后再执行console.log(j);只有第一个eval会定义成全局变量，另两个都是undefined；<br>另一个区别是 eval可以访问和修改外部作用域的变量，Function不行:<br>(function(){<br>    var a = 1;<br>    eval(“a = 3;”);    new Function(“console.log(a);”);=&gt; undefined<br>    console.log(a); // a = 3<br>}());</p>\n<p>parseInt 要注意！ES3中 0开头的字符串会被当成八进制，ES5正常，所以第二个表示进制的参数尽量指定。否则<br>parseInt(“09”) =&gt;0<br>简单的做法是+”08”  或者 Number(“08”) 这种做法会比parseInt快，但是parseInt可以用在输入比较复杂的情况 如 parseInt(“08 hahahah”);</p>\n<p>判断一个对象是否是数组 ES5引入Array.isArray();通用的写法是：<br>if(typeof Array.isArray === “undefined”){<br>    Array.isArray = function(arg){<br>        return Object.prototype.toString.call(arg) === “[object Array]”;<br>    }<br>}</p>\n<p>可以使用Number String Boolean 创建包装对象。但是一般使用字面量定义就够了 ，var str = ‘str’; 除非是想扩充对象，比如 var greet = “hello”; greet.smile = true;这样写smile属性是不会被保留的，不报错，返回undefined，的那是用new String(“hello”) 初始化的变量就可以加属性并且被保留。但是不影响其他变量使用new String初始化。<br>没使用new，包装构造函数将传递给他们的参数转换成一个基本类型。<br>typeof Number(1) =&gt; “number”<br>typeof String(1) =&gt; “string”<br>typeof Boolean(1) =&gt; “boolean”<br>反之 typeof new xxx 都返回 “object”</p>\n<p>js内置的错误构造函数 Error()、SyntaxError()、TypeError()以及其他都有name 和message两个属性，可以自定义错误处理方式。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span>&#123;</div><div class=\"line\">     <span class=\"keyword\">throw</span>&#123;</div><div class=\"line\">         <span class=\"attr\">name</span>:<span class=\"string\">\"myerror\"</span>,</div><div class=\"line\">         <span class=\"attr\">message</span>:<span class=\"string\">\"opps\"</span>,</div><div class=\"line\">         <span class=\"attr\">extra</span>:<span class=\"string\">\"hi\"</span>,</div><div class=\"line\">         <span class=\"attr\">errorHandle</span>:handle<span class=\"comment\">//自定义错误处理函数</span></div><div class=\"line\">     &#125;;</div><div class=\"line\">&#125;<span class=\"keyword\">catch</span>(e)&#123;</div><div class=\"line\">     alert(e.message);</div><div class=\"line\">     e.errorHandle();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>静态方法：<br>var Person = function(){}<br>Person.isProgramer = function(){ }//静态方法 这里的this === Person this指向构造函数<br>Person.prototype.isKind = function(){}//实例方法 这里的this !== Person 是一个对象<br>typeof Person.isKind ; =&gt;undefined<br>typeof new Person().isProgramer; =&gt;undefined<br>静态方法不需要对象直接用 类名调用，实例方法需要一个对象才能运行。以静态方式调用实例方法无法运行，用对象.静态方法 方式调用静态方法也不能运行。</p>\n<p>私有静态成员：</p>\n<ol>\n<li>同一个构造函数创建的所有对象共享该成员</li>\n<li>构造函数外部不可访问该成员<br>可以通过闭包实现，如：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Person = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">     <span class=\"keyword\">var</span> counter = <span class=\"number\">0</span>,</div><div class=\"line\">         RealPerson;</div><div class=\"line\">    RealPerson = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        counter += <span class=\"number\">1</span>;<span class=\"comment\">//私有静态成员变量</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">    RealPerson.prototype.getId = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> counter;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> RealPerson;</div><div class=\"line\">&#125;());</div><div class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Person();</div><div class=\"line\">p1.getId(); =&gt;<span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> Person();</div><div class=\"line\">p2.getId(); =&gt;<span class=\"number\">2</span></div></pre></td></tr></table></figure>\n<p>继承模式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> inherit = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> F = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">C,P</span>)</span>&#123;</div><div class=\"line\">        F.prototype = P.prototype;</div><div class=\"line\">        C.prototype = <span class=\"keyword\">new</span> F();</div><div class=\"line\">        C.uper = P.prototype;</div><div class=\"line\">        C.prototype.constructor = C;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)());</div></pre></td></tr></table></figure>\n<p>通过复制实现继承<br>浅复制：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">extend</span>(<span class=\"params\">parent,child</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> i ;</div><div class=\"line\">    child = child || &#123;&#125;;</div><div class=\"line\">    <span class=\"keyword\">for</span>( i <span class=\"keyword\">in</span> parent)&#123;</div><div class=\"line\">         <span class=\"keyword\">if</span>(parent.hasOwnProperty(i))&#123;</div><div class=\"line\">             child[i] = parent[i];</div><div class=\"line\">         &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"keyword\">return</span> child;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>深复制:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">extendDeep</span>(<span class=\"params\">parent,child</span>)</span>&#123;</div><div class=\"line\">     <span class=\"keyword\">var</span> i,</div><div class=\"line\">         toString = <span class=\"built_in\">Object</span>.prototype.toString(),</div><div class=\"line\">         arrStr = <span class=\"string\">\"[object Array]\"</span>;</div><div class=\"line\">     child = child || &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">for</span>(i <span class=\"keyword\">in</span> parent)&#123;</div><div class=\"line\">         <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> patrent[i] === <span class=\"string\">\"object\"</span>)&#123;</div><div class=\"line\">             child[i] = (toString.call(parent[i]) === arrStr)?[]:&#123;&#125;;</div><div class=\"line\">             extendDeep(parent[i],child[i]);</div><div class=\"line\">         &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">             child[i] = parent[i];</div><div class=\"line\">         &#125;</div><div class=\"line\">     &#125;</div><div class=\"line\">     <span class=\"keyword\">return</span> child;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>混入，从多个对象中复制成员并组合成新的对象，相当于组合。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mix</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">     <span class=\"keyword\">var</span> arg,prop,child = &#123;&#125;;</div><div class=\"line\">     <span class=\"keyword\">for</span>(arg = <span class=\"number\">0</span>;arg &lt;<span class=\"built_in\">arguments</span>.length;arg+=<span class=\"number\">1</span>)&#123;</div><div class=\"line\">         <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> <span class=\"built_in\">arguments</span>[arg])&#123;</div><div class=\"line\">             <span class=\"keyword\">if</span>(<span class=\"built_in\">arguments</span>[arg].hasOwnProperty(prop))&#123;</div><div class=\"line\">                child[prop] = <span class=\"built_in\">arguments</span>[arg][prop];</div><div class=\"line\">             &#125;</div><div class=\"line\">         &#125;</div><div class=\"line\">     &#125;</div><div class=\"line\">     <span class=\"keyword\">return</span> child;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里重复属性会被覆盖，可以做判断</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> cake = mix(</div><div class=\"line\">     &#123;<span class=\"attr\">eggs</span>:<span class=\"number\">2</span>&#125;,</div><div class=\"line\">     &#123;<span class=\"attr\">milk</span>:<span class=\"number\">30</span>&#125;</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<p>借用方法，有时候只想用某个对象的一些方法，而不是继承全部属性和方法，这时候可以用call apply<br>yourObject.doStuff.call(myObj, p1,p2);<br>yourObject.doStuff.apply(myObj, [p1,p2]);<br>如：借用数组方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> args = [].slice.call(<span class=\"built_in\">arguments</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>);<span class=\"comment\">//这里可以是Array.prototype.slice.call 可以减少空数组创建</span></div><div class=\"line\">    <span class=\"keyword\">return</span> args;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>call  apply 和 bind区别：<br>When you want that function to later be called with a certain context, useful in events.</p>\n<p>Call/apply call the function immediately, whereas bind returns a function that when later executed will have the correct context set for calling the original function. This way you can maintain context in async callbacks, and events.</p>\n<p>I do this a lot:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyObject</span>(<span class=\"params\">element</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.elm = element;</div><div class=\"line\"></div><div class=\"line\">    element.addEventListener(<span class=\"string\">'click'</span>, <span class=\"keyword\">this</span>.onClick.bind(<span class=\"keyword\">this</span>), <span class=\"literal\">false</span>);&#125;;</div><div class=\"line\"></div><div class=\"line\">MyObject.prototype.onClick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">     <span class=\"keyword\">var</span> t=<span class=\"keyword\">this</span>;  <span class=\"comment\">//do something with [t]...</span></div><div class=\"line\">    <span class=\"comment\">//without bind the context of this function wouldn't be a MyObject</span></div><div class=\"line\">    <span class=\"comment\">//instance as you would normally expect.</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>I use it extensively in node.js for async callbacks that I want to pass a member method for, but still want the context to be the instance that started the async action.</p>\n<p>A simple, naive implementation of bind would be like:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Function</span>.prototype.bind = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ctx</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> fn = <span class=\"keyword\">this</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        fn.apply(ctx, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">    &#125;;&#125;;</div></pre></td></tr></table></figure>","excerpt":"","more":"<p>最近读了《Javascript设计模式》这本书，有个习惯是会把觉得有用的内容记下来，之后只看这部分内容 ：）</p>\n<p>使用var创建的全局变量不能删除，不适用var创建的隐含全局变量可以删除。<br>遍历数组时注意缓存长度：<br>for(var i = 0,max = arr.length;i<max;i++){} =>var i = arr.length;while(i–){} 更有效率，因为和0比较更快。</p>\n<p>for…in 遍历对象，如果想过滤原型属性，如clone，toString等 可以用hasOwnProerty，如：<br>for(var i in obj){<br>  if(obj.hasOwnProperty(i){<br>       ///<br>   }<br>}<br>或写成：<br>var i, hasOwn = Object.prototype.hasOwnProperty;<br>for(i in obj){<br>    if(hasOwn.call(obj,i){ }<br>}</p>\n<p>new Function()中的代码将在局部函数空间中云心个，因此代码中任何采用var定义的变量不会自动成为全局变量。另一个避免自动成为全局变量的方法是将eval()调用封装到一个及时函数中。<br>var str = “var j = 1;console.log(j)”;</p>\n<ol>\n<li>eval(str);</li>\n<li>new Function(str);</li>\n<li>(function(){<br>   eval(str);<br> }());</li>\n</ol>\n<p>=&gt;三个方法之后再执行console.log(j);只有第一个eval会定义成全局变量，另两个都是undefined；<br>另一个区别是 eval可以访问和修改外部作用域的变量，Function不行:<br>(function(){<br>    var a = 1;<br>    eval(“a = 3;”);    new Function(“console.log(a);”);=&gt; undefined<br>    console.log(a); // a = 3<br>}());</p>\n<p>parseInt 要注意！ES3中 0开头的字符串会被当成八进制，ES5正常，所以第二个表示进制的参数尽量指定。否则<br>parseInt(“09”) =&gt;0<br>简单的做法是+”08”  或者 Number(“08”) 这种做法会比parseInt快，但是parseInt可以用在输入比较复杂的情况 如 parseInt(“08 hahahah”);</p>\n<p>判断一个对象是否是数组 ES5引入Array.isArray();通用的写法是：<br>if(typeof Array.isArray === “undefined”){<br>    Array.isArray = function(arg){<br>        return Object.prototype.toString.call(arg) === “[object Array]”;<br>    }<br>}</p>\n<p>可以使用Number String Boolean 创建包装对象。但是一般使用字面量定义就够了 ，var str = ‘str’; 除非是想扩充对象，比如 var greet = “hello”; greet.smile = true;这样写smile属性是不会被保留的，不报错，返回undefined，的那是用new String(“hello”) 初始化的变量就可以加属性并且被保留。但是不影响其他变量使用new String初始化。<br>没使用new，包装构造函数将传递给他们的参数转换成一个基本类型。<br>typeof Number(1) =&gt; “number”<br>typeof String(1) =&gt; “string”<br>typeof Boolean(1) =&gt; “boolean”<br>反之 typeof new xxx 都返回 “object”</p>\n<p>js内置的错误构造函数 Error()、SyntaxError()、TypeError()以及其他都有name 和message两个属性，可以自定义错误处理方式。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span>&#123;</div><div class=\"line\">     <span class=\"keyword\">throw</span>&#123;</div><div class=\"line\">         <span class=\"attr\">name</span>:<span class=\"string\">\"myerror\"</span>,</div><div class=\"line\">         <span class=\"attr\">message</span>:<span class=\"string\">\"opps\"</span>,</div><div class=\"line\">         <span class=\"attr\">extra</span>:<span class=\"string\">\"hi\"</span>,</div><div class=\"line\">         <span class=\"attr\">errorHandle</span>:handle<span class=\"comment\">//自定义错误处理函数</span></div><div class=\"line\">     &#125;;</div><div class=\"line\">&#125;<span class=\"keyword\">catch</span>(e)&#123;</div><div class=\"line\">     alert(e.message);</div><div class=\"line\">     e.errorHandle();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>静态方法：<br>var Person = function(){}<br>Person.isProgramer = function(){ }//静态方法 这里的this === Person this指向构造函数<br>Person.prototype.isKind = function(){}//实例方法 这里的this !== Person 是一个对象<br>typeof Person.isKind ; =&gt;undefined<br>typeof new Person().isProgramer; =&gt;undefined<br>静态方法不需要对象直接用 类名调用，实例方法需要一个对象才能运行。以静态方式调用实例方法无法运行，用对象.静态方法 方式调用静态方法也不能运行。</p>\n<p>私有静态成员：</p>\n<ol>\n<li>同一个构造函数创建的所有对象共享该成员</li>\n<li>构造函数外部不可访问该成员<br>可以通过闭包实现，如：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Person = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">     <span class=\"keyword\">var</span> counter = <span class=\"number\">0</span>,</div><div class=\"line\">         RealPerson;</div><div class=\"line\">    RealPerson = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        counter += <span class=\"number\">1</span>;<span class=\"comment\">//私有静态成员变量</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">    RealPerson.prototype.getId = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> counter;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> RealPerson;</div><div class=\"line\">&#125;());</div><div class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Person();</div><div class=\"line\">p1.getId(); =&gt;<span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> Person();</div><div class=\"line\">p2.getId(); =&gt;<span class=\"number\">2</span></div></pre></td></tr></table></figure>\n<p>继承模式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> inherit = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> F = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">C,P</span>)</span>&#123;</div><div class=\"line\">        F.prototype = P.prototype;</div><div class=\"line\">        C.prototype = <span class=\"keyword\">new</span> F();</div><div class=\"line\">        C.uper = P.prototype;</div><div class=\"line\">        C.prototype.constructor = C;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)());</div></pre></td></tr></table></figure>\n<p>通过复制实现继承<br>浅复制：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">extend</span>(<span class=\"params\">parent,child</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> i ;</div><div class=\"line\">    child = child || &#123;&#125;;</div><div class=\"line\">    <span class=\"keyword\">for</span>( i <span class=\"keyword\">in</span> parent)&#123;</div><div class=\"line\">         <span class=\"keyword\">if</span>(parent.hasOwnProperty(i))&#123;</div><div class=\"line\">             child[i] = parent[i];</div><div class=\"line\">         &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"keyword\">return</span> child;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>深复制:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">extendDeep</span>(<span class=\"params\">parent,child</span>)</span>&#123;</div><div class=\"line\">     <span class=\"keyword\">var</span> i,</div><div class=\"line\">         toString = <span class=\"built_in\">Object</span>.prototype.toString(),</div><div class=\"line\">         arrStr = <span class=\"string\">\"[object Array]\"</span>;</div><div class=\"line\">     child = child || &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"keyword\">for</span>(i <span class=\"keyword\">in</span> parent)&#123;</div><div class=\"line\">         <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> patrent[i] === <span class=\"string\">\"object\"</span>)&#123;</div><div class=\"line\">             child[i] = (toString.call(parent[i]) === arrStr)?[]:&#123;&#125;;</div><div class=\"line\">             extendDeep(parent[i],child[i]);</div><div class=\"line\">         &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">             child[i] = parent[i];</div><div class=\"line\">         &#125;</div><div class=\"line\">     &#125;</div><div class=\"line\">     <span class=\"keyword\">return</span> child;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>混入，从多个对象中复制成员并组合成新的对象，相当于组合。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mix</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">     <span class=\"keyword\">var</span> arg,prop,child = &#123;&#125;;</div><div class=\"line\">     <span class=\"keyword\">for</span>(arg = <span class=\"number\">0</span>;arg &lt;<span class=\"built_in\">arguments</span>.length;arg+=<span class=\"number\">1</span>)&#123;</div><div class=\"line\">         <span class=\"keyword\">for</span>(prop <span class=\"keyword\">in</span> <span class=\"built_in\">arguments</span>[arg])&#123;</div><div class=\"line\">             <span class=\"keyword\">if</span>(<span class=\"built_in\">arguments</span>[arg].hasOwnProperty(prop))&#123;</div><div class=\"line\">                child[prop] = <span class=\"built_in\">arguments</span>[arg][prop];</div><div class=\"line\">             &#125;</div><div class=\"line\">         &#125;</div><div class=\"line\">     &#125;</div><div class=\"line\">     <span class=\"keyword\">return</span> child;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里重复属性会被覆盖，可以做判断</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> cake = mix(</div><div class=\"line\">     &#123;<span class=\"attr\">eggs</span>:<span class=\"number\">2</span>&#125;,</div><div class=\"line\">     &#123;<span class=\"attr\">milk</span>:<span class=\"number\">30</span>&#125;</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<p>借用方法，有时候只想用某个对象的一些方法，而不是继承全部属性和方法，这时候可以用call apply<br>yourObject.doStuff.call(myObj, p1,p2);<br>yourObject.doStuff.apply(myObj, [p1,p2]);<br>如：借用数组方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> args = [].slice.call(<span class=\"built_in\">arguments</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>);<span class=\"comment\">//这里可以是Array.prototype.slice.call 可以减少空数组创建</span></div><div class=\"line\">    <span class=\"keyword\">return</span> args;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>call  apply 和 bind区别：<br>When you want that function to later be called with a certain context, useful in events.</p>\n<p>Call/apply call the function immediately, whereas bind returns a function that when later executed will have the correct context set for calling the original function. This way you can maintain context in async callbacks, and events.</p>\n<p>I do this a lot:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyObject</span>(<span class=\"params\">element</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.elm = element;</div><div class=\"line\"></div><div class=\"line\">    element.addEventListener(<span class=\"string\">'click'</span>, <span class=\"keyword\">this</span>.onClick.bind(<span class=\"keyword\">this</span>), <span class=\"literal\">false</span>);&#125;;</div><div class=\"line\"></div><div class=\"line\">MyObject.prototype.onClick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">     <span class=\"keyword\">var</span> t=<span class=\"keyword\">this</span>;  <span class=\"comment\">//do something with [t]...</span></div><div class=\"line\">    <span class=\"comment\">//without bind the context of this function wouldn't be a MyObject</span></div><div class=\"line\">    <span class=\"comment\">//instance as you would normally expect.</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>I use it extensively in node.js for async callbacks that I want to pass a member method for, but still want the context to be the instance that started the async action.</p>\n<p>A simple, naive implementation of bind would be like:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Function</span>.prototype.bind = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ctx</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> fn = <span class=\"keyword\">this</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        fn.apply(ctx, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">    &#125;;&#125;;</div></pre></td></tr></table></figure>"},{"layout":"post","title":"java 实现的画网络拓扑插件","date":"2013-01-04T00:43:59.000Z","author":"Lily","_content":"\n附上源码链接 https://github.com/DoTalkLily/NetworkTopoPainter ，再看那时候写的代码不太好注释不全面，仅供参考，有时间和精力再重构。\n是将之前（12年中）写的网络拓扑插件的第二版，增加了一些功能，同时将图标变小，可以迅速显示数百个网络元素，实现快速点击定位等操作，同时还可以在界面自定义添加一些如按钮菜单项等组件。\n\n![topo1](http://dl.iteye.com/upload/attachment/0068/4650/0e697a0b-a9c3-36ef-9414-5f49970df324.png)\n\n使用手册目录结构（每个标题下都带有代码例子）：\n\n![readme](http://dl.iteye.com/upload/attachment/0068/4652/a191b690-53d6-3fc1-9bf5-b72f65799d4a.png)\n\n还包括添加告警，告警级别设定，初始化指定方向箭头等功能。\n\n\n\n这里贴一段 鼠标事件定义方法的说明(摘自“使用说明”)：\n\n使用插件默认的鼠标事件类，则双击网络元素（链路或路由器交换机图标）会弹出一个窗口显示初始化时设定的名字或内容信息，右键元素会出现一个列表（有右键对象，添加告警，删除告警项）\n\n1. 继承MyMouseAction 类，重写\n\n public void showMenu(MouseEvent e, Component com)方法来控制鼠标右键点击网络元素显示的内容。\n\n例\n\n```java\n\nimport java.awt.Component;\n\nimport java.awt.event.MouseEvent;\n\nimport javax.swing.JPopupMenu;\n\n\npublicclass MyAction extends MyMouseAction\n\n{\n\n   publicvoid showMenu(MouseEvent e, Component com)//名字不能改变！\n\n   {\n\n        JPopupMenu popupMenu = new JPopupMenu();//定义一个弹出菜单\n\n        if (com instanceof TopoLink) {  //如果传入对象是TopoLink实例\n\n           TopoLink tl = (TopoLink) com;\n\n           popupMenu.add(\"右键对象：\" + tl.getLnode().getText() + \"——\"\n\n                  + tl.getRnode().getText());\n\n       } elseif (com instanceof TopoNode) { //如果传入对象是TopoNode实例\n\n           popupMenu.add(\"右键对象：\" + ((TopoNode) com).getText());\n\n       }\n\n       popupMenu.addSeparator();//分隔符\n\n       popupMenu.show(e.getComponent(), e.getX(), e.getY());//显示弹出框\n\n   }\n\n}\n\n```\n\n\n注：然后要调用d.setMyAction(new MyAction());\n\n\n\n2. 继承MyMouseAction 类，重写public void showDialog(MouseEvent e, Component com)，定义左键双击网络元素显示的内容，如弹框等，例子将在下面给出。\n\n\n\n3. public void setMode(boolean mode)\n\n//设置右上方tab切换时候显示的模式，针对各个界面都用一种网络拓扑的情况设计，如果设置//true，则各个界面显示的拓扑结构都与第一个界面相同，如各个界面共用同一拓扑结构，\n\n//只是在拓扑结构上显示的路径不同，这种情况下只要将拓扑结构中的元素添加到第一个界面//即可（不用每个界面都加一遍）；默认为false，则各个界面的拓扑元素都要分别添加。\n\n例：\n\n```java\n\n    MyMouseAction actions = new MyMouseAction ();\n\n                     actions.setMode(true);//设置模式\n\n      DrawGraph    topoView = new DrawGraph(\"窗口\");\n\n                     topoView.setMyAction(actions);\n\n```\n\n注：这里可能不好理解，一下举一个需要设置mode的情况，如图1：\n\n![tu1](http://dl.iteye.com/upload/attachment/0068/4646/56ee202b-3c33-3009-85bc-9bceffcc90fe.png)\n\n点击“界面2”图2：\n\n![tu2](http://dl.iteye.com/upload/attachment/0068/4644/3bfe8f77-e75a-333c-96bd-174ad410079d.png)\n\n\n\n\n两个界面三个元素位置相同（现网中拓扑结构应该比这个复杂很多），但是两个界面只是展示的路径不同。\n\n多说一句：程序设计中可以定义一个类似\n\nMap<Integer, ArrayList<TopoLink>> colorLinks;\n\n的结构来保存不同面板号对应需要显示的连接对象列表，然后需要自己实现并覆盖MyMouseAction中的下述两个方法：\n\npublic void drawColorLines(int tabIndex)\n\npublic void clearColorLines(int tabIndex)\n\n讲解如下：\n\n以下两个方法是右上方tab切换时候执行的动作\n\n4. 继承MyMouseAction 类，重写public void drawColorLines(int tabIndex)\n\n传入右侧上方tab的索引值（从0起计数）则画出\n\nMap<Integer, ArrayList<TopoLink>> colorLinks;（自定义）中tab索引值对应的链路列表。\n\n\n\n5. 承MyMouseAction 类，重写public void clearColorLines(int tabIndex)\n\n传入右侧上方tab的索引值（从0起计数），清除\n\nMap<Integer, ArrayList<TopoLink>> colorLinks;（自定义）中tab索引值对应的链路列表。\n\n注：这两个方法都是在public void setMode(boolean mode)模式设置为true时才会被执行到，先执行clearColorLines（lastTabIndex）;（即先清除上一个面板上内容），再\n\ndrawColorLines(currentTabIndex);(即再传入要展示的面板的索引值，画出相应内容)；\n\n为了便于理解，以下贴出简单实现的代码：\n\n\n```java\n\nimport java.awt.Component;\n\nimport java.awt.event.MouseEvent;\n\nimport java.util.ArrayList;\n\nimport java.util.HashMap;\n\nimport java.util.Map;\n\n\n\nimport javax.swing.JLayeredPane;\n\n\n\npublicclass Demo extends MyMouseAction\n\n{\n\n//tab索引号——链路列表映射\n\nMap<Integer, ArrayList<TopoLink>> colorLinks;\n\n\n\n    public Demo()\n\n    {\n\n        colorLinks = new HashMap<Integer, ArrayList<TopoLink>>();\n\n    }\n\n\n\n/**\n\n     * @return Returns the colorLinks.\n\n     */\n\n    public Map<Integer, ArrayList<TopoLink>> getColorLinks()\n\n    {\n\n        returncolorLinks;\n\n    }\n\n\n\n    /**\n\n     * @param colorLinks The colorLinks to set.\n\n     */\n\n    publicvoid setColorLinks(int tabIndex, TopoLink link)\n\n    {\n\n        if (tabIndex < 0 || link == null)\n\n        {\n\n            System.out.print(\"自定义鼠标事件类的setColorLinks参数为空！\");\n\n            return;\n\n        }\n\n        if (this.colorLinks.containsKey(tabIndex))\n\n        {\n\n            this.colorLinks.get(tabIndex).add(link);\n\n        }\n\n        else\n\n        {\n\n            ArrayList<TopoLink> tempLink = new ArrayList<TopoLink>();\n\n            tempLink.add(link);\n\n            this.colorLinks.put(tabIndex, tempLink);\n\n        }\n\n    }\n\n\n\n    //以下是重写的父类相关方法\n\n    @Override\n\n    publicvoid showDialog(MouseEvent e, Component com)\n\n    {\n\n        //这里自定义双击网络元素显示的内容\n\n    }\n\n\n\n       @Override\n\n    publicvoid showMenu(MouseEvent e, Component com)\n\n    {\n\n       //这里自己定义右键网络元素需要显示的内容\n\n    }\n\n\n\n    @Override\n\n    publicvoid drawColorLines(int tabIndex)\n\n    {\n\n        ArrayList<TopoLink> links = this.colorLinks.get(tabIndex);\n\n        if (links != null)\n\n        {\n\n            int size = links.size();\n\n            JLayeredPane temp = getCurrentPane();\n\n            for (int i = 0; i < size; i++)\n\n            {\n\n                temp.add(links.get(i));\n\n                temp.repaint();\n\n            }\n\n        }\n\n    }\n\n\n\n    @Override\n\n    publicvoid clearColorLines(int tabIndex)\n\n    {\n\n        ArrayList<TopoLink> links = this.colorLinks.get(tabIndex);\n\n        if (links != null)\n\n        {\n\n            int size = links.size();\n\n            JLayeredPane temp = getCurrentPane();\n\n            for (int i = 0; i < size; i++)\n\n            {\n\n                temp.remove(links.get(i));\n\n                temp.repaint();\n\n            }\n\n        }\n\n    }\n\n}\n```\n\n","source":"_posts/javatopo.md","raw":"---\nlayout: post\ntitle:  java 实现的画网络拓扑插件\ndate:   2013-01-04 08:43:59\nauthor: Lily\ncategories: java\ntags:\n- 网络拓扑\n- 开源\n---\n\n附上源码链接 https://github.com/DoTalkLily/NetworkTopoPainter ，再看那时候写的代码不太好注释不全面，仅供参考，有时间和精力再重构。\n是将之前（12年中）写的网络拓扑插件的第二版，增加了一些功能，同时将图标变小，可以迅速显示数百个网络元素，实现快速点击定位等操作，同时还可以在界面自定义添加一些如按钮菜单项等组件。\n\n![topo1](http://dl.iteye.com/upload/attachment/0068/4650/0e697a0b-a9c3-36ef-9414-5f49970df324.png)\n\n使用手册目录结构（每个标题下都带有代码例子）：\n\n![readme](http://dl.iteye.com/upload/attachment/0068/4652/a191b690-53d6-3fc1-9bf5-b72f65799d4a.png)\n\n还包括添加告警，告警级别设定，初始化指定方向箭头等功能。\n\n\n\n这里贴一段 鼠标事件定义方法的说明(摘自“使用说明”)：\n\n使用插件默认的鼠标事件类，则双击网络元素（链路或路由器交换机图标）会弹出一个窗口显示初始化时设定的名字或内容信息，右键元素会出现一个列表（有右键对象，添加告警，删除告警项）\n\n1. 继承MyMouseAction 类，重写\n\n public void showMenu(MouseEvent e, Component com)方法来控制鼠标右键点击网络元素显示的内容。\n\n例\n\n```java\n\nimport java.awt.Component;\n\nimport java.awt.event.MouseEvent;\n\nimport javax.swing.JPopupMenu;\n\n\npublicclass MyAction extends MyMouseAction\n\n{\n\n   publicvoid showMenu(MouseEvent e, Component com)//名字不能改变！\n\n   {\n\n        JPopupMenu popupMenu = new JPopupMenu();//定义一个弹出菜单\n\n        if (com instanceof TopoLink) {  //如果传入对象是TopoLink实例\n\n           TopoLink tl = (TopoLink) com;\n\n           popupMenu.add(\"右键对象：\" + tl.getLnode().getText() + \"——\"\n\n                  + tl.getRnode().getText());\n\n       } elseif (com instanceof TopoNode) { //如果传入对象是TopoNode实例\n\n           popupMenu.add(\"右键对象：\" + ((TopoNode) com).getText());\n\n       }\n\n       popupMenu.addSeparator();//分隔符\n\n       popupMenu.show(e.getComponent(), e.getX(), e.getY());//显示弹出框\n\n   }\n\n}\n\n```\n\n\n注：然后要调用d.setMyAction(new MyAction());\n\n\n\n2. 继承MyMouseAction 类，重写public void showDialog(MouseEvent e, Component com)，定义左键双击网络元素显示的内容，如弹框等，例子将在下面给出。\n\n\n\n3. public void setMode(boolean mode)\n\n//设置右上方tab切换时候显示的模式，针对各个界面都用一种网络拓扑的情况设计，如果设置//true，则各个界面显示的拓扑结构都与第一个界面相同，如各个界面共用同一拓扑结构，\n\n//只是在拓扑结构上显示的路径不同，这种情况下只要将拓扑结构中的元素添加到第一个界面//即可（不用每个界面都加一遍）；默认为false，则各个界面的拓扑元素都要分别添加。\n\n例：\n\n```java\n\n    MyMouseAction actions = new MyMouseAction ();\n\n                     actions.setMode(true);//设置模式\n\n      DrawGraph    topoView = new DrawGraph(\"窗口\");\n\n                     topoView.setMyAction(actions);\n\n```\n\n注：这里可能不好理解，一下举一个需要设置mode的情况，如图1：\n\n![tu1](http://dl.iteye.com/upload/attachment/0068/4646/56ee202b-3c33-3009-85bc-9bceffcc90fe.png)\n\n点击“界面2”图2：\n\n![tu2](http://dl.iteye.com/upload/attachment/0068/4644/3bfe8f77-e75a-333c-96bd-174ad410079d.png)\n\n\n\n\n两个界面三个元素位置相同（现网中拓扑结构应该比这个复杂很多），但是两个界面只是展示的路径不同。\n\n多说一句：程序设计中可以定义一个类似\n\nMap<Integer, ArrayList<TopoLink>> colorLinks;\n\n的结构来保存不同面板号对应需要显示的连接对象列表，然后需要自己实现并覆盖MyMouseAction中的下述两个方法：\n\npublic void drawColorLines(int tabIndex)\n\npublic void clearColorLines(int tabIndex)\n\n讲解如下：\n\n以下两个方法是右上方tab切换时候执行的动作\n\n4. 继承MyMouseAction 类，重写public void drawColorLines(int tabIndex)\n\n传入右侧上方tab的索引值（从0起计数）则画出\n\nMap<Integer, ArrayList<TopoLink>> colorLinks;（自定义）中tab索引值对应的链路列表。\n\n\n\n5. 承MyMouseAction 类，重写public void clearColorLines(int tabIndex)\n\n传入右侧上方tab的索引值（从0起计数），清除\n\nMap<Integer, ArrayList<TopoLink>> colorLinks;（自定义）中tab索引值对应的链路列表。\n\n注：这两个方法都是在public void setMode(boolean mode)模式设置为true时才会被执行到，先执行clearColorLines（lastTabIndex）;（即先清除上一个面板上内容），再\n\ndrawColorLines(currentTabIndex);(即再传入要展示的面板的索引值，画出相应内容)；\n\n为了便于理解，以下贴出简单实现的代码：\n\n\n```java\n\nimport java.awt.Component;\n\nimport java.awt.event.MouseEvent;\n\nimport java.util.ArrayList;\n\nimport java.util.HashMap;\n\nimport java.util.Map;\n\n\n\nimport javax.swing.JLayeredPane;\n\n\n\npublicclass Demo extends MyMouseAction\n\n{\n\n//tab索引号——链路列表映射\n\nMap<Integer, ArrayList<TopoLink>> colorLinks;\n\n\n\n    public Demo()\n\n    {\n\n        colorLinks = new HashMap<Integer, ArrayList<TopoLink>>();\n\n    }\n\n\n\n/**\n\n     * @return Returns the colorLinks.\n\n     */\n\n    public Map<Integer, ArrayList<TopoLink>> getColorLinks()\n\n    {\n\n        returncolorLinks;\n\n    }\n\n\n\n    /**\n\n     * @param colorLinks The colorLinks to set.\n\n     */\n\n    publicvoid setColorLinks(int tabIndex, TopoLink link)\n\n    {\n\n        if (tabIndex < 0 || link == null)\n\n        {\n\n            System.out.print(\"自定义鼠标事件类的setColorLinks参数为空！\");\n\n            return;\n\n        }\n\n        if (this.colorLinks.containsKey(tabIndex))\n\n        {\n\n            this.colorLinks.get(tabIndex).add(link);\n\n        }\n\n        else\n\n        {\n\n            ArrayList<TopoLink> tempLink = new ArrayList<TopoLink>();\n\n            tempLink.add(link);\n\n            this.colorLinks.put(tabIndex, tempLink);\n\n        }\n\n    }\n\n\n\n    //以下是重写的父类相关方法\n\n    @Override\n\n    publicvoid showDialog(MouseEvent e, Component com)\n\n    {\n\n        //这里自定义双击网络元素显示的内容\n\n    }\n\n\n\n       @Override\n\n    publicvoid showMenu(MouseEvent e, Component com)\n\n    {\n\n       //这里自己定义右键网络元素需要显示的内容\n\n    }\n\n\n\n    @Override\n\n    publicvoid drawColorLines(int tabIndex)\n\n    {\n\n        ArrayList<TopoLink> links = this.colorLinks.get(tabIndex);\n\n        if (links != null)\n\n        {\n\n            int size = links.size();\n\n            JLayeredPane temp = getCurrentPane();\n\n            for (int i = 0; i < size; i++)\n\n            {\n\n                temp.add(links.get(i));\n\n                temp.repaint();\n\n            }\n\n        }\n\n    }\n\n\n\n    @Override\n\n    publicvoid clearColorLines(int tabIndex)\n\n    {\n\n        ArrayList<TopoLink> links = this.colorLinks.get(tabIndex);\n\n        if (links != null)\n\n        {\n\n            int size = links.size();\n\n            JLayeredPane temp = getCurrentPane();\n\n            for (int i = 0; i < size; i++)\n\n            {\n\n                temp.remove(links.get(i));\n\n                temp.repaint();\n\n            }\n\n        }\n\n    }\n\n}\n```\n\n","slug":"javatopo","published":1,"updated":"2017-02-13T13:30:29.000Z","comments":1,"photos":[],"link":"","_id":"cizknqupd000595c4tazyazz2","content":"<p>附上源码链接 <a href=\"https://github.com/DoTalkLily/NetworkTopoPainter\" target=\"_blank\" rel=\"external\">https://github.com/DoTalkLily/NetworkTopoPainter</a> ，再看那时候写的代码不太好注释不全面，仅供参考，有时间和精力再重构。<br>是将之前（12年中）写的网络拓扑插件的第二版，增加了一些功能，同时将图标变小，可以迅速显示数百个网络元素，实现快速点击定位等操作，同时还可以在界面自定义添加一些如按钮菜单项等组件。</p>\n<p><img src=\"http://dl.iteye.com/upload/attachment/0068/4650/0e697a0b-a9c3-36ef-9414-5f49970df324.png\" alt=\"topo1\"></p>\n<p>使用手册目录结构（每个标题下都带有代码例子）：</p>\n<p><img src=\"http://dl.iteye.com/upload/attachment/0068/4652/a191b690-53d6-3fc1-9bf5-b72f65799d4a.png\" alt=\"readme\"></p>\n<p>还包括添加告警，告警级别设定，初始化指定方向箭头等功能。</p>\n<p>这里贴一段 鼠标事件定义方法的说明(摘自“使用说明”)：</p>\n<p>使用插件默认的鼠标事件类，则双击网络元素（链路或路由器交换机图标）会弹出一个窗口显示初始化时设定的名字或内容信息，右键元素会出现一个列表（有右键对象，添加告警，删除告警项）</p>\n<ol>\n<li><p>继承MyMouseAction 类，重写</p>\n<p>public void showMenu(MouseEvent e, Component com)方法来控制鼠标右键点击网络元素显示的内容。</p>\n</li>\n</ol>\n<p>例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.Component;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.event.MouseEvent;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JPopupMenu;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">publicclass MyAction extends MyMouseAction</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\">publicvoid <span class=\"title\">showMenu</span><span class=\"params\">(MouseEvent e, Component com)</span><span class=\"comment\">//名字不能改变！</span></span></div><div class=\"line\"></div><div class=\"line\">   &#123;</div><div class=\"line\"></div><div class=\"line\">        JPopupMenu popupMenu = <span class=\"keyword\">new</span> JPopupMenu();<span class=\"comment\">//定义一个弹出菜单</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (com <span class=\"keyword\">instanceof</span> TopoLink) &#123;  <span class=\"comment\">//如果传入对象是TopoLink实例</span></div><div class=\"line\"></div><div class=\"line\">           TopoLink tl = (TopoLink) com;</div><div class=\"line\"></div><div class=\"line\">           popupMenu.add(<span class=\"string\">\"右键对象：\"</span> + tl.getLnode().getText() + <span class=\"string\">\"——\"</span></div><div class=\"line\"></div><div class=\"line\">                  + tl.getRnode().getText());</div><div class=\"line\"></div><div class=\"line\">       &#125; elseif (com <span class=\"keyword\">instanceof</span> TopoNode) &#123; <span class=\"comment\">//如果传入对象是TopoNode实例</span></div><div class=\"line\"></div><div class=\"line\">           popupMenu.add(<span class=\"string\">\"右键对象：\"</span> + ((TopoNode) com).getText());</div><div class=\"line\"></div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       popupMenu.addSeparator();<span class=\"comment\">//分隔符</span></div><div class=\"line\"></div><div class=\"line\">       popupMenu.show(e.getComponent(), e.getX(), e.getY());<span class=\"comment\">//显示弹出框</span></div><div class=\"line\"></div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注：然后要调用d.setMyAction(new MyAction());</p>\n<ol>\n<li>继承MyMouseAction 类，重写public void showDialog(MouseEvent e, Component com)，定义左键双击网络元素显示的内容，如弹框等，例子将在下面给出。</li>\n</ol>\n<ol>\n<li>public void setMode(boolean mode)</li>\n</ol>\n<p>//设置右上方tab切换时候显示的模式，针对各个界面都用一种网络拓扑的情况设计，如果设置//true，则各个界面显示的拓扑结构都与第一个界面相同，如各个界面共用同一拓扑结构，</p>\n<p>//只是在拓扑结构上显示的路径不同，这种情况下只要将拓扑结构中的元素添加到第一个界面//即可（不用每个界面都加一遍）；默认为false，则各个界面的拓扑元素都要分别添加。</p>\n<p>例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">MyMouseAction actions = <span class=\"keyword\">new</span> MyMouseAction ();</div><div class=\"line\"></div><div class=\"line\">                 actions.setMode(<span class=\"keyword\">true</span>);<span class=\"comment\">//设置模式</span></div><div class=\"line\"></div><div class=\"line\">  DrawGraph    topoView = <span class=\"keyword\">new</span> DrawGraph(<span class=\"string\">\"窗口\"</span>);</div><div class=\"line\"></div><div class=\"line\">                 topoView.setMyAction(actions);</div></pre></td></tr></table></figure>\n<p>注：这里可能不好理解，一下举一个需要设置mode的情况，如图1：</p>\n<p><img src=\"http://dl.iteye.com/upload/attachment/0068/4646/56ee202b-3c33-3009-85bc-9bceffcc90fe.png\" alt=\"tu1\"></p>\n<p>点击“界面2”图2：</p>\n<p><img src=\"http://dl.iteye.com/upload/attachment/0068/4644/3bfe8f77-e75a-333c-96bd-174ad410079d.png\" alt=\"tu2\"></p>\n<p>两个界面三个元素位置相同（现网中拓扑结构应该比这个复杂很多），但是两个界面只是展示的路径不同。</p>\n<p>多说一句：程序设计中可以定义一个类似</p>\n<p>Map<integer, arraylist<topolink=\"\">&gt; colorLinks;</integer,></p>\n<p>的结构来保存不同面板号对应需要显示的连接对象列表，然后需要自己实现并覆盖MyMouseAction中的下述两个方法：</p>\n<p>public void drawColorLines(int tabIndex)</p>\n<p>public void clearColorLines(int tabIndex)</p>\n<p>讲解如下：</p>\n<p>以下两个方法是右上方tab切换时候执行的动作</p>\n<ol>\n<li>继承MyMouseAction 类，重写public void drawColorLines(int tabIndex)</li>\n</ol>\n<p>传入右侧上方tab的索引值（从0起计数）则画出</p>\n<p>Map<integer, arraylist<topolink=\"\">&gt; colorLinks;（自定义）中tab索引值对应的链路列表。</integer,></p>\n<ol>\n<li>承MyMouseAction 类，重写public void clearColorLines(int tabIndex)</li>\n</ol>\n<p>传入右侧上方tab的索引值（从0起计数），清除</p>\n<p>Map<integer, arraylist<topolink=\"\">&gt; colorLinks;（自定义）中tab索引值对应的链路列表。</integer,></p>\n<p>注：这两个方法都是在public void setMode(boolean mode)模式设置为true时才会被执行到，先执行clearColorLines（lastTabIndex）;（即先清除上一个面板上内容），再</p>\n<p>drawColorLines(currentTabIndex);(即再传入要展示的面板的索引值，画出相应内容)；</p>\n<p>为了便于理解，以下贴出简单实现的代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.Component;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.event.MouseEvent;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JLayeredPane;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">publicclass Demo extends MyMouseAction</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//tab索引号——链路列表映射</span></div><div class=\"line\"></div><div class=\"line\">Map&lt;Integer, ArrayList&lt;TopoLink&gt;&gt; colorLinks;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Demo</span><span class=\"params\">()</span></span></div><div class=\"line\"></div><div class=\"line\">    &#123;</div><div class=\"line\"></div><div class=\"line\">        colorLinks = <span class=\"keyword\">new</span> HashMap&lt;Integer, ArrayList&lt;TopoLink&gt;&gt;();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"></div><div class=\"line\">     * <span class=\"doctag\">@return</span> Returns the colorLinks.</div><div class=\"line\"></div><div class=\"line\">     */</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> Map&lt;Integer, ArrayList&lt;TopoLink&gt;&gt; getColorLinks()</div><div class=\"line\"></div><div class=\"line\">    &#123;</div><div class=\"line\"></div><div class=\"line\">        returncolorLinks;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"></div><div class=\"line\">     * <span class=\"doctag\">@param</span> colorLinks The colorLinks to set.</div><div class=\"line\"></div><div class=\"line\">     */</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">publicvoid <span class=\"title\">setColorLinks</span><span class=\"params\">(<span class=\"keyword\">int</span> tabIndex, TopoLink link)</span></span></div><div class=\"line\"></div><div class=\"line\">    &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (tabIndex &lt; <span class=\"number\">0</span> || link == <span class=\"keyword\">null</span>)</div><div class=\"line\"></div><div class=\"line\">        &#123;</div><div class=\"line\"></div><div class=\"line\">            System.out.print(<span class=\"string\">\"自定义鼠标事件类的setColorLinks参数为空！\"</span>);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.colorLinks.containsKey(tabIndex))</div><div class=\"line\"></div><div class=\"line\">        &#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">this</span>.colorLinks.get(tabIndex).add(link);</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\"></div><div class=\"line\">        &#123;</div><div class=\"line\"></div><div class=\"line\">            ArrayList&lt;TopoLink&gt; tempLink = <span class=\"keyword\">new</span> ArrayList&lt;TopoLink&gt;();</div><div class=\"line\"></div><div class=\"line\">            tempLink.add(link);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">this</span>.colorLinks.put(tabIndex, tempLink);</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//以下是重写的父类相关方法</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">publicvoid <span class=\"title\">showDialog</span><span class=\"params\">(MouseEvent e, Component com)</span></span></div><div class=\"line\"></div><div class=\"line\">    &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//这里自定义双击网络元素显示的内容</span></div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">       <span class=\"meta\">@Override</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">publicvoid <span class=\"title\">showMenu</span><span class=\"params\">(MouseEvent e, Component com)</span></span></div><div class=\"line\"></div><div class=\"line\">    &#123;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">//这里自己定义右键网络元素需要显示的内容</span></div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">publicvoid <span class=\"title\">drawColorLines</span><span class=\"params\">(<span class=\"keyword\">int</span> tabIndex)</span></span></div><div class=\"line\"></div><div class=\"line\">    &#123;</div><div class=\"line\"></div><div class=\"line\">        ArrayList&lt;TopoLink&gt; links = <span class=\"keyword\">this</span>.colorLinks.get(tabIndex);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (links != <span class=\"keyword\">null</span>)</div><div class=\"line\"></div><div class=\"line\">        &#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">int</span> size = links.size();</div><div class=\"line\"></div><div class=\"line\">            JLayeredPane temp = getCurrentPane();</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++)</div><div class=\"line\"></div><div class=\"line\">            &#123;</div><div class=\"line\"></div><div class=\"line\">                temp.add(links.get(i));</div><div class=\"line\"></div><div class=\"line\">                temp.repaint();</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">publicvoid <span class=\"title\">clearColorLines</span><span class=\"params\">(<span class=\"keyword\">int</span> tabIndex)</span></span></div><div class=\"line\"></div><div class=\"line\">    &#123;</div><div class=\"line\"></div><div class=\"line\">        ArrayList&lt;TopoLink&gt; links = <span class=\"keyword\">this</span>.colorLinks.get(tabIndex);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (links != <span class=\"keyword\">null</span>)</div><div class=\"line\"></div><div class=\"line\">        &#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">int</span> size = links.size();</div><div class=\"line\"></div><div class=\"line\">            JLayeredPane temp = getCurrentPane();</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++)</div><div class=\"line\"></div><div class=\"line\">            &#123;</div><div class=\"line\"></div><div class=\"line\">                temp.remove(links.get(i));</div><div class=\"line\"></div><div class=\"line\">                temp.repaint();</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>附上源码链接 <a href=\"https://github.com/DoTalkLily/NetworkTopoPainter\">https://github.com/DoTalkLily/NetworkTopoPainter</a> ，再看那时候写的代码不太好注释不全面，仅供参考，有时间和精力再重构。<br>是将之前（12年中）写的网络拓扑插件的第二版，增加了一些功能，同时将图标变小，可以迅速显示数百个网络元素，实现快速点击定位等操作，同时还可以在界面自定义添加一些如按钮菜单项等组件。</p>\n<p><img src=\"http://dl.iteye.com/upload/attachment/0068/4650/0e697a0b-a9c3-36ef-9414-5f49970df324.png\" alt=\"topo1\"></p>\n<p>使用手册目录结构（每个标题下都带有代码例子）：</p>\n<p><img src=\"http://dl.iteye.com/upload/attachment/0068/4652/a191b690-53d6-3fc1-9bf5-b72f65799d4a.png\" alt=\"readme\"></p>\n<p>还包括添加告警，告警级别设定，初始化指定方向箭头等功能。</p>\n<p>这里贴一段 鼠标事件定义方法的说明(摘自“使用说明”)：</p>\n<p>使用插件默认的鼠标事件类，则双击网络元素（链路或路由器交换机图标）会弹出一个窗口显示初始化时设定的名字或内容信息，右键元素会出现一个列表（有右键对象，添加告警，删除告警项）</p>\n<ol>\n<li><p>继承MyMouseAction 类，重写</p>\n<p>public void showMenu(MouseEvent e, Component com)方法来控制鼠标右键点击网络元素显示的内容。</p>\n</li>\n</ol>\n<p>例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.Component;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.event.MouseEvent;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JPopupMenu;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">publicclass MyAction extends MyMouseAction</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\">publicvoid <span class=\"title\">showMenu</span><span class=\"params\">(MouseEvent e, Component com)</span><span class=\"comment\">//名字不能改变！</span></div><div class=\"line\"></div><div class=\"line\">   </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        JPopupMenu popupMenu = <span class=\"keyword\">new</span> JPopupMenu();<span class=\"comment\">//定义一个弹出菜单</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (com <span class=\"keyword\">instanceof</span> TopoLink) &#123;  <span class=\"comment\">//如果传入对象是TopoLink实例</span></div><div class=\"line\"></div><div class=\"line\">           TopoLink tl = (TopoLink) com;</div><div class=\"line\"></div><div class=\"line\">           popupMenu.add(<span class=\"string\">\"右键对象：\"</span> + tl.getLnode().getText() + <span class=\"string\">\"——\"</span></div><div class=\"line\"></div><div class=\"line\">                  + tl.getRnode().getText());</div><div class=\"line\"></div><div class=\"line\">       &#125; elseif (com <span class=\"keyword\">instanceof</span> TopoNode) &#123; <span class=\"comment\">//如果传入对象是TopoNode实例</span></div><div class=\"line\"></div><div class=\"line\">           popupMenu.add(<span class=\"string\">\"右键对象：\"</span> + ((TopoNode) com).getText());</div><div class=\"line\"></div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       popupMenu.addSeparator();<span class=\"comment\">//分隔符</span></div><div class=\"line\"></div><div class=\"line\">       popupMenu.show(e.getComponent(), e.getX(), e.getY());<span class=\"comment\">//显示弹出框</span></div><div class=\"line\"></div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注：然后要调用d.setMyAction(new MyAction());</p>\n<ol>\n<li>继承MyMouseAction 类，重写public void showDialog(MouseEvent e, Component com)，定义左键双击网络元素显示的内容，如弹框等，例子将在下面给出。</li>\n</ol>\n<ol>\n<li>public void setMode(boolean mode)</li>\n</ol>\n<p>//设置右上方tab切换时候显示的模式，针对各个界面都用一种网络拓扑的情况设计，如果设置//true，则各个界面显示的拓扑结构都与第一个界面相同，如各个界面共用同一拓扑结构，</p>\n<p>//只是在拓扑结构上显示的路径不同，这种情况下只要将拓扑结构中的元素添加到第一个界面//即可（不用每个界面都加一遍）；默认为false，则各个界面的拓扑元素都要分别添加。</p>\n<p>例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">MyMouseAction actions = <span class=\"keyword\">new</span> MyMouseAction ();</div><div class=\"line\"></div><div class=\"line\">                 actions.setMode(<span class=\"keyword\">true</span>);<span class=\"comment\">//设置模式</span></div><div class=\"line\"></div><div class=\"line\">  DrawGraph    topoView = <span class=\"keyword\">new</span> DrawGraph(<span class=\"string\">\"窗口\"</span>);</div><div class=\"line\"></div><div class=\"line\">                 topoView.setMyAction(actions);</div></pre></td></tr></table></figure>\n<p>注：这里可能不好理解，一下举一个需要设置mode的情况，如图1：</p>\n<p><img src=\"http://dl.iteye.com/upload/attachment/0068/4646/56ee202b-3c33-3009-85bc-9bceffcc90fe.png\" alt=\"tu1\"></p>\n<p>点击“界面2”图2：</p>\n<p><img src=\"http://dl.iteye.com/upload/attachment/0068/4644/3bfe8f77-e75a-333c-96bd-174ad410079d.png\" alt=\"tu2\"></p>\n<p>两个界面三个元素位置相同（现网中拓扑结构应该比这个复杂很多），但是两个界面只是展示的路径不同。</p>\n<p>多说一句：程序设计中可以定义一个类似</p>\n<p>Map<Integer, ArrayList<TopoLink>&gt; colorLinks;</p>\n<p>的结构来保存不同面板号对应需要显示的连接对象列表，然后需要自己实现并覆盖MyMouseAction中的下述两个方法：</p>\n<p>public void drawColorLines(int tabIndex)</p>\n<p>public void clearColorLines(int tabIndex)</p>\n<p>讲解如下：</p>\n<p>以下两个方法是右上方tab切换时候执行的动作</p>\n<ol>\n<li>继承MyMouseAction 类，重写public void drawColorLines(int tabIndex)</li>\n</ol>\n<p>传入右侧上方tab的索引值（从0起计数）则画出</p>\n<p>Map<Integer, ArrayList<TopoLink>&gt; colorLinks;（自定义）中tab索引值对应的链路列表。</p>\n<ol>\n<li>承MyMouseAction 类，重写public void clearColorLines(int tabIndex)</li>\n</ol>\n<p>传入右侧上方tab的索引值（从0起计数），清除</p>\n<p>Map<Integer, ArrayList<TopoLink>&gt; colorLinks;（自定义）中tab索引值对应的链路列表。</p>\n<p>注：这两个方法都是在public void setMode(boolean mode)模式设置为true时才会被执行到，先执行clearColorLines（lastTabIndex）;（即先清除上一个面板上内容），再</p>\n<p>drawColorLines(currentTabIndex);(即再传入要展示的面板的索引值，画出相应内容)；</p>\n<p>为了便于理解，以下贴出简单实现的代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.Component;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.event.MouseEvent;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.swing.JLayeredPane;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">publicclass Demo extends MyMouseAction</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//tab索引号——链路列表映射</span></div><div class=\"line\"></div><div class=\"line\">Map&lt;Integer, ArrayList&lt;TopoLink&gt;&gt; colorLinks;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Demo</span><span class=\"params\">()</span></div><div class=\"line\"></div><div class=\"line\">    </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        colorLinks = <span class=\"keyword\">new</span> HashMap&lt;Integer, ArrayList&lt;TopoLink&gt;&gt;();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"></div><div class=\"line\">     * <span class=\"doctag\">@return</span> Returns the colorLinks.</div><div class=\"line\"></div><div class=\"line\">     */</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> Map&lt;Integer, ArrayList&lt;TopoLink&gt;&gt; getColorLinks()</div><div class=\"line\"></div><div class=\"line\">    &#123;</div><div class=\"line\"></div><div class=\"line\">        returncolorLinks;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\"></div><div class=\"line\">     * <span class=\"doctag\">@param</span> colorLinks The colorLinks to set.</div><div class=\"line\"></div><div class=\"line\">     */</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">publicvoid <span class=\"title\">setColorLinks</span><span class=\"params\">(<span class=\"keyword\">int</span> tabIndex, TopoLink link)</span></div><div class=\"line\"></div><div class=\"line\">    </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (tabIndex &lt; <span class=\"number\">0</span> || link == <span class=\"keyword\">null</span>)</div><div class=\"line\"></div><div class=\"line\">        &#123;</div><div class=\"line\"></div><div class=\"line\">            System.out.print(<span class=\"string\">\"自定义鼠标事件类的setColorLinks参数为空！\"</span>);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.colorLinks.containsKey(tabIndex))</div><div class=\"line\"></div><div class=\"line\">        &#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">this</span>.colorLinks.get(tabIndex).add(link);</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\"></div><div class=\"line\">        &#123;</div><div class=\"line\"></div><div class=\"line\">            ArrayList&lt;TopoLink&gt; tempLink = <span class=\"keyword\">new</span> ArrayList&lt;TopoLink&gt;();</div><div class=\"line\"></div><div class=\"line\">            tempLink.add(link);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">this</span>.colorLinks.put(tabIndex, tempLink);</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//以下是重写的父类相关方法</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">publicvoid <span class=\"title\">showDialog</span><span class=\"params\">(MouseEvent e, Component com)</span></div><div class=\"line\"></div><div class=\"line\">    </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//这里自定义双击网络元素显示的内容</span></div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">       <span class=\"meta\">@Override</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">publicvoid <span class=\"title\">showMenu</span><span class=\"params\">(MouseEvent e, Component com)</span></div><div class=\"line\"></div><div class=\"line\">    </span>&#123;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">//这里自己定义右键网络元素需要显示的内容</span></div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">publicvoid <span class=\"title\">drawColorLines</span><span class=\"params\">(<span class=\"keyword\">int</span> tabIndex)</span></div><div class=\"line\"></div><div class=\"line\">    </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        ArrayList&lt;TopoLink&gt; links = <span class=\"keyword\">this</span>.colorLinks.get(tabIndex);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (links != <span class=\"keyword\">null</span>)</div><div class=\"line\"></div><div class=\"line\">        &#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">int</span> size = links.size();</div><div class=\"line\"></div><div class=\"line\">            JLayeredPane temp = getCurrentPane();</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++)</div><div class=\"line\"></div><div class=\"line\">            &#123;</div><div class=\"line\"></div><div class=\"line\">                temp.add(links.get(i));</div><div class=\"line\"></div><div class=\"line\">                temp.repaint();</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">publicvoid <span class=\"title\">clearColorLines</span><span class=\"params\">(<span class=\"keyword\">int</span> tabIndex)</span></div><div class=\"line\"></div><div class=\"line\">    </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        ArrayList&lt;TopoLink&gt; links = <span class=\"keyword\">this</span>.colorLinks.get(tabIndex);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (links != <span class=\"keyword\">null</span>)</div><div class=\"line\"></div><div class=\"line\">        &#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">int</span> size = links.size();</div><div class=\"line\"></div><div class=\"line\">            JLayeredPane temp = getCurrentPane();</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++)</div><div class=\"line\"></div><div class=\"line\">            &#123;</div><div class=\"line\"></div><div class=\"line\">                temp.remove(links.get(i));</div><div class=\"line\"></div><div class=\"line\">                temp.repaint();</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"layout":"post","title":"React Native & IOS 动画效果实现","date":"2017-02-20T00:43:59.000Z","author":"Lily","_content":"\n开篇插播一条广告，欢迎大家下载和使用，狸猫相机，一个3D特效自拍、朋友圈短视频创作神器3D特效自拍变脸、朋友圈短视频创作神器。头条出品，必属精品~\n下面进入正题~\n产品主要用React Native(以下简称RN)和native开发，其中Story页面（包含联系人发的视频列表）和视频播放（涵盖很多复杂手势交互比如点赞动画，左右滑切视频，上拉出评论弹框等）以及消息页面等功能主要基于RN开发（部分小功能和模块用native封装供RN调用）。\n最近接了个需求，pm想要实现如下的动效果：\n点击列表页的任意头像逐渐放大然后自然过渡到播放页面，如下图所示：\n\n<img src=\"https://wiki.bytedance.net/download/attachments/78356276/fangda.gif?version=1&modificationDate=1487865498779&api=v2\" width=300/>\n\n待视频播放完后渐渐缩小回到列表页原来的位置，如下图所示：\n\n<img src=\"https://wiki.bytedance.net/download/attachments/78356276/suoxiao.gif?version=1&modificationDate=1487865513267&api=v2\" width=300/>\n\n如果列表和视频播放页面纯用native实现，那么可以用UIView的animateWithDuration或者一个CAAnimationGroup先将头像边放大边位移到屏幕中间，再让即将展现的UiViewController实现UIViewControllerTransitioningDelegate协议，在页面切入，退出的时候调用一个自定义的继承UIViewControllerAnimatedTransitioning的转场动画效果类，实现转场动画，展现第二个页面。网上也有一些类似的自定义转场动画，效果很酷，参见[Hero](https://github.com/lkzhao/Hero) 或[这个例子](https://github.com/wazrx/XWTrasitionPractice)。\n\n那么回到我们的项目，如果这两个页面是纯RN实现的，并且页面路由使用一个第三方组件[react-native-router-flux](https://github.com/aksonov/react-native-router-flux),倒是可以添加一些简单的转场效果，水平垂直滑入、淡入等。但是较复杂的转场动画实现起来比较复杂，不能保证在ios和andoid平台动画的流畅度，而且要自己想办法实现比如动画结束的钩子函数，比较复杂。因此想办法利用native实现整个动画。那么如何在RN实现的页面上加native动画和转场呢？这里沿用上面native实现的思路，将整个过程分为两段，第一段用native控制头像和边框放大同时位移到中间位置，第二段与native不同的是，这里用rn组件实现的路由，因此无法通过自定义UIViewController转场效果切换动画（改造成本也比较大），因此这里用native获得当前navigation stack中最顶层的UIViewController，定义一个CABasicAnimation用于模拟转场扩散效果，然后加在上面得到的UIViewController的mask（遮罩）属性上来模拟纯native的转场效果。\n\n介绍实现方法前，首先介绍下针对现有的业务，实现这个动画要考虑到的点：\n\n+ 大小图切换：video第一帧要展示大图而story列表对应的后端裁剪后的小图。方法：点击瞬间将头像图替换成要播放的第一帧大图。\n+ 列表页面的图不一定是点击要播放的图，比如点击要播放第一个未读的视频，但是列表中确要展示一个已读的视频图片。方法：和后端定义接口，加字段传来下一个要播放的视频第一帧。\n+ 第一段动画有一层渐变的蒙层，方法：缩放过程加蒙层，用动画控制淡入淡出。\n+ 位置计算，可以看到，圆框和里面的图片放大的速度不同，而且图片要放大到和要播放的封面一样大再淡出。方法：根据图片实际大小和当前屏幕大小以及圆框大小计算两者的缩放比例，分别缩放。\n+ 两段动画如何流畅衔接，如果第一段动画放大到中间瞬间跳第二个页面同时加转场盖住，会有闪动。方法：考虑优化策略，下面会介绍。\n+ 按照业务逻辑，视频播放结束回到列表页会立刻向后端拉取一次列表，如果缩放的圆框‘回来’时不在原来的位置了，或者被删除了怎么搞？方法：加回调等动画结束再通知RN再拉取。\n+ 多个视频要播放，在任意视频播放过程中要回到story页面场景，这时候要缩小的图片和列表中的图片可能不一致。方法：缩小动画执行前将当前的封面url从rn传给native。\n\n下面介绍一下具体实现：\n用native实现动画，首先要保证动画目标元素是native的，因此首先将列表中渲染的头像用native封装成ui component暴露给rn，即下方红框区域：\n\n<img src=\"https://wiki.bytedance.net/download/attachments/78356276/touxiang.png?version=1&modificationDate=1487865517733&api=v2\" width=300 />\n\nIOS部分代码如下：\n\n![](https://wiki.bytedance.net/download/attachments/78356276/code2.png?version=1&modificationDate=1487865531084&api=v2)\n\n用RN实现的列表部分渲染一个头像区域的代码如下（精简版）：\n\n![](https://wiki.bytedance.net/download/attachments/78356276/code1.png?version=1&modificationDate=1487865517993&api=v2)\n\n改成用刚封装的组件：\n\n![](https://wiki.bytedance.net/download/attachments/78356276/code3.png?version=1&modificationDate=1487865531285&api=v2)\n\n原来的头像点击事件是直接打开video页面，现在是：\n\n![](https://wiki.bytedance.net/download/attachments/78356276/code4.png?version=1&modificationDate=1487865531612&api=v2)\n\n点击调用这个元素的放大动画：\n第一段动画代码：\n\n![](https://wiki.bytedance.net/download/attachments/78356276/code5.png?version=1&modificationDate=1487865534177&api=v2)\n\n效果：\n\n<img src=\"https://wiki.bytedance.net/download/attachments/78356276/jieduan1.gif?version=1&modificationDate=1487865494247&api=v2\" width=300/>\n\n注意这里有个hack，为保证两个动画衔接，在第一段动画执行前有一句：\n [self performSelector:@selector(sendEvent) withObject:nil afterDelay:0.2f];\n200ms后发送一个消息给RN唤起即将呈现的video页面，已保证第一段动画结束时遮罩底层已经是第二个页面了。\n\n然后在第一段动画结束的回掉函数中调用转场效果动画：\n\n![](https://wiki.bytedance.net/download/attachments/78356276/code7.png?version=1&modificationDate=1487865531763&api=v2)\n\n看下转场动画实现方式：\n\n![](https://wiki.bytedance.net/download/attachments/78356276/code8.png?version=1&modificationDate=1487865533854&api=v2)\n\n第二段动画效果：\n\n<img src=\"https://wiki.bytedance.net/download/attachments/78356276/jieduan2.gif?version=1&modificationDate=1487865506266&api=v2\" width=300/>\n\n\n关闭效果实现方式类似，也是两段动画拼接这里不再赘述。\n\n还有些待调整的部分，比如动画执行时长，蒙层透明度变化，第二屏幕切换时机等，初步效果如下：\n\n<img src=\"https://wiki.bytedance.net/download/attachments/78356296/xiaoguo.gif?version=1&modificationDate=1487866423000&api=v2\" width=300/>\n\n\n欢迎交流：）\n\n\n","source":"_posts/reactnative_ios_动画效果实现.md","raw":"---\nlayout: post\ntitle:  React Native & IOS 动画效果实现\ndate:   2017-02-20 08:43:59\nauthor: Lily\ncategories: frontend\ntags:\n- React Native\n- 动画\n---\n\n开篇插播一条广告，欢迎大家下载和使用，狸猫相机，一个3D特效自拍、朋友圈短视频创作神器3D特效自拍变脸、朋友圈短视频创作神器。头条出品，必属精品~\n下面进入正题~\n产品主要用React Native(以下简称RN)和native开发，其中Story页面（包含联系人发的视频列表）和视频播放（涵盖很多复杂手势交互比如点赞动画，左右滑切视频，上拉出评论弹框等）以及消息页面等功能主要基于RN开发（部分小功能和模块用native封装供RN调用）。\n最近接了个需求，pm想要实现如下的动效果：\n点击列表页的任意头像逐渐放大然后自然过渡到播放页面，如下图所示：\n\n<img src=\"https://wiki.bytedance.net/download/attachments/78356276/fangda.gif?version=1&modificationDate=1487865498779&api=v2\" width=300/>\n\n待视频播放完后渐渐缩小回到列表页原来的位置，如下图所示：\n\n<img src=\"https://wiki.bytedance.net/download/attachments/78356276/suoxiao.gif?version=1&modificationDate=1487865513267&api=v2\" width=300/>\n\n如果列表和视频播放页面纯用native实现，那么可以用UIView的animateWithDuration或者一个CAAnimationGroup先将头像边放大边位移到屏幕中间，再让即将展现的UiViewController实现UIViewControllerTransitioningDelegate协议，在页面切入，退出的时候调用一个自定义的继承UIViewControllerAnimatedTransitioning的转场动画效果类，实现转场动画，展现第二个页面。网上也有一些类似的自定义转场动画，效果很酷，参见[Hero](https://github.com/lkzhao/Hero) 或[这个例子](https://github.com/wazrx/XWTrasitionPractice)。\n\n那么回到我们的项目，如果这两个页面是纯RN实现的，并且页面路由使用一个第三方组件[react-native-router-flux](https://github.com/aksonov/react-native-router-flux),倒是可以添加一些简单的转场效果，水平垂直滑入、淡入等。但是较复杂的转场动画实现起来比较复杂，不能保证在ios和andoid平台动画的流畅度，而且要自己想办法实现比如动画结束的钩子函数，比较复杂。因此想办法利用native实现整个动画。那么如何在RN实现的页面上加native动画和转场呢？这里沿用上面native实现的思路，将整个过程分为两段，第一段用native控制头像和边框放大同时位移到中间位置，第二段与native不同的是，这里用rn组件实现的路由，因此无法通过自定义UIViewController转场效果切换动画（改造成本也比较大），因此这里用native获得当前navigation stack中最顶层的UIViewController，定义一个CABasicAnimation用于模拟转场扩散效果，然后加在上面得到的UIViewController的mask（遮罩）属性上来模拟纯native的转场效果。\n\n介绍实现方法前，首先介绍下针对现有的业务，实现这个动画要考虑到的点：\n\n+ 大小图切换：video第一帧要展示大图而story列表对应的后端裁剪后的小图。方法：点击瞬间将头像图替换成要播放的第一帧大图。\n+ 列表页面的图不一定是点击要播放的图，比如点击要播放第一个未读的视频，但是列表中确要展示一个已读的视频图片。方法：和后端定义接口，加字段传来下一个要播放的视频第一帧。\n+ 第一段动画有一层渐变的蒙层，方法：缩放过程加蒙层，用动画控制淡入淡出。\n+ 位置计算，可以看到，圆框和里面的图片放大的速度不同，而且图片要放大到和要播放的封面一样大再淡出。方法：根据图片实际大小和当前屏幕大小以及圆框大小计算两者的缩放比例，分别缩放。\n+ 两段动画如何流畅衔接，如果第一段动画放大到中间瞬间跳第二个页面同时加转场盖住，会有闪动。方法：考虑优化策略，下面会介绍。\n+ 按照业务逻辑，视频播放结束回到列表页会立刻向后端拉取一次列表，如果缩放的圆框‘回来’时不在原来的位置了，或者被删除了怎么搞？方法：加回调等动画结束再通知RN再拉取。\n+ 多个视频要播放，在任意视频播放过程中要回到story页面场景，这时候要缩小的图片和列表中的图片可能不一致。方法：缩小动画执行前将当前的封面url从rn传给native。\n\n下面介绍一下具体实现：\n用native实现动画，首先要保证动画目标元素是native的，因此首先将列表中渲染的头像用native封装成ui component暴露给rn，即下方红框区域：\n\n<img src=\"https://wiki.bytedance.net/download/attachments/78356276/touxiang.png?version=1&modificationDate=1487865517733&api=v2\" width=300 />\n\nIOS部分代码如下：\n\n![](https://wiki.bytedance.net/download/attachments/78356276/code2.png?version=1&modificationDate=1487865531084&api=v2)\n\n用RN实现的列表部分渲染一个头像区域的代码如下（精简版）：\n\n![](https://wiki.bytedance.net/download/attachments/78356276/code1.png?version=1&modificationDate=1487865517993&api=v2)\n\n改成用刚封装的组件：\n\n![](https://wiki.bytedance.net/download/attachments/78356276/code3.png?version=1&modificationDate=1487865531285&api=v2)\n\n原来的头像点击事件是直接打开video页面，现在是：\n\n![](https://wiki.bytedance.net/download/attachments/78356276/code4.png?version=1&modificationDate=1487865531612&api=v2)\n\n点击调用这个元素的放大动画：\n第一段动画代码：\n\n![](https://wiki.bytedance.net/download/attachments/78356276/code5.png?version=1&modificationDate=1487865534177&api=v2)\n\n效果：\n\n<img src=\"https://wiki.bytedance.net/download/attachments/78356276/jieduan1.gif?version=1&modificationDate=1487865494247&api=v2\" width=300/>\n\n注意这里有个hack，为保证两个动画衔接，在第一段动画执行前有一句：\n [self performSelector:@selector(sendEvent) withObject:nil afterDelay:0.2f];\n200ms后发送一个消息给RN唤起即将呈现的video页面，已保证第一段动画结束时遮罩底层已经是第二个页面了。\n\n然后在第一段动画结束的回掉函数中调用转场效果动画：\n\n![](https://wiki.bytedance.net/download/attachments/78356276/code7.png?version=1&modificationDate=1487865531763&api=v2)\n\n看下转场动画实现方式：\n\n![](https://wiki.bytedance.net/download/attachments/78356276/code8.png?version=1&modificationDate=1487865533854&api=v2)\n\n第二段动画效果：\n\n<img src=\"https://wiki.bytedance.net/download/attachments/78356276/jieduan2.gif?version=1&modificationDate=1487865506266&api=v2\" width=300/>\n\n\n关闭效果实现方式类似，也是两段动画拼接这里不再赘述。\n\n还有些待调整的部分，比如动画执行时长，蒙层透明度变化，第二屏幕切换时机等，初步效果如下：\n\n<img src=\"https://wiki.bytedance.net/download/attachments/78356296/xiaoguo.gif?version=1&modificationDate=1487866423000&api=v2\" width=300/>\n\n\n欢迎交流：）\n\n\n","slug":"reactnative_ios_动画效果实现","published":1,"updated":"2017-02-25T02:58:39.000Z","comments":1,"photos":[],"link":"","_id":"cizknquph000695c4z9s3agab","content":"<p>开篇插播一条广告，欢迎大家下载和使用，狸猫相机，一个3D特效自拍、朋友圈短视频创作神器3D特效自拍变脸、朋友圈短视频创作神器。头条出品，必属精品~<br>下面进入正题~<br>产品主要用React Native(以下简称RN)和native开发，其中Story页面（包含联系人发的视频列表）和视频播放（涵盖很多复杂手势交互比如点赞动画，左右滑切视频，上拉出评论弹框等）以及消息页面等功能主要基于RN开发（部分小功能和模块用native封装供RN调用）。<br>最近接了个需求，pm想要实现如下的动效果：<br>点击列表页的任意头像逐渐放大然后自然过渡到播放页面，如下图所示：</p>\n<p><img src=\"https://wiki.bytedance.net/download/attachments/78356276/fangda.gif?version=1&modificationDate=1487865498779&api=v2\" width=\"300/\"></p>\n<p>待视频播放完后渐渐缩小回到列表页原来的位置，如下图所示：</p>\n<p><img src=\"https://wiki.bytedance.net/download/attachments/78356276/suoxiao.gif?version=1&modificationDate=1487865513267&api=v2\" width=\"300/\"></p>\n<p>如果列表和视频播放页面纯用native实现，那么可以用UIView的animateWithDuration或者一个CAAnimationGroup先将头像边放大边位移到屏幕中间，再让即将展现的UiViewController实现UIViewControllerTransitioningDelegate协议，在页面切入，退出的时候调用一个自定义的继承UIViewControllerAnimatedTransitioning的转场动画效果类，实现转场动画，展现第二个页面。网上也有一些类似的自定义转场动画，效果很酷，参见<a href=\"https://github.com/lkzhao/Hero\" target=\"_blank\" rel=\"external\">Hero</a> 或<a href=\"https://github.com/wazrx/XWTrasitionPractice\" target=\"_blank\" rel=\"external\">这个例子</a>。</p>\n<p>那么回到我们的项目，如果这两个页面是纯RN实现的，并且页面路由使用一个第三方组件<a href=\"https://github.com/aksonov/react-native-router-flux\" target=\"_blank\" rel=\"external\">react-native-router-flux</a>,倒是可以添加一些简单的转场效果，水平垂直滑入、淡入等。但是较复杂的转场动画实现起来比较复杂，不能保证在ios和andoid平台动画的流畅度，而且要自己想办法实现比如动画结束的钩子函数，比较复杂。因此想办法利用native实现整个动画。那么如何在RN实现的页面上加native动画和转场呢？这里沿用上面native实现的思路，将整个过程分为两段，第一段用native控制头像和边框放大同时位移到中间位置，第二段与native不同的是，这里用rn组件实现的路由，因此无法通过自定义UIViewController转场效果切换动画（改造成本也比较大），因此这里用native获得当前navigation stack中最顶层的UIViewController，定义一个CABasicAnimation用于模拟转场扩散效果，然后加在上面得到的UIViewController的mask（遮罩）属性上来模拟纯native的转场效果。</p>\n<p>介绍实现方法前，首先介绍下针对现有的业务，实现这个动画要考虑到的点：</p>\n<ul>\n<li>大小图切换：video第一帧要展示大图而story列表对应的后端裁剪后的小图。方法：点击瞬间将头像图替换成要播放的第一帧大图。</li>\n<li>列表页面的图不一定是点击要播放的图，比如点击要播放第一个未读的视频，但是列表中确要展示一个已读的视频图片。方法：和后端定义接口，加字段传来下一个要播放的视频第一帧。</li>\n<li>第一段动画有一层渐变的蒙层，方法：缩放过程加蒙层，用动画控制淡入淡出。</li>\n<li>位置计算，可以看到，圆框和里面的图片放大的速度不同，而且图片要放大到和要播放的封面一样大再淡出。方法：根据图片实际大小和当前屏幕大小以及圆框大小计算两者的缩放比例，分别缩放。</li>\n<li>两段动画如何流畅衔接，如果第一段动画放大到中间瞬间跳第二个页面同时加转场盖住，会有闪动。方法：考虑优化策略，下面会介绍。</li>\n<li>按照业务逻辑，视频播放结束回到列表页会立刻向后端拉取一次列表，如果缩放的圆框‘回来’时不在原来的位置了，或者被删除了怎么搞？方法：加回调等动画结束再通知RN再拉取。</li>\n<li>多个视频要播放，在任意视频播放过程中要回到story页面场景，这时候要缩小的图片和列表中的图片可能不一致。方法：缩小动画执行前将当前的封面url从rn传给native。</li>\n</ul>\n<p>下面介绍一下具体实现：<br>用native实现动画，首先要保证动画目标元素是native的，因此首先将列表中渲染的头像用native封装成ui component暴露给rn，即下方红框区域：</p>\n<p><img src=\"https://wiki.bytedance.net/download/attachments/78356276/touxiang.png?version=1&modificationDate=1487865517733&api=v2\" width=\"300\"></p>\n<p>IOS部分代码如下：</p>\n<p><img src=\"https://wiki.bytedance.net/download/attachments/78356276/code2.png?version=1&amp;modificationDate=1487865531084&amp;api=v2\" alt=\"\"></p>\n<p>用RN实现的列表部分渲染一个头像区域的代码如下（精简版）：</p>\n<p><img src=\"https://wiki.bytedance.net/download/attachments/78356276/code1.png?version=1&amp;modificationDate=1487865517993&amp;api=v2\" alt=\"\"></p>\n<p>改成用刚封装的组件：</p>\n<p><img src=\"https://wiki.bytedance.net/download/attachments/78356276/code3.png?version=1&amp;modificationDate=1487865531285&amp;api=v2\" alt=\"\"></p>\n<p>原来的头像点击事件是直接打开video页面，现在是：</p>\n<p><img src=\"https://wiki.bytedance.net/download/attachments/78356276/code4.png?version=1&amp;modificationDate=1487865531612&amp;api=v2\" alt=\"\"></p>\n<p>点击调用这个元素的放大动画：<br>第一段动画代码：</p>\n<p><img src=\"https://wiki.bytedance.net/download/attachments/78356276/code5.png?version=1&amp;modificationDate=1487865534177&amp;api=v2\" alt=\"\"></p>\n<p>效果：</p>\n<p><img src=\"https://wiki.bytedance.net/download/attachments/78356276/jieduan1.gif?version=1&modificationDate=1487865494247&api=v2\" width=\"300/\"></p>\n<p>注意这里有个hack，为保证两个动画衔接，在第一段动画执行前有一句：<br> [self performSelector:@selector(sendEvent) withObject:nil afterDelay:0.2f];<br>200ms后发送一个消息给RN唤起即将呈现的video页面，已保证第一段动画结束时遮罩底层已经是第二个页面了。</p>\n<p>然后在第一段动画结束的回掉函数中调用转场效果动画：</p>\n<p><img src=\"https://wiki.bytedance.net/download/attachments/78356276/code7.png?version=1&amp;modificationDate=1487865531763&amp;api=v2\" alt=\"\"></p>\n<p>看下转场动画实现方式：</p>\n<p><img src=\"https://wiki.bytedance.net/download/attachments/78356276/code8.png?version=1&amp;modificationDate=1487865533854&amp;api=v2\" alt=\"\"></p>\n<p>第二段动画效果：</p>\n<p><img src=\"https://wiki.bytedance.net/download/attachments/78356276/jieduan2.gif?version=1&modificationDate=1487865506266&api=v2\" width=\"300/\"></p>\n<p>关闭效果实现方式类似，也是两段动画拼接这里不再赘述。</p>\n<p>还有些待调整的部分，比如动画执行时长，蒙层透明度变化，第二屏幕切换时机等，初步效果如下：</p>\n<p><img src=\"https://wiki.bytedance.net/download/attachments/78356296/xiaoguo.gif?version=1&modificationDate=1487866423000&api=v2\" width=\"300/\"></p>\n<p>欢迎交流：）</p>\n","excerpt":"","more":"<p>开篇插播一条广告，欢迎大家下载和使用，狸猫相机，一个3D特效自拍、朋友圈短视频创作神器3D特效自拍变脸、朋友圈短视频创作神器。头条出品，必属精品~<br>下面进入正题~<br>产品主要用React Native(以下简称RN)和native开发，其中Story页面（包含联系人发的视频列表）和视频播放（涵盖很多复杂手势交互比如点赞动画，左右滑切视频，上拉出评论弹框等）以及消息页面等功能主要基于RN开发（部分小功能和模块用native封装供RN调用）。<br>最近接了个需求，pm想要实现如下的动效果：<br>点击列表页的任意头像逐渐放大然后自然过渡到播放页面，如下图所示：</p>\n<p><img src=\"https://wiki.bytedance.net/download/attachments/78356276/fangda.gif?version=1&modificationDate=1487865498779&api=v2\" width=300/></p>\n<p>待视频播放完后渐渐缩小回到列表页原来的位置，如下图所示：</p>\n<p><img src=\"https://wiki.bytedance.net/download/attachments/78356276/suoxiao.gif?version=1&modificationDate=1487865513267&api=v2\" width=300/></p>\n<p>如果列表和视频播放页面纯用native实现，那么可以用UIView的animateWithDuration或者一个CAAnimationGroup先将头像边放大边位移到屏幕中间，再让即将展现的UiViewController实现UIViewControllerTransitioningDelegate协议，在页面切入，退出的时候调用一个自定义的继承UIViewControllerAnimatedTransitioning的转场动画效果类，实现转场动画，展现第二个页面。网上也有一些类似的自定义转场动画，效果很酷，参见<a href=\"https://github.com/lkzhao/Hero\">Hero</a> 或<a href=\"https://github.com/wazrx/XWTrasitionPractice\">这个例子</a>。</p>\n<p>那么回到我们的项目，如果这两个页面是纯RN实现的，并且页面路由使用一个第三方组件<a href=\"https://github.com/aksonov/react-native-router-flux\">react-native-router-flux</a>,倒是可以添加一些简单的转场效果，水平垂直滑入、淡入等。但是较复杂的转场动画实现起来比较复杂，不能保证在ios和andoid平台动画的流畅度，而且要自己想办法实现比如动画结束的钩子函数，比较复杂。因此想办法利用native实现整个动画。那么如何在RN实现的页面上加native动画和转场呢？这里沿用上面native实现的思路，将整个过程分为两段，第一段用native控制头像和边框放大同时位移到中间位置，第二段与native不同的是，这里用rn组件实现的路由，因此无法通过自定义UIViewController转场效果切换动画（改造成本也比较大），因此这里用native获得当前navigation stack中最顶层的UIViewController，定义一个CABasicAnimation用于模拟转场扩散效果，然后加在上面得到的UIViewController的mask（遮罩）属性上来模拟纯native的转场效果。</p>\n<p>介绍实现方法前，首先介绍下针对现有的业务，实现这个动画要考虑到的点：</p>\n<ul>\n<li>大小图切换：video第一帧要展示大图而story列表对应的后端裁剪后的小图。方法：点击瞬间将头像图替换成要播放的第一帧大图。</li>\n<li>列表页面的图不一定是点击要播放的图，比如点击要播放第一个未读的视频，但是列表中确要展示一个已读的视频图片。方法：和后端定义接口，加字段传来下一个要播放的视频第一帧。</li>\n<li>第一段动画有一层渐变的蒙层，方法：缩放过程加蒙层，用动画控制淡入淡出。</li>\n<li>位置计算，可以看到，圆框和里面的图片放大的速度不同，而且图片要放大到和要播放的封面一样大再淡出。方法：根据图片实际大小和当前屏幕大小以及圆框大小计算两者的缩放比例，分别缩放。</li>\n<li>两段动画如何流畅衔接，如果第一段动画放大到中间瞬间跳第二个页面同时加转场盖住，会有闪动。方法：考虑优化策略，下面会介绍。</li>\n<li>按照业务逻辑，视频播放结束回到列表页会立刻向后端拉取一次列表，如果缩放的圆框‘回来’时不在原来的位置了，或者被删除了怎么搞？方法：加回调等动画结束再通知RN再拉取。</li>\n<li>多个视频要播放，在任意视频播放过程中要回到story页面场景，这时候要缩小的图片和列表中的图片可能不一致。方法：缩小动画执行前将当前的封面url从rn传给native。</li>\n</ul>\n<p>下面介绍一下具体实现：<br>用native实现动画，首先要保证动画目标元素是native的，因此首先将列表中渲染的头像用native封装成ui component暴露给rn，即下方红框区域：</p>\n<p><img src=\"https://wiki.bytedance.net/download/attachments/78356276/touxiang.png?version=1&modificationDate=1487865517733&api=v2\" width=300 /></p>\n<p>IOS部分代码如下：</p>\n<p><img src=\"https://wiki.bytedance.net/download/attachments/78356276/code2.png?version=1&amp;modificationDate=1487865531084&amp;api=v2\" alt=\"\"></p>\n<p>用RN实现的列表部分渲染一个头像区域的代码如下（精简版）：</p>\n<p><img src=\"https://wiki.bytedance.net/download/attachments/78356276/code1.png?version=1&amp;modificationDate=1487865517993&amp;api=v2\" alt=\"\"></p>\n<p>改成用刚封装的组件：</p>\n<p><img src=\"https://wiki.bytedance.net/download/attachments/78356276/code3.png?version=1&amp;modificationDate=1487865531285&amp;api=v2\" alt=\"\"></p>\n<p>原来的头像点击事件是直接打开video页面，现在是：</p>\n<p><img src=\"https://wiki.bytedance.net/download/attachments/78356276/code4.png?version=1&amp;modificationDate=1487865531612&amp;api=v2\" alt=\"\"></p>\n<p>点击调用这个元素的放大动画：<br>第一段动画代码：</p>\n<p><img src=\"https://wiki.bytedance.net/download/attachments/78356276/code5.png?version=1&amp;modificationDate=1487865534177&amp;api=v2\" alt=\"\"></p>\n<p>效果：</p>\n<p><img src=\"https://wiki.bytedance.net/download/attachments/78356276/jieduan1.gif?version=1&modificationDate=1487865494247&api=v2\" width=300/></p>\n<p>注意这里有个hack，为保证两个动画衔接，在第一段动画执行前有一句：<br> [self performSelector:@selector(sendEvent) withObject:nil afterDelay:0.2f];<br>200ms后发送一个消息给RN唤起即将呈现的video页面，已保证第一段动画结束时遮罩底层已经是第二个页面了。</p>\n<p>然后在第一段动画结束的回掉函数中调用转场效果动画：</p>\n<p><img src=\"https://wiki.bytedance.net/download/attachments/78356276/code7.png?version=1&amp;modificationDate=1487865531763&amp;api=v2\" alt=\"\"></p>\n<p>看下转场动画实现方式：</p>\n<p><img src=\"https://wiki.bytedance.net/download/attachments/78356276/code8.png?version=1&amp;modificationDate=1487865533854&amp;api=v2\" alt=\"\"></p>\n<p>第二段动画效果：</p>\n<p><img src=\"https://wiki.bytedance.net/download/attachments/78356276/jieduan2.gif?version=1&modificationDate=1487865506266&api=v2\" width=300/></p>\n<p>关闭效果实现方式类似，也是两段动画拼接这里不再赘述。</p>\n<p>还有些待调整的部分，比如动画执行时长，蒙层透明度变化，第二屏幕切换时机等，初步效果如下：</p>\n<p><img src=\"https://wiki.bytedance.net/download/attachments/78356296/xiaoguo.gif?version=1&modificationDate=1487866423000&api=v2\" width=300/></p>\n<p>欢迎交流：）</p>\n"},{"layout":"post","title":"新手引导效果实现","date":"2015-01-04T00:43:59.000Z","author":"Lily","_content":"<br>\n<br>\n\n新手效果在很多网站中都能看到，很好地引导用户了解网站相关操作从而降低学习成本。本文的新手引导效果基于 <a href=\"https://github.com/usablica/intro.js/\">intro.js</a> 做了修改，介绍下引入方式，然后讲解下网站中常看到的右下角能展开收齐的帮助弹框实现方式。\n\n<div><div><h2 style=\" padding: 0px; font-size: 24px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); font-family: Helvetica, arial, sans-serif;\">引入\n</h2><pre style=\"white-space: pre-wrap; border: 1px solid rgb(204, 204, 204); font-size: 13px; overflow: auto; padding: 6px 10px; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 248);font-family:&quot;Helvetica Neue&quot;, Arial, sans;\">&lt;script type=\"text/javascript\" src=\"<a style=\"color: rgb(149, 79, 114);\" target=\"_blank\" href=\"http://g.alicdn.com/base-tech-fe/base_fe_common/src/common/controller/intro.js\">http://g.alicdn.com/base-tech-fe/base_fe_common/src/common/controller/intro.js</a>\"&gt;&lt;/script&gt;                      \n&lt;link href=\"<a style=\"color: rgb(149, 79, 114);\" target=\"_blank\" href=\"http://g.alicdn.com/base-tech-fe/base_fe_common/src/common/styles/introjs.css\">http://g.alicdn.com/base-tech-fe/base_fe_common/src/common/styles/introjs.css</a>\" rel=\"stylesheet\"&gt; \n\n</pre><h3 style=\" padding: 0px; font-size: 18px; font-family: Helvetica, arial, sans-serif;\">注：插件用intro.js\n</h3><h3 style=\" padding: 0px; font-size: 18px; font-family: Helvetica, arial, sans-serif;\">html\n</h3><ul style=\" padding-left: 30px; font-family: Helvetica, arial, sans-serif; font-size: 14px;\"><li style=\"\">在需要显示引导的元素里添加标识属性，如</li></ul><pre style=\"white-space: pre-wrap; border: 1px solid rgb(204, 204, 204); font-size: 13px; overflow: auto; padding: 6px 10px; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 248);font-family:&quot;Helvetica Neue&quot;, Arial, sans;\">&lt;div data-step=\"1\"&gt;&lt;/div&gt;\n\n</pre><h3 style=\" padding: 0px; font-size: 18px; font-family: Helvetica, arial, sans-serif;\">js\n</h3><ul style=\" padding-left: 30px; font-family: Helvetica, arial, sans-serif; font-size: 14px;\"><li style=\"\">添加js</li></ul><pre style=\"white-space: pre-wrap; border: 1px solid rgb(204, 204, 204); font-size: 13px; overflow: auto; padding: 6px 10px; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 248);font-family:&quot;Helvetica Neue&quot;, Arial, sans;\">function startIntro(){\n          var intro = introJs();\n            intro.setOptions({\n              steps: [\n                {\n                  element: '[data-step=\"1\"]',\n                  intro: \"这里是数据引擎提供的开发套件，如果当前区域为灰色，说明您选择的工作台模板暂时不需要该功能。 您可以在右上角的“设置-设置工作台”中开启相应的模块。\",\n                  position: 'bottom'\n                },\n                {\n                  element: '[data-step=\"2\"]',\n                  intro: \"在这里可以管理项目的数据、数据服务、数据源和数据主题。\",\n                  position: 'right'\n                },\n                {\n                  element: '[data-step=\"3\"]',\n                  intro: '在这里可以为项目添加成员，管理成员权限，配置项目空间。',\n                  position: 'right'\n                }\n              ],\n              'nextLabel': \"下一步\",                                           \n              'prevLabel': \"上一步\",\n              'skipLabel': \"跳过\",\n              'doneLabel':\"完成\",\n              'showStepNumbers':false\n            });\n            intro.start();\n                   \n\n</pre><h1 style=\" padding: 0px; font-size: 28px; font-family: Helvetica, arial, sans-serif;\">tips添加方式\n</h1><h2 style=\" padding: 0px; font-size: 24px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); font-family: Helvetica, arial, sans-serif;\">引入\n</h2><pre style=\"white-space: pre-wrap; border: 1px solid rgb(204, 204, 204); font-size: 13px; overflow: auto; padding: 6px 10px; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 248);font-family:&quot;Helvetica Neue&quot;, Arial, sans;\">&lt;script type=\"text/javascript\" src=\"<a style=\"color: rgb(149, 79, 114);\" target=\"_blank\" href=\"http://g.alicdn.com/base-tech-fe/base_fe_common/src/common/controller/tooltip.js\">http://g.alicdn.com/base-tech-fe/base_fe_common/src/common/controller/tooltip.js</a>\"&gt;&lt;/script&gt;\n\n</pre><h3 style=\" padding: 0px; font-size: 18px; font-family: Helvetica, arial, sans-serif;\">html\n</h3><pre style=\"white-space: pre-wrap; border: 1px solid rgb(204, 204, 204); font-size: 13px; overflow: auto; padding: 6px 10px; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 248);font-family:&quot;Helvetica Neue&quot;, Arial, sans;\">&lt;div class=\"toolTip\" data-tooltip title=\"tenant1\"&gt;&lt;/div&gt;\n\n</pre><h3 style=\" padding: 0px; font-size: 18px; font-family: Helvetica, arial, sans-serif;\">js\n</h3><pre style=\"white-space: pre-wrap; border: 1px solid rgb(204, 204, 204); font-size: 13px; overflow: auto; padding: 6px 10px; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 248);font-family:&quot;Helvetica Neue&quot;, Arial, sans;\">var keyMap = {\n    'tenant1': '提供一站式的数据集成开发环境，包括数据查询、ETL开发、数据算法挖掘等功能。'\n};\n$('[data-tooltip]').tooltip({verticalOffset:-200, horizontalOffset:20, keyMap: keyMap});\n\n</pre><h1 style=\" padding: 0px; font-size: 28px; font-family: Helvetica, arial, sans-serif;\">右下角帮助添加方式\n</h1><div style=\"font-family:&quot;Helvetica Neue&quot;, Arial, sans;font-size:16px;\">效果：\n</div><div style=\"font-family:&quot;Helvetica Neue&quot;, Arial, sans;font-size:16px;\"><img src=\"/images/2015-01-04/49A49378-4E4E-47C0-ACE3-E9819A21CD27.png\" height=\"267\" width=\"176\"/><br/></div><h2 style=\" padding: 0px; font-size: 24px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); font-family: Helvetica, arial, sans-serif;\">引入\n</h2><pre style=\"white-space: pre-wrap; border: 1px solid rgb(204, 204, 204); font-size: 13px; overflow: auto; padding: 6px 10px; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 248);font-family:&quot;Helvetica Neue&quot;, Arial, sans;\">&lt;script src=\"<a style=\"color: rgb(149, 79, 114);\" target=\"_blank\" href=\"http://g.alicdn.com/base-tech-fe/base_fe_common/src/common/controller/helper.js\">http://g.alicdn.com/base-tech-fe/base_fe_common/src/common/controller/helper.js</a>\"&gt;&lt;/script&gt;\n&lt;link rel=\"stylesheet\" href=\"<a style=\"color: rgb(149, 79, 114);\" target=\"_blank\" href=\"http://g.alicdn.com/base-tech-fe/base_fe_common/src/common/styles/helper.css\">http://g.alicdn.com/base-tech-fe/base_fe_common/src/common/styles/helper.css</a>\"/&gt;\n\n</pre><h3 style=\" padding: 0px; font-size: 18px; font-family: Helvetica, arial, sans-serif;\">html\n</h3><pre style=\"white-space: pre-wrap; border: 1px solid rgb(204, 204, 204); font-size: 13px; overflow: auto; padding: 6px 10px; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 248);font-family:&quot;Helvetica Neue&quot;, Arial, sans;\">&lt;div id=\"helper\" class=\"j-helper\"&gt;\n        &lt;h1&gt;FAQ&lt;/h1&gt;\n        &lt;ul&gt;\n            &lt;li&gt;&lt;a href=\"\"&gt;xxxxxxxxxxxxxxxxxxxxx&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"\"&gt;xxxxxxxxxxxxxxxxxxxxx&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"\"&gt;xxxxxxxxxxxxxxxxxxxxx&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"\"&gt;xxxxxxxxxxxxxxxxxxxxx&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"\"&gt;xxxxxxxxxxxxxxxxxxxxx&lt;/a&gt;&lt;/li&gt;\n        &lt;/ul&gt;\n        &lt;a class=\"more\" href=\"\"&gt;查看更多&lt;/a&gt;\n    &lt;/div&gt;\n\n</pre><h3 style=\" padding: 0px; font-size: 18px; font-family: Helvetica, arial, sans-serif;\">js\n</h3></div><pre style=\"white-space: pre-wrap; border: 1px solid rgb(204, 204, 204); font-size: 13px; overflow: auto; padding: 6px 10px; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 248);font-family:monospace;\">       var helper = $.helper({\n            content: '#helper',\n            titleBtn: {\n                text: '重看新手引导',\n                callback: function(){\n                    startIntro();\n                }\n            }\n        });\n</pre></div><div><br/></div>","source":"_posts/新手引导效果实现.html","raw":"---\nlayout: post\ntitle:  新手引导效果实现\ndate:   2015-01-04 08:43:59\nauthor: Lily\ncategories: frontend\ntags:\n- intro.js\n- 新手引导\n---\n<br>\n<br>\n\n新手效果在很多网站中都能看到，很好地引导用户了解网站相关操作从而降低学习成本。本文的新手引导效果基于 <a href=\"https://github.com/usablica/intro.js/\">intro.js</a> 做了修改，介绍下引入方式，然后讲解下网站中常看到的右下角能展开收齐的帮助弹框实现方式。\n\n<div><div><h2 style=\" padding: 0px; font-size: 24px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); font-family: Helvetica, arial, sans-serif;\">引入\n</h2><pre style=\"white-space: pre-wrap; border: 1px solid rgb(204, 204, 204); font-size: 13px; overflow: auto; padding: 6px 10px; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 248);font-family:&quot;Helvetica Neue&quot;, Arial, sans;\">&lt;script type=\"text/javascript\" src=\"<a style=\"color: rgb(149, 79, 114);\" target=\"_blank\" href=\"http://g.alicdn.com/base-tech-fe/base_fe_common/src/common/controller/intro.js\">http://g.alicdn.com/base-tech-fe/base_fe_common/src/common/controller/intro.js</a>\"&gt;&lt;/script&gt;                      \n&lt;link href=\"<a style=\"color: rgb(149, 79, 114);\" target=\"_blank\" href=\"http://g.alicdn.com/base-tech-fe/base_fe_common/src/common/styles/introjs.css\">http://g.alicdn.com/base-tech-fe/base_fe_common/src/common/styles/introjs.css</a>\" rel=\"stylesheet\"&gt; \n\n</pre><h3 style=\" padding: 0px; font-size: 18px; font-family: Helvetica, arial, sans-serif;\">注：插件用intro.js\n</h3><h3 style=\" padding: 0px; font-size: 18px; font-family: Helvetica, arial, sans-serif;\">html\n</h3><ul style=\" padding-left: 30px; font-family: Helvetica, arial, sans-serif; font-size: 14px;\"><li style=\"\">在需要显示引导的元素里添加标识属性，如</li></ul><pre style=\"white-space: pre-wrap; border: 1px solid rgb(204, 204, 204); font-size: 13px; overflow: auto; padding: 6px 10px; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 248);font-family:&quot;Helvetica Neue&quot;, Arial, sans;\">&lt;div data-step=\"1\"&gt;&lt;/div&gt;\n\n</pre><h3 style=\" padding: 0px; font-size: 18px; font-family: Helvetica, arial, sans-serif;\">js\n</h3><ul style=\" padding-left: 30px; font-family: Helvetica, arial, sans-serif; font-size: 14px;\"><li style=\"\">添加js</li></ul><pre style=\"white-space: pre-wrap; border: 1px solid rgb(204, 204, 204); font-size: 13px; overflow: auto; padding: 6px 10px; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 248);font-family:&quot;Helvetica Neue&quot;, Arial, sans;\">function startIntro(){\n          var intro = introJs();\n            intro.setOptions({\n              steps: [\n                {\n                  element: '[data-step=\"1\"]',\n                  intro: \"这里是数据引擎提供的开发套件，如果当前区域为灰色，说明您选择的工作台模板暂时不需要该功能。 您可以在右上角的“设置-设置工作台”中开启相应的模块。\",\n                  position: 'bottom'\n                },\n                {\n                  element: '[data-step=\"2\"]',\n                  intro: \"在这里可以管理项目的数据、数据服务、数据源和数据主题。\",\n                  position: 'right'\n                },\n                {\n                  element: '[data-step=\"3\"]',\n                  intro: '在这里可以为项目添加成员，管理成员权限，配置项目空间。',\n                  position: 'right'\n                }\n              ],\n              'nextLabel': \"下一步\",                                           \n              'prevLabel': \"上一步\",\n              'skipLabel': \"跳过\",\n              'doneLabel':\"完成\",\n              'showStepNumbers':false\n            });\n            intro.start();\n                   \n\n</pre><h1 style=\" padding: 0px; font-size: 28px; font-family: Helvetica, arial, sans-serif;\">tips添加方式\n</h1><h2 style=\" padding: 0px; font-size: 24px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); font-family: Helvetica, arial, sans-serif;\">引入\n</h2><pre style=\"white-space: pre-wrap; border: 1px solid rgb(204, 204, 204); font-size: 13px; overflow: auto; padding: 6px 10px; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 248);font-family:&quot;Helvetica Neue&quot;, Arial, sans;\">&lt;script type=\"text/javascript\" src=\"<a style=\"color: rgb(149, 79, 114);\" target=\"_blank\" href=\"http://g.alicdn.com/base-tech-fe/base_fe_common/src/common/controller/tooltip.js\">http://g.alicdn.com/base-tech-fe/base_fe_common/src/common/controller/tooltip.js</a>\"&gt;&lt;/script&gt;\n\n</pre><h3 style=\" padding: 0px; font-size: 18px; font-family: Helvetica, arial, sans-serif;\">html\n</h3><pre style=\"white-space: pre-wrap; border: 1px solid rgb(204, 204, 204); font-size: 13px; overflow: auto; padding: 6px 10px; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 248);font-family:&quot;Helvetica Neue&quot;, Arial, sans;\">&lt;div class=\"toolTip\" data-tooltip title=\"tenant1\"&gt;&lt;/div&gt;\n\n</pre><h3 style=\" padding: 0px; font-size: 18px; font-family: Helvetica, arial, sans-serif;\">js\n</h3><pre style=\"white-space: pre-wrap; border: 1px solid rgb(204, 204, 204); font-size: 13px; overflow: auto; padding: 6px 10px; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 248);font-family:&quot;Helvetica Neue&quot;, Arial, sans;\">var keyMap = {\n    'tenant1': '提供一站式的数据集成开发环境，包括数据查询、ETL开发、数据算法挖掘等功能。'\n};\n$('[data-tooltip]').tooltip({verticalOffset:-200, horizontalOffset:20, keyMap: keyMap});\n\n</pre><h1 style=\" padding: 0px; font-size: 28px; font-family: Helvetica, arial, sans-serif;\">右下角帮助添加方式\n</h1><div style=\"font-family:&quot;Helvetica Neue&quot;, Arial, sans;font-size:16px;\">效果：\n</div><div style=\"font-family:&quot;Helvetica Neue&quot;, Arial, sans;font-size:16px;\"><img src=\"/images/2015-01-04/49A49378-4E4E-47C0-ACE3-E9819A21CD27.png\" height=\"267\" width=\"176\"/><br/></div><h2 style=\" padding: 0px; font-size: 24px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); font-family: Helvetica, arial, sans-serif;\">引入\n</h2><pre style=\"white-space: pre-wrap; border: 1px solid rgb(204, 204, 204); font-size: 13px; overflow: auto; padding: 6px 10px; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 248);font-family:&quot;Helvetica Neue&quot;, Arial, sans;\">&lt;script src=\"<a style=\"color: rgb(149, 79, 114);\" target=\"_blank\" href=\"http://g.alicdn.com/base-tech-fe/base_fe_common/src/common/controller/helper.js\">http://g.alicdn.com/base-tech-fe/base_fe_common/src/common/controller/helper.js</a>\"&gt;&lt;/script&gt;\n&lt;link rel=\"stylesheet\" href=\"<a style=\"color: rgb(149, 79, 114);\" target=\"_blank\" href=\"http://g.alicdn.com/base-tech-fe/base_fe_common/src/common/styles/helper.css\">http://g.alicdn.com/base-tech-fe/base_fe_common/src/common/styles/helper.css</a>\"/&gt;\n\n</pre><h3 style=\" padding: 0px; font-size: 18px; font-family: Helvetica, arial, sans-serif;\">html\n</h3><pre style=\"white-space: pre-wrap; border: 1px solid rgb(204, 204, 204); font-size: 13px; overflow: auto; padding: 6px 10px; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 248);font-family:&quot;Helvetica Neue&quot;, Arial, sans;\">&lt;div id=\"helper\" class=\"j-helper\"&gt;\n        &lt;h1&gt;FAQ&lt;/h1&gt;\n        &lt;ul&gt;\n            &lt;li&gt;&lt;a href=\"\"&gt;xxxxxxxxxxxxxxxxxxxxx&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"\"&gt;xxxxxxxxxxxxxxxxxxxxx&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"\"&gt;xxxxxxxxxxxxxxxxxxxxx&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"\"&gt;xxxxxxxxxxxxxxxxxxxxx&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"\"&gt;xxxxxxxxxxxxxxxxxxxxx&lt;/a&gt;&lt;/li&gt;\n        &lt;/ul&gt;\n        &lt;a class=\"more\" href=\"\"&gt;查看更多&lt;/a&gt;\n    &lt;/div&gt;\n\n</pre><h3 style=\" padding: 0px; font-size: 18px; font-family: Helvetica, arial, sans-serif;\">js\n</h3></div><pre style=\"white-space: pre-wrap; border: 1px solid rgb(204, 204, 204); font-size: 13px; overflow: auto; padding: 6px 10px; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 248);font-family:monospace;\">       var helper = $.helper({\n            content: '#helper',\n            titleBtn: {\n                text: '重看新手引导',\n                callback: function(){\n                    startIntro();\n                }\n            }\n        });\n</pre></div><div><br/></div>","slug":"新手引导效果实现","published":1,"updated":"2017-02-13T16:01:02.000Z","comments":1,"photos":[],"link":"","_id":"cizknqupk000995c4wxs1133k","content":"<br>\n<br>\n\n新手效果在很多网站中都能看到，很好地引导用户了解网站相关操作从而降低学习成本。本文的新手引导效果基于 <a href=\"https://github.com/usablica/intro.js/\" target=\"_blank\" rel=\"external\">intro.js</a> 做了修改，介绍下引入方式，然后讲解下网站中常看到的右下角能展开收齐的帮助弹框实现方式。\n\n<div><div><h2 style=\" padding: 0px; font-size: 24px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); font-family: Helvetica, arial, sans-serif;\">引入\n</h2><pre style=\"white-space: pre-wrap; border: 1px solid rgb(204, 204, 204); font-size: 13px; overflow: auto; padding: 6px 10px; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 248);font-family:&quot;Helvetica Neue&quot;, Arial, sans;\">&lt;script type=\"text/javascript\" src=\"<a style=\"color: rgb(149, 79, 114);\" target=\"_blank\" href=\"http://g.alicdn.com/base-tech-fe/base_fe_common/src/common/controller/intro.js\">http://g.alicdn.com/base-tech-fe/base_fe_common/src/common/controller/intro.js</a>\"&gt;&lt;/script&gt;                      \n&lt;link href=\"<a style=\"color: rgb(149, 79, 114);\" target=\"_blank\" href=\"http://g.alicdn.com/base-tech-fe/base_fe_common/src/common/styles/introjs.css\">http://g.alicdn.com/base-tech-fe/base_fe_common/src/common/styles/introjs.css</a>\" rel=\"stylesheet\"&gt; \n\n</pre><h3 style=\" padding: 0px; font-size: 18px; font-family: Helvetica, arial, sans-serif;\">注：插件用intro.js\n</h3><h3 style=\" padding: 0px; font-size: 18px; font-family: Helvetica, arial, sans-serif;\">html\n</h3><ul style=\" padding-left: 30px; font-family: Helvetica, arial, sans-serif; font-size: 14px;\"><li style=\"\">在需要显示引导的元素里添加标识属性，如</li></ul><pre style=\"white-space: pre-wrap; border: 1px solid rgb(204, 204, 204); font-size: 13px; overflow: auto; padding: 6px 10px; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 248);font-family:&quot;Helvetica Neue&quot;, Arial, sans;\">&lt;div data-step=\"1\"&gt;&lt;/div&gt;\n\n</pre><h3 style=\" padding: 0px; font-size: 18px; font-family: Helvetica, arial, sans-serif;\">js\n</h3><ul style=\" padding-left: 30px; font-family: Helvetica, arial, sans-serif; font-size: 14px;\"><li style=\"\">添加js</li></ul><pre style=\"white-space: pre-wrap; border: 1px solid rgb(204, 204, 204); font-size: 13px; overflow: auto; padding: 6px 10px; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 248);font-family:&quot;Helvetica Neue&quot;, Arial, sans;\">function startIntro(){\n          var intro = introJs();\n            intro.setOptions({\n              steps: [\n                {\n                  element: '[data-step=\"1\"]',\n                  intro: \"这里是数据引擎提供的开发套件，如果当前区域为灰色，说明您选择的工作台模板暂时不需要该功能。 您可以在右上角的“设置-设置工作台”中开启相应的模块。\",\n                  position: 'bottom'\n                },\n                {\n                  element: '[data-step=\"2\"]',\n                  intro: \"在这里可以管理项目的数据、数据服务、数据源和数据主题。\",\n                  position: 'right'\n                },\n                {\n                  element: '[data-step=\"3\"]',\n                  intro: '在这里可以为项目添加成员，管理成员权限，配置项目空间。',\n                  position: 'right'\n                }\n              ],\n              'nextLabel': \"下一步\",                                           \n              'prevLabel': \"上一步\",\n              'skipLabel': \"跳过\",\n              'doneLabel':\"完成\",\n              'showStepNumbers':false\n            });\n            intro.start();\n                   \n\n</pre><h1 style=\" padding: 0px; font-size: 28px; font-family: Helvetica, arial, sans-serif;\">tips添加方式\n</h1><h2 style=\" padding: 0px; font-size: 24px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); font-family: Helvetica, arial, sans-serif;\">引入\n</h2><pre style=\"white-space: pre-wrap; border: 1px solid rgb(204, 204, 204); font-size: 13px; overflow: auto; padding: 6px 10px; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 248);font-family:&quot;Helvetica Neue&quot;, Arial, sans;\">&lt;script type=\"text/javascript\" src=\"<a style=\"color: rgb(149, 79, 114);\" target=\"_blank\" href=\"http://g.alicdn.com/base-tech-fe/base_fe_common/src/common/controller/tooltip.js\">http://g.alicdn.com/base-tech-fe/base_fe_common/src/common/controller/tooltip.js</a>\"&gt;&lt;/script&gt;\n\n</pre><h3 style=\" padding: 0px; font-size: 18px; font-family: Helvetica, arial, sans-serif;\">html\n</h3><pre style=\"white-space: pre-wrap; border: 1px solid rgb(204, 204, 204); font-size: 13px; overflow: auto; padding: 6px 10px; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 248);font-family:&quot;Helvetica Neue&quot;, Arial, sans;\">&lt;div class=\"toolTip\" data-tooltip title=\"tenant1\"&gt;&lt;/div&gt;\n\n</pre><h3 style=\" padding: 0px; font-size: 18px; font-family: Helvetica, arial, sans-serif;\">js\n</h3><pre style=\"white-space: pre-wrap; border: 1px solid rgb(204, 204, 204); font-size: 13px; overflow: auto; padding: 6px 10px; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 248);font-family:&quot;Helvetica Neue&quot;, Arial, sans;\">var keyMap = {\n    'tenant1': '提供一站式的数据集成开发环境，包括数据查询、ETL开发、数据算法挖掘等功能。'\n};\n$('[data-tooltip]').tooltip({verticalOffset:-200, horizontalOffset:20, keyMap: keyMap});\n\n</pre><h1 style=\" padding: 0px; font-size: 28px; font-family: Helvetica, arial, sans-serif;\">右下角帮助添加方式\n</h1><div style=\"font-family:&quot;Helvetica Neue&quot;, Arial, sans;font-size:16px;\">效果：\n</div><div style=\"font-family:&quot;Helvetica Neue&quot;, Arial, sans;font-size:16px;\"><img src=\"/images/2015-01-04/49A49378-4E4E-47C0-ACE3-E9819A21CD27.png\" height=\"267\" width=\"176\"><br></div><h2 style=\" padding: 0px; font-size: 24px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); font-family: Helvetica, arial, sans-serif;\">引入\n</h2><pre style=\"white-space: pre-wrap; border: 1px solid rgb(204, 204, 204); font-size: 13px; overflow: auto; padding: 6px 10px; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 248);font-family:&quot;Helvetica Neue&quot;, Arial, sans;\">&lt;script src=\"<a style=\"color: rgb(149, 79, 114);\" target=\"_blank\" href=\"http://g.alicdn.com/base-tech-fe/base_fe_common/src/common/controller/helper.js\">http://g.alicdn.com/base-tech-fe/base_fe_common/src/common/controller/helper.js</a>\"&gt;&lt;/script&gt;\n&lt;link rel=\"stylesheet\" href=\"<a style=\"color: rgb(149, 79, 114);\" target=\"_blank\" href=\"http://g.alicdn.com/base-tech-fe/base_fe_common/src/common/styles/helper.css\">http://g.alicdn.com/base-tech-fe/base_fe_common/src/common/styles/helper.css</a>\"/&gt;\n\n</pre><h3 style=\" padding: 0px; font-size: 18px; font-family: Helvetica, arial, sans-serif;\">html\n</h3><pre style=\"white-space: pre-wrap; border: 1px solid rgb(204, 204, 204); font-size: 13px; overflow: auto; padding: 6px 10px; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 248);font-family:&quot;Helvetica Neue&quot;, Arial, sans;\">&lt;div id=\"helper\" class=\"j-helper\"&gt;\n        &lt;h1&gt;FAQ&lt;/h1&gt;\n        &lt;ul&gt;\n            &lt;li&gt;&lt;a href=\"\"&gt;xxxxxxxxxxxxxxxxxxxxx&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"\"&gt;xxxxxxxxxxxxxxxxxxxxx&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"\"&gt;xxxxxxxxxxxxxxxxxxxxx&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"\"&gt;xxxxxxxxxxxxxxxxxxxxx&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"\"&gt;xxxxxxxxxxxxxxxxxxxxx&lt;/a&gt;&lt;/li&gt;\n        &lt;/ul&gt;\n        &lt;a class=\"more\" href=\"\"&gt;查看更多&lt;/a&gt;\n    &lt;/div&gt;\n\n</pre><h3 style=\" padding: 0px; font-size: 18px; font-family: Helvetica, arial, sans-serif;\">js\n</h3></div><pre style=\"white-space: pre-wrap; border: 1px solid rgb(204, 204, 204); font-size: 13px; overflow: auto; padding: 6px 10px; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 248);font-family:monospace;\">       var helper = $.helper({\n            content: '#helper',\n            titleBtn: {\n                text: '重看新手引导',\n                callback: function(){\n                    startIntro();\n                }\n            }\n        });\n</pre></div><div><br></div>","excerpt":"","more":"<br>\n<br>\n\n新手效果在很多网站中都能看到，很好地引导用户了解网站相关操作从而降低学习成本。本文的新手引导效果基于 <a href=\"https://github.com/usablica/intro.js/\">intro.js</a> 做了修改，介绍下引入方式，然后讲解下网站中常看到的右下角能展开收齐的帮助弹框实现方式。\n\n<div><div><h2 style=\" padding: 0px; font-size: 24px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); font-family: Helvetica, arial, sans-serif;\">引入\n</h2><pre style=\"white-space: pre-wrap; border: 1px solid rgb(204, 204, 204); font-size: 13px; overflow: auto; padding: 6px 10px; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 248);font-family:&quot;Helvetica Neue&quot;, Arial, sans;\">&lt;script type=\"text/javascript\" src=\"<a style=\"color: rgb(149, 79, 114);\" target=\"_blank\" href=\"http://g.alicdn.com/base-tech-fe/base_fe_common/src/common/controller/intro.js\">http://g.alicdn.com/base-tech-fe/base_fe_common/src/common/controller/intro.js</a>\"&gt;&lt;/script&gt;                      \n&lt;link href=\"<a style=\"color: rgb(149, 79, 114);\" target=\"_blank\" href=\"http://g.alicdn.com/base-tech-fe/base_fe_common/src/common/styles/introjs.css\">http://g.alicdn.com/base-tech-fe/base_fe_common/src/common/styles/introjs.css</a>\" rel=\"stylesheet\"&gt; \n\n</pre><h3 style=\" padding: 0px; font-size: 18px; font-family: Helvetica, arial, sans-serif;\">注：插件用intro.js\n</h3><h3 style=\" padding: 0px; font-size: 18px; font-family: Helvetica, arial, sans-serif;\">html\n</h3><ul style=\" padding-left: 30px; font-family: Helvetica, arial, sans-serif; font-size: 14px;\"><li style=\"\">在需要显示引导的元素里添加标识属性，如</li></ul><pre style=\"white-space: pre-wrap; border: 1px solid rgb(204, 204, 204); font-size: 13px; overflow: auto; padding: 6px 10px; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 248);font-family:&quot;Helvetica Neue&quot;, Arial, sans;\">&lt;div data-step=\"1\"&gt;&lt;/div&gt;\n\n</pre><h3 style=\" padding: 0px; font-size: 18px; font-family: Helvetica, arial, sans-serif;\">js\n</h3><ul style=\" padding-left: 30px; font-family: Helvetica, arial, sans-serif; font-size: 14px;\"><li style=\"\">添加js</li></ul><pre style=\"white-space: pre-wrap; border: 1px solid rgb(204, 204, 204); font-size: 13px; overflow: auto; padding: 6px 10px; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 248);font-family:&quot;Helvetica Neue&quot;, Arial, sans;\">function startIntro(){\n          var intro = introJs();\n            intro.setOptions({\n              steps: [\n                {\n                  element: '[data-step=\"1\"]',\n                  intro: \"这里是数据引擎提供的开发套件，如果当前区域为灰色，说明您选择的工作台模板暂时不需要该功能。 您可以在右上角的“设置-设置工作台”中开启相应的模块。\",\n                  position: 'bottom'\n                },\n                {\n                  element: '[data-step=\"2\"]',\n                  intro: \"在这里可以管理项目的数据、数据服务、数据源和数据主题。\",\n                  position: 'right'\n                },\n                {\n                  element: '[data-step=\"3\"]',\n                  intro: '在这里可以为项目添加成员，管理成员权限，配置项目空间。',\n                  position: 'right'\n                }\n              ],\n              'nextLabel': \"下一步\",                                           \n              'prevLabel': \"上一步\",\n              'skipLabel': \"跳过\",\n              'doneLabel':\"完成\",\n              'showStepNumbers':false\n            });\n            intro.start();\n                   \n\n</pre><h1 style=\" padding: 0px; font-size: 28px; font-family: Helvetica, arial, sans-serif;\">tips添加方式\n</h1><h2 style=\" padding: 0px; font-size: 24px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); font-family: Helvetica, arial, sans-serif;\">引入\n</h2><pre style=\"white-space: pre-wrap; border: 1px solid rgb(204, 204, 204); font-size: 13px; overflow: auto; padding: 6px 10px; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 248);font-family:&quot;Helvetica Neue&quot;, Arial, sans;\">&lt;script type=\"text/javascript\" src=\"<a style=\"color: rgb(149, 79, 114);\" target=\"_blank\" href=\"http://g.alicdn.com/base-tech-fe/base_fe_common/src/common/controller/tooltip.js\">http://g.alicdn.com/base-tech-fe/base_fe_common/src/common/controller/tooltip.js</a>\"&gt;&lt;/script&gt;\n\n</pre><h3 style=\" padding: 0px; font-size: 18px; font-family: Helvetica, arial, sans-serif;\">html\n</h3><pre style=\"white-space: pre-wrap; border: 1px solid rgb(204, 204, 204); font-size: 13px; overflow: auto; padding: 6px 10px; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 248);font-family:&quot;Helvetica Neue&quot;, Arial, sans;\">&lt;div class=\"toolTip\" data-tooltip title=\"tenant1\"&gt;&lt;/div&gt;\n\n</pre><h3 style=\" padding: 0px; font-size: 18px; font-family: Helvetica, arial, sans-serif;\">js\n</h3><pre style=\"white-space: pre-wrap; border: 1px solid rgb(204, 204, 204); font-size: 13px; overflow: auto; padding: 6px 10px; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 248);font-family:&quot;Helvetica Neue&quot;, Arial, sans;\">var keyMap = {\n    'tenant1': '提供一站式的数据集成开发环境，包括数据查询、ETL开发、数据算法挖掘等功能。'\n};\n$('[data-tooltip]').tooltip({verticalOffset:-200, horizontalOffset:20, keyMap: keyMap});\n\n</pre><h1 style=\" padding: 0px; font-size: 28px; font-family: Helvetica, arial, sans-serif;\">右下角帮助添加方式\n</h1><div style=\"font-family:&quot;Helvetica Neue&quot;, Arial, sans;font-size:16px;\">效果：\n</div><div style=\"font-family:&quot;Helvetica Neue&quot;, Arial, sans;font-size:16px;\"><img src=\"/images/2015-01-04/49A49378-4E4E-47C0-ACE3-E9819A21CD27.png\" height=\"267\" width=\"176\"/><br/></div><h2 style=\" padding: 0px; font-size: 24px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(204, 204, 204); font-family: Helvetica, arial, sans-serif;\">引入\n</h2><pre style=\"white-space: pre-wrap; border: 1px solid rgb(204, 204, 204); font-size: 13px; overflow: auto; padding: 6px 10px; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 248);font-family:&quot;Helvetica Neue&quot;, Arial, sans;\">&lt;script src=\"<a style=\"color: rgb(149, 79, 114);\" target=\"_blank\" href=\"http://g.alicdn.com/base-tech-fe/base_fe_common/src/common/controller/helper.js\">http://g.alicdn.com/base-tech-fe/base_fe_common/src/common/controller/helper.js</a>\"&gt;&lt;/script&gt;\n&lt;link rel=\"stylesheet\" href=\"<a style=\"color: rgb(149, 79, 114);\" target=\"_blank\" href=\"http://g.alicdn.com/base-tech-fe/base_fe_common/src/common/styles/helper.css\">http://g.alicdn.com/base-tech-fe/base_fe_common/src/common/styles/helper.css</a>\"/&gt;\n\n</pre><h3 style=\" padding: 0px; font-size: 18px; font-family: Helvetica, arial, sans-serif;\">html\n</h3><pre style=\"white-space: pre-wrap; border: 1px solid rgb(204, 204, 204); font-size: 13px; overflow: auto; padding: 6px 10px; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 248);font-family:&quot;Helvetica Neue&quot;, Arial, sans;\">&lt;div id=\"helper\" class=\"j-helper\"&gt;\n        &lt;h1&gt;FAQ&lt;/h1&gt;\n        &lt;ul&gt;\n            &lt;li&gt;&lt;a href=\"\"&gt;xxxxxxxxxxxxxxxxxxxxx&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"\"&gt;xxxxxxxxxxxxxxxxxxxxx&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"\"&gt;xxxxxxxxxxxxxxxxxxxxx&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"\"&gt;xxxxxxxxxxxxxxxxxxxxx&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"\"&gt;xxxxxxxxxxxxxxxxxxxxx&lt;/a&gt;&lt;/li&gt;\n        &lt;/ul&gt;\n        &lt;a class=\"more\" href=\"\"&gt;查看更多&lt;/a&gt;\n    &lt;/div&gt;\n\n</pre><h3 style=\" padding: 0px; font-size: 18px; font-family: Helvetica, arial, sans-serif;\">js\n</h3></div><pre style=\"white-space: pre-wrap; border: 1px solid rgb(204, 204, 204); font-size: 13px; overflow: auto; padding: 6px 10px; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(248, 248, 248);font-family:monospace;\">       var helper = $.helper({\n            content: '#helper',\n            titleBtn: {\n                text: '重看新手引导',\n                callback: function(){\n                    startIntro();\n                }\n            }\n        });\n</pre></div><div><br/></div>"},{"layout":"post","title":"基于发布订阅的任务调度框架（in js）","date":"2016-01-20T00:43:59.000Z","author":"Lily","_content":"最近在做一个比较复杂的单页应用，涉及到多个包含不同'任务'列表的模块，列表中的每条记录是一个在计算中的'任务'，有状态，进度等信息，每个记录对应一个定时轮训，从后端获取结果后更新页面多处的状态，期初工期等诸多因素导致这里众多任务每个对应一个定期执行的ajax轮训，非常浪费带宽，而且要手写代码根据返回结果更新页面多处内容，也容易出错（这是纯jquery的项目）。介于上述原因，设计实现了一个任务调度框架，将发布订阅模型应用到项目中，支持单任务和批量任务调度。\n## [task manager](https://github.com/DoTalkLily/TaskManager)\nThis is a task manager framework in js. It provides you with an executor for a bunch of tasks and manage the lifecycle of your task, you could subscribe the lifecycle event.\nTask could be an calculation which takes a long time,or an mission which should be executed periodically.\n\n### how to use\nYou could include the task-manager.js under directory 'dest/' in your html.Like:\n ```sh\n <script type=\"text/javascript\" src=\"/your_directory/task-manager.js\"></script>\n```\nIf you modified the source code and rebuild it, you need webpack installed globally:\n\n```sh\n$ npm install --save webpack\n```\nThen execute under root directory:\n```sh\n$ webpack\n```\n\n### Task\n\n* create a task\n   ```sh\n       var taskManager = new TaskManager();\n       taskManager.createTask({\n            id : taskId,\n            run : function(){\n                //process code goes here\n            }\n       });\n   ```\n* subscribe a topic\n   ```sh\n      var token = PubSub.subscribe(taskId,handler);\n   ```\n   'handler' is the function to process result when the task manager publish some result to the topic.  e.g.\n   ```sh\n        function handler(topic, res) {\n        }\n   ```\n   The 'topic' is the topic you subscribed, 'res' is the data received.\n\n   An unique token is returned to unsubscribe the topic.\n   ```sh\n      var token = PubSub.unsubscribe(token);\n   ```\n\n   Then a task is created and add to the task manager.To start is,you could call 'start'. e.g.\n   ```sh\n      taskManager.runTask(taskId);\n   ```\nThen you could leave it behind and process other code.\n\n* Configurations\n  + interval(optional,unit: millisecond)\n\n    It defines how often the 'run' method of the task is executed. Default is 10000.\n\n  + init (optional,function)\n\n     Some initialization before running the task,it could return a promise , 'run' method is executed after the promise resolved.\n\n  + run (required,function)\n\n    The main job of this task, which could send http request to server(ajax),or an time consuming calculation, etc. After the user defined processing is done, task manager will publish the result to the specific taskId. Your 'handler'(metioned above) will receive the result(if exists) then decide to kill the task or repeat the task after 'interval'(metioned above) time.\n\n    It could return a promise, then the publish action will take after the promise is resolved(It's useful when you are sending some ajax request).\n\n  + kill (optional,function)\n\nIf is provided, it could be some work before killing an task.\n\n* Api of a single task\n  + createTask\n\n    Create a single task.The configuration of a task is passed.Including:\n      * interval(optional):interval of executing a task\n      * id (required):unique id of the task\n      * run(required): task mission\n      * kill(optional): kill mission\n\n    return : The task just created.\n\n  + createTaskList\n\n    Create a list of tasks. The configuration of the task list is passed. Including:\n      * interval(optional):interval of executing a task\n      * ids (required):list of id of the task\n      * init(optional): init work before executing the task\n      * run(required): task mission\n      * kill(optional): kill mission\n    return : The list of tasks just created.\n  + runTask\n\n    Start to run the task.The task id is passed.\n    ```sh\n      taskManager.runTask(taskId);\n    ```\n  +  runTaskList\n\n     Start to run the task list at the same time .Array of  task ids is passed.\n     ```sh\n      taskManager.runTask([taskid1,taskid2]);\n     ```\n  + pauseTask\n\n     Pause a task. Task id is required.\n     ```sh\n       taskManager.pauseTask(taskId);\n     ```\n\n + pauseTaskList\n\n    Pause a list of tasks at the same time.Array of task ids is required.\n    ```sh\n      taskManager.pauseTaskList([taskId1,taskId2]);\n    ```\n\n  + continueTask\n\n     Wake up the task which is paused. Task id is required.\n     ```sh\n       taskManager.continueTask(taskId);\n     ```\n\n  + continueTaskList\n\n    Wake up the task which is paused.Array of task ids is required.\n    ```sh\n      taskManager.continueTaskList([taskId1,taskId2]);\n    ```\n  + killTask\n\n     Kill the task. Task id is required.\n     ```sh\n       taskManager.killTask(taskId);\n     ```\n\n  + killTaskList\n\n    Kill a list of tasks at the same time. Array of task ids is required.\n    ```sh\n      taskManager.killTaskList([taskId1,taskId2]);\n    ```\n\n# Batch Task\n  There is a condition when serveral tasks share one execution method.\n  ![alt text](https://raw.githubusercontent.com/DoTalkLily/TaskManager/master/doc/batch_task.png)\n\n  + Task manager collects the 'batchParam' of each task in the task queue. The 'batchParam' is defined when creating a batch task,which is the data each specific task may need when batch process taking place.\n  + Then execution shared by the batch tasks is called.\n  + Results are dispatched(published) to each batch task according to their task id.\n  + Each task may decide if it would attend next execution period or remove itself from the task queue according to the result they got(subscribe);\n  + After the 'interval' time, the task manager will repeat the same process again until there is no task in the task queue.\n\n\n* Api of a batch task\n  + createBatchTask\n     * option\n         * id (required) : id of the task,should be unique!\n         * init (function,optional):  init task\n         * afterInit(function,optional): callback of init\n         * callback(function,optional): callback of each response result(you may also subscribe the result)\n\n     ```sh\n        taskManager.createBatchTask({\n             id: taskId,\n             batchParams:{\n                //params for this task during execution\n             }\n        });\n     ```\n  + killBatchTask\n     * option\n         * id (required) : id of the task\n         * kill(function,optional): function before the task is killed\n\n     ```sh\n         taskManager.killBatchTask({\n              id: taskId\n         });\n\n         //or you may just pass the task id\n         taskManager.killBatchTask(taskId);\n     ```","source":"_posts/taskmanager.md","raw":"---\nlayout: post\ntitle:  基于发布订阅的任务调度框架（in js）\ndate:   2016-01-20 08:43:59\nauthor: Lily\ncategories: frontend\ntags:\n- 发布订阅\n- 任务调度\n---\n最近在做一个比较复杂的单页应用，涉及到多个包含不同'任务'列表的模块，列表中的每条记录是一个在计算中的'任务'，有状态，进度等信息，每个记录对应一个定时轮训，从后端获取结果后更新页面多处的状态，期初工期等诸多因素导致这里众多任务每个对应一个定期执行的ajax轮训，非常浪费带宽，而且要手写代码根据返回结果更新页面多处内容，也容易出错（这是纯jquery的项目）。介于上述原因，设计实现了一个任务调度框架，将发布订阅模型应用到项目中，支持单任务和批量任务调度。\n## [task manager](https://github.com/DoTalkLily/TaskManager)\nThis is a task manager framework in js. It provides you with an executor for a bunch of tasks and manage the lifecycle of your task, you could subscribe the lifecycle event.\nTask could be an calculation which takes a long time,or an mission which should be executed periodically.\n\n### how to use\nYou could include the task-manager.js under directory 'dest/' in your html.Like:\n ```sh\n <script type=\"text/javascript\" src=\"/your_directory/task-manager.js\"></script>\n```\nIf you modified the source code and rebuild it, you need webpack installed globally:\n\n```sh\n$ npm install --save webpack\n```\nThen execute under root directory:\n```sh\n$ webpack\n```\n\n### Task\n\n* create a task\n   ```sh\n       var taskManager = new TaskManager();\n       taskManager.createTask({\n            id : taskId,\n            run : function(){\n                //process code goes here\n            }\n       });\n   ```\n* subscribe a topic\n   ```sh\n      var token = PubSub.subscribe(taskId,handler);\n   ```\n   'handler' is the function to process result when the task manager publish some result to the topic.  e.g.\n   ```sh\n        function handler(topic, res) {\n        }\n   ```\n   The 'topic' is the topic you subscribed, 'res' is the data received.\n\n   An unique token is returned to unsubscribe the topic.\n   ```sh\n      var token = PubSub.unsubscribe(token);\n   ```\n\n   Then a task is created and add to the task manager.To start is,you could call 'start'. e.g.\n   ```sh\n      taskManager.runTask(taskId);\n   ```\nThen you could leave it behind and process other code.\n\n* Configurations\n  + interval(optional,unit: millisecond)\n\n    It defines how often the 'run' method of the task is executed. Default is 10000.\n\n  + init (optional,function)\n\n     Some initialization before running the task,it could return a promise , 'run' method is executed after the promise resolved.\n\n  + run (required,function)\n\n    The main job of this task, which could send http request to server(ajax),or an time consuming calculation, etc. After the user defined processing is done, task manager will publish the result to the specific taskId. Your 'handler'(metioned above) will receive the result(if exists) then decide to kill the task or repeat the task after 'interval'(metioned above) time.\n\n    It could return a promise, then the publish action will take after the promise is resolved(It's useful when you are sending some ajax request).\n\n  + kill (optional,function)\n\nIf is provided, it could be some work before killing an task.\n\n* Api of a single task\n  + createTask\n\n    Create a single task.The configuration of a task is passed.Including:\n      * interval(optional):interval of executing a task\n      * id (required):unique id of the task\n      * run(required): task mission\n      * kill(optional): kill mission\n\n    return : The task just created.\n\n  + createTaskList\n\n    Create a list of tasks. The configuration of the task list is passed. Including:\n      * interval(optional):interval of executing a task\n      * ids (required):list of id of the task\n      * init(optional): init work before executing the task\n      * run(required): task mission\n      * kill(optional): kill mission\n    return : The list of tasks just created.\n  + runTask\n\n    Start to run the task.The task id is passed.\n    ```sh\n      taskManager.runTask(taskId);\n    ```\n  +  runTaskList\n\n     Start to run the task list at the same time .Array of  task ids is passed.\n     ```sh\n      taskManager.runTask([taskid1,taskid2]);\n     ```\n  + pauseTask\n\n     Pause a task. Task id is required.\n     ```sh\n       taskManager.pauseTask(taskId);\n     ```\n\n + pauseTaskList\n\n    Pause a list of tasks at the same time.Array of task ids is required.\n    ```sh\n      taskManager.pauseTaskList([taskId1,taskId2]);\n    ```\n\n  + continueTask\n\n     Wake up the task which is paused. Task id is required.\n     ```sh\n       taskManager.continueTask(taskId);\n     ```\n\n  + continueTaskList\n\n    Wake up the task which is paused.Array of task ids is required.\n    ```sh\n      taskManager.continueTaskList([taskId1,taskId2]);\n    ```\n  + killTask\n\n     Kill the task. Task id is required.\n     ```sh\n       taskManager.killTask(taskId);\n     ```\n\n  + killTaskList\n\n    Kill a list of tasks at the same time. Array of task ids is required.\n    ```sh\n      taskManager.killTaskList([taskId1,taskId2]);\n    ```\n\n# Batch Task\n  There is a condition when serveral tasks share one execution method.\n  ![alt text](https://raw.githubusercontent.com/DoTalkLily/TaskManager/master/doc/batch_task.png)\n\n  + Task manager collects the 'batchParam' of each task in the task queue. The 'batchParam' is defined when creating a batch task,which is the data each specific task may need when batch process taking place.\n  + Then execution shared by the batch tasks is called.\n  + Results are dispatched(published) to each batch task according to their task id.\n  + Each task may decide if it would attend next execution period or remove itself from the task queue according to the result they got(subscribe);\n  + After the 'interval' time, the task manager will repeat the same process again until there is no task in the task queue.\n\n\n* Api of a batch task\n  + createBatchTask\n     * option\n         * id (required) : id of the task,should be unique!\n         * init (function,optional):  init task\n         * afterInit(function,optional): callback of init\n         * callback(function,optional): callback of each response result(you may also subscribe the result)\n\n     ```sh\n        taskManager.createBatchTask({\n             id: taskId,\n             batchParams:{\n                //params for this task during execution\n             }\n        });\n     ```\n  + killBatchTask\n     * option\n         * id (required) : id of the task\n         * kill(function,optional): function before the task is killed\n\n     ```sh\n         taskManager.killBatchTask({\n              id: taskId\n         });\n\n         //or you may just pass the task id\n         taskManager.killBatchTask(taskId);\n     ```","slug":"taskmanager","published":1,"updated":"2017-02-13T13:14:10.000Z","comments":1,"photos":[],"link":"","_id":"cizknqupm000b95c4jihsthuo","content":"<p>最近在做一个比较复杂的单页应用，涉及到多个包含不同’任务’列表的模块，列表中的每条记录是一个在计算中的’任务’，有状态，进度等信息，每个记录对应一个定时轮训，从后端获取结果后更新页面多处的状态，期初工期等诸多因素导致这里众多任务每个对应一个定期执行的ajax轮训，非常浪费带宽，而且要手写代码根据返回结果更新页面多处内容，也容易出错（这是纯jquery的项目）。介于上述原因，设计实现了一个任务调度框架，将发布订阅模型应用到项目中，支持单任务和批量任务调度。</p>\n<h2 id=\"task-manager\"><a href=\"#task-manager\" class=\"headerlink\" title=\"task manager\"></a><a href=\"https://github.com/DoTalkLily/TaskManager\" target=\"_blank\" rel=\"external\">task manager</a></h2><p>This is a task manager framework in js. It provides you with an executor for a bunch of tasks and manage the lifecycle of your task, you could subscribe the lifecycle event.<br>Task could be an calculation which takes a long time,or an mission which should be executed periodically.</p>\n<h3 id=\"how-to-use\"><a href=\"#how-to-use\" class=\"headerlink\" title=\"how to use\"></a>how to use</h3><p>You could include the task-manager.js under directory ‘dest/‘ in your html.Like:<br> <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"/your_directory/task-manager.js\"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<p>If you modified the source code and rebuild it, you need webpack installed globally:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install --save webpack</div></pre></td></tr></table></figure>\n<p>Then execute under root directory:<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ webpack</div></pre></td></tr></table></figure></p>\n<h3 id=\"Task\"><a href=\"#Task\" class=\"headerlink\" title=\"Task\"></a>Task</h3><ul>\n<li><p>create a task</p>\n <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var taskManager = new TaskManager();</div><div class=\"line\">taskManager.createTask(&#123;</div><div class=\"line\">     id : taskId,</div><div class=\"line\">     run : <span class=\"function\"><span class=\"title\">function</span></span>()&#123;</div><div class=\"line\">         //process code goes here</div><div class=\"line\">     &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>subscribe a topic</p>\n <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">var token = PubSub.subscribe(taskId,handler);</div></pre></td></tr></table></figure>\n<p> ‘handler’ is the function to process result when the task manager publish some result to the topic.  e.g.</p>\n <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> handler(topic, res) &#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p> The ‘topic’ is the topic you subscribed, ‘res’ is the data received.</p>\n<p> An unique token is returned to unsubscribe the topic.</p>\n <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">var token = PubSub.unsubscribe(token);</div></pre></td></tr></table></figure>\n<p> Then a task is created and add to the task manager.To start is,you could call ‘start’. e.g.</p>\n <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">taskManager.runTask(taskId);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Then you could leave it behind and process other code.</p>\n<ul>\n<li><p>Configurations</p>\n<ul>\n<li><p>interval(optional,unit: millisecond)</p>\n<p>It defines how often the ‘run’ method of the task is executed. Default is 10000.</p>\n</li>\n<li><p>init (optional,function)</p>\n<p> Some initialization before running the task,it could return a promise , ‘run’ method is executed after the promise resolved.</p>\n</li>\n<li><p>run (required,function)</p>\n<p>The main job of this task, which could send http request to server(ajax),or an time consuming calculation, etc. After the user defined processing is done, task manager will publish the result to the specific taskId. Your ‘handler’(metioned above) will receive the result(if exists) then decide to kill the task or repeat the task after ‘interval’(metioned above) time.</p>\n<p>It could return a promise, then the publish action will take after the promise is resolved(It’s useful when you are sending some ajax request).</p>\n</li>\n<li><p>kill (optional,function)</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>If is provided, it could be some work before killing an task.</p>\n<ul>\n<li><p>Api of a single task</p>\n<ul>\n<li><p>createTask</p>\n<p>Create a single task.The configuration of a task is passed.Including:</p>\n<ul>\n<li>interval(optional):interval of executing a task</li>\n<li>id (required):unique id of the task</li>\n<li>run(required): task mission</li>\n<li>kill(optional): kill mission</li>\n</ul>\n<p>return : The task just created.</p>\n</li>\n<li><p>createTaskList</p>\n<p>Create a list of tasks. The configuration of the task list is passed. Including:</p>\n<ul>\n<li>interval(optional):interval of executing a task</li>\n<li>ids (required):list of id of the task</li>\n<li>init(optional): init work before executing the task</li>\n<li>run(required): task mission</li>\n<li>kill(optional): kill mission<br>return : The list of tasks just created.</li>\n</ul>\n</li>\n<li><p>runTask</p>\n<p>Start to run the task.The task id is passed.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">taskManager.runTask(taskId);</div></pre></td></tr></table></figure>\n</li>\n<li><p>runTaskList</p>\n<p>Start to run the task list at the same time .Array of  task ids is passed.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">taskManager.runTask([taskid1,taskid2]);</div></pre></td></tr></table></figure>\n</li>\n<li><p>pauseTask</p>\n<p> Pause a task. Task id is required.</p>\n <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">taskManager.pauseTask(taskId);</div></pre></td></tr></table></figure>\n</li>\n<li><p>pauseTaskList</p>\n<p>Pause a list of tasks at the same time.Array of task ids is required.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">taskManager.pauseTaskList([taskId1,taskId2]);</div></pre></td></tr></table></figure>\n</li>\n<li><p>continueTask</p>\n<p> Wake up the task which is paused. Task id is required.</p>\n <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">taskManager.continueTask(taskId);</div></pre></td></tr></table></figure>\n</li>\n<li><p>continueTaskList</p>\n<p>Wake up the task which is paused.Array of task ids is required.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">taskManager.continueTaskList([taskId1,taskId2]);</div></pre></td></tr></table></figure>\n</li>\n<li><p>killTask</p>\n<p> Kill the task. Task id is required.</p>\n <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">taskManager.killTask(taskId);</div></pre></td></tr></table></figure>\n</li>\n<li><p>killTaskList</p>\n<p>Kill a list of tasks at the same time. Array of task ids is required.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">taskManager.killTaskList([taskId1,taskId2]);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Batch-Task\"><a href=\"#Batch-Task\" class=\"headerlink\" title=\"Batch Task\"></a>Batch Task</h1><p>  There is a condition when serveral tasks share one execution method.<br>  <img src=\"https://raw.githubusercontent.com/DoTalkLily/TaskManager/master/doc/batch_task.png\" alt=\"alt text\"></p>\n<ul>\n<li>Task manager collects the ‘batchParam’ of each task in the task queue. The ‘batchParam’ is defined when creating a batch task,which is the data each specific task may need when batch process taking place.</li>\n<li>Then execution shared by the batch tasks is called.</li>\n<li>Results are dispatched(published) to each batch task according to their task id.</li>\n<li>Each task may decide if it would attend next execution period or remove itself from the task queue according to the result they got(subscribe);</li>\n<li>After the ‘interval’ time, the task manager will repeat the same process again until there is no task in the task queue.</li>\n</ul>\n<ul>\n<li><p>Api of a batch task</p>\n<ul>\n<li><p>createBatchTask</p>\n<ul>\n<li><p>option</p>\n<ul>\n<li>id (required) : id of the task,should be unique!</li>\n<li>init (function,optional):  init task</li>\n<li>afterInit(function,optional): callback of init</li>\n<li>callback(function,optional): callback of each response result(you may also subscribe the result)</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">taskManager.createBatchTask(&#123;</div><div class=\"line\">     id: taskId,</div><div class=\"line\">     batchParams:&#123;</div><div class=\"line\">        //params <span class=\"keyword\">for</span> this task during execution</div><div class=\"line\">     &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>killBatchTask</p>\n<ul>\n<li><p>option</p>\n<ul>\n<li>id (required) : id of the task</li>\n<li>kill(function,optional): function before the task is killed</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">taskManager.killBatchTask(&#123;</div><div class=\"line\">     id: taskId</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">//or you may just pass the task id</div><div class=\"line\">taskManager.killBatchTask(taskId);</div></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","excerpt":"","more":"<p>最近在做一个比较复杂的单页应用，涉及到多个包含不同’任务’列表的模块，列表中的每条记录是一个在计算中的’任务’，有状态，进度等信息，每个记录对应一个定时轮训，从后端获取结果后更新页面多处的状态，期初工期等诸多因素导致这里众多任务每个对应一个定期执行的ajax轮训，非常浪费带宽，而且要手写代码根据返回结果更新页面多处内容，也容易出错（这是纯jquery的项目）。介于上述原因，设计实现了一个任务调度框架，将发布订阅模型应用到项目中，支持单任务和批量任务调度。</p>\n<h2 id=\"task-manager\"><a href=\"#task-manager\" class=\"headerlink\" title=\"task manager\"></a><a href=\"https://github.com/DoTalkLily/TaskManager\">task manager</a></h2><p>This is a task manager framework in js. It provides you with an executor for a bunch of tasks and manage the lifecycle of your task, you could subscribe the lifecycle event.<br>Task could be an calculation which takes a long time,or an mission which should be executed periodically.</p>\n<h3 id=\"how-to-use\"><a href=\"#how-to-use\" class=\"headerlink\" title=\"how to use\"></a>how to use</h3><p>You could include the task-manager.js under directory ‘dest/‘ in your html.Like:<br> <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"/your_directory/task-manager.js\"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<p>If you modified the source code and rebuild it, you need webpack installed globally:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install --save webpack</div></pre></td></tr></table></figure>\n<p>Then execute under root directory:<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ webpack</div></pre></td></tr></table></figure></p>\n<h3 id=\"Task\"><a href=\"#Task\" class=\"headerlink\" title=\"Task\"></a>Task</h3><ul>\n<li><p>create a task</p>\n <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var taskManager = new TaskManager();</div><div class=\"line\">taskManager.createTask(&#123;</div><div class=\"line\">     id : taskId,</div><div class=\"line\">     run : <span class=\"function\"><span class=\"title\">function</span></span>()&#123;</div><div class=\"line\">         //process code goes here</div><div class=\"line\">     &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>subscribe a topic</p>\n <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">var token = PubSub.subscribe(taskId,handler);</div></pre></td></tr></table></figure>\n<p> ‘handler’ is the function to process result when the task manager publish some result to the topic.  e.g.</p>\n <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> handler(topic, res) &#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p> The ‘topic’ is the topic you subscribed, ‘res’ is the data received.</p>\n<p> An unique token is returned to unsubscribe the topic.</p>\n <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">var token = PubSub.unsubscribe(token);</div></pre></td></tr></table></figure>\n<p> Then a task is created and add to the task manager.To start is,you could call ‘start’. e.g.</p>\n <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">taskManager.runTask(taskId);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Then you could leave it behind and process other code.</p>\n<ul>\n<li><p>Configurations</p>\n<ul>\n<li><p>interval(optional,unit: millisecond)</p>\n<p>It defines how often the ‘run’ method of the task is executed. Default is 10000.</p>\n</li>\n<li><p>init (optional,function)</p>\n<p> Some initialization before running the task,it could return a promise , ‘run’ method is executed after the promise resolved.</p>\n</li>\n<li><p>run (required,function)</p>\n<p>The main job of this task, which could send http request to server(ajax),or an time consuming calculation, etc. After the user defined processing is done, task manager will publish the result to the specific taskId. Your ‘handler’(metioned above) will receive the result(if exists) then decide to kill the task or repeat the task after ‘interval’(metioned above) time.</p>\n<p>It could return a promise, then the publish action will take after the promise is resolved(It’s useful when you are sending some ajax request).</p>\n</li>\n<li><p>kill (optional,function)</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>If is provided, it could be some work before killing an task.</p>\n<ul>\n<li><p>Api of a single task</p>\n<ul>\n<li><p>createTask</p>\n<p>Create a single task.The configuration of a task is passed.Including:</p>\n<ul>\n<li>interval(optional):interval of executing a task</li>\n<li>id (required):unique id of the task</li>\n<li>run(required): task mission</li>\n<li>kill(optional): kill mission</li>\n</ul>\n<p>return : The task just created.</p>\n</li>\n<li><p>createTaskList</p>\n<p>Create a list of tasks. The configuration of the task list is passed. Including:</p>\n<ul>\n<li>interval(optional):interval of executing a task</li>\n<li>ids (required):list of id of the task</li>\n<li>init(optional): init work before executing the task</li>\n<li>run(required): task mission</li>\n<li>kill(optional): kill mission<br>return : The list of tasks just created.</li>\n</ul>\n</li>\n<li><p>runTask</p>\n<p>Start to run the task.The task id is passed.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">taskManager.runTask(taskId);</div></pre></td></tr></table></figure>\n</li>\n<li><p>runTaskList</p>\n<p>Start to run the task list at the same time .Array of  task ids is passed.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">taskManager.runTask([taskid1,taskid2]);</div></pre></td></tr></table></figure>\n</li>\n<li><p>pauseTask</p>\n<p> Pause a task. Task id is required.</p>\n <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">taskManager.pauseTask(taskId);</div></pre></td></tr></table></figure>\n</li>\n<li><p>pauseTaskList</p>\n<p>Pause a list of tasks at the same time.Array of task ids is required.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">taskManager.pauseTaskList([taskId1,taskId2]);</div></pre></td></tr></table></figure>\n</li>\n<li><p>continueTask</p>\n<p> Wake up the task which is paused. Task id is required.</p>\n <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">taskManager.continueTask(taskId);</div></pre></td></tr></table></figure>\n</li>\n<li><p>continueTaskList</p>\n<p>Wake up the task which is paused.Array of task ids is required.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">taskManager.continueTaskList([taskId1,taskId2]);</div></pre></td></tr></table></figure>\n</li>\n<li><p>killTask</p>\n<p> Kill the task. Task id is required.</p>\n <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">taskManager.killTask(taskId);</div></pre></td></tr></table></figure>\n</li>\n<li><p>killTaskList</p>\n<p>Kill a list of tasks at the same time. Array of task ids is required.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">taskManager.killTaskList([taskId1,taskId2]);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Batch-Task\"><a href=\"#Batch-Task\" class=\"headerlink\" title=\"Batch Task\"></a>Batch Task</h1><p>  There is a condition when serveral tasks share one execution method.<br>  <img src=\"https://raw.githubusercontent.com/DoTalkLily/TaskManager/master/doc/batch_task.png\" alt=\"alt text\"></p>\n<ul>\n<li>Task manager collects the ‘batchParam’ of each task in the task queue. The ‘batchParam’ is defined when creating a batch task,which is the data each specific task may need when batch process taking place.</li>\n<li>Then execution shared by the batch tasks is called.</li>\n<li>Results are dispatched(published) to each batch task according to their task id.</li>\n<li>Each task may decide if it would attend next execution period or remove itself from the task queue according to the result they got(subscribe);</li>\n<li>After the ‘interval’ time, the task manager will repeat the same process again until there is no task in the task queue.</li>\n</ul>\n<ul>\n<li><p>Api of a batch task</p>\n<ul>\n<li><p>createBatchTask</p>\n<ul>\n<li><p>option</p>\n<ul>\n<li>id (required) : id of the task,should be unique!</li>\n<li>init (function,optional):  init task</li>\n<li>afterInit(function,optional): callback of init</li>\n<li>callback(function,optional): callback of each response result(you may also subscribe the result)</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">taskManager.createBatchTask(&#123;</div><div class=\"line\">     id: taskId,</div><div class=\"line\">     batchParams:&#123;</div><div class=\"line\">        //params <span class=\"keyword\">for</span> this task during execution</div><div class=\"line\">     &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>killBatchTask</p>\n<ul>\n<li><p>option</p>\n<ul>\n<li>id (required) : id of the task</li>\n<li>kill(function,optional): function before the task is killed</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">taskManager.killBatchTask(&#123;</div><div class=\"line\">     id: taskId</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">//or you may just pass the task id</div><div class=\"line\">taskManager.killBatchTask(taskId);</div></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"},{"layout":"post","title":"网站压测总结","date":"2015-05-04T00:43:59.000Z","author":"Lily","_content":"\n<div><span style=\"font: 10.5px 'Trebuchet MS'; font-kerning: none; -webkit-text-stroke: 0px #000000\">第一次压测网站，总结下。<br/>\n<br/>\n采用Apache的ab压测，在Apache\\bin 下，官方参数种类很多，这里主要用：<br/>\nD:\\Apache\\bin&gt;ab -n 10 -c 10 -H “Cookie:_ga=GA1.2.402232089.1425897773;an=accountxxx;c_token=xxxx;ck2=ssss;isg=D584668611BBBD50EDF249BFBF9C3B7CF9CE3642A2F885E7;lg=true;lvc=sAmHOnw5DDeK7w%3D%3D;sg=0c2\"  <a href=\"http://a.b.com\"><span style=\"font-kerning: none; color: #0433ff; -webkit-text-stroke: 0px #0433ff\"><u>http://a.b.com</u></span></a>(要压测的网址)<br/><br/>\n-n是请求次数，-c是并发请求数量，-H 设置请求头部， 这里由于要压测的网站需要登录后访问，因此这里如果不加cookie内容是访问登录页面速度，因此需要加cookie内容。<br/>\n结果如下：<br/> <br/><img src=\"/images/2015-05-04/B7434509-17F9-4386-8AD1-AC6A7F78A933.png\" height=\"1166\" width=\"1178\"/><br/>\nAb也可以对单个http接口做压测，但是本项目接口需要发送token 因此没法使用<br/>\n<br/>\n<br/>\n这里用另一个好用的工具 btrace  <a href=\"https://kenai.com/projects/btrace/pages/UserGuide\"><span style=\"font-kerning: none; color: #0433ff; -webkit-text-stroke: 0px #0433ff\"><u>https://kenai.com/projects/btrace/pages/UserGuide</u></span></a><br/>\n这个工具太强大了！！！完全不用侵入原有代码，类似AOP原理，用btrace语法写完代码，直接在工程外运行，制定项目运行后的进程id即可拦截相应方法测试对应执行时常。<br/>\n<br/>\n我想测试某个类所有方法运行时长，写代码如下：<br/>\n</span><span style=\"font: 10.5px 'Trebuchet MS'; font-kerning: none; color: #ff2500; -webkit-text-stroke: 0px #ff2500\"><b>import com.sun.btrace.annotations.*;     注意！！！！要全部引入！！！<br/>\nimport static com.sun.btrace.BTraceUtils.*;<br/>\n</b></span><span style=\"font: 10.5px 'Trebuchet MS'; font-kerning: none; -webkit-text-stroke: 0px #000000\">@BTrace<br/>\npublic class BtraceTest {<br/>\n<br/>\n<span style=\"white-space:pre\"\t/>@TLS<br/>\n<span style=\"white-space:pre\"\t/>private static long startTime = 0;<br/>\n<br/>\n<span style=\"white-space:pre\"\t/>@OnMethod(clazz = \"com.alibaba.base.dc.workspace.dao.WorkspaceDao\", method = \"/.*/\")<br/>\n<span style=\"white-space:pre\"\t/>public static void startExecute() {<br/>\n<span style=\"white-space:pre\"\t/>  startTime = timeNanos();<br/>\n<span style=\"white-space:pre\"\t/>}<br/>\n<br/>\n<span style=\"white-space:pre\"\t/>@OnMethod(clazz = \"com.alibaba.base.dc.workspace.dao.WorkspaceDao\", method = \"/.*/\", location = @Location(Kind.RETURN))<br/>\n<span style=\"white-space:pre\"\t/>public static void endExecute(@Duration long duration,@ProbeMethodName String pmn) {<br/>\n<span style=\"white-space:pre\"\t/><span style=\"white-space:pre\"\t/>double time = (timeNanos() - startTime) / 1000000.0;//纳秒转毫秒<br/>\n<span style=\"white-space:pre\"\t/><span style=\"white-space:pre\"\t/>String method = strcat(pmn,\" excute time \");<br/>\n<span style=\"white-space:pre\"\t/><span style=\"white-space:pre\"\t/>println(strcat(method, str(time)));<br/>\n<span style=\"white-space:pre\"\t/><span style=\"white-space:pre\"\t/><br/>\n<span style=\"white-space:pre\"\t/>}<br/>\n}<br/>\n<br/>\n执行btrace 5848 A.java  这里5848是要检测进程进程号，这里btrace可以放环境变量里。<br/>\n<br/>\n很好很强大！！<br/>\n<br/>\n另一个工具：</span><span style=\"font: 10.5px Courier; font-kerning: none; color: #75715e; background-color: #222420; -webkit-text-stroke: 0px #75715e\">greys</span><span style=\"font: 10.5px 'Trebuchet MS'; font-kerning: none; -webkit-text-stroke: 0px #000000\"><br/></span><span style=\"font: 12.0px Helvetica; -webkit-text-stroke: 0px #000000\">一.<span style=\"white-space:pre\"\t/></span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><b>安装：<br/>\n</b></span><span style=\"font: 12.0px Times; font-kerning: none; -webkit-text-stroke: 0px #000000\"> <img src=\"/images/2015-05-04/010F6EB7-2FC9-4567-B594-AAF65CB82188.png\" height=\"210\" width=\"1248\"/></span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><br/>\n</span><span style=\"font: 10.5px 'Trebuchet MS'; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><b>第二、使用篇：</b></span><span style=\"font: 10.5px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><br/>\n<b>1)</b></span><span style=\"font: 10.5px 'Trebuchet MS'; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><b>启动</b></span><span style=\"font: 12.0px Times; font-kerning: none; -webkit-text-stroke: 0px #000000\"><br/>\n</span><span style=\"font: 12.0px Courier; font-kerning: none; color: #f8f8f2; background-color: #222420; -webkit-text-stroke: 0px #f8f8f2\">./greys &lt;</span><span style=\"font: 12.0px Times; font-kerning: none; color: #f8f8f2; background-color: #222420; -webkit-text-stroke: 0px #f8f8f2\">进程</span><span style=\"font: 12.0px Courier; font-kerning: none; color: #f8f8f2; background-color: #222420; -webkit-text-stroke: 0px #f8f8f2\">pid&gt;[</span><span style=\"font: 12.0px Courier; font-kerning: none; color: #75715e; background-color: #222420; -webkit-text-stroke: 0px #75715e\">@IP</span><span style=\"font: 12.0px Courier; font-kerning: none; color: #f8f8f2; background-color: #222420; -webkit-text-stroke: 0px #f8f8f2\">:PORT]</span><span style=\"font: 10.0px Courier; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><br/>\n</span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">若想监听他人线上服务器，需要服务器开启远程服务。下面积分预发服务器实验一下：</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><br/>\n</span><span style=\"font: 12.0px Courier; font-kerning: none; color: #f8f8f2; background-color: #222420; -webkit-text-stroke: 0px #f8f8f2\">[linqing.lq</span><span style=\"font: 12.0px Courier; font-kerning: none; color: #75715e; background-color: #222420; -webkit-text-stroke: 0px #75715e\">@pointcenter</span><span style=\"font: 12.0px Courier; font-kerning: none; color: #f8f8f2; background-color: #222420; -webkit-text-stroke: 0px #f8f8f2\">161069.pre.cm3 ~]$ cd greys/<br/>\n[linqing.lq</span><span style=\"font: 12.0px Courier; font-kerning: none; color: #75715e; background-color: #222420; -webkit-text-stroke: 0px #75715e\">@pointcenter</span><span style=\"font: 12.0px Courier; font-kerning: none; color: #f8f8f2; background-color: #222420; -webkit-text-stroke: 0px #f8f8f2\">161069.pre.cm3 greys]$ ls<br/>\ngreys.jar  <a href=\"http://greys.sh\">greys.sh</a><br/>\n</span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">还需要找到</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">java</span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">进程：</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><br/>\n</span><span style=\"font: 12.0px Times; font-kerning: none; -webkit-text-stroke: 0px #000000\"> <img src=\"/images/2015-05-04/407BEEEA-DA8C-4380-AD24-A332A3EAEB04.png\" height=\"240\" width=\"1242\"/></span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><br/>\n开始启动：</span></div><div><span style=\"font: 12.0px Times; font-kerning: none; -webkit-text-stroke: 0px #000000\"><br/></span></div><div><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-size: 12px; line-height: normal; font-family: Times; -webkit-font-kerning: none; -webkit-text-stroke-width: 0px;\"><img src=\"/images/2015-05-04/1BFC3912-BD3A-451B-A51D-F1A8C2D29A0C.png\" height=\"376\" width=\"1158\"/></span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><br/>\n</span><span style=\"font: 10.5px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><b> 2</b></span><span style=\"font: 10.5px 'Trebuchet MS'; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><b>）下面玩起来</b></span><span style=\"font: 10.5px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><b>~</b><br/>\n</span><span style=\"font: 10.5px 'Trebuchet MS'; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">若想知道一个方法调用堆栈情况，</span><span style=\"font: 10.5px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><b>jstack </b></span><span style=\"font: 10.5px 'Trebuchet MS'; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">命令：</span><span style=\"font: 10.5px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">jstack </span><span style=\"font: 10.5px 'Trebuchet MS'; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">类名（支持正则）</span><span style=\"font: 10.5px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\" /><span style=\"font: 10.5px 'Trebuchet MS'; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">方法名（支持正则）</span><span style=\"font: 10.5px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><br/>\n</span><span style=\"font: 10.5px 'Trebuchet MS'; font-kerning: none; -webkit-text-stroke: 0px #000000\"> <img src=\"/images/2015-05-04/9A49FB27-D8FE-463A-B772-72C6ADFC1461.png\" height=\"690\" width=\"1238\"/></span><span style=\"font: 10.0px Courier; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><br/>\n</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"> </span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">有了这个方法，以后就不用担心</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">debug</span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">无从下手了</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">~~~<br/>\n<br/>\n</span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">若想知道线上某个方法某个时刻的调用记录情况，俗称保存现场，可以使用命令，</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">tt </span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">创建时间片，并对时间片中的记录进行分析</span></div><div><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-size: 12px; line-height: normal; -webkit-font-kerning: none; color: rgb(50, 51, 51); -webkit-text-stroke-width: 0px; -webkit-text-stroke-color: rgb(50, 51, 51);\"><font face=\"Times\"><br/></font>\n</span><span style=\"font: 12.0px Times; font-kerning: none; -webkit-text-stroke: 0px #000000\"> <img src=\"/images/2015-05-04/99331BCC-E2F2-44F8-B0C2-95C09B14015C.png\" height=\"376\" width=\"1232\"/></span></div><div><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-size: 12px; line-height: normal; -webkit-font-kerning: none; background-color: rgb(34, 36, 32); -webkit-text-stroke-width: 0px;\"><font face=\"Times\"><br/></font>\n</span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">创建完该时间片，则可以对该时间片的记录进行分析：</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><br/>\n</span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">比如想看</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">index</span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">为</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">1104</span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">的调用情况，则可以使用</span></div><div><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-size: 12px; line-height: normal; -webkit-font-kerning: none; color: rgb(50, 51, 51); -webkit-text-stroke-width: 0px; -webkit-text-stroke-color: rgb(50, 51, 51);\"><font face=\"Times\"><img src=\"/images/2015-05-04/550ADFD1-FDE1-4FBB-A24D-08027881614C.png\" height=\"492\" width=\"1238\"/><br/></font>\n</span><span style=\"font: 12.0px Times; font-kerning: none; -webkit-text-stroke: 0px #000000\"> </span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"> </span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">若想知道当前方法的在单位时间内的调用情况（</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">total</span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">），响应时间</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">(rt)</span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">，则可以使用</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">monitor</span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">命令</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><br/>\n</span><span style=\"font: 12.0px Times; font-kerning: none; -webkit-text-stroke: 0px #000000\"> <img src=\"/images/2015-05-04/\n26BB7BBC-9ED0-4BFD-A6E3-3A71E0F0E81F.png\" height=\"358\" width=\"1236\"/></span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><br/>\n更多命令可以使用</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">help</span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">帮忙，或者查看原作者：杜琨的分享</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><br/>\n<br/>\n</span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><b>参考文章</b></span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><br/>\n<a href=\"http://www.atatech.org/articles/32324?rnd=92212490\"><span style=\"font-kerning: none; color: #428bca; -webkit-text-stroke: 0px #428bca\"><u>http://www.atatech.org/articles/32324?rnd=92212490</u><br/>\n</span></a><br/>\n<a href=\"https://github.com/oldmanpushcart/greys-anatomy\">https://github.com/oldmanpushcart/greys-anatomy</a><br/>\n</span></div><div><br/></div>","source":"_posts/网站压测.html","raw":"---\nlayout: post\ntitle:  网站压测总结\ndate:   2015-05-04 08:43:59\nauthor: Lily\ncategories: backend\ntags:\n- ab\n- btrace\n- 网站压测\n---\n\n<div><span style=\"font: 10.5px 'Trebuchet MS'; font-kerning: none; -webkit-text-stroke: 0px #000000\">第一次压测网站，总结下。<br/>\n<br/>\n采用Apache的ab压测，在Apache\\bin 下，官方参数种类很多，这里主要用：<br/>\nD:\\Apache\\bin&gt;ab -n 10 -c 10 -H “Cookie:_ga=GA1.2.402232089.1425897773;an=accountxxx;c_token=xxxx;ck2=ssss;isg=D584668611BBBD50EDF249BFBF9C3B7CF9CE3642A2F885E7;lg=true;lvc=sAmHOnw5DDeK7w%3D%3D;sg=0c2\"  <a href=\"http://a.b.com\"><span style=\"font-kerning: none; color: #0433ff; -webkit-text-stroke: 0px #0433ff\"><u>http://a.b.com</u></span></a>(要压测的网址)<br/><br/>\n-n是请求次数，-c是并发请求数量，-H 设置请求头部， 这里由于要压测的网站需要登录后访问，因此这里如果不加cookie内容是访问登录页面速度，因此需要加cookie内容。<br/>\n结果如下：<br/> <br/><img src=\"/images/2015-05-04/B7434509-17F9-4386-8AD1-AC6A7F78A933.png\" height=\"1166\" width=\"1178\"/><br/>\nAb也可以对单个http接口做压测，但是本项目接口需要发送token 因此没法使用<br/>\n<br/>\n<br/>\n这里用另一个好用的工具 btrace  <a href=\"https://kenai.com/projects/btrace/pages/UserGuide\"><span style=\"font-kerning: none; color: #0433ff; -webkit-text-stroke: 0px #0433ff\"><u>https://kenai.com/projects/btrace/pages/UserGuide</u></span></a><br/>\n这个工具太强大了！！！完全不用侵入原有代码，类似AOP原理，用btrace语法写完代码，直接在工程外运行，制定项目运行后的进程id即可拦截相应方法测试对应执行时常。<br/>\n<br/>\n我想测试某个类所有方法运行时长，写代码如下：<br/>\n</span><span style=\"font: 10.5px 'Trebuchet MS'; font-kerning: none; color: #ff2500; -webkit-text-stroke: 0px #ff2500\"><b>import com.sun.btrace.annotations.*;     注意！！！！要全部引入！！！<br/>\nimport static com.sun.btrace.BTraceUtils.*;<br/>\n</b></span><span style=\"font: 10.5px 'Trebuchet MS'; font-kerning: none; -webkit-text-stroke: 0px #000000\">@BTrace<br/>\npublic class BtraceTest {<br/>\n<br/>\n<span style=\"white-space:pre\"\t/>@TLS<br/>\n<span style=\"white-space:pre\"\t/>private static long startTime = 0;<br/>\n<br/>\n<span style=\"white-space:pre\"\t/>@OnMethod(clazz = \"com.alibaba.base.dc.workspace.dao.WorkspaceDao\", method = \"/.*/\")<br/>\n<span style=\"white-space:pre\"\t/>public static void startExecute() {<br/>\n<span style=\"white-space:pre\"\t/>  startTime = timeNanos();<br/>\n<span style=\"white-space:pre\"\t/>}<br/>\n<br/>\n<span style=\"white-space:pre\"\t/>@OnMethod(clazz = \"com.alibaba.base.dc.workspace.dao.WorkspaceDao\", method = \"/.*/\", location = @Location(Kind.RETURN))<br/>\n<span style=\"white-space:pre\"\t/>public static void endExecute(@Duration long duration,@ProbeMethodName String pmn) {<br/>\n<span style=\"white-space:pre\"\t/><span style=\"white-space:pre\"\t/>double time = (timeNanos() - startTime) / 1000000.0;//纳秒转毫秒<br/>\n<span style=\"white-space:pre\"\t/><span style=\"white-space:pre\"\t/>String method = strcat(pmn,\" excute time \");<br/>\n<span style=\"white-space:pre\"\t/><span style=\"white-space:pre\"\t/>println(strcat(method, str(time)));<br/>\n<span style=\"white-space:pre\"\t/><span style=\"white-space:pre\"\t/><br/>\n<span style=\"white-space:pre\"\t/>}<br/>\n}<br/>\n<br/>\n执行btrace 5848 A.java  这里5848是要检测进程进程号，这里btrace可以放环境变量里。<br/>\n<br/>\n很好很强大！！<br/>\n<br/>\n另一个工具：</span><span style=\"font: 10.5px Courier; font-kerning: none; color: #75715e; background-color: #222420; -webkit-text-stroke: 0px #75715e\">greys</span><span style=\"font: 10.5px 'Trebuchet MS'; font-kerning: none; -webkit-text-stroke: 0px #000000\"><br/></span><span style=\"font: 12.0px Helvetica; -webkit-text-stroke: 0px #000000\">一.<span style=\"white-space:pre\"\t/></span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><b>安装：<br/>\n</b></span><span style=\"font: 12.0px Times; font-kerning: none; -webkit-text-stroke: 0px #000000\"> <img src=\"/images/2015-05-04/010F6EB7-2FC9-4567-B594-AAF65CB82188.png\" height=\"210\" width=\"1248\"/></span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><br/>\n</span><span style=\"font: 10.5px 'Trebuchet MS'; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><b>第二、使用篇：</b></span><span style=\"font: 10.5px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><br/>\n<b>1)</b></span><span style=\"font: 10.5px 'Trebuchet MS'; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><b>启动</b></span><span style=\"font: 12.0px Times; font-kerning: none; -webkit-text-stroke: 0px #000000\"><br/>\n</span><span style=\"font: 12.0px Courier; font-kerning: none; color: #f8f8f2; background-color: #222420; -webkit-text-stroke: 0px #f8f8f2\">./greys &lt;</span><span style=\"font: 12.0px Times; font-kerning: none; color: #f8f8f2; background-color: #222420; -webkit-text-stroke: 0px #f8f8f2\">进程</span><span style=\"font: 12.0px Courier; font-kerning: none; color: #f8f8f2; background-color: #222420; -webkit-text-stroke: 0px #f8f8f2\">pid&gt;[</span><span style=\"font: 12.0px Courier; font-kerning: none; color: #75715e; background-color: #222420; -webkit-text-stroke: 0px #75715e\">@IP</span><span style=\"font: 12.0px Courier; font-kerning: none; color: #f8f8f2; background-color: #222420; -webkit-text-stroke: 0px #f8f8f2\">:PORT]</span><span style=\"font: 10.0px Courier; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><br/>\n</span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">若想监听他人线上服务器，需要服务器开启远程服务。下面积分预发服务器实验一下：</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><br/>\n</span><span style=\"font: 12.0px Courier; font-kerning: none; color: #f8f8f2; background-color: #222420; -webkit-text-stroke: 0px #f8f8f2\">[linqing.lq</span><span style=\"font: 12.0px Courier; font-kerning: none; color: #75715e; background-color: #222420; -webkit-text-stroke: 0px #75715e\">@pointcenter</span><span style=\"font: 12.0px Courier; font-kerning: none; color: #f8f8f2; background-color: #222420; -webkit-text-stroke: 0px #f8f8f2\">161069.pre.cm3 ~]$ cd greys/<br/>\n[linqing.lq</span><span style=\"font: 12.0px Courier; font-kerning: none; color: #75715e; background-color: #222420; -webkit-text-stroke: 0px #75715e\">@pointcenter</span><span style=\"font: 12.0px Courier; font-kerning: none; color: #f8f8f2; background-color: #222420; -webkit-text-stroke: 0px #f8f8f2\">161069.pre.cm3 greys]$ ls<br/>\ngreys.jar  <a href=\"http://greys.sh\">greys.sh</a><br/>\n</span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">还需要找到</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">java</span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">进程：</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><br/>\n</span><span style=\"font: 12.0px Times; font-kerning: none; -webkit-text-stroke: 0px #000000\"> <img src=\"/images/2015-05-04/407BEEEA-DA8C-4380-AD24-A332A3EAEB04.png\" height=\"240\" width=\"1242\"/></span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><br/>\n开始启动：</span></div><div><span style=\"font: 12.0px Times; font-kerning: none; -webkit-text-stroke: 0px #000000\"><br/></span></div><div><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-size: 12px; line-height: normal; font-family: Times; -webkit-font-kerning: none; -webkit-text-stroke-width: 0px;\"><img src=\"/images/2015-05-04/1BFC3912-BD3A-451B-A51D-F1A8C2D29A0C.png\" height=\"376\" width=\"1158\"/></span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><br/>\n</span><span style=\"font: 10.5px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><b> 2</b></span><span style=\"font: 10.5px 'Trebuchet MS'; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><b>）下面玩起来</b></span><span style=\"font: 10.5px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><b>~</b><br/>\n</span><span style=\"font: 10.5px 'Trebuchet MS'; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">若想知道一个方法调用堆栈情况，</span><span style=\"font: 10.5px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><b>jstack </b></span><span style=\"font: 10.5px 'Trebuchet MS'; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">命令：</span><span style=\"font: 10.5px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">jstack </span><span style=\"font: 10.5px 'Trebuchet MS'; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">类名（支持正则）</span><span style=\"font: 10.5px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\" /><span style=\"font: 10.5px 'Trebuchet MS'; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">方法名（支持正则）</span><span style=\"font: 10.5px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><br/>\n</span><span style=\"font: 10.5px 'Trebuchet MS'; font-kerning: none; -webkit-text-stroke: 0px #000000\"> <img src=\"/images/2015-05-04/9A49FB27-D8FE-463A-B772-72C6ADFC1461.png\" height=\"690\" width=\"1238\"/></span><span style=\"font: 10.0px Courier; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><br/>\n</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"> </span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">有了这个方法，以后就不用担心</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">debug</span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">无从下手了</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">~~~<br/>\n<br/>\n</span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">若想知道线上某个方法某个时刻的调用记录情况，俗称保存现场，可以使用命令，</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">tt </span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">创建时间片，并对时间片中的记录进行分析</span></div><div><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-size: 12px; line-height: normal; -webkit-font-kerning: none; color: rgb(50, 51, 51); -webkit-text-stroke-width: 0px; -webkit-text-stroke-color: rgb(50, 51, 51);\"><font face=\"Times\"><br/></font>\n</span><span style=\"font: 12.0px Times; font-kerning: none; -webkit-text-stroke: 0px #000000\"> <img src=\"/images/2015-05-04/99331BCC-E2F2-44F8-B0C2-95C09B14015C.png\" height=\"376\" width=\"1232\"/></span></div><div><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-size: 12px; line-height: normal; -webkit-font-kerning: none; background-color: rgb(34, 36, 32); -webkit-text-stroke-width: 0px;\"><font face=\"Times\"><br/></font>\n</span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">创建完该时间片，则可以对该时间片的记录进行分析：</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><br/>\n</span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">比如想看</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">index</span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">为</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">1104</span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">的调用情况，则可以使用</span></div><div><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-size: 12px; line-height: normal; -webkit-font-kerning: none; color: rgb(50, 51, 51); -webkit-text-stroke-width: 0px; -webkit-text-stroke-color: rgb(50, 51, 51);\"><font face=\"Times\"><img src=\"/images/2015-05-04/550ADFD1-FDE1-4FBB-A24D-08027881614C.png\" height=\"492\" width=\"1238\"/><br/></font>\n</span><span style=\"font: 12.0px Times; font-kerning: none; -webkit-text-stroke: 0px #000000\"> </span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"> </span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">若想知道当前方法的在单位时间内的调用情况（</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">total</span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">），响应时间</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">(rt)</span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">，则可以使用</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">monitor</span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">命令</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><br/>\n</span><span style=\"font: 12.0px Times; font-kerning: none; -webkit-text-stroke: 0px #000000\"> <img src=\"/images/2015-05-04/\n26BB7BBC-9ED0-4BFD-A6E3-3A71E0F0E81F.png\" height=\"358\" width=\"1236\"/></span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><br/>\n更多命令可以使用</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">help</span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">帮忙，或者查看原作者：杜琨的分享</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><br/>\n<br/>\n</span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><b>参考文章</b></span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><br/>\n<a href=\"http://www.atatech.org/articles/32324?rnd=92212490\"><span style=\"font-kerning: none; color: #428bca; -webkit-text-stroke: 0px #428bca\"><u>http://www.atatech.org/articles/32324?rnd=92212490</u><br/>\n</span></a><br/>\n<a href=\"https://github.com/oldmanpushcart/greys-anatomy\">https://github.com/oldmanpushcart/greys-anatomy</a><br/>\n</span></div><div><br/></div>","slug":"网站压测","published":1,"updated":"2017-02-14T02:38:13.000Z","comments":1,"photos":[],"link":"","_id":"cizknqupq000f95c4lckoj1ro","content":"\n<div><span style=\"font: 10.5px 'Trebuchet MS'; font-kerning: none; -webkit-text-stroke: 0px #000000\">第一次压测网站，总结下。<br>\n<br>\n采用Apache的ab压测，在Apache\\bin 下，官方参数种类很多，这里主要用：<br>\nD:\\Apache\\bin&gt;ab -n 10 -c 10 -H “Cookie:_ga=GA1.2.402232089.1425897773;an=accountxxx;c_token=xxxx;ck2=ssss;isg=D584668611BBBD50EDF249BFBF9C3B7CF9CE3642A2F885E7;lg=true;lvc=sAmHOnw5DDeK7w%3D%3D;sg=0c2\"  <a href=\"http://a.b.com\" target=\"_blank\" rel=\"external\"><span style=\"font-kerning: none; color: #0433ff; -webkit-text-stroke: 0px #0433ff\"><u>http://a.b.com</u></span></a>(要压测的网址)<br><br>\n-n是请求次数，-c是并发请求数量，-H 设置请求头部， 这里由于要压测的网站需要登录后访问，因此这里如果不加cookie内容是访问登录页面速度，因此需要加cookie内容。<br>\n结果如下：<br> <br><img src=\"/images/2015-05-04/B7434509-17F9-4386-8AD1-AC6A7F78A933.png\" height=\"1166\" width=\"1178\"><br>\nAb也可以对单个http接口做压测，但是本项目接口需要发送token 因此没法使用<br>\n<br>\n<br>\n这里用另一个好用的工具 btrace  <a href=\"https://kenai.com/projects/btrace/pages/UserGuide\" target=\"_blank\" rel=\"external\"><span style=\"font-kerning: none; color: #0433ff; -webkit-text-stroke: 0px #0433ff\"><u>https://kenai.com/projects/btrace/pages/UserGuide</u></span></a><br>\n这个工具太强大了！！！完全不用侵入原有代码，类似AOP原理，用btrace语法写完代码，直接在工程外运行，制定项目运行后的进程id即可拦截相应方法测试对应执行时常。<br>\n<br>\n我想测试某个类所有方法运行时长，写代码如下：<br>\n</span><span style=\"font: 10.5px 'Trebuchet MS'; font-kerning: none; color: #ff2500; -webkit-text-stroke: 0px #ff2500\"><b>import com.sun.btrace.annotations.*;     注意！！！！要全部引入！！！<br>\nimport static com.sun.btrace.BTraceUtils.*;<br>\n</b></span><span style=\"font: 10.5px 'Trebuchet MS'; font-kerning: none; -webkit-text-stroke: 0px #000000\">@BTrace<br>\npublic class BtraceTest {<br>\n<br>\n<span style=\"white-space:pre\">@TLS<br>\n<span style=\"white-space:pre\">private static long startTime = 0;<br>\n<br>\n<span style=\"white-space:pre\">@OnMethod(clazz = \"com.alibaba.base.dc.workspace.dao.WorkspaceDao\", method = \"/.*/\")<br>\n<span style=\"white-space:pre\">public static void startExecute() {<br>\n<span style=\"white-space:pre\">  startTime = timeNanos();<br>\n<span style=\"white-space:pre\">}<br>\n<br>\n<span style=\"white-space:pre\">@OnMethod(clazz = \"com.alibaba.base.dc.workspace.dao.WorkspaceDao\", method = \"/.*/\", location = @Location(Kind.RETURN))<br>\n<span style=\"white-space:pre\">public static void endExecute(@Duration long duration,@ProbeMethodName String pmn) {<br>\n<span style=\"white-space:pre\"><span style=\"white-space:pre\">double time = (timeNanos() - startTime) / 1000000.0;//纳秒转毫秒<br>\n<span style=\"white-space:pre\"><span style=\"white-space:pre\">String method = strcat(pmn,\" excute time \");<br>\n<span style=\"white-space:pre\"><span style=\"white-space:pre\">println(strcat(method, str(time)));<br>\n<span style=\"white-space:pre\"><span style=\"white-space:pre\"><br>\n<span style=\"white-space:pre\">}<br>\n}<br>\n<br>\n执行btrace 5848 A.java  这里5848是要检测进程进程号，这里btrace可以放环境变量里。<br>\n<br>\n很好很强大！！<br>\n<br>\n另一个工具：</span><span style=\"font: 10.5px Courier; font-kerning: none; color: #75715e; background-color: #222420; -webkit-text-stroke: 0px #75715e\">greys</span><span style=\"font: 10.5px 'Trebuchet MS'; font-kerning: none; -webkit-text-stroke: 0px #000000\"><br></span><span style=\"font: 12.0px Helvetica; -webkit-text-stroke: 0px #000000\">一.<span style=\"white-space:pre\"></span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><b>安装：<br>\n</b></span><span style=\"font: 12.0px Times; font-kerning: none; -webkit-text-stroke: 0px #000000\"> <img src=\"/images/2015-05-04/010F6EB7-2FC9-4567-B594-AAF65CB82188.png\" height=\"210\" width=\"1248\"></span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><br>\n</span><span style=\"font: 10.5px 'Trebuchet MS'; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><b>第二、使用篇：</b></span><span style=\"font: 10.5px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><br>\n<b>1)</b></span><span style=\"font: 10.5px 'Trebuchet MS'; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><b>启动</b></span><span style=\"font: 12.0px Times; font-kerning: none; -webkit-text-stroke: 0px #000000\"><br>\n</span><span style=\"font: 12.0px Courier; font-kerning: none; color: #f8f8f2; background-color: #222420; -webkit-text-stroke: 0px #f8f8f2\">./greys &lt;</span><span style=\"font: 12.0px Times; font-kerning: none; color: #f8f8f2; background-color: #222420; -webkit-text-stroke: 0px #f8f8f2\">进程</span><span style=\"font: 12.0px Courier; font-kerning: none; color: #f8f8f2; background-color: #222420; -webkit-text-stroke: 0px #f8f8f2\">pid&gt;[</span><span style=\"font: 12.0px Courier; font-kerning: none; color: #75715e; background-color: #222420; -webkit-text-stroke: 0px #75715e\">@IP</span><span style=\"font: 12.0px Courier; font-kerning: none; color: #f8f8f2; background-color: #222420; -webkit-text-stroke: 0px #f8f8f2\">:PORT]</span><span style=\"font: 10.0px Courier; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><br>\n</span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">若想监听他人线上服务器，需要服务器开启远程服务。下面积分预发服务器实验一下：</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><br>\n</span><span style=\"font: 12.0px Courier; font-kerning: none; color: #f8f8f2; background-color: #222420; -webkit-text-stroke: 0px #f8f8f2\">[linqing.lq</span><span style=\"font: 12.0px Courier; font-kerning: none; color: #75715e; background-color: #222420; -webkit-text-stroke: 0px #75715e\">@pointcenter</span><span style=\"font: 12.0px Courier; font-kerning: none; color: #f8f8f2; background-color: #222420; -webkit-text-stroke: 0px #f8f8f2\">161069.pre.cm3 ~]$ cd greys/<br>\n[linqing.lq</span><span style=\"font: 12.0px Courier; font-kerning: none; color: #75715e; background-color: #222420; -webkit-text-stroke: 0px #75715e\">@pointcenter</span><span style=\"font: 12.0px Courier; font-kerning: none; color: #f8f8f2; background-color: #222420; -webkit-text-stroke: 0px #f8f8f2\">161069.pre.cm3 greys]$ ls<br>\ngreys.jar  <a href=\"http://greys.sh\" target=\"_blank\" rel=\"external\">greys.sh</a><br>\n</span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">还需要找到</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">java</span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">进程：</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><br>\n</span><span style=\"font: 12.0px Times; font-kerning: none; -webkit-text-stroke: 0px #000000\"> <img src=\"/images/2015-05-04/407BEEEA-DA8C-4380-AD24-A332A3EAEB04.png\" height=\"240\" width=\"1242\"></span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><br>\n开始启动：</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></div><div><span style=\"font: 12.0px Times; font-kerning: none; -webkit-text-stroke: 0px #000000\"><br></span></div><div><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-size: 12px; line-height: normal; font-family: Times; -webkit-font-kerning: none; -webkit-text-stroke-width: 0px;\"><img src=\"/images/2015-05-04/1BFC3912-BD3A-451B-A51D-F1A8C2D29A0C.png\" height=\"376\" width=\"1158\"></span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><br>\n</span><span style=\"font: 10.5px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><b> 2</b></span><span style=\"font: 10.5px 'Trebuchet MS'; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><b>）下面玩起来</b></span><span style=\"font: 10.5px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><b>~</b><br>\n</span><span style=\"font: 10.5px 'Trebuchet MS'; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">若想知道一个方法调用堆栈情况，</span><span style=\"font: 10.5px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><b>jstack </b></span><span style=\"font: 10.5px 'Trebuchet MS'; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">命令：</span><span style=\"font: 10.5px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">jstack </span><span style=\"font: 10.5px 'Trebuchet MS'; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">类名（支持正则）</span><span style=\"font: 10.5px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><span style=\"font: 10.5px 'Trebuchet MS'; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">方法名（支持正则）</span><span style=\"font: 10.5px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><br>\n</span><span style=\"font: 10.5px 'Trebuchet MS'; font-kerning: none; -webkit-text-stroke: 0px #000000\"> <img src=\"/images/2015-05-04/9A49FB27-D8FE-463A-B772-72C6ADFC1461.png\" height=\"690\" width=\"1238\"></span><span style=\"font: 10.0px Courier; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><br>\n</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"> </span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">有了这个方法，以后就不用担心</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">debug</span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">无从下手了</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">~~~<br>\n<br>\n</span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">若想知道线上某个方法某个时刻的调用记录情况，俗称保存现场，可以使用命令，</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">tt </span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">创建时间片，并对时间片中的记录进行分析</span></span></div><div><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-size: 12px; line-height: normal; -webkit-font-kerning: none; color: rgb(50, 51, 51); -webkit-text-stroke-width: 0px; -webkit-text-stroke-color: rgb(50, 51, 51);\"><font face=\"Times\"><br></font>\n</span><span style=\"font: 12.0px Times; font-kerning: none; -webkit-text-stroke: 0px #000000\"> <img src=\"/images/2015-05-04/99331BCC-E2F2-44F8-B0C2-95C09B14015C.png\" height=\"376\" width=\"1232\"></span></div><div><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-size: 12px; line-height: normal; -webkit-font-kerning: none; background-color: rgb(34, 36, 32); -webkit-text-stroke-width: 0px;\"><font face=\"Times\"><br></font>\n</span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">创建完该时间片，则可以对该时间片的记录进行分析：</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><br>\n</span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">比如想看</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">index</span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">为</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">1104</span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">的调用情况，则可以使用</span></div><div><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-size: 12px; line-height: normal; -webkit-font-kerning: none; color: rgb(50, 51, 51); -webkit-text-stroke-width: 0px; -webkit-text-stroke-color: rgb(50, 51, 51);\"><font face=\"Times\"><img src=\"/images/2015-05-04/550ADFD1-FDE1-4FBB-A24D-08027881614C.png\" height=\"492\" width=\"1238\"><br></font>\n</span><span style=\"font: 12.0px Times; font-kerning: none; -webkit-text-stroke: 0px #000000\"> </span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"> </span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">若想知道当前方法的在单位时间内的调用情况（</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">total</span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">），响应时间</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">(rt)</span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">，则可以使用</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">monitor</span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">命令</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><br>\n</span><span style=\"font: 12.0px Times; font-kerning: none; -webkit-text-stroke: 0px #000000\"> <img src=\"/images/2015-05-04/\n26BB7BBC-9ED0-4BFD-A6E3-3A71E0F0E81F.png\" height=\"358\" width=\"1236\"></span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><br>\n更多命令可以使用</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">help</span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">帮忙，或者查看原作者：杜琨的分享</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><br>\n<br>\n</span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><b>参考文章</b></span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><br>\n<a href=\"http://www.atatech.org/articles/32324?rnd=92212490\" target=\"_blank\" rel=\"external\"><span style=\"font-kerning: none; color: #428bca; -webkit-text-stroke: 0px #428bca\"><u>http://www.atatech.org/articles/32324?rnd=92212490</u><br>\n</span></a><br>\n<a href=\"https://github.com/oldmanpushcart/greys-anatomy\" target=\"_blank\" rel=\"external\">https://github.com/oldmanpushcart/greys-anatomy</a><br>\n</span></div><div><br></div>","excerpt":"","more":"\n<div><span style=\"font: 10.5px 'Trebuchet MS'; font-kerning: none; -webkit-text-stroke: 0px #000000\">第一次压测网站，总结下。<br/>\n<br/>\n采用Apache的ab压测，在Apache\\bin 下，官方参数种类很多，这里主要用：<br/>\nD:\\Apache\\bin&gt;ab -n 10 -c 10 -H “Cookie:_ga=GA1.2.402232089.1425897773;an=accountxxx;c_token=xxxx;ck2=ssss;isg=D584668611BBBD50EDF249BFBF9C3B7CF9CE3642A2F885E7;lg=true;lvc=sAmHOnw5DDeK7w%3D%3D;sg=0c2\"  <a href=\"http://a.b.com\"><span style=\"font-kerning: none; color: #0433ff; -webkit-text-stroke: 0px #0433ff\"><u>http://a.b.com</u></span></a>(要压测的网址)<br/><br/>\n-n是请求次数，-c是并发请求数量，-H 设置请求头部， 这里由于要压测的网站需要登录后访问，因此这里如果不加cookie内容是访问登录页面速度，因此需要加cookie内容。<br/>\n结果如下：<br/> <br/><img src=\"/images/2015-05-04/B7434509-17F9-4386-8AD1-AC6A7F78A933.png\" height=\"1166\" width=\"1178\"/><br/>\nAb也可以对单个http接口做压测，但是本项目接口需要发送token 因此没法使用<br/>\n<br/>\n<br/>\n这里用另一个好用的工具 btrace  <a href=\"https://kenai.com/projects/btrace/pages/UserGuide\"><span style=\"font-kerning: none; color: #0433ff; -webkit-text-stroke: 0px #0433ff\"><u>https://kenai.com/projects/btrace/pages/UserGuide</u></span></a><br/>\n这个工具太强大了！！！完全不用侵入原有代码，类似AOP原理，用btrace语法写完代码，直接在工程外运行，制定项目运行后的进程id即可拦截相应方法测试对应执行时常。<br/>\n<br/>\n我想测试某个类所有方法运行时长，写代码如下：<br/>\n</span><span style=\"font: 10.5px 'Trebuchet MS'; font-kerning: none; color: #ff2500; -webkit-text-stroke: 0px #ff2500\"><b>import com.sun.btrace.annotations.*;     注意！！！！要全部引入！！！<br/>\nimport static com.sun.btrace.BTraceUtils.*;<br/>\n</b></span><span style=\"font: 10.5px 'Trebuchet MS'; font-kerning: none; -webkit-text-stroke: 0px #000000\">@BTrace<br/>\npublic class BtraceTest {<br/>\n<br/>\n<span style=\"white-space:pre\"\t/>@TLS<br/>\n<span style=\"white-space:pre\"\t/>private static long startTime = 0;<br/>\n<br/>\n<span style=\"white-space:pre\"\t/>@OnMethod(clazz = \"com.alibaba.base.dc.workspace.dao.WorkspaceDao\", method = \"/.*/\")<br/>\n<span style=\"white-space:pre\"\t/>public static void startExecute() {<br/>\n<span style=\"white-space:pre\"\t/>  startTime = timeNanos();<br/>\n<span style=\"white-space:pre\"\t/>}<br/>\n<br/>\n<span style=\"white-space:pre\"\t/>@OnMethod(clazz = \"com.alibaba.base.dc.workspace.dao.WorkspaceDao\", method = \"/.*/\", location = @Location(Kind.RETURN))<br/>\n<span style=\"white-space:pre\"\t/>public static void endExecute(@Duration long duration,@ProbeMethodName String pmn) {<br/>\n<span style=\"white-space:pre\"\t/><span style=\"white-space:pre\"\t/>double time = (timeNanos() - startTime) / 1000000.0;//纳秒转毫秒<br/>\n<span style=\"white-space:pre\"\t/><span style=\"white-space:pre\"\t/>String method = strcat(pmn,\" excute time \");<br/>\n<span style=\"white-space:pre\"\t/><span style=\"white-space:pre\"\t/>println(strcat(method, str(time)));<br/>\n<span style=\"white-space:pre\"\t/><span style=\"white-space:pre\"\t/><br/>\n<span style=\"white-space:pre\"\t/>}<br/>\n}<br/>\n<br/>\n执行btrace 5848 A.java  这里5848是要检测进程进程号，这里btrace可以放环境变量里。<br/>\n<br/>\n很好很强大！！<br/>\n<br/>\n另一个工具：</span><span style=\"font: 10.5px Courier; font-kerning: none; color: #75715e; background-color: #222420; -webkit-text-stroke: 0px #75715e\">greys</span><span style=\"font: 10.5px 'Trebuchet MS'; font-kerning: none; -webkit-text-stroke: 0px #000000\"><br/></span><span style=\"font: 12.0px Helvetica; -webkit-text-stroke: 0px #000000\">一.<span style=\"white-space:pre\"\t/></span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><b>安装：<br/>\n</b></span><span style=\"font: 12.0px Times; font-kerning: none; -webkit-text-stroke: 0px #000000\"> <img src=\"/images/2015-05-04/010F6EB7-2FC9-4567-B594-AAF65CB82188.png\" height=\"210\" width=\"1248\"/></span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><br/>\n</span><span style=\"font: 10.5px 'Trebuchet MS'; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><b>第二、使用篇：</b></span><span style=\"font: 10.5px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><br/>\n<b>1)</b></span><span style=\"font: 10.5px 'Trebuchet MS'; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><b>启动</b></span><span style=\"font: 12.0px Times; font-kerning: none; -webkit-text-stroke: 0px #000000\"><br/>\n</span><span style=\"font: 12.0px Courier; font-kerning: none; color: #f8f8f2; background-color: #222420; -webkit-text-stroke: 0px #f8f8f2\">./greys &lt;</span><span style=\"font: 12.0px Times; font-kerning: none; color: #f8f8f2; background-color: #222420; -webkit-text-stroke: 0px #f8f8f2\">进程</span><span style=\"font: 12.0px Courier; font-kerning: none; color: #f8f8f2; background-color: #222420; -webkit-text-stroke: 0px #f8f8f2\">pid&gt;[</span><span style=\"font: 12.0px Courier; font-kerning: none; color: #75715e; background-color: #222420; -webkit-text-stroke: 0px #75715e\">@IP</span><span style=\"font: 12.0px Courier; font-kerning: none; color: #f8f8f2; background-color: #222420; -webkit-text-stroke: 0px #f8f8f2\">:PORT]</span><span style=\"font: 10.0px Courier; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><br/>\n</span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">若想监听他人线上服务器，需要服务器开启远程服务。下面积分预发服务器实验一下：</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><br/>\n</span><span style=\"font: 12.0px Courier; font-kerning: none; color: #f8f8f2; background-color: #222420; -webkit-text-stroke: 0px #f8f8f2\">[linqing.lq</span><span style=\"font: 12.0px Courier; font-kerning: none; color: #75715e; background-color: #222420; -webkit-text-stroke: 0px #75715e\">@pointcenter</span><span style=\"font: 12.0px Courier; font-kerning: none; color: #f8f8f2; background-color: #222420; -webkit-text-stroke: 0px #f8f8f2\">161069.pre.cm3 ~]$ cd greys/<br/>\n[linqing.lq</span><span style=\"font: 12.0px Courier; font-kerning: none; color: #75715e; background-color: #222420; -webkit-text-stroke: 0px #75715e\">@pointcenter</span><span style=\"font: 12.0px Courier; font-kerning: none; color: #f8f8f2; background-color: #222420; -webkit-text-stroke: 0px #f8f8f2\">161069.pre.cm3 greys]$ ls<br/>\ngreys.jar  <a href=\"http://greys.sh\">greys.sh</a><br/>\n</span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">还需要找到</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">java</span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">进程：</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><br/>\n</span><span style=\"font: 12.0px Times; font-kerning: none; -webkit-text-stroke: 0px #000000\"> <img src=\"/images/2015-05-04/407BEEEA-DA8C-4380-AD24-A332A3EAEB04.png\" height=\"240\" width=\"1242\"/></span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><br/>\n开始启动：</span></div><div><span style=\"font: 12.0px Times; font-kerning: none; -webkit-text-stroke: 0px #000000\"><br/></span></div><div><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-size: 12px; line-height: normal; font-family: Times; -webkit-font-kerning: none; -webkit-text-stroke-width: 0px;\"><img src=\"/images/2015-05-04/1BFC3912-BD3A-451B-A51D-F1A8C2D29A0C.png\" height=\"376\" width=\"1158\"/></span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><br/>\n</span><span style=\"font: 10.5px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><b> 2</b></span><span style=\"font: 10.5px 'Trebuchet MS'; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><b>）下面玩起来</b></span><span style=\"font: 10.5px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><b>~</b><br/>\n</span><span style=\"font: 10.5px 'Trebuchet MS'; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">若想知道一个方法调用堆栈情况，</span><span style=\"font: 10.5px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><b>jstack </b></span><span style=\"font: 10.5px 'Trebuchet MS'; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">命令：</span><span style=\"font: 10.5px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">jstack </span><span style=\"font: 10.5px 'Trebuchet MS'; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">类名（支持正则）</span><span style=\"font: 10.5px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\" /><span style=\"font: 10.5px 'Trebuchet MS'; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">方法名（支持正则）</span><span style=\"font: 10.5px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><br/>\n</span><span style=\"font: 10.5px 'Trebuchet MS'; font-kerning: none; -webkit-text-stroke: 0px #000000\"> <img src=\"/images/2015-05-04/9A49FB27-D8FE-463A-B772-72C6ADFC1461.png\" height=\"690\" width=\"1238\"/></span><span style=\"font: 10.0px Courier; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><br/>\n</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"> </span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">有了这个方法，以后就不用担心</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">debug</span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">无从下手了</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">~~~<br/>\n<br/>\n</span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">若想知道线上某个方法某个时刻的调用记录情况，俗称保存现场，可以使用命令，</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">tt </span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">创建时间片，并对时间片中的记录进行分析</span></div><div><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-size: 12px; line-height: normal; -webkit-font-kerning: none; color: rgb(50, 51, 51); -webkit-text-stroke-width: 0px; -webkit-text-stroke-color: rgb(50, 51, 51);\"><font face=\"Times\"><br/></font>\n</span><span style=\"font: 12.0px Times; font-kerning: none; -webkit-text-stroke: 0px #000000\"> <img src=\"/images/2015-05-04/99331BCC-E2F2-44F8-B0C2-95C09B14015C.png\" height=\"376\" width=\"1232\"/></span></div><div><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-size: 12px; line-height: normal; -webkit-font-kerning: none; background-color: rgb(34, 36, 32); -webkit-text-stroke-width: 0px;\"><font face=\"Times\"><br/></font>\n</span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">创建完该时间片，则可以对该时间片的记录进行分析：</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><br/>\n</span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">比如想看</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">index</span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">为</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">1104</span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">的调用情况，则可以使用</span></div><div><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-size: 12px; line-height: normal; -webkit-font-kerning: none; color: rgb(50, 51, 51); -webkit-text-stroke-width: 0px; -webkit-text-stroke-color: rgb(50, 51, 51);\"><font face=\"Times\"><img src=\"/images/2015-05-04/550ADFD1-FDE1-4FBB-A24D-08027881614C.png\" height=\"492\" width=\"1238\"/><br/></font>\n</span><span style=\"font: 12.0px Times; font-kerning: none; -webkit-text-stroke: 0px #000000\"> </span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"> </span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">若想知道当前方法的在单位时间内的调用情况（</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">total</span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">），响应时间</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">(rt)</span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">，则可以使用</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">monitor</span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">命令</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><br/>\n</span><span style=\"font: 12.0px Times; font-kerning: none; -webkit-text-stroke: 0px #000000\"> <img src=\"/images/2015-05-04/\n26BB7BBC-9ED0-4BFD-A6E3-3A71E0F0E81F.png\" height=\"358\" width=\"1236\"/></span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><br/>\n更多命令可以使用</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">help</span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\">帮忙，或者查看原作者：杜琨的分享</span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><br/>\n<br/>\n</span><span style=\"font: 12.0px Times; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><b>参考文章</b></span><span style=\"font: 12.0px Helvetica; font-kerning: none; color: #323333; -webkit-text-stroke: 0px #323333\"><br/>\n<a href=\"http://www.atatech.org/articles/32324?rnd=92212490\"><span style=\"font-kerning: none; color: #428bca; -webkit-text-stroke: 0px #428bca\"><u>http://www.atatech.org/articles/32324?rnd=92212490</u><br/>\n</span></a><br/>\n<a href=\"https://github.com/oldmanpushcart/greys-anatomy\">https://github.com/oldmanpushcart/greys-anatomy</a><br/>\n</span></div><div><br/></div>"},{"layout":"post","title":"react源码学习——setState原理","date":"2017-02-14T00:43:59.000Z","author":"Lily","_content":"<div>\n    React通过this.setState方法更新state，当this.setState被调用的时候会根据更新策略执行情况（是否在更新中）来判断是否重新调用render方法还是放到更新队列中。看下setState源码，题外话：React创建组件有三种方式:\n    1）函数方式(无状态组件) 2）React.createClass(es5)  3) extends React.Component(es6)，后两种方式中\n    setState会自动注入到组件中，因此在自定义组件中能通过this.setState直接访问。三种创建方式的区别参见<a\n        href=\"http://www.cnblogs.com/wonyun/p/5930333.html\">这篇文章</a>。<br>\n    <div>——以下代码是React v15.4.2版本——</div>\n</div>\n<div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><br/><span\n        style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Sets a subset of the state. Always use this to mutate<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * state. You should treat `this.state` as immutable.<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * There is no guarantee that `this.state` will be immediately updated, so<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * accessing `this.state` after calling this method may return the old value.<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * There is no guarantee that calls to `setState` will run synchronously,<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * as they may eventually be batched together.  You can provide an optional<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * callback that will be executed when the call to setState is actually<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * completed.<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * When a function is provided to setState, it will be called at some point in<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * the future (not synchronously). It will be called with the up to date<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * component arguments (state, props, context). These values can be different<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * from this.* because your function may be called after receiveProps but before<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * shouldComponentUpdate, and this new state, props, and context will not yet be<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * assigned to this.<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span\n        style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n        style=\"color:#629755;font-style:italic;\">{object|function} partialState Next partial state or function to<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> *        produce next partial state to be merged with current state.<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n        style=\"color:#629755;font-style:italic;\">{?function} callback Called after state is updated.<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@final<br/></span><span\n        style=\"color:#629755;font-weight:bold;font-style:italic;\"/><span\n        style=\"color:#629755;font-style:italic;\">* </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@protected<br/></span><span\n        style=\"color:#629755;font-weight:bold;font-style:italic;\"/><span\n        style=\"color:#629755;font-style:italic;\">*/<br/></span><span style=\"color:#ffc66d;\">ReactComponent</span>.<span\n        style=\"color:#9876aa;\">prototype</span>.<span style=\"color:#ffc66d;\">setState </span>= <span\n        style=\"color:#cc7832;font-weight:bold;\">function</span>(partialState<span\n        style=\"color:#cc7832;\">, </span>callback) {<span style=\"color:#cc7832;\"><br/></span><span\n        style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span\n        style=\"color:#9876aa;\">updater</span>.<span style=\"color:#ffc66d;\">enqueueSetState</span>(<span\n        style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>partialState<span\n        style=\"color:#cc7832;\">, </span>callback<span style=\"color:#cc7832;\">, </span><span\n        style=\"color:#6a8759;\">'setState'</span>)<span style=\"color:#cc7832;\">;<br/></span>}<span\n        style=\"color:#cc7832;\">;</span>\n</pre>\n    <pre style=\"background-color: rgb(43, 43, 43);\"><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(169, 183, 198);\"><span\n            style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Sets a subset of the state. This only exists because _pendingState is<br/></span><span\n            style=\"color:#629755;font-style:italic;\"> * internal. This provides a merging strategy that is not available to deep<br/></span><span\n            style=\"color:#629755;font-style:italic;\"> * properties which is confusing. </span><span\n            style=\"color:#a8c023;font-style:italic;\">TODO: Expose pendingState or don't use it<br/></span><span\n            style=\"color:#a8c023;font-style:italic;\"/><span\n            style=\"color:#629755;font-style:italic;\">* during the merge.<br/></span><span\n            style=\"color:#629755;font-style:italic;\"> *<br/></span><span\n            style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n            style=\"color:#629755;font-style:italic;\">{ReactClass} publicInstance The instance that should rerender.<br/></span><span\n            style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n            style=\"color:#629755;font-style:italic;\">{object} partialState Next partial state to be merged with state.<br/></span><span\n            style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n            style=\"color:#629755;font-style:italic;\">{?function} callback Called after state is updated.<br/></span><span\n            style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n            style=\"color:#629755;font-style:italic;\">{?string} Name of the calling function in the public API.<br/></span><span\n            style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@internal<br/></span><span\n            style=\"color:#629755;font-weight:bold;font-style:italic;\"/><span\n            style=\"color:#629755;font-style:italic;\">*/<br/></span><span style=\"color:#ffc66d;\">enqueueSetState</span>: <span\n            style=\"color:#cc7832;font-weight:bold;\">function</span>(publicInstance<span style=\"color:#cc7832;\">, </span>partialState<span\n            style=\"color:#cc7832;\">, </span>callback<span style=\"color:#cc7832;\">, </span>callerName) {<br/>  </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#cc7832\"><b>//获得组件实例</b></font><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\"><br/>  </font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">internalInstance = </font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">getInternalInstanceReadyForUpdate</span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(<br/>    publicInstance</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(106, 135, 89);\">'setState'<br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(106, 135, 89);\">  </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">)</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\"><br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">if </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(!internalInstance) {<br/>    </font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">return</span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">}<br/><br/>  //初始化state更新队列<br/>  </font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">queue =<br/>    internalInstance.</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_pendingStateQueue </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">||<br/>    (internalInstance.</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_pendingStateQueue </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">= [])</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">queue.</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">push</span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(partialState)</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  //如果setState设置了回调函数，添加到组件实例的队列中<br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">if </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\"\n            color=\"#a9b7c6\">(callback) {<br/>    validateCallback(callback</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">, </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">callerName)</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">if </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(internalInstance.</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_pendingCallbacks</span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">) {<br/>      internalInstance.</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_pendingCallbacks</span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">.</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">push</span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(callback)</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">} </font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">else </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">{<br/>      internalInstance.</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_pendingCallbacks </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">= [callback]</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font color=\"#a9b7c6\"><font\n            face=\"Menlo\" size=\"2\">}<br/>  }<br/>  <br/>  </font></font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">enqueueUpdate</span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(internalInstance)</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">}</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,</span></pre>\n</div>\n<div><font style=\"font-size: 14px;\"><span\n        style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: 'PingFang SC'; color: rgb(69, 69, 69);\">最后调用（</span><span\n        style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(69, 69, 69);\">src/renderers/shared/stack/reconciler/ReactUpdates.js</span><span\n        style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: 'PingFang SC'; color: rgb(69, 69, 69);\">）</span><span\n        style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(69, 69, 69);\">ReactUpdates</span><span\n        style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: 'PingFang SC'; color: rgb(69, 69, 69);\">的enqueueUpdate函数执行更新。</span></font>\n</div>\n<div><font style=\"font-size: 14px;\"><span\n        style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; color: rgb(69, 69, 69);\"/></font><span\n        style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; color: rgb(69, 69, 69);\"><font\n        style=\"font-size: 14px;\"><font face=\"PingFang SC\"><pre\n        style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span\n        style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Mark a component as needing a rerender, adding an optional callback to a<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * list of functions which will be executed once the rerender occurs.<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> */<br/></span><span style=\"color:#cc7832;font-weight:bold;\">function </span><span\n        style=\"color:#ffc66d;\">enqueueUpdate</span>(component) {<br/>  <span\n        style=\"color:#ffc66d;\">ensureInjected</span>()<span style=\"color:#cc7832;\">;</span><span style=\"color:#808080;\"><br/></span><span\n        style=\"color:#808080;\"><br/></span><span style=\"color:#808080;\">  </span><span\n        style=\"color:#cc7832;font-weight:bold;\">if </span>(!batchingStrategy.<span\n        style=\"color:#9876aa;\">isBatchingUpdates</span>) {//如果当前没有处于更新中，<br/>    batchingStrategy.<span\n        style=\"color:#ffc66d;\">batchedUpdates</span>(<span style=\"color:#ffc66d;\">enqueueUpdate</span><span\n        style=\"color:#cc7832;\">, </span>component)<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">return</span><span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><br/>  dirtyComponents.<span\n        style=\"color:#ffc66d;\">push</span>(component)<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(component.<span\n        style=\"color:#9876aa;\">_updateBatchNumber </span>== <span style=\"color:#cc7832;font-weight:bold;\">null</span>) {<br/>    component.<span\n        style=\"color:#9876aa;\">_updateBatchNumber </span>= updateBatchNumber + <span style=\"color:#6897bb;\">1</span><span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/>}\n</pre></font></font></span><br/></div>\n<div>\n    batchingStrategy在ReactDefaultBatchingStrategy.js（src/renderers/shared/stack/reconciler/ReactDefaultBatchingStrategy.js），这里要介绍下React的事务，事务是将需要执行的方法封装起来，在通过perform方法执行，以保证在执行目标方法前，事务中的一组initialize方法限制性，目标方法执行后，一组close方法能够得到执行，参见下图（src/renderers/shared/stack/reconciler/Transaction.js中）：\n</div>\n<div><img\n        src=\"/images/2017-02-14/3C5D0315-7718-4DC6-89B9-0C7A281294F2.png\"\n        height=\"670\" width=\"1066\"/><br/></div>\n<div>再回到我们的更新策略对象中</div>\n<div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><br/><span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>RESET_BATCHED_UPDATES = {<br/>  <span style=\"color:#9876aa;\">initialize</span>: emptyFunction<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span><span\n        style=\"color:#ffc66d;\">close</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>() {<br/>    ReactDefaultBatchingStrategy.<span\n        style=\"color:#9876aa;\">isBatchingUpdates </span>= <span style=\"color:#cc7832;font-weight:bold;\">false</span><span\n        style=\"color:#cc7832;\">;//<font\n        style=\"font-family: Menlo; background-color: rgb(43, 43, 43); font-size: 12px; color: rgb(169, 183, 198);\">事务执行结束后重置当前更新状态</font><br/></span><span\n        style=\"color:#cc7832;\">  </span>}<span style=\"color:#cc7832;\">,<br/></span>}<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\"><br/></span><span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>FLUSH_BATCHED_UPDATES = {<br/>  <span style=\"color:#9876aa;\">initialize</span>: emptyFunction<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#9876aa;\">close</span>: ReactUpdates.<span\n        style=\"color:#ffc66d;\">flushBatchedUpdates</span>.<span style=\"color:#ffc66d;\">bind</span>(ReactUpdates)<span\n        style=\"color:#cc7832;\">,//遍历dirtyComponent数组中的组件，逐个更新<br/></span>}<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;font-weight:bold;\">var </span>TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES<span\n        style=\"color:#cc7832;\">, </span>RESET_BATCHED_UPDATES]<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;font-weight:bold;\">function </span><span\n        style=\"color:#ffc66d;\">ReactDefaultBatchingStrategyTransaction</span>() {<br/>  <span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">reinitializeTransaction</span>()<span\n        style=\"color:#cc7832;\">;<br/></span>}<br/><br/>Object.<span style=\"color:#ffc66d;\">assign</span>(<br/>  <span\n        style=\"color:#ffc66d;\">ReactDefaultBatchingStrategyTransaction</span>.<span\n        style=\"color:#9876aa;\">prototype</span><span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">  </span>Transaction<span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">  </span>{<br/>    <span style=\"color:#ffc66d;\">getTransactionWrappers</span>: <span\n        style=\"color:#cc7832;font-weight:bold;\">function</span>() { //给事务添加wapper<br/>      <span\n        style=\"color:#cc7832;font-weight:bold;\">return </span>TRANSACTION_WRAPPERS<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>}<br/>)<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>transaction = <span\n        style=\"color:#cc7832;font-weight:bold;\">new </span><span style=\"color:#ffc66d;\">ReactDefaultBatchingStrategyTransaction</span>()<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>ReactDefaultBatchingStrategy = {<br/>  <span\n        style=\"color:#9876aa;\">isBatchingUpdates</span>: <span style=\"color:#cc7832;font-weight:bold;\">false</span><span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\"><br/></span><span\n        style=\"color:#cc7832;\">  </span><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span\n        style=\"color:#629755;font-style:italic;\">   * Call the provided function in a context within which calls to `setState`<br/></span><span\n        style=\"color:#629755;font-style:italic;\">   * and friends are batched such that components aren't updated unnecessarily.<br/></span><span\n        style=\"color:#629755;font-style:italic;\">   */<br/></span><span\n        style=\"color:#629755;font-style:italic;\">  </span><span style=\"color:#ffc66d;\">batchedUpdates</span>: <span\n        style=\"color:#cc7832;font-weight:bold;\">function</span>(callback<span style=\"color:#cc7832;\">, </span>a<span\n        style=\"color:#cc7832;\">, </span>b<span style=\"color:#cc7832;\">, </span>c<span style=\"color:#cc7832;\">, </span>d<span\n        style=\"color:#cc7832;\">, </span>e) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>alreadyBatchingUpdates = ReactDefaultBatchingStrategy.<span\n        style=\"color:#9876aa;\">isBatchingUpdates</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span\n        style=\"color:#cc7832;\">    </span>ReactDefaultBatchingStrategy.<span style=\"color:#9876aa;\">isBatchingUpdates </span>= <span\n        style=\"color:#cc7832;font-weight:bold;\">true</span><span style=\"color:#cc7832;\">;//设置当前正在处于更新状态<br/></span><span\n        style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// The code is written this way to avoid extra allocations<br/></span><span\n        style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(alreadyBatchingUpdates) { //个人认为这里是确保同一时间只有一个事务在更新组件，比如一个组件几乎无间隔地调用两次setState，欢迎讨论<br/>      <span\n        style=\"color:#cc7832;font-weight:bold;\">return </span>callback(a<span style=\"color:#cc7832;\">, </span>b<span\n        style=\"color:#cc7832;\">, </span>c<span style=\"color:#cc7832;\">, </span>d<span style=\"color:#cc7832;\">, </span>e)<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>} <span\n        style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>      <span\n        style=\"color:#cc7832;font-weight:bold;\">return </span>transaction.<span style=\"color:#ffc66d;\">perform</span>(callback<span\n        style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">, </span>a<span\n        style=\"color:#cc7832;\">, </span>b<span style=\"color:#cc7832;\">, </span>c<span style=\"color:#cc7832;\">, </span>d<span\n        style=\"color:#cc7832;\">, </span>e)<span style=\"color:#cc7832;\">;//注意这里比较有意思，把<font\n        style=\"font-family: Menlo; font-size: 12px; background-color: rgb(43, 43, 43); color: rgb(255, 198, 109);\">enqueueUpdate作为callback调用，但这时<font\n        style=\"font-family: Menlo; font-size: 12px; background-color: rgb(43, 43, 43); color: rgb(152, 118, 170);\">isBatchingUpdates是true，因此<font\n        style=\"font-family: Menlo; background-color: rgb(43, 43, 43); font-size: 12px; color: rgb(255, 198, 109);\">enqueueUpdate做的事就是把这个要更新的component加入到dirtyComponent数组中，然后在事务wrapper中的close方法</font></font></font></span><span\n        style=\"font-size: 9pt;\">ReactUpdates.</span><span style=\"font-size: 9pt; color: rgb(255, 198, 109);\">flushBatchedUpdates遍历dirtyComponent数组进行更新。</span><span\n        style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span>}<br/>  }<span\n        style=\"color:#cc7832;\">,<br/></span>}<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\"><br/></span>module.<span\n        style=\"color:#ffc66d;\">exports </span>= ReactDefaultBatchingStrategy<span style=\"color:#cc7832;\">;<br/></span>\n</pre>\n    由这段代码可以看到，真正执行更新的实在事务的某个wapper的close方法中，即ReactUpdates.flushBatchedUpdates中进行更新的：\n    <pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.8pt;\"><span\n            style=\"color:#cc7832;font-weight:bold;\">var </span><span style=\"color:#ffc66d;\">flushBatchedUpdates </span>= <span\n            style=\"color:#cc7832;font-weight:bold;\">function</span>() {<br/>  <span style=\"color:#808080;\">// ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents<br/></span><span\n            style=\"color:#808080;\">  // array and perform any updates enqueued by mount-ready handlers (i.e.,<br/></span><span\n            style=\"color:#808080;\">  // componentDidUpdate) but we need to check here too in order to catch<br/></span><span\n            style=\"color:#808080;\">  // updates enqueued by setState callbacks.<br/></span><span\n            style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">while </span>(dirtyComponents.<span\n            style=\"color:#9876aa;\">length</span>) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>transaction = <span\n            style=\"color:#ffc66d;\">ReactUpdatesFlushTransaction</span>.<span style=\"color:#ffc66d;\">getPooled</span>()<span\n            style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>transaction.<span\n            style=\"color:#ffc66d;\">perform</span>(<span style=\"color:#ffc66d;\">runBatchedUpdates</span><span\n            style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">null</span><span\n            style=\"color:#cc7832;\">, </span>transaction)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span\n            style=\"color:#ffc66d;\">ReactUpdatesFlushTransaction</span>.<span\n            style=\"color:#ffc66d;\">release</span>(transaction)<span style=\"color:#cc7832;\">;<br/></span><span\n            style=\"color:#cc7832;\">  </span>}<br/>}<span style=\"color:#cc7832;\">;</span>\n</pre>\n</div>\n<div>注意这里由用到一个事务ReactUpdatesFlushTransaction：</div>\n<div><pre style=\"background-color: rgb(43, 43, 43);\"><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\"><br/></font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">var </span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">NESTED_UPDATES = {<br/>  </font><span\n        style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">initialize</span><font face=\"Menlo\"\n                                                                                                        color=\"#a9b7c6\"\n                                                                                                        size=\"3\">: </font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">function</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">() {<br/>    </font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">this</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span\n        style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">dirtyComponentsLength </span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">= dirtyComponents.</font><span\n        style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">length</span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">  </span><font face=\"Menlo\" color=\"#a9b7c6\"\n                                                                                               size=\"3\">}</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">,<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">  </span><span\n        style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">close</span><font face=\"Menlo\"\n                                                                                                   color=\"#a9b7c6\"\n                                                                                                   size=\"3\">: </font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">function</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">() {<br/>    </font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">if </span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">(</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">this</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span\n        style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">dirtyComponentsLength </span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">!== dirtyComponents.</font><span\n        style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">length</span><font face=\"Menlo\"\n                                                                                                    color=\"#a9b7c6\" size=\"3\">) {<br/>      </font><span\n        style=\"color: rgb(128, 128, 128); font-family: Menlo; font-size: 9.8pt;\">// Additional updates were enqueued by componentDidUpdate handlers or<br/></span><span\n        style=\"color: rgb(128, 128, 128); font-family: Menlo; font-size: 9.8pt;\">      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run<br/></span><span\n        style=\"color: rgb(128, 128, 128); font-family: Menlo; font-size: 9.8pt;\">      // these new updates so that if A's componentDidUpdate calls setState on<br/></span><span\n        style=\"color: rgb(128, 128, 128); font-family: Menlo; font-size: 9.8pt;\">      // B, B will update before the callback A's updater provided when calling<br/></span><font\n        face=\"Menlo\" color=\"#808080\" size=\"3\">      // setState.在close之前再检查一遍</font><font face=\"Menlo\" color=\"#808080\">dirtyComponent</font><font\n        face=\"Menlo\" color=\"#808080\" size=\"3\">是否有新的要更新的组件，有则更新，上面注释中将的场景应该是比如在A组件的setState传入了第二个参数回调函数，如果在A的componentDidUpdate中调用了setState改变了它包含的B组件的状态（这里假设只改变B 的状态），为了保证回调函数能访问到更新后的B组件，继续执行dirtyComponent中后插入的组件（B）然后更新B组件<br/></font><span\n        style=\"color: rgb(128, 128, 128); font-family: Menlo; font-size: 9.8pt;\">      </span><font face=\"Menlo\"\n                                                                                                    color=\"#a9b7c6\" size=\"3\">dirtyComponents.</font><span\n        style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">splice</span><font face=\"Menlo\"\n                                                                                                    color=\"#a9b7c6\"\n                                                                                                    size=\"3\">(</font><span\n        style=\"color: rgb(104, 151, 187); font-family: Menlo; font-size: 9.8pt;\">0</span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">, </span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">this</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span\n        style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">dirtyComponentsLength</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">)</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">      </span><span\n        style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">flushBatchedUpdates</span><font face=\"Menlo\"\n                                                                                                                 color=\"#a9b7c6\"\n                                                                                                                 size=\"3\">()</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">    </span><font face=\"Menlo\" color=\"#a9b7c6\"\n                                                                                                 size=\"3\">} </font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">else </span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">{<br/>      dirtyComponents.</font><span\n        style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">length </span><font face=\"Menlo\"\n                                                                                                     color=\"#a9b7c6\" size=\"3\">= </font><span\n        style=\"color: rgb(104, 151, 187); font-family: Menlo; font-size: 9.8pt;\">0</span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">    </span><font face=\"Menlo\" color=\"#a9b7c6\"\n                                                                                                 size=\"3\">}<br/>  }</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">,<br/></span><font face=\"Menlo\"\n                                                                                                   color=\"#a9b7c6\"\n                                                                                                   size=\"3\">}</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\"><br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">var </span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">TRANSACTION_WRAPPERS = [NESTED_UPDATES]</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\"><br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">function </span><span\n        style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">ReactUpdatesFlushTransaction</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">() {<br/>  </font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">this</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span\n        style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">reinitializeTransaction</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">()</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">  </span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">this</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span\n        style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">dirtyComponentsLength </span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">= </font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">null</span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">  </span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">this</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span\n        style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">reconcileTransaction </span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">= ReactUpdates.</font><span\n        style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">ReactReconcileTransaction</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span\n        style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">getPooled</span><font face=\"Menlo\"\n                                                                                                       color=\"#a9b7c6\"\n                                                                                                       size=\"3\">(<br/>    </font><span\n        style=\"color: rgb(128, 128, 128); font-family: Menlo; font-size: 9.8pt;\">/* useCreateElement */ </span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">true<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">  </span><font face=\"Menlo\"\n                                                                                                                  color=\"#a9b7c6\"\n                                                                                                                  size=\"3\">)</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><font face=\"Menlo\"\n                                                                                                   color=\"#a9b7c6\"\n                                                                                                   size=\"3\">}<br/><br/>Object.</font><span\n        style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">assign</span><font face=\"Menlo\"\n                                                                                                    color=\"#a9b7c6\" size=\"3\">(<br/>  </font><span\n        style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">ReactUpdatesFlushTransaction</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span\n        style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">prototype</span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">,<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">  </span><font face=\"Menlo\" color=\"#a9b7c6\"\n                                                                                               size=\"3\">Transaction</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">,<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">  </span><font face=\"Menlo\" color=\"#a9b7c6\"\n                                                                                               size=\"3\">{<br/>    </font><span\n        style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">getTransactionWrappers</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">: </font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">function</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">() { //这里将wapper加到事务中<br/>      </font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">return </span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">TRANSACTION_WRAPPERS</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">    </span><font face=\"Menlo\" color=\"#a9b7c6\"\n                                                                                                 size=\"3\">}</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">,<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">    //略去其他……<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">  </span><font face=\"Menlo\" color=\"#a9b7c6\"\n                                                                                               size=\"3\">}<br/>)</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><font face=\"Menlo\"\n                                                                                                   color=\"#a9b7c6\" size=\"3\"\n/></pre>\n    现在我们的更新事务结构如下图所示：\n</div>\n<div><img\n        src=\"/images/2017-02-14/FE612576-70BB-4B9C-9343-07DFAC12DCB4.png\"\n        height=\"690\" width=\"1766\"/><br/></div>\n<div>重点看下runBatchedUpdate方法是如何更新组件的。</div>\n<div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.8pt;\"><br/><span\n        style=\"color:#cc7832;font-weight:bold;\">function </span><span style=\"color:#ffc66d;\">runBatchedUpdates</span>(transaction) {<br/>  <span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>len = transaction.<span style=\"color:#9876aa;\">dirtyComponentsLength</span><span\n        style=\"color:#cc7832;\">;</span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span\n        style=\"color:#808080;\">// Since reconciling a component higher in the owner hierarchy usually (not<br/></span><span\n        style=\"color:#808080;\">  // always -- see shouldComponentUpdate()) will reconcile children, reconcile<br/></span><span\n        style=\"color:#808080;\">  // them before their children by sorting the array.<br/></span><span\n        style=\"color:#808080;\">  </span>dirtyComponents.<span style=\"color:#ffc66d;\">sort</span>(<span style=\"color:#ffc66d;\">mountOrderComparator</span>)<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span\n        style=\"color:#cc7832;\">  </span><span style=\"color:#808080;\">// Any updates enqueued while reconciling must be performed after this entire<br/></span><span\n        style=\"color:#808080;\">  // batch. Otherwise, if dirtyComponents is [A, B] where A has children B and<br/></span><span\n        style=\"color:#808080;\">  // C, B could update twice in a single batch if C's render enqueues an update<br/></span><span\n        style=\"color:#808080;\">  // to B (since B would have already updated, we should skip it, and the only<br/></span><span\n        style=\"color:#808080;\">  // way we can know to do so is by checking the batch counter).<br/></span><span\n        style=\"color:#808080;\">  </span>updateBatchNumber++<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span\n        style=\"color:#cc7832;font-weight:bold;\">for </span>(<span style=\"color:#cc7832;font-weight:bold;\">var </span>i = <span\n        style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">; </span>i &lt; len<span style=\"color:#cc7832;\">; </span>i++) {<br/>    <span\n        style=\"color:#808080;\">// If a component is unmounted before pending changes apply, it will still<br/></span><span\n        style=\"color:#808080;\">    // be here, but we assume that it has cleared its _pendingCallbacks and<br/></span><span\n        style=\"color:#808080;\">    // that performUpdateIfNecessary is a noop.<br/></span><span\n        style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>component = dirtyComponents[i]<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">   </span><br/>    ReactReconciler.<span\n        style=\"color:#ffc66d;\">performUpdateIfNecessary</span>(<br/>      component<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">      </span>transaction.<span\n        style=\"color:#9876aa;\">reconcileTransaction</span><span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">      </span>updateBatchNumber<br/>    )<span style=\"color:#cc7832;\">;<br/></span><br/>  }<br/>}\n</pre>\n</div>\n<div>遍历dirtyComponent数组，对每个component实例调用performUpdateIfNecessary，</div>\n<div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span\n        style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * is set, update the component.<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span\n        style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n        style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction} transaction<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@internal<br/></span><span\n        style=\"color:#629755;font-weight:bold;font-style:italic;\"/><span\n        style=\"color:#629755;font-style:italic;\">*/<br/></span>performUpdateIfNecessary: <span\n        style=\"color:#cc7832;font-weight:bold;\">function</span>(transaction) {<br/>  <span\n        style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span\n        style=\"color:#9876aa;\">_pendingElement </span>!= <span style=\"color:#cc7832;font-weight:bold;\">null</span>) { //如果渲染的ReactElement发生变化更新渲染的ReactElement<br/>    ReactReconciler.<span\n        style=\"color:#ffc66d;\">receiveComponent</span>(<br/>      <span\n        style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span\n        style=\"color:#9876aa;\">_pendingElement</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">      </span>transaction<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">      </span><span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_context<br/></span><span\n        style=\"color:#9876aa;\">    </span>)<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span>} <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(<span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingStateQueue </span>!== <span\n        style=\"color:#cc7832;font-weight:bold;\">null </span>|| <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span\n        style=\"color:#9876aa;\">_pendingForceUpdate</span>) {//如果只是状态发生变化<br/>    <span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span\n        style=\"color:#9876aa;\">updateComponent</span>( //这里调用diff算法<br/>      transaction<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">      </span><span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span><span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">      </span><span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span><span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">      </span><span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_context</span><span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">      </span><span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_context<br/></span><span\n        style=\"color:#9876aa;\">    </span>)<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>    <span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>callbacks = <span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingCallbacks</span><span\n        style=\"color:#cc7832;\">; <br/></span><span style=\"color:#cc7832;\">    </span><span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingCallbacks </span>= <span\n        style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">    </span><span\n        style=\"color:#cc7832;font-weight:bold;\">if </span>(callbacks) {<br/>      <span\n        style=\"color:#cc7832;font-weight:bold;\">for </span>(<span style=\"color:#cc7832;font-weight:bold;\">var </span>j = <span\n        style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">; </span>j &lt; callbacks.<span style=\"color:#9876aa;\">length</span><span\n        style=\"color:#cc7832;\">; </span>j++) {<br/>        transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span\n        style=\"color:#ffc66d;\">enqueue</span>(<br/>          callbacks[j]<span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">          </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span\n        style=\"color:#ffc66d;\">getPublicInstance</span>()<br/>        )<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">      </span>}<br/>    }<br/>    <span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_updateBatchNumber </span>= <span\n        style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span>}<br/>}<span style=\"color:#cc7832;\">,<br/></span>\n</pre>\n</div>\n<div><br/></div>\n<div>所以整个setState执行流程参见下图：</div>\n<div><br/></div>\n<div><img\n        src=\"/images/2017-02-14/xxx.png\"\n        height=\"656\" width=\"614\"/><br/></div>\n<div>diff算法部分源码在（src/renderers/shared/stack/reconciler/ReactMultiChild.js）</div>\n<div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span\n        style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span\n        style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n        style=\"color:#629755;font-style:italic;\">{?object} nextNestedChildrenElements Nested child element maps.<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n        style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction} transaction<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@final<br/></span><span\n        style=\"color:#629755;font-weight:bold;font-style:italic;\"/><span\n        style=\"color:#629755;font-style:italic;\">* </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@protected<br/></span><span\n        style=\"color:#629755;font-weight:bold;font-style:italic;\"/><span\n        style=\"color:#629755;font-style:italic;\">*/<br/></span><span style=\"color:#ffc66d;\">_updateChildren</span>: <span\n        style=\"color:#cc7832;font-weight:bold;\">function</span>(nextNestedChildrenElements<span\n        style=\"color:#cc7832;\">, </span>transaction<span style=\"color:#cc7832;\">, </span>context) {<br/>  <span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>prevChildren = <span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_renderedChildren</span><span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>removedNodes = {}<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>mountImages = []<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>nextChildren = <span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_reconcilerUpdateChildren</span>(  &lt;————— 1 下面详细介绍（注意mountImages和removedNode都是在这个函数赋值的）<br/>    prevChildren<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>nextNestedChildrenElements<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>mountImages<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>removedNodes<span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">    </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>context<br/>  )<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span\n        style=\"color:#cc7832;font-weight:bold;\">if </span>(!nextChildren &amp;&amp; !prevChildren) {<br/>    <span\n        style=\"color:#cc7832;font-weight:bold;\">return</span><span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span>}<br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>updates = <span\n        style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>name<span\n        style=\"color:#cc7832;\">;//以下是diff算法部分，讲解参见博客链接<br/></span><span style=\"color:#cc7832;\">  </span><span\n        style=\"color:#808080;\">// `nextIndex` will increment for each child in `nextChildren`, but<br/></span><span\n        style=\"color:#808080;\">  // `lastIndex` will be the last index visited in `prevChildren`.<br/></span><span\n        style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextIndex = <span\n        style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>lastIndex = <span style=\"color:#6897bb;\">0</span><span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#808080;\">// `nextMountIndex` will increment for each newly mounted child.<br/></span><span\n        style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextMountIndex = <span\n        style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>lastPlacedNode = <span\n        style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(name <span\n        style=\"color:#cc7832;font-weight:bold;\">in </span>nextChildren) {<br/>    <span\n        style=\"color:#cc7832;font-weight:bold;\">if </span>(!nextChildren.<span style=\"color:#ffc66d;\">hasOwnProperty</span>(name)) {<br/>      <span\n        style=\"color:#cc7832;font-weight:bold;\">continue</span><span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">    </span>}<br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>prevChild = prevChildren &amp;&amp; prevChildren[name]<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>nextChild = nextChildren[name]<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span\n        style=\"color:#cc7832;font-weight:bold;\">if </span>(prevChild === nextChild) {<br/>      updates = <span\n        style=\"color:#ffc66d;\">enqueue</span>(<br/>        updates<span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span\n        style=\"color:#ffc66d;\">moveChild</span>(prevChild<span style=\"color:#cc7832;\">, </span>lastPlacedNode<span\n        style=\"color:#cc7832;\">, </span>nextIndex<span style=\"color:#cc7832;\">, </span>lastIndex)<br/>      )<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>lastIndex = <span\n        style=\"color:#9876aa;\">Math</span>.<span style=\"color:#ffc66d;\">max</span>(prevChild.<span style=\"color:#9876aa;\">_mountIndex</span><span\n        style=\"color:#cc7832;\">, </span>lastIndex)<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">      </span>prevChild.<span style=\"color:#9876aa;\">_mountIndex </span>= nextIndex<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>} <span\n        style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>      <span\n        style=\"color:#cc7832;font-weight:bold;\">if </span>(prevChild) {<br/>        <span style=\"color:#808080;\">// Update `lastIndex` before `_mountIndex` gets unset by unmounting.<br/></span><span\n        style=\"color:#808080;\">        </span>lastIndex = <span style=\"color:#9876aa;\">Math</span>.<span\n        style=\"color:#ffc66d;\">max</span>(prevChild.<span style=\"color:#9876aa;\">_mountIndex</span><span\n        style=\"color:#cc7832;\">, </span>lastIndex)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span\n        style=\"color:#808080;\">// The `removedNodes` loop below will actually remove the child.<br/></span><span\n        style=\"color:#808080;\">      </span>}<br/>      <span style=\"color:#808080;\">// The child must be instantiated before it's mounted.<br/></span><span\n        style=\"color:#808080;\">      </span>updates = <span style=\"color:#ffc66d;\">enqueue</span>(<br/>        updates<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span><span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_mountChildAtIndex</span>(<br/>          nextChild<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">          </span>mountImages[nextMountIndex]<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">          </span>lastPlacedNode<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">          </span>nextIndex<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">          </span>transaction<span\n        style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">          </span>context<br/>        )<br/>      )<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>nextMountIndex++<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/>    nextIndex++<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>lastPlacedNode = ReactReconciler.<span\n        style=\"color:#ffc66d;\">getHostNode</span>(nextChild)<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span>}<br/>  <span\n        style=\"color:#808080;\">// Remove children that are no longer present.<br/></span><span\n        style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(name <span\n        style=\"color:#cc7832;font-weight:bold;\">in </span>removedNodes) {<br/>    <span\n        style=\"color:#cc7832;font-weight:bold;\">if </span>(removedNodes.<span style=\"color:#ffc66d;\">hasOwnProperty</span>(name)) {<br/>      updates = <span\n        style=\"color:#ffc66d;\">enqueue</span>(<br/>        updates<span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span\n        style=\"color:#ffc66d;\">_unmountChild</span>(prevChildren[name]<span style=\"color:#cc7832;\">, </span>removedNodes[name])<br/>      )<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/>  }<br/>  <span\n        style=\"color:#cc7832;font-weight:bold;\">if </span>(updates) {<br/>    <span style=\"color:#ffc66d;\">processQueue</span>(<span\n        style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>updates)<span\n        style=\"color:#cc7832;\">;//注意这里将上面比较后缓存的变更进行处理更新dom树，使所有变更在浏览器中得以展现，代码参见（src/<font\n        style=\"font-size: 12px; color: rgb(204, 120, 50); font-family: Menlo;\">renderers/dom/stack/client/DOMChildrenOperations.js</font>）的processUpdate<br/></span><span\n        style=\"color:#cc7832;\">  </span>}<br/>  <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span\n        style=\"color:#9876aa;\">_renderedChildren </span>= nextChildren<span style=\"color:#cc7832;\">;<br/></span><br/>}<span\n        style=\"color:#cc7832;\">,</span>\n</pre>\n    React在执行diff算法之前先做了两件事情：\n</div>\n<div>\n    <ol start=\"1\">\n        <li>将新的ReactElement结构树（可能包含很多层）’拍平’，以{ key：xx，value：element}方式返回</li>\n        <li>遍历上一步生成的key——ReactElement映射和原有的key——ReactComponent实例映射做比较，新建或删除ReactComponent。</li>\n    </ol>\n</div>\n<div>经过上面两个步骤生成了新的key——ReactComponent实例，和原有的key——ReactComponent映射进行diff算法。</div>\n<div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span\n        style=\"color:#ffc66d;\">_reconcilerUpdateChildren</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br/>  prevChildren<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>nextNestedChildrenElements<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>mountImages<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>removedNodes<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>transaction<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>context<br/>) {<br/>  <span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>nextChildren<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>selfDebugID = <span\n        style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">;<br/></span> //第一步：调用（src/<font\n        style=\"font-size: 12px; color: rgb(169, 183, 198); font-family: Menlo;\">shared/utils/traverseAllChildren.js</font>）对子节点进行深度优先遍历，同时根据子节点所在的层级按照一定命名规则生成唯一key存在object中，这样虽然所有树状结构的子节点被’拍平’存储，但是能保证在diff操作的时候同一层级的子节点进行比较（即连个map中key相同的子节点一定在同一层）<br/>  nextChildren = flattenChildren(nextNestedChildrenElements<span\n        style=\"color:#cc7832;\">, </span>selfDebugID)<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span>ReactChildReconciler.<span style=\"color:#ffc66d;\">updateChildren</span>( //第二步：参见下面详细介绍<br/>    prevChildren<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>nextChildren<span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">    </span>mountImages<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>removedNodes<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>transaction<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span><span\n        style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span\n        style=\"color:#9876aa;\">_hostContainerInfo</span><span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">    </span>context<span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">    </span>selfDebugID<br/>  )<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">return </span>nextChildren<span\n        style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">,</span>\n</pre>\n    <div>\n\t\t<pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span\n                style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Updates the rendered children and returns a new set of children.<br/></span><span\n                style=\"color:#629755;font-style:italic;\"> *<br/></span><span\n                style=\"color:#629755;font-style:italic;\"> * </span><span\n                style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n                style=\"color:#629755;font-style:italic;\">{?object} prevChildren Previously initialized set of children.<br/></span><span\n                style=\"color:#629755;font-style:italic;\"> * </span><span\n                style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n                style=\"color:#629755;font-style:italic;\">{?object} nextChildren Flat child element maps.<br/></span><span\n                style=\"color:#629755;font-style:italic;\"> * </span><span\n                style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n                style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction} transaction<br/></span><span\n                style=\"color:#629755;font-style:italic;\"> * </span><span\n                style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n                style=\"color:#629755;font-style:italic;\">{object} context<br/></span><span\n                style=\"color:#629755;font-style:italic;\"> * </span><span\n                style=\"color:#629755;font-weight:bold;font-style:italic;\">@return </span><span\n                style=\"color:#629755;font-style:italic;\">{?object} A new set of child instances.<br/></span><span\n                style=\"color:#629755;font-style:italic;\"> * </span><span\n                style=\"color:#629755;font-weight:bold;font-style:italic;\">@internal<br/></span><span\n                style=\"color:#629755;font-weight:bold;font-style:italic;\"/><span style=\"color:#629755;font-style:italic;\">*/<br/></span><span\n                style=\"color:#ffc66d;\">updateChildren</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br/>  prevChildren<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>nextChildren<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>mountImages<span style=\"color:#cc7832;\">,<br/></span><span\n                style=\"color:#cc7832;\">  </span>removedNodes<span style=\"color:#cc7832;\">,<br/></span><span\n                style=\"color:#cc7832;\">  </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>hostParent<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>hostContainerInfo<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>context<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>selfDebugID <span\n                style=\"color:#808080;\">// 0 in production and for roots<br/></span>) {<br/>  <span style=\"color:#808080;\">// We currently don't have a way to track moves here but if we use iterators<br/></span><span\n                style=\"color:#808080;\">  // instead of for..in we can zip the iterators and check if an item has<br/></span><span\n                style=\"color:#808080;\">  // moved.<br/></span><span style=\"color:#808080;\">  // </span><span\n                style=\"color:#a8c023;font-style:italic;\">TODO: If nothing has changed, return the prevChildren object so that we<br/></span><span\n                style=\"color:#a8c023;font-style:italic;\">  </span><span style=\"color:#808080;\">// can quickly bailout if nothing has changed.<br/></span><span\n                style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(!nextChildren &amp;&amp; !prevChildren) {<br/>    <span\n                style=\"color:#cc7832;font-weight:bold;\">return</span><span style=\"color:#cc7832;\">;<br/></span><span\n                style=\"color:#cc7832;\">  </span>}<br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>name<span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span\n                style=\"color:#cc7832;font-weight:bold;\">var </span>prevChild<span style=\"color:#cc7832;\">;<br/></span><span\n                style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(name <span\n                style=\"color:#cc7832;font-weight:bold;\">in </span>nextChildren) {<br/>    <span\n                style=\"color:#cc7832;font-weight:bold;\">if </span>(!nextChildren.<span\n                style=\"color:#ffc66d;\">hasOwnProperty</span>(name)) {<br/>      <span style=\"color:#cc7832;font-weight:bold;\">continue</span><span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/>    prevChild = prevChildren &amp;&amp; prevChildren[name]<span\n                style=\"color:#cc7832;\">; //如果旧映射里找到对应的ReactComponent实例<br/></span><span style=\"color:#cc7832;\">    </span><span\n                style=\"color:#cc7832;font-weight:bold;\">var </span>prevElement = prevChild &amp;&amp; prevChild.<span\n                style=\"color:#9876aa;\">_currentElement</span><span style=\"color:#cc7832;\">;<br/></span><span\n                style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextElement = nextChildren[name]<span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span\n                style=\"color:#cc7832;font-weight:bold;\">if </span>(prevChild != <span\n                style=\"color:#cc7832;font-weight:bold;\">null </span>&amp;&amp;<br/>        shouldUpdateReactComponent(prevElement<span\n                style=\"color:#cc7832;\">, </span>nextElement)) {//取出实例中的ReactElement与新的做比较，如果类型相同调用实例更新函数<br/>      ReactReconciler.<span\n                style=\"color:#ffc66d;\">receiveComponent</span>(<br/>        prevChild<span style=\"color:#cc7832;\">, </span>nextElement<span\n                style=\"color:#cc7832;\">, </span>transaction<span style=\"color:#cc7832;\">, </span>context<br/>      )<span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>nextChildren[name] = prevChild<span\n                style=\"color:#cc7832;\">; <br/></span><span style=\"color:#cc7832;\">    </span>} <span\n                style=\"color:#cc7832;font-weight:bold;\">else </span>{ //否则清理旧的ReactComponent实例，加入到removeNodes映射中，初始化新实例加入映射中，调用新实例的mountComponent获得对应的渲染markup加入到<font\n                style=\"font-family: Menlo; background-color: rgb(43, 43, 43); font-size: 12px; color: rgb(169, 183, 198);\">mountImages 。<font\n                style=\"font-family: Menlo; background-color: rgb(43, 43, 43); font-size: 12px; color: rgb(169, 183, 198);\">removeNodes映射和mountImage映射在diff算法执行过程中加入到更新队列然后批量更新dom。</font></font><br/>      <span\n                style=\"color:#cc7832;font-weight:bold;\">if </span>(<br/>        !ReactFeatureFlags.<span style=\"color:#9876aa;\">prepareNewChildrenBeforeUnmountInStack </span>&amp;&amp;<br/>        prevChild<br/>      ) {<br/>        removedNodes[name] = ReactReconciler.<span\n                style=\"color:#ffc66d;\">getHostNode</span>(prevChild)<span style=\"color:#cc7832;\">;<br/></span><span\n                style=\"color:#cc7832;\">        </span>ReactReconciler.<span style=\"color:#ffc66d;\">unmountComponent</span>(<br/>          prevChild<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">          </span><span\n                style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">, </span><span\n                style=\"color:#808080;\">/* safely */<br/></span><span style=\"color:#808080;\">          </span><span\n                style=\"color:#cc7832;font-weight:bold;\">false </span><span\n                style=\"color:#808080;\">/* skipLifecycle */<br/></span><span style=\"color:#808080;\">        </span>)<span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>}<br/>      <span\n                style=\"color:#808080;\">// The child must be instantiated before it's mounted.<br/></span><span\n                style=\"color:#808080;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextChildInstance = instantiateReactComponent(nextElement<span\n                style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">true</span>)<span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>nextChildren[name] = nextChildInstance<span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span><span style=\"color:#808080;\">// Creating mount image now ensures refs are resolved in right order<br/></span><span\n                style=\"color:#808080;\">      // (see <a href=\"https://github.com/facebook/react/pull/7101\">https://github.com/facebook/react/pull/7101</a> for explanation).<br/></span><span\n                style=\"color:#808080;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextChildMountImage = ReactReconciler.<span\n                style=\"color:#ffc66d;\">mountComponent</span>(<br/>        nextChildInstance<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>transaction<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>hostParent<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>hostContainerInfo<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>context<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>selfDebugID<br/>      )<span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>mountImages.<span\n                style=\"color:#ffc66d;\">push</span>(nextChildMountImage)<span style=\"color:#cc7832;\">;<br/></span><span\n                style=\"color:#cc7832;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(<br/>        ReactFeatureFlags.<span\n                style=\"color:#9876aa;\">prepareNewChildrenBeforeUnmountInStack </span>&amp;&amp;<br/>        prevChild<br/>      ) {<br/>        removedNodes[name] = ReactReconciler.<span\n                style=\"color:#ffc66d;\">getHostNode</span>(prevChild)<span style=\"color:#cc7832;\">;<br/></span><span\n                style=\"color:#cc7832;\">        </span>ReactReconciler.<span style=\"color:#ffc66d;\">unmountComponent</span>(<br/>          prevChild<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">          </span><span\n                style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">, </span><span\n                style=\"color:#808080;\">/* safely */<br/></span><span style=\"color:#808080;\">          </span><span\n                style=\"color:#cc7832;font-weight:bold;\">false </span><span\n                style=\"color:#808080;\">/* skipLifecycle */<br/></span><span style=\"color:#808080;\">        </span>)<span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>}<br/>    }<br/>  }<br/>  <span\n                style=\"color:#808080;\">// Unmount children that are no longer present.<br/></span><span\n                style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(name <span\n                style=\"color:#cc7832;font-weight:bold;\">in </span>prevChildren) {<br/>    <span\n                style=\"color:#cc7832;font-weight:bold;\">if </span>(prevChildren.<span style=\"color:#ffc66d;\">hasOwnProperty</span>(name) &amp;&amp;<br/>        !(nextChildren &amp;&amp; nextChildren.<span\n                style=\"color:#ffc66d;\">hasOwnProperty</span>(name))) {<br/>      prevChild = prevChildren[name]<span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>removedNodes[name] = ReactReconciler.<span\n                style=\"color:#ffc66d;\">getHostNode</span>(prevChild)<span style=\"color:#cc7832;\">;<br/></span><span\n                style=\"color:#cc7832;\">      </span>ReactReconciler.<span style=\"color:#ffc66d;\">unmountComponent</span>(<br/>        prevChild<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span><span\n                style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">, </span><span\n                style=\"color:#808080;\">/* safely */<br/></span><span style=\"color:#808080;\">        </span><span\n                style=\"color:#cc7832;font-weight:bold;\">false </span><span\n                style=\"color:#808080;\">/* skipLifecycle */<br/></span><span style=\"color:#808080;\">      </span>)<span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/>  }<br/>}<span\n                style=\"color:#cc7832;\">,</span></pre>\n    </div>\n    <div><br/></div>\n    <div>diff算法原理详解参见：<br/></div>\n</div>\n<div><a href=\"https://zhuanlan.zhihu.com/p/20346379?refer=purerender\">https://zhuanlan.zhihu.com/p/20346379?refer=purerender</a> 或《深入React技术栈》3.5章（可以找我借）讲得很详细。<br/>\n</div>\n<div><br/></div>\n","source":"_posts/react源码学习——setState原理.html","raw":"---\nlayout: post\ntitle:  react源码学习——setState原理\ndate:   2017-02-14 08:43:59\nauthor: Lily\ncategories: frontend\ntags:\n- react\n- 源码解读\n---\n<div>\n    React通过this.setState方法更新state，当this.setState被调用的时候会根据更新策略执行情况（是否在更新中）来判断是否重新调用render方法还是放到更新队列中。看下setState源码，题外话：React创建组件有三种方式:\n    1）函数方式(无状态组件) 2）React.createClass(es5)  3) extends React.Component(es6)，后两种方式中\n    setState会自动注入到组件中，因此在自定义组件中能通过this.setState直接访问。三种创建方式的区别参见<a\n        href=\"http://www.cnblogs.com/wonyun/p/5930333.html\">这篇文章</a>。<br>\n    <div>——以下代码是React v15.4.2版本——</div>\n</div>\n<div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><br/><span\n        style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Sets a subset of the state. Always use this to mutate<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * state. You should treat `this.state` as immutable.<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * There is no guarantee that `this.state` will be immediately updated, so<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * accessing `this.state` after calling this method may return the old value.<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * There is no guarantee that calls to `setState` will run synchronously,<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * as they may eventually be batched together.  You can provide an optional<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * callback that will be executed when the call to setState is actually<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * completed.<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * When a function is provided to setState, it will be called at some point in<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * the future (not synchronously). It will be called with the up to date<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * component arguments (state, props, context). These values can be different<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * from this.* because your function may be called after receiveProps but before<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * shouldComponentUpdate, and this new state, props, and context will not yet be<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * assigned to this.<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span\n        style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n        style=\"color:#629755;font-style:italic;\">{object|function} partialState Next partial state or function to<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> *        produce next partial state to be merged with current state.<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n        style=\"color:#629755;font-style:italic;\">{?function} callback Called after state is updated.<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@final<br/></span><span\n        style=\"color:#629755;font-weight:bold;font-style:italic;\"/><span\n        style=\"color:#629755;font-style:italic;\">* </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@protected<br/></span><span\n        style=\"color:#629755;font-weight:bold;font-style:italic;\"/><span\n        style=\"color:#629755;font-style:italic;\">*/<br/></span><span style=\"color:#ffc66d;\">ReactComponent</span>.<span\n        style=\"color:#9876aa;\">prototype</span>.<span style=\"color:#ffc66d;\">setState </span>= <span\n        style=\"color:#cc7832;font-weight:bold;\">function</span>(partialState<span\n        style=\"color:#cc7832;\">, </span>callback) {<span style=\"color:#cc7832;\"><br/></span><span\n        style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span\n        style=\"color:#9876aa;\">updater</span>.<span style=\"color:#ffc66d;\">enqueueSetState</span>(<span\n        style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>partialState<span\n        style=\"color:#cc7832;\">, </span>callback<span style=\"color:#cc7832;\">, </span><span\n        style=\"color:#6a8759;\">'setState'</span>)<span style=\"color:#cc7832;\">;<br/></span>}<span\n        style=\"color:#cc7832;\">;</span>\n</pre>\n    <pre style=\"background-color: rgb(43, 43, 43);\"><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(169, 183, 198);\"><span\n            style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Sets a subset of the state. This only exists because _pendingState is<br/></span><span\n            style=\"color:#629755;font-style:italic;\"> * internal. This provides a merging strategy that is not available to deep<br/></span><span\n            style=\"color:#629755;font-style:italic;\"> * properties which is confusing. </span><span\n            style=\"color:#a8c023;font-style:italic;\">TODO: Expose pendingState or don't use it<br/></span><span\n            style=\"color:#a8c023;font-style:italic;\"/><span\n            style=\"color:#629755;font-style:italic;\">* during the merge.<br/></span><span\n            style=\"color:#629755;font-style:italic;\"> *<br/></span><span\n            style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n            style=\"color:#629755;font-style:italic;\">{ReactClass} publicInstance The instance that should rerender.<br/></span><span\n            style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n            style=\"color:#629755;font-style:italic;\">{object} partialState Next partial state to be merged with state.<br/></span><span\n            style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n            style=\"color:#629755;font-style:italic;\">{?function} callback Called after state is updated.<br/></span><span\n            style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n            style=\"color:#629755;font-style:italic;\">{?string} Name of the calling function in the public API.<br/></span><span\n            style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@internal<br/></span><span\n            style=\"color:#629755;font-weight:bold;font-style:italic;\"/><span\n            style=\"color:#629755;font-style:italic;\">*/<br/></span><span style=\"color:#ffc66d;\">enqueueSetState</span>: <span\n            style=\"color:#cc7832;font-weight:bold;\">function</span>(publicInstance<span style=\"color:#cc7832;\">, </span>partialState<span\n            style=\"color:#cc7832;\">, </span>callback<span style=\"color:#cc7832;\">, </span>callerName) {<br/>  </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#cc7832\"><b>//获得组件实例</b></font><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\"><br/>  </font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">internalInstance = </font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">getInternalInstanceReadyForUpdate</span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(<br/>    publicInstance</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(106, 135, 89);\">'setState'<br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(106, 135, 89);\">  </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">)</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\"><br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">if </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(!internalInstance) {<br/>    </font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">return</span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">}<br/><br/>  //初始化state更新队列<br/>  </font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">queue =<br/>    internalInstance.</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_pendingStateQueue </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">||<br/>    (internalInstance.</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_pendingStateQueue </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">= [])</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">queue.</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">push</span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(partialState)</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  //如果setState设置了回调函数，添加到组件实例的队列中<br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">if </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\"\n            color=\"#a9b7c6\">(callback) {<br/>    validateCallback(callback</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">, </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">callerName)</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">if </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(internalInstance.</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_pendingCallbacks</span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">) {<br/>      internalInstance.</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_pendingCallbacks</span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">.</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">push</span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(callback)</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">} </font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">else </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">{<br/>      internalInstance.</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_pendingCallbacks </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">= [callback]</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font color=\"#a9b7c6\"><font\n            face=\"Menlo\" size=\"2\">}<br/>  }<br/>  <br/>  </font></font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">enqueueUpdate</span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(internalInstance)</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">}</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,</span></pre>\n</div>\n<div><font style=\"font-size: 14px;\"><span\n        style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: 'PingFang SC'; color: rgb(69, 69, 69);\">最后调用（</span><span\n        style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(69, 69, 69);\">src/renderers/shared/stack/reconciler/ReactUpdates.js</span><span\n        style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: 'PingFang SC'; color: rgb(69, 69, 69);\">）</span><span\n        style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(69, 69, 69);\">ReactUpdates</span><span\n        style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: 'PingFang SC'; color: rgb(69, 69, 69);\">的enqueueUpdate函数执行更新。</span></font>\n</div>\n<div><font style=\"font-size: 14px;\"><span\n        style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; color: rgb(69, 69, 69);\"/></font><span\n        style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; color: rgb(69, 69, 69);\"><font\n        style=\"font-size: 14px;\"><font face=\"PingFang SC\"><pre\n        style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span\n        style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Mark a component as needing a rerender, adding an optional callback to a<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * list of functions which will be executed once the rerender occurs.<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> */<br/></span><span style=\"color:#cc7832;font-weight:bold;\">function </span><span\n        style=\"color:#ffc66d;\">enqueueUpdate</span>(component) {<br/>  <span\n        style=\"color:#ffc66d;\">ensureInjected</span>()<span style=\"color:#cc7832;\">;</span><span style=\"color:#808080;\"><br/></span><span\n        style=\"color:#808080;\"><br/></span><span style=\"color:#808080;\">  </span><span\n        style=\"color:#cc7832;font-weight:bold;\">if </span>(!batchingStrategy.<span\n        style=\"color:#9876aa;\">isBatchingUpdates</span>) {//如果当前没有处于更新中，<br/>    batchingStrategy.<span\n        style=\"color:#ffc66d;\">batchedUpdates</span>(<span style=\"color:#ffc66d;\">enqueueUpdate</span><span\n        style=\"color:#cc7832;\">, </span>component)<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">return</span><span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><br/>  dirtyComponents.<span\n        style=\"color:#ffc66d;\">push</span>(component)<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(component.<span\n        style=\"color:#9876aa;\">_updateBatchNumber </span>== <span style=\"color:#cc7832;font-weight:bold;\">null</span>) {<br/>    component.<span\n        style=\"color:#9876aa;\">_updateBatchNumber </span>= updateBatchNumber + <span style=\"color:#6897bb;\">1</span><span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/>}\n</pre></font></font></span><br/></div>\n<div>\n    batchingStrategy在ReactDefaultBatchingStrategy.js（src/renderers/shared/stack/reconciler/ReactDefaultBatchingStrategy.js），这里要介绍下React的事务，事务是将需要执行的方法封装起来，在通过perform方法执行，以保证在执行目标方法前，事务中的一组initialize方法限制性，目标方法执行后，一组close方法能够得到执行，参见下图（src/renderers/shared/stack/reconciler/Transaction.js中）：\n</div>\n<div><img\n        src=\"/images/2017-02-14/3C5D0315-7718-4DC6-89B9-0C7A281294F2.png\"\n        height=\"670\" width=\"1066\"/><br/></div>\n<div>再回到我们的更新策略对象中</div>\n<div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><br/><span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>RESET_BATCHED_UPDATES = {<br/>  <span style=\"color:#9876aa;\">initialize</span>: emptyFunction<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span><span\n        style=\"color:#ffc66d;\">close</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>() {<br/>    ReactDefaultBatchingStrategy.<span\n        style=\"color:#9876aa;\">isBatchingUpdates </span>= <span style=\"color:#cc7832;font-weight:bold;\">false</span><span\n        style=\"color:#cc7832;\">;//<font\n        style=\"font-family: Menlo; background-color: rgb(43, 43, 43); font-size: 12px; color: rgb(169, 183, 198);\">事务执行结束后重置当前更新状态</font><br/></span><span\n        style=\"color:#cc7832;\">  </span>}<span style=\"color:#cc7832;\">,<br/></span>}<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\"><br/></span><span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>FLUSH_BATCHED_UPDATES = {<br/>  <span style=\"color:#9876aa;\">initialize</span>: emptyFunction<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#9876aa;\">close</span>: ReactUpdates.<span\n        style=\"color:#ffc66d;\">flushBatchedUpdates</span>.<span style=\"color:#ffc66d;\">bind</span>(ReactUpdates)<span\n        style=\"color:#cc7832;\">,//遍历dirtyComponent数组中的组件，逐个更新<br/></span>}<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;font-weight:bold;\">var </span>TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES<span\n        style=\"color:#cc7832;\">, </span>RESET_BATCHED_UPDATES]<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;font-weight:bold;\">function </span><span\n        style=\"color:#ffc66d;\">ReactDefaultBatchingStrategyTransaction</span>() {<br/>  <span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">reinitializeTransaction</span>()<span\n        style=\"color:#cc7832;\">;<br/></span>}<br/><br/>Object.<span style=\"color:#ffc66d;\">assign</span>(<br/>  <span\n        style=\"color:#ffc66d;\">ReactDefaultBatchingStrategyTransaction</span>.<span\n        style=\"color:#9876aa;\">prototype</span><span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">  </span>Transaction<span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">  </span>{<br/>    <span style=\"color:#ffc66d;\">getTransactionWrappers</span>: <span\n        style=\"color:#cc7832;font-weight:bold;\">function</span>() { //给事务添加wapper<br/>      <span\n        style=\"color:#cc7832;font-weight:bold;\">return </span>TRANSACTION_WRAPPERS<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>}<br/>)<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>transaction = <span\n        style=\"color:#cc7832;font-weight:bold;\">new </span><span style=\"color:#ffc66d;\">ReactDefaultBatchingStrategyTransaction</span>()<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>ReactDefaultBatchingStrategy = {<br/>  <span\n        style=\"color:#9876aa;\">isBatchingUpdates</span>: <span style=\"color:#cc7832;font-weight:bold;\">false</span><span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\"><br/></span><span\n        style=\"color:#cc7832;\">  </span><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span\n        style=\"color:#629755;font-style:italic;\">   * Call the provided function in a context within which calls to `setState`<br/></span><span\n        style=\"color:#629755;font-style:italic;\">   * and friends are batched such that components aren't updated unnecessarily.<br/></span><span\n        style=\"color:#629755;font-style:italic;\">   */<br/></span><span\n        style=\"color:#629755;font-style:italic;\">  </span><span style=\"color:#ffc66d;\">batchedUpdates</span>: <span\n        style=\"color:#cc7832;font-weight:bold;\">function</span>(callback<span style=\"color:#cc7832;\">, </span>a<span\n        style=\"color:#cc7832;\">, </span>b<span style=\"color:#cc7832;\">, </span>c<span style=\"color:#cc7832;\">, </span>d<span\n        style=\"color:#cc7832;\">, </span>e) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>alreadyBatchingUpdates = ReactDefaultBatchingStrategy.<span\n        style=\"color:#9876aa;\">isBatchingUpdates</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span\n        style=\"color:#cc7832;\">    </span>ReactDefaultBatchingStrategy.<span style=\"color:#9876aa;\">isBatchingUpdates </span>= <span\n        style=\"color:#cc7832;font-weight:bold;\">true</span><span style=\"color:#cc7832;\">;//设置当前正在处于更新状态<br/></span><span\n        style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// The code is written this way to avoid extra allocations<br/></span><span\n        style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(alreadyBatchingUpdates) { //个人认为这里是确保同一时间只有一个事务在更新组件，比如一个组件几乎无间隔地调用两次setState，欢迎讨论<br/>      <span\n        style=\"color:#cc7832;font-weight:bold;\">return </span>callback(a<span style=\"color:#cc7832;\">, </span>b<span\n        style=\"color:#cc7832;\">, </span>c<span style=\"color:#cc7832;\">, </span>d<span style=\"color:#cc7832;\">, </span>e)<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>} <span\n        style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>      <span\n        style=\"color:#cc7832;font-weight:bold;\">return </span>transaction.<span style=\"color:#ffc66d;\">perform</span>(callback<span\n        style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">, </span>a<span\n        style=\"color:#cc7832;\">, </span>b<span style=\"color:#cc7832;\">, </span>c<span style=\"color:#cc7832;\">, </span>d<span\n        style=\"color:#cc7832;\">, </span>e)<span style=\"color:#cc7832;\">;//注意这里比较有意思，把<font\n        style=\"font-family: Menlo; font-size: 12px; background-color: rgb(43, 43, 43); color: rgb(255, 198, 109);\">enqueueUpdate作为callback调用，但这时<font\n        style=\"font-family: Menlo; font-size: 12px; background-color: rgb(43, 43, 43); color: rgb(152, 118, 170);\">isBatchingUpdates是true，因此<font\n        style=\"font-family: Menlo; background-color: rgb(43, 43, 43); font-size: 12px; color: rgb(255, 198, 109);\">enqueueUpdate做的事就是把这个要更新的component加入到dirtyComponent数组中，然后在事务wrapper中的close方法</font></font></font></span><span\n        style=\"font-size: 9pt;\">ReactUpdates.</span><span style=\"font-size: 9pt; color: rgb(255, 198, 109);\">flushBatchedUpdates遍历dirtyComponent数组进行更新。</span><span\n        style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span>}<br/>  }<span\n        style=\"color:#cc7832;\">,<br/></span>}<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\"><br/></span>module.<span\n        style=\"color:#ffc66d;\">exports </span>= ReactDefaultBatchingStrategy<span style=\"color:#cc7832;\">;<br/></span>\n</pre>\n    由这段代码可以看到，真正执行更新的实在事务的某个wapper的close方法中，即ReactUpdates.flushBatchedUpdates中进行更新的：\n    <pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.8pt;\"><span\n            style=\"color:#cc7832;font-weight:bold;\">var </span><span style=\"color:#ffc66d;\">flushBatchedUpdates </span>= <span\n            style=\"color:#cc7832;font-weight:bold;\">function</span>() {<br/>  <span style=\"color:#808080;\">// ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents<br/></span><span\n            style=\"color:#808080;\">  // array and perform any updates enqueued by mount-ready handlers (i.e.,<br/></span><span\n            style=\"color:#808080;\">  // componentDidUpdate) but we need to check here too in order to catch<br/></span><span\n            style=\"color:#808080;\">  // updates enqueued by setState callbacks.<br/></span><span\n            style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">while </span>(dirtyComponents.<span\n            style=\"color:#9876aa;\">length</span>) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>transaction = <span\n            style=\"color:#ffc66d;\">ReactUpdatesFlushTransaction</span>.<span style=\"color:#ffc66d;\">getPooled</span>()<span\n            style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>transaction.<span\n            style=\"color:#ffc66d;\">perform</span>(<span style=\"color:#ffc66d;\">runBatchedUpdates</span><span\n            style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">null</span><span\n            style=\"color:#cc7832;\">, </span>transaction)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span\n            style=\"color:#ffc66d;\">ReactUpdatesFlushTransaction</span>.<span\n            style=\"color:#ffc66d;\">release</span>(transaction)<span style=\"color:#cc7832;\">;<br/></span><span\n            style=\"color:#cc7832;\">  </span>}<br/>}<span style=\"color:#cc7832;\">;</span>\n</pre>\n</div>\n<div>注意这里由用到一个事务ReactUpdatesFlushTransaction：</div>\n<div><pre style=\"background-color: rgb(43, 43, 43);\"><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\"><br/></font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">var </span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">NESTED_UPDATES = {<br/>  </font><span\n        style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">initialize</span><font face=\"Menlo\"\n                                                                                                        color=\"#a9b7c6\"\n                                                                                                        size=\"3\">: </font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">function</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">() {<br/>    </font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">this</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span\n        style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">dirtyComponentsLength </span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">= dirtyComponents.</font><span\n        style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">length</span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">  </span><font face=\"Menlo\" color=\"#a9b7c6\"\n                                                                                               size=\"3\">}</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">,<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">  </span><span\n        style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">close</span><font face=\"Menlo\"\n                                                                                                   color=\"#a9b7c6\"\n                                                                                                   size=\"3\">: </font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">function</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">() {<br/>    </font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">if </span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">(</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">this</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span\n        style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">dirtyComponentsLength </span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">!== dirtyComponents.</font><span\n        style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">length</span><font face=\"Menlo\"\n                                                                                                    color=\"#a9b7c6\" size=\"3\">) {<br/>      </font><span\n        style=\"color: rgb(128, 128, 128); font-family: Menlo; font-size: 9.8pt;\">// Additional updates were enqueued by componentDidUpdate handlers or<br/></span><span\n        style=\"color: rgb(128, 128, 128); font-family: Menlo; font-size: 9.8pt;\">      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run<br/></span><span\n        style=\"color: rgb(128, 128, 128); font-family: Menlo; font-size: 9.8pt;\">      // these new updates so that if A's componentDidUpdate calls setState on<br/></span><span\n        style=\"color: rgb(128, 128, 128); font-family: Menlo; font-size: 9.8pt;\">      // B, B will update before the callback A's updater provided when calling<br/></span><font\n        face=\"Menlo\" color=\"#808080\" size=\"3\">      // setState.在close之前再检查一遍</font><font face=\"Menlo\" color=\"#808080\">dirtyComponent</font><font\n        face=\"Menlo\" color=\"#808080\" size=\"3\">是否有新的要更新的组件，有则更新，上面注释中将的场景应该是比如在A组件的setState传入了第二个参数回调函数，如果在A的componentDidUpdate中调用了setState改变了它包含的B组件的状态（这里假设只改变B 的状态），为了保证回调函数能访问到更新后的B组件，继续执行dirtyComponent中后插入的组件（B）然后更新B组件<br/></font><span\n        style=\"color: rgb(128, 128, 128); font-family: Menlo; font-size: 9.8pt;\">      </span><font face=\"Menlo\"\n                                                                                                    color=\"#a9b7c6\" size=\"3\">dirtyComponents.</font><span\n        style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">splice</span><font face=\"Menlo\"\n                                                                                                    color=\"#a9b7c6\"\n                                                                                                    size=\"3\">(</font><span\n        style=\"color: rgb(104, 151, 187); font-family: Menlo; font-size: 9.8pt;\">0</span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">, </span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">this</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span\n        style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">dirtyComponentsLength</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">)</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">      </span><span\n        style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">flushBatchedUpdates</span><font face=\"Menlo\"\n                                                                                                                 color=\"#a9b7c6\"\n                                                                                                                 size=\"3\">()</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">    </span><font face=\"Menlo\" color=\"#a9b7c6\"\n                                                                                                 size=\"3\">} </font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">else </span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">{<br/>      dirtyComponents.</font><span\n        style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">length </span><font face=\"Menlo\"\n                                                                                                     color=\"#a9b7c6\" size=\"3\">= </font><span\n        style=\"color: rgb(104, 151, 187); font-family: Menlo; font-size: 9.8pt;\">0</span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">    </span><font face=\"Menlo\" color=\"#a9b7c6\"\n                                                                                                 size=\"3\">}<br/>  }</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">,<br/></span><font face=\"Menlo\"\n                                                                                                   color=\"#a9b7c6\"\n                                                                                                   size=\"3\">}</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\"><br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">var </span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">TRANSACTION_WRAPPERS = [NESTED_UPDATES]</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\"><br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">function </span><span\n        style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">ReactUpdatesFlushTransaction</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">() {<br/>  </font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">this</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span\n        style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">reinitializeTransaction</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">()</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">  </span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">this</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span\n        style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">dirtyComponentsLength </span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">= </font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">null</span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">  </span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">this</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span\n        style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">reconcileTransaction </span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">= ReactUpdates.</font><span\n        style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">ReactReconcileTransaction</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span\n        style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">getPooled</span><font face=\"Menlo\"\n                                                                                                       color=\"#a9b7c6\"\n                                                                                                       size=\"3\">(<br/>    </font><span\n        style=\"color: rgb(128, 128, 128); font-family: Menlo; font-size: 9.8pt;\">/* useCreateElement */ </span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">true<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">  </span><font face=\"Menlo\"\n                                                                                                                  color=\"#a9b7c6\"\n                                                                                                                  size=\"3\">)</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><font face=\"Menlo\"\n                                                                                                   color=\"#a9b7c6\"\n                                                                                                   size=\"3\">}<br/><br/>Object.</font><span\n        style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">assign</span><font face=\"Menlo\"\n                                                                                                    color=\"#a9b7c6\" size=\"3\">(<br/>  </font><span\n        style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">ReactUpdatesFlushTransaction</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span\n        style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">prototype</span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">,<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">  </span><font face=\"Menlo\" color=\"#a9b7c6\"\n                                                                                               size=\"3\">Transaction</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">,<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">  </span><font face=\"Menlo\" color=\"#a9b7c6\"\n                                                                                               size=\"3\">{<br/>    </font><span\n        style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">getTransactionWrappers</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">: </font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">function</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">() { //这里将wapper加到事务中<br/>      </font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">return </span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">TRANSACTION_WRAPPERS</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">    </span><font face=\"Menlo\" color=\"#a9b7c6\"\n                                                                                                 size=\"3\">}</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">,<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">    //略去其他……<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">  </span><font face=\"Menlo\" color=\"#a9b7c6\"\n                                                                                               size=\"3\">}<br/>)</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><font face=\"Menlo\"\n                                                                                                   color=\"#a9b7c6\" size=\"3\"\n/></pre>\n    现在我们的更新事务结构如下图所示：\n</div>\n<div><img\n        src=\"/images/2017-02-14/FE612576-70BB-4B9C-9343-07DFAC12DCB4.png\"\n        height=\"690\" width=\"1766\"/><br/></div>\n<div>重点看下runBatchedUpdate方法是如何更新组件的。</div>\n<div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.8pt;\"><br/><span\n        style=\"color:#cc7832;font-weight:bold;\">function </span><span style=\"color:#ffc66d;\">runBatchedUpdates</span>(transaction) {<br/>  <span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>len = transaction.<span style=\"color:#9876aa;\">dirtyComponentsLength</span><span\n        style=\"color:#cc7832;\">;</span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span\n        style=\"color:#808080;\">// Since reconciling a component higher in the owner hierarchy usually (not<br/></span><span\n        style=\"color:#808080;\">  // always -- see shouldComponentUpdate()) will reconcile children, reconcile<br/></span><span\n        style=\"color:#808080;\">  // them before their children by sorting the array.<br/></span><span\n        style=\"color:#808080;\">  </span>dirtyComponents.<span style=\"color:#ffc66d;\">sort</span>(<span style=\"color:#ffc66d;\">mountOrderComparator</span>)<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span\n        style=\"color:#cc7832;\">  </span><span style=\"color:#808080;\">// Any updates enqueued while reconciling must be performed after this entire<br/></span><span\n        style=\"color:#808080;\">  // batch. Otherwise, if dirtyComponents is [A, B] where A has children B and<br/></span><span\n        style=\"color:#808080;\">  // C, B could update twice in a single batch if C's render enqueues an update<br/></span><span\n        style=\"color:#808080;\">  // to B (since B would have already updated, we should skip it, and the only<br/></span><span\n        style=\"color:#808080;\">  // way we can know to do so is by checking the batch counter).<br/></span><span\n        style=\"color:#808080;\">  </span>updateBatchNumber++<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span\n        style=\"color:#cc7832;font-weight:bold;\">for </span>(<span style=\"color:#cc7832;font-weight:bold;\">var </span>i = <span\n        style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">; </span>i &lt; len<span style=\"color:#cc7832;\">; </span>i++) {<br/>    <span\n        style=\"color:#808080;\">// If a component is unmounted before pending changes apply, it will still<br/></span><span\n        style=\"color:#808080;\">    // be here, but we assume that it has cleared its _pendingCallbacks and<br/></span><span\n        style=\"color:#808080;\">    // that performUpdateIfNecessary is a noop.<br/></span><span\n        style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>component = dirtyComponents[i]<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">   </span><br/>    ReactReconciler.<span\n        style=\"color:#ffc66d;\">performUpdateIfNecessary</span>(<br/>      component<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">      </span>transaction.<span\n        style=\"color:#9876aa;\">reconcileTransaction</span><span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">      </span>updateBatchNumber<br/>    )<span style=\"color:#cc7832;\">;<br/></span><br/>  }<br/>}\n</pre>\n</div>\n<div>遍历dirtyComponent数组，对每个component实例调用performUpdateIfNecessary，</div>\n<div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span\n        style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * is set, update the component.<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span\n        style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n        style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction} transaction<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@internal<br/></span><span\n        style=\"color:#629755;font-weight:bold;font-style:italic;\"/><span\n        style=\"color:#629755;font-style:italic;\">*/<br/></span>performUpdateIfNecessary: <span\n        style=\"color:#cc7832;font-weight:bold;\">function</span>(transaction) {<br/>  <span\n        style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span\n        style=\"color:#9876aa;\">_pendingElement </span>!= <span style=\"color:#cc7832;font-weight:bold;\">null</span>) { //如果渲染的ReactElement发生变化更新渲染的ReactElement<br/>    ReactReconciler.<span\n        style=\"color:#ffc66d;\">receiveComponent</span>(<br/>      <span\n        style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span\n        style=\"color:#9876aa;\">_pendingElement</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">      </span>transaction<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">      </span><span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_context<br/></span><span\n        style=\"color:#9876aa;\">    </span>)<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span>} <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(<span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingStateQueue </span>!== <span\n        style=\"color:#cc7832;font-weight:bold;\">null </span>|| <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span\n        style=\"color:#9876aa;\">_pendingForceUpdate</span>) {//如果只是状态发生变化<br/>    <span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span\n        style=\"color:#9876aa;\">updateComponent</span>( //这里调用diff算法<br/>      transaction<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">      </span><span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span><span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">      </span><span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span><span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">      </span><span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_context</span><span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">      </span><span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_context<br/></span><span\n        style=\"color:#9876aa;\">    </span>)<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>    <span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>callbacks = <span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingCallbacks</span><span\n        style=\"color:#cc7832;\">; <br/></span><span style=\"color:#cc7832;\">    </span><span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingCallbacks </span>= <span\n        style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">    </span><span\n        style=\"color:#cc7832;font-weight:bold;\">if </span>(callbacks) {<br/>      <span\n        style=\"color:#cc7832;font-weight:bold;\">for </span>(<span style=\"color:#cc7832;font-weight:bold;\">var </span>j = <span\n        style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">; </span>j &lt; callbacks.<span style=\"color:#9876aa;\">length</span><span\n        style=\"color:#cc7832;\">; </span>j++) {<br/>        transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span\n        style=\"color:#ffc66d;\">enqueue</span>(<br/>          callbacks[j]<span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">          </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span\n        style=\"color:#ffc66d;\">getPublicInstance</span>()<br/>        )<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">      </span>}<br/>    }<br/>    <span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_updateBatchNumber </span>= <span\n        style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span>}<br/>}<span style=\"color:#cc7832;\">,<br/></span>\n</pre>\n</div>\n<div><br/></div>\n<div>所以整个setState执行流程参见下图：</div>\n<div><br/></div>\n<div><img\n        src=\"/images/2017-02-14/xxx.png\"\n        height=\"656\" width=\"614\"/><br/></div>\n<div>diff算法部分源码在（src/renderers/shared/stack/reconciler/ReactMultiChild.js）</div>\n<div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span\n        style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span\n        style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n        style=\"color:#629755;font-style:italic;\">{?object} nextNestedChildrenElements Nested child element maps.<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n        style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction} transaction<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@final<br/></span><span\n        style=\"color:#629755;font-weight:bold;font-style:italic;\"/><span\n        style=\"color:#629755;font-style:italic;\">* </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@protected<br/></span><span\n        style=\"color:#629755;font-weight:bold;font-style:italic;\"/><span\n        style=\"color:#629755;font-style:italic;\">*/<br/></span><span style=\"color:#ffc66d;\">_updateChildren</span>: <span\n        style=\"color:#cc7832;font-weight:bold;\">function</span>(nextNestedChildrenElements<span\n        style=\"color:#cc7832;\">, </span>transaction<span style=\"color:#cc7832;\">, </span>context) {<br/>  <span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>prevChildren = <span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_renderedChildren</span><span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>removedNodes = {}<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>mountImages = []<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>nextChildren = <span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_reconcilerUpdateChildren</span>(  &lt;————— 1 下面详细介绍（注意mountImages和removedNode都是在这个函数赋值的）<br/>    prevChildren<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>nextNestedChildrenElements<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>mountImages<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>removedNodes<span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">    </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>context<br/>  )<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span\n        style=\"color:#cc7832;font-weight:bold;\">if </span>(!nextChildren &amp;&amp; !prevChildren) {<br/>    <span\n        style=\"color:#cc7832;font-weight:bold;\">return</span><span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span>}<br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>updates = <span\n        style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>name<span\n        style=\"color:#cc7832;\">;//以下是diff算法部分，讲解参见博客链接<br/></span><span style=\"color:#cc7832;\">  </span><span\n        style=\"color:#808080;\">// `nextIndex` will increment for each child in `nextChildren`, but<br/></span><span\n        style=\"color:#808080;\">  // `lastIndex` will be the last index visited in `prevChildren`.<br/></span><span\n        style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextIndex = <span\n        style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>lastIndex = <span style=\"color:#6897bb;\">0</span><span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#808080;\">// `nextMountIndex` will increment for each newly mounted child.<br/></span><span\n        style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextMountIndex = <span\n        style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>lastPlacedNode = <span\n        style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(name <span\n        style=\"color:#cc7832;font-weight:bold;\">in </span>nextChildren) {<br/>    <span\n        style=\"color:#cc7832;font-weight:bold;\">if </span>(!nextChildren.<span style=\"color:#ffc66d;\">hasOwnProperty</span>(name)) {<br/>      <span\n        style=\"color:#cc7832;font-weight:bold;\">continue</span><span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">    </span>}<br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>prevChild = prevChildren &amp;&amp; prevChildren[name]<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>nextChild = nextChildren[name]<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span\n        style=\"color:#cc7832;font-weight:bold;\">if </span>(prevChild === nextChild) {<br/>      updates = <span\n        style=\"color:#ffc66d;\">enqueue</span>(<br/>        updates<span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span\n        style=\"color:#ffc66d;\">moveChild</span>(prevChild<span style=\"color:#cc7832;\">, </span>lastPlacedNode<span\n        style=\"color:#cc7832;\">, </span>nextIndex<span style=\"color:#cc7832;\">, </span>lastIndex)<br/>      )<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>lastIndex = <span\n        style=\"color:#9876aa;\">Math</span>.<span style=\"color:#ffc66d;\">max</span>(prevChild.<span style=\"color:#9876aa;\">_mountIndex</span><span\n        style=\"color:#cc7832;\">, </span>lastIndex)<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">      </span>prevChild.<span style=\"color:#9876aa;\">_mountIndex </span>= nextIndex<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>} <span\n        style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>      <span\n        style=\"color:#cc7832;font-weight:bold;\">if </span>(prevChild) {<br/>        <span style=\"color:#808080;\">// Update `lastIndex` before `_mountIndex` gets unset by unmounting.<br/></span><span\n        style=\"color:#808080;\">        </span>lastIndex = <span style=\"color:#9876aa;\">Math</span>.<span\n        style=\"color:#ffc66d;\">max</span>(prevChild.<span style=\"color:#9876aa;\">_mountIndex</span><span\n        style=\"color:#cc7832;\">, </span>lastIndex)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span\n        style=\"color:#808080;\">// The `removedNodes` loop below will actually remove the child.<br/></span><span\n        style=\"color:#808080;\">      </span>}<br/>      <span style=\"color:#808080;\">// The child must be instantiated before it's mounted.<br/></span><span\n        style=\"color:#808080;\">      </span>updates = <span style=\"color:#ffc66d;\">enqueue</span>(<br/>        updates<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span><span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_mountChildAtIndex</span>(<br/>          nextChild<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">          </span>mountImages[nextMountIndex]<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">          </span>lastPlacedNode<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">          </span>nextIndex<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">          </span>transaction<span\n        style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">          </span>context<br/>        )<br/>      )<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>nextMountIndex++<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/>    nextIndex++<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>lastPlacedNode = ReactReconciler.<span\n        style=\"color:#ffc66d;\">getHostNode</span>(nextChild)<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span>}<br/>  <span\n        style=\"color:#808080;\">// Remove children that are no longer present.<br/></span><span\n        style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(name <span\n        style=\"color:#cc7832;font-weight:bold;\">in </span>removedNodes) {<br/>    <span\n        style=\"color:#cc7832;font-weight:bold;\">if </span>(removedNodes.<span style=\"color:#ffc66d;\">hasOwnProperty</span>(name)) {<br/>      updates = <span\n        style=\"color:#ffc66d;\">enqueue</span>(<br/>        updates<span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span\n        style=\"color:#ffc66d;\">_unmountChild</span>(prevChildren[name]<span style=\"color:#cc7832;\">, </span>removedNodes[name])<br/>      )<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/>  }<br/>  <span\n        style=\"color:#cc7832;font-weight:bold;\">if </span>(updates) {<br/>    <span style=\"color:#ffc66d;\">processQueue</span>(<span\n        style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>updates)<span\n        style=\"color:#cc7832;\">;//注意这里将上面比较后缓存的变更进行处理更新dom树，使所有变更在浏览器中得以展现，代码参见（src/<font\n        style=\"font-size: 12px; color: rgb(204, 120, 50); font-family: Menlo;\">renderers/dom/stack/client/DOMChildrenOperations.js</font>）的processUpdate<br/></span><span\n        style=\"color:#cc7832;\">  </span>}<br/>  <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span\n        style=\"color:#9876aa;\">_renderedChildren </span>= nextChildren<span style=\"color:#cc7832;\">;<br/></span><br/>}<span\n        style=\"color:#cc7832;\">,</span>\n</pre>\n    React在执行diff算法之前先做了两件事情：\n</div>\n<div>\n    <ol start=\"1\">\n        <li>将新的ReactElement结构树（可能包含很多层）’拍平’，以{ key：xx，value：element}方式返回</li>\n        <li>遍历上一步生成的key——ReactElement映射和原有的key——ReactComponent实例映射做比较，新建或删除ReactComponent。</li>\n    </ol>\n</div>\n<div>经过上面两个步骤生成了新的key——ReactComponent实例，和原有的key——ReactComponent映射进行diff算法。</div>\n<div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span\n        style=\"color:#ffc66d;\">_reconcilerUpdateChildren</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br/>  prevChildren<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>nextNestedChildrenElements<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>mountImages<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>removedNodes<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>transaction<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>context<br/>) {<br/>  <span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>nextChildren<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>selfDebugID = <span\n        style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">;<br/></span> //第一步：调用（src/<font\n        style=\"font-size: 12px; color: rgb(169, 183, 198); font-family: Menlo;\">shared/utils/traverseAllChildren.js</font>）对子节点进行深度优先遍历，同时根据子节点所在的层级按照一定命名规则生成唯一key存在object中，这样虽然所有树状结构的子节点被’拍平’存储，但是能保证在diff操作的时候同一层级的子节点进行比较（即连个map中key相同的子节点一定在同一层）<br/>  nextChildren = flattenChildren(nextNestedChildrenElements<span\n        style=\"color:#cc7832;\">, </span>selfDebugID)<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span>ReactChildReconciler.<span style=\"color:#ffc66d;\">updateChildren</span>( //第二步：参见下面详细介绍<br/>    prevChildren<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>nextChildren<span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">    </span>mountImages<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>removedNodes<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>transaction<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span><span\n        style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span\n        style=\"color:#9876aa;\">_hostContainerInfo</span><span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">    </span>context<span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">    </span>selfDebugID<br/>  )<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">return </span>nextChildren<span\n        style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">,</span>\n</pre>\n    <div>\n\t\t<pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span\n                style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Updates the rendered children and returns a new set of children.<br/></span><span\n                style=\"color:#629755;font-style:italic;\"> *<br/></span><span\n                style=\"color:#629755;font-style:italic;\"> * </span><span\n                style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n                style=\"color:#629755;font-style:italic;\">{?object} prevChildren Previously initialized set of children.<br/></span><span\n                style=\"color:#629755;font-style:italic;\"> * </span><span\n                style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n                style=\"color:#629755;font-style:italic;\">{?object} nextChildren Flat child element maps.<br/></span><span\n                style=\"color:#629755;font-style:italic;\"> * </span><span\n                style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n                style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction} transaction<br/></span><span\n                style=\"color:#629755;font-style:italic;\"> * </span><span\n                style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n                style=\"color:#629755;font-style:italic;\">{object} context<br/></span><span\n                style=\"color:#629755;font-style:italic;\"> * </span><span\n                style=\"color:#629755;font-weight:bold;font-style:italic;\">@return </span><span\n                style=\"color:#629755;font-style:italic;\">{?object} A new set of child instances.<br/></span><span\n                style=\"color:#629755;font-style:italic;\"> * </span><span\n                style=\"color:#629755;font-weight:bold;font-style:italic;\">@internal<br/></span><span\n                style=\"color:#629755;font-weight:bold;font-style:italic;\"/><span style=\"color:#629755;font-style:italic;\">*/<br/></span><span\n                style=\"color:#ffc66d;\">updateChildren</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br/>  prevChildren<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>nextChildren<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>mountImages<span style=\"color:#cc7832;\">,<br/></span><span\n                style=\"color:#cc7832;\">  </span>removedNodes<span style=\"color:#cc7832;\">,<br/></span><span\n                style=\"color:#cc7832;\">  </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>hostParent<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>hostContainerInfo<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>context<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>selfDebugID <span\n                style=\"color:#808080;\">// 0 in production and for roots<br/></span>) {<br/>  <span style=\"color:#808080;\">// We currently don't have a way to track moves here but if we use iterators<br/></span><span\n                style=\"color:#808080;\">  // instead of for..in we can zip the iterators and check if an item has<br/></span><span\n                style=\"color:#808080;\">  // moved.<br/></span><span style=\"color:#808080;\">  // </span><span\n                style=\"color:#a8c023;font-style:italic;\">TODO: If nothing has changed, return the prevChildren object so that we<br/></span><span\n                style=\"color:#a8c023;font-style:italic;\">  </span><span style=\"color:#808080;\">// can quickly bailout if nothing has changed.<br/></span><span\n                style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(!nextChildren &amp;&amp; !prevChildren) {<br/>    <span\n                style=\"color:#cc7832;font-weight:bold;\">return</span><span style=\"color:#cc7832;\">;<br/></span><span\n                style=\"color:#cc7832;\">  </span>}<br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>name<span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span\n                style=\"color:#cc7832;font-weight:bold;\">var </span>prevChild<span style=\"color:#cc7832;\">;<br/></span><span\n                style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(name <span\n                style=\"color:#cc7832;font-weight:bold;\">in </span>nextChildren) {<br/>    <span\n                style=\"color:#cc7832;font-weight:bold;\">if </span>(!nextChildren.<span\n                style=\"color:#ffc66d;\">hasOwnProperty</span>(name)) {<br/>      <span style=\"color:#cc7832;font-weight:bold;\">continue</span><span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/>    prevChild = prevChildren &amp;&amp; prevChildren[name]<span\n                style=\"color:#cc7832;\">; //如果旧映射里找到对应的ReactComponent实例<br/></span><span style=\"color:#cc7832;\">    </span><span\n                style=\"color:#cc7832;font-weight:bold;\">var </span>prevElement = prevChild &amp;&amp; prevChild.<span\n                style=\"color:#9876aa;\">_currentElement</span><span style=\"color:#cc7832;\">;<br/></span><span\n                style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextElement = nextChildren[name]<span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span\n                style=\"color:#cc7832;font-weight:bold;\">if </span>(prevChild != <span\n                style=\"color:#cc7832;font-weight:bold;\">null </span>&amp;&amp;<br/>        shouldUpdateReactComponent(prevElement<span\n                style=\"color:#cc7832;\">, </span>nextElement)) {//取出实例中的ReactElement与新的做比较，如果类型相同调用实例更新函数<br/>      ReactReconciler.<span\n                style=\"color:#ffc66d;\">receiveComponent</span>(<br/>        prevChild<span style=\"color:#cc7832;\">, </span>nextElement<span\n                style=\"color:#cc7832;\">, </span>transaction<span style=\"color:#cc7832;\">, </span>context<br/>      )<span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>nextChildren[name] = prevChild<span\n                style=\"color:#cc7832;\">; <br/></span><span style=\"color:#cc7832;\">    </span>} <span\n                style=\"color:#cc7832;font-weight:bold;\">else </span>{ //否则清理旧的ReactComponent实例，加入到removeNodes映射中，初始化新实例加入映射中，调用新实例的mountComponent获得对应的渲染markup加入到<font\n                style=\"font-family: Menlo; background-color: rgb(43, 43, 43); font-size: 12px; color: rgb(169, 183, 198);\">mountImages 。<font\n                style=\"font-family: Menlo; background-color: rgb(43, 43, 43); font-size: 12px; color: rgb(169, 183, 198);\">removeNodes映射和mountImage映射在diff算法执行过程中加入到更新队列然后批量更新dom。</font></font><br/>      <span\n                style=\"color:#cc7832;font-weight:bold;\">if </span>(<br/>        !ReactFeatureFlags.<span style=\"color:#9876aa;\">prepareNewChildrenBeforeUnmountInStack </span>&amp;&amp;<br/>        prevChild<br/>      ) {<br/>        removedNodes[name] = ReactReconciler.<span\n                style=\"color:#ffc66d;\">getHostNode</span>(prevChild)<span style=\"color:#cc7832;\">;<br/></span><span\n                style=\"color:#cc7832;\">        </span>ReactReconciler.<span style=\"color:#ffc66d;\">unmountComponent</span>(<br/>          prevChild<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">          </span><span\n                style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">, </span><span\n                style=\"color:#808080;\">/* safely */<br/></span><span style=\"color:#808080;\">          </span><span\n                style=\"color:#cc7832;font-weight:bold;\">false </span><span\n                style=\"color:#808080;\">/* skipLifecycle */<br/></span><span style=\"color:#808080;\">        </span>)<span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>}<br/>      <span\n                style=\"color:#808080;\">// The child must be instantiated before it's mounted.<br/></span><span\n                style=\"color:#808080;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextChildInstance = instantiateReactComponent(nextElement<span\n                style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">true</span>)<span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>nextChildren[name] = nextChildInstance<span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span><span style=\"color:#808080;\">// Creating mount image now ensures refs are resolved in right order<br/></span><span\n                style=\"color:#808080;\">      // (see <a href=\"https://github.com/facebook/react/pull/7101\">https://github.com/facebook/react/pull/7101</a> for explanation).<br/></span><span\n                style=\"color:#808080;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextChildMountImage = ReactReconciler.<span\n                style=\"color:#ffc66d;\">mountComponent</span>(<br/>        nextChildInstance<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>transaction<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>hostParent<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>hostContainerInfo<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>context<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>selfDebugID<br/>      )<span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>mountImages.<span\n                style=\"color:#ffc66d;\">push</span>(nextChildMountImage)<span style=\"color:#cc7832;\">;<br/></span><span\n                style=\"color:#cc7832;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(<br/>        ReactFeatureFlags.<span\n                style=\"color:#9876aa;\">prepareNewChildrenBeforeUnmountInStack </span>&amp;&amp;<br/>        prevChild<br/>      ) {<br/>        removedNodes[name] = ReactReconciler.<span\n                style=\"color:#ffc66d;\">getHostNode</span>(prevChild)<span style=\"color:#cc7832;\">;<br/></span><span\n                style=\"color:#cc7832;\">        </span>ReactReconciler.<span style=\"color:#ffc66d;\">unmountComponent</span>(<br/>          prevChild<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">          </span><span\n                style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">, </span><span\n                style=\"color:#808080;\">/* safely */<br/></span><span style=\"color:#808080;\">          </span><span\n                style=\"color:#cc7832;font-weight:bold;\">false </span><span\n                style=\"color:#808080;\">/* skipLifecycle */<br/></span><span style=\"color:#808080;\">        </span>)<span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>}<br/>    }<br/>  }<br/>  <span\n                style=\"color:#808080;\">// Unmount children that are no longer present.<br/></span><span\n                style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(name <span\n                style=\"color:#cc7832;font-weight:bold;\">in </span>prevChildren) {<br/>    <span\n                style=\"color:#cc7832;font-weight:bold;\">if </span>(prevChildren.<span style=\"color:#ffc66d;\">hasOwnProperty</span>(name) &amp;&amp;<br/>        !(nextChildren &amp;&amp; nextChildren.<span\n                style=\"color:#ffc66d;\">hasOwnProperty</span>(name))) {<br/>      prevChild = prevChildren[name]<span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>removedNodes[name] = ReactReconciler.<span\n                style=\"color:#ffc66d;\">getHostNode</span>(prevChild)<span style=\"color:#cc7832;\">;<br/></span><span\n                style=\"color:#cc7832;\">      </span>ReactReconciler.<span style=\"color:#ffc66d;\">unmountComponent</span>(<br/>        prevChild<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span><span\n                style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">, </span><span\n                style=\"color:#808080;\">/* safely */<br/></span><span style=\"color:#808080;\">        </span><span\n                style=\"color:#cc7832;font-weight:bold;\">false </span><span\n                style=\"color:#808080;\">/* skipLifecycle */<br/></span><span style=\"color:#808080;\">      </span>)<span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/>  }<br/>}<span\n                style=\"color:#cc7832;\">,</span></pre>\n    </div>\n    <div><br/></div>\n    <div>diff算法原理详解参见：<br/></div>\n</div>\n<div><a href=\"https://zhuanlan.zhihu.com/p/20346379?refer=purerender\">https://zhuanlan.zhihu.com/p/20346379?refer=purerender</a> 或《深入React技术栈》3.5章（可以找我借）讲得很详细。<br/>\n</div>\n<div><br/></div>\n","slug":"react源码学习——setState原理","published":1,"updated":"2017-02-13T09:17:39.000Z","comments":1,"photos":[],"link":"","_id":"cizknquqb001l95c44hlw1g4e","content":"<div>\n    React通过this.setState方法更新state，当this.setState被调用的时候会根据更新策略执行情况（是否在更新中）来判断是否重新调用render方法还是放到更新队列中。看下setState源码，题外话：React创建组件有三种方式:\n    1）函数方式(无状态组件) 2）React.createClass(es5)  3) extends React.Component(es6)，后两种方式中\n    setState会自动注入到组件中，因此在自定义组件中能通过this.setState直接访问。三种创建方式的区别参见<a href=\"http://www.cnblogs.com/wonyun/p/5930333.html\" target=\"_blank\" rel=\"external\">这篇文章</a>。<br>\n    <div>——以下代码是React v15.4.2版本——</div>\n</div>\n<div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><br><span style=\"color:#629755;font-style:italic;\">/**<br></span><span style=\"color:#629755;font-style:italic;\"> * Sets a subset of the state. Always use this to mutate<br></span><span style=\"color:#629755;font-style:italic;\"> * state. You should treat `this.state` as immutable.<br></span><span style=\"color:#629755;font-style:italic;\"> *<br></span><span style=\"color:#629755;font-style:italic;\"> * There is no guarantee that `this.state` will be immediately updated, so<br></span><span style=\"color:#629755;font-style:italic;\"> * accessing `this.state` after calling this method may return the old value.<br></span><span style=\"color:#629755;font-style:italic;\"> *<br></span><span style=\"color:#629755;font-style:italic;\"> * There is no guarantee that calls to `setState` will run synchronously,<br></span><span style=\"color:#629755;font-style:italic;\"> * as they may eventually be batched together.  You can provide an optional<br></span><span style=\"color:#629755;font-style:italic;\"> * callback that will be executed when the call to setState is actually<br></span><span style=\"color:#629755;font-style:italic;\"> * completed.<br></span><span style=\"color:#629755;font-style:italic;\"> *<br></span><span style=\"color:#629755;font-style:italic;\"> * When a function is provided to setState, it will be called at some point in<br></span><span style=\"color:#629755;font-style:italic;\"> * the future (not synchronously). It will be called with the up to date<br></span><span style=\"color:#629755;font-style:italic;\"> * component arguments (state, props, context). These values can be different<br></span><span style=\"color:#629755;font-style:italic;\"> * from this.* because your function may be called after receiveProps but before<br></span><span style=\"color:#629755;font-style:italic;\"> * shouldComponentUpdate, and this new state, props, and context will not yet be<br></span><span style=\"color:#629755;font-style:italic;\"> * assigned to this.<br></span><span style=\"color:#629755;font-style:italic;\"> *<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{object|function} partialState Next partial state or function to<br></span><span style=\"color:#629755;font-style:italic;\"> *        produce next partial state to be merged with current state.<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?function} callback Called after state is updated.<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@final<br></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\"><span style=\"color:#629755;font-style:italic;\">* </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@protected<br></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\"><span style=\"color:#629755;font-style:italic;\">*/<br></span><span style=\"color:#ffc66d;\">ReactComponent</span>.<span style=\"color:#9876aa;\">prototype</span>.<span style=\"color:#ffc66d;\">setState </span>= <span style=\"color:#cc7832;font-weight:bold;\">function</span>(partialState<span style=\"color:#cc7832;\">, </span>callback) {<span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">updater</span>.<span style=\"color:#ffc66d;\">enqueueSetState</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>partialState<span style=\"color:#cc7832;\">, </span>callback<span style=\"color:#cc7832;\">, </span><span style=\"color:#6a8759;\">'setState'</span>)<span style=\"color:#cc7832;\">;<br></span>}<span style=\"color:#cc7832;\">;</span>\n</span></span></pre>\n    <pre style=\"background-color: rgb(43, 43, 43);\"><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(169, 183, 198);\"><span style=\"color:#629755;font-style:italic;\">/**<br></span><span style=\"color:#629755;font-style:italic;\"> * Sets a subset of the state. This only exists because _pendingState is<br></span><span style=\"color:#629755;font-style:italic;\"> * internal. This provides a merging strategy that is not available to deep<br></span><span style=\"color:#629755;font-style:italic;\"> * properties which is confusing. </span><span style=\"color:#a8c023;font-style:italic;\">TODO: Expose pendingState or don't use it<br></span><span style=\"color:#a8c023;font-style:italic;\"><span style=\"color:#629755;font-style:italic;\">* during the merge.<br></span><span style=\"color:#629755;font-style:italic;\"> *<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactClass} publicInstance The instance that should rerender.<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{object} partialState Next partial state to be merged with state.<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?function} callback Called after state is updated.<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?string} Name of the calling function in the public API.<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@internal<br></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\"><span style=\"color:#629755;font-style:italic;\">*/<br></span><span style=\"color:#ffc66d;\">enqueueSetState</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(publicInstance<span style=\"color:#cc7832;\">, </span>partialState<span style=\"color:#cc7832;\">, </span>callback<span style=\"color:#cc7832;\">, </span>callerName) {<br>  </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#cc7832\"><b>//获得组件实例</b></font><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\"><br>  </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">internalInstance = </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">getInternalInstanceReadyForUpdate</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(<br>    publicInstance</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(106, 135, 89);\">'setState'<br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(106, 135, 89);\">  </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">)</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\"><br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">if </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(!internalInstance) {<br>    </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">return</span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">}<br><br>  //初始化state更新队列<br>  </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">queue =<br>    internalInstance.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_pendingStateQueue </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">||<br>    (internalInstance.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_pendingStateQueue </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">= [])</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">queue.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">push</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(partialState)</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  //如果setState设置了回调函数，添加到组件实例的队列中<br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">if </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(callback) {<br>    validateCallback(callback</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">, </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">callerName)</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">if </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(internalInstance.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_pendingCallbacks</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">) {<br>      internalInstance.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_pendingCallbacks</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">push</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(callback)</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">} </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">else </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">{<br>      internalInstance.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_pendingCallbacks </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">= [callback]</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font color=\"#a9b7c6\"><font face=\"Menlo\" size=\"2\">}<br>  }<br>  <br>  </font></font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">enqueueUpdate</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(internalInstance)</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br></span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">}</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,</span></span></span></pre>\n</div>\n<div><font style=\"font-size: 14px;\"><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: 'PingFang SC'; color: rgb(69, 69, 69);\">最后调用（</span><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(69, 69, 69);\">src/renderers/shared/stack/reconciler/ReactUpdates.js</span><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: 'PingFang SC'; color: rgb(69, 69, 69);\">）</span><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(69, 69, 69);\">ReactUpdates</span><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: 'PingFang SC'; color: rgb(69, 69, 69);\">的enqueueUpdate函数执行更新。</span></font>\n</div>\n<div><font style=\"font-size: 14px;\"><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; color: rgb(69, 69, 69);\"></span></font><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; color: rgb(69, 69, 69);\"><font style=\"font-size: 14px;\"><font face=\"PingFang SC\"><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#629755;font-style:italic;\">/**<br></span><span style=\"color:#629755;font-style:italic;\"> * Mark a component as needing a rerender, adding an optional callback to a<br></span><span style=\"color:#629755;font-style:italic;\"> * list of functions which will be executed once the rerender occurs.<br></span><span style=\"color:#629755;font-style:italic;\"> */<br></span><span style=\"color:#cc7832;font-weight:bold;\">function </span><span style=\"color:#ffc66d;\">enqueueUpdate</span>(component) {<br>  <span style=\"color:#ffc66d;\">ensureInjected</span>()<span style=\"color:#cc7832;\">;</span><span style=\"color:#808080;\"><br></span><span style=\"color:#808080;\"><br></span><span style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(!batchingStrategy.<span style=\"color:#9876aa;\">isBatchingUpdates</span>) {//如果当前没有处于更新中，<br>    batchingStrategy.<span style=\"color:#ffc66d;\">batchedUpdates</span>(<span style=\"color:#ffc66d;\">enqueueUpdate</span><span style=\"color:#cc7832;\">, </span>component)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">return</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>}<br><br>  dirtyComponents.<span style=\"color:#ffc66d;\">push</span>(component)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(component.<span style=\"color:#9876aa;\">_updateBatchNumber </span>== <span style=\"color:#cc7832;font-weight:bold;\">null</span>) {<br>    component.<span style=\"color:#9876aa;\">_updateBatchNumber </span>= updateBatchNumber + <span style=\"color:#6897bb;\">1</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>}<br>}\n</pre></font></font></span><br></div>\n<div>\n    batchingStrategy在ReactDefaultBatchingStrategy.js（src/renderers/shared/stack/reconciler/ReactDefaultBatchingStrategy.js），这里要介绍下React的事务，事务是将需要执行的方法封装起来，在通过perform方法执行，以保证在执行目标方法前，事务中的一组initialize方法限制性，目标方法执行后，一组close方法能够得到执行，参见下图（src/renderers/shared/stack/reconciler/Transaction.js中）：\n</div>\n<div><img src=\"/images/2017-02-14/3C5D0315-7718-4DC6-89B9-0C7A281294F2.png\" height=\"670\" width=\"1066\"><br></div>\n<div>再回到我们的更新策略对象中</div>\n<div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><br><span style=\"color:#cc7832;font-weight:bold;\">var </span>RESET_BATCHED_UPDATES = {<br>  <span style=\"color:#9876aa;\">initialize</span>: emptyFunction<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#ffc66d;\">close</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>() {<br>    ReactDefaultBatchingStrategy.<span style=\"color:#9876aa;\">isBatchingUpdates </span>= <span style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">;//<font style=\"font-family: Menlo; background-color: rgb(43, 43, 43); font-size: 12px; color: rgb(169, 183, 198);\">事务执行结束后重置当前更新状态</font><br></span><span style=\"color:#cc7832;\">  </span>}<span style=\"color:#cc7832;\">,<br></span>}<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;font-weight:bold;\">var </span>FLUSH_BATCHED_UPDATES = {<br>  <span style=\"color:#9876aa;\">initialize</span>: emptyFunction<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#9876aa;\">close</span>: ReactUpdates.<span style=\"color:#ffc66d;\">flushBatchedUpdates</span>.<span style=\"color:#ffc66d;\">bind</span>(ReactUpdates)<span style=\"color:#cc7832;\">,//遍历dirtyComponent数组中的组件，逐个更新<br></span>}<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;font-weight:bold;\">var </span>TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES<span style=\"color:#cc7832;\">, </span>RESET_BATCHED_UPDATES]<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;font-weight:bold;\">function </span><span style=\"color:#ffc66d;\">ReactDefaultBatchingStrategyTransaction</span>() {<br>  <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">reinitializeTransaction</span>()<span style=\"color:#cc7832;\">;<br></span>}<br><br>Object.<span style=\"color:#ffc66d;\">assign</span>(<br>  <span style=\"color:#ffc66d;\">ReactDefaultBatchingStrategyTransaction</span>.<span style=\"color:#9876aa;\">prototype</span><span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>Transaction<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>{<br>    <span style=\"color:#ffc66d;\">getTransactionWrappers</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>() { //给事务添加wapper<br>      <span style=\"color:#cc7832;font-weight:bold;\">return </span>TRANSACTION_WRAPPERS<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>}<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>}<br>)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;font-weight:bold;\">var </span>transaction = <span style=\"color:#cc7832;font-weight:bold;\">new </span><span style=\"color:#ffc66d;\">ReactDefaultBatchingStrategyTransaction</span>()<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;font-weight:bold;\">var </span>ReactDefaultBatchingStrategy = {<br>  <span style=\"color:#9876aa;\">isBatchingUpdates</span>: <span style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#629755;font-style:italic;\">/**<br></span><span style=\"color:#629755;font-style:italic;\">   * Call the provided function in a context within which calls to `setState`<br></span><span style=\"color:#629755;font-style:italic;\">   * and friends are batched such that components aren't updated unnecessarily.<br></span><span style=\"color:#629755;font-style:italic;\">   */<br></span><span style=\"color:#629755;font-style:italic;\">  </span><span style=\"color:#ffc66d;\">batchedUpdates</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(callback<span style=\"color:#cc7832;\">, </span>a<span style=\"color:#cc7832;\">, </span>b<span style=\"color:#cc7832;\">, </span>c<span style=\"color:#cc7832;\">, </span>d<span style=\"color:#cc7832;\">, </span>e) {<br>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>alreadyBatchingUpdates = ReactDefaultBatchingStrategy.<span style=\"color:#9876aa;\">isBatchingUpdates</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">    </span>ReactDefaultBatchingStrategy.<span style=\"color:#9876aa;\">isBatchingUpdates </span>= <span style=\"color:#cc7832;font-weight:bold;\">true</span><span style=\"color:#cc7832;\">;//设置当前正在处于更新状态<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// The code is written this way to avoid extra allocations<br></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(alreadyBatchingUpdates) { //个人认为这里是确保同一时间只有一个事务在更新组件，比如一个组件几乎无间隔地调用两次setState，欢迎讨论<br>      <span style=\"color:#cc7832;font-weight:bold;\">return </span>callback(a<span style=\"color:#cc7832;\">, </span>b<span style=\"color:#cc7832;\">, </span>c<span style=\"color:#cc7832;\">, </span>d<span style=\"color:#cc7832;\">, </span>e)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br>      <span style=\"color:#cc7832;font-weight:bold;\">return </span>transaction.<span style=\"color:#ffc66d;\">perform</span>(callback<span style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">, </span>a<span style=\"color:#cc7832;\">, </span>b<span style=\"color:#cc7832;\">, </span>c<span style=\"color:#cc7832;\">, </span>d<span style=\"color:#cc7832;\">, </span>e)<span style=\"color:#cc7832;\">;//注意这里比较有意思，把<font style=\"font-family: Menlo; font-size: 12px; background-color: rgb(43, 43, 43); color: rgb(255, 198, 109);\">enqueueUpdate作为callback调用，但这时<font style=\"font-family: Menlo; font-size: 12px; background-color: rgb(43, 43, 43); color: rgb(152, 118, 170);\">isBatchingUpdates是true，因此<font style=\"font-family: Menlo; background-color: rgb(43, 43, 43); font-size: 12px; color: rgb(255, 198, 109);\">enqueueUpdate做的事就是把这个要更新的component加入到dirtyComponent数组中，然后在事务wrapper中的close方法</font></font></font></span><span style=\"font-size: 9pt;\">ReactUpdates.</span><span style=\"font-size: 9pt; color: rgb(255, 198, 109);\">flushBatchedUpdates遍历dirtyComponent数组进行更新。</span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">    </span>}<br>  }<span style=\"color:#cc7832;\">,<br></span>}<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span>module.<span style=\"color:#ffc66d;\">exports </span>= ReactDefaultBatchingStrategy<span style=\"color:#cc7832;\">;<br></span>\n</pre>\n    由这段代码可以看到，真正执行更新的实在事务的某个wapper的close方法中，即ReactUpdates.flushBatchedUpdates中进行更新的：\n    <pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.8pt;\"><span style=\"color:#cc7832;font-weight:bold;\">var </span><span style=\"color:#ffc66d;\">flushBatchedUpdates </span>= <span style=\"color:#cc7832;font-weight:bold;\">function</span>() {<br>  <span style=\"color:#808080;\">// ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents<br></span><span style=\"color:#808080;\">  // array and perform any updates enqueued by mount-ready handlers (i.e.,<br></span><span style=\"color:#808080;\">  // componentDidUpdate) but we need to check here too in order to catch<br></span><span style=\"color:#808080;\">  // updates enqueued by setState callbacks.<br></span><span style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">while </span>(dirtyComponents.<span style=\"color:#9876aa;\">length</span>) {<br>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>transaction = <span style=\"color:#ffc66d;\">ReactUpdatesFlushTransaction</span>.<span style=\"color:#ffc66d;\">getPooled</span>()<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>transaction.<span style=\"color:#ffc66d;\">perform</span>(<span style=\"color:#ffc66d;\">runBatchedUpdates</span><span style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">, </span>transaction)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#ffc66d;\">ReactUpdatesFlushTransaction</span>.<span style=\"color:#ffc66d;\">release</span>(transaction)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>}<br>}<span style=\"color:#cc7832;\">;</span>\n</pre>\n</div>\n<div>注意这里由用到一个事务ReactUpdatesFlushTransaction：</div>\n<div><pre style=\"background-color: rgb(43, 43, 43);\"><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\"><br></font><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">var </span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">NESTED_UPDATES = {<br>  </font><span style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">initialize</span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">: </font><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">function</span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">() {<br>    </font><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">this</span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">dirtyComponentsLength </span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">= dirtyComponents.</font><span style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">length</span><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br></span><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">  </span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">}</font><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">,<br></span><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">  </span><span style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">close</span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">: </font><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">function</span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">() {<br>    </font><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">if </span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">(</font><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">this</span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">dirtyComponentsLength </span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">!== dirtyComponents.</font><span style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">length</span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">) {<br>      </font><span style=\"color: rgb(128, 128, 128); font-family: Menlo; font-size: 9.8pt;\">// Additional updates were enqueued by componentDidUpdate handlers or<br></span><span style=\"color: rgb(128, 128, 128); font-family: Menlo; font-size: 9.8pt;\">      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run<br></span><span style=\"color: rgb(128, 128, 128); font-family: Menlo; font-size: 9.8pt;\">      // these new updates so that if A's componentDidUpdate calls setState on<br></span><span style=\"color: rgb(128, 128, 128); font-family: Menlo; font-size: 9.8pt;\">      // B, B will update before the callback A's updater provided when calling<br></span><font face=\"Menlo\" color=\"#808080\" size=\"3\">      // setState.在close之前再检查一遍</font><font face=\"Menlo\" color=\"#808080\">dirtyComponent</font><font face=\"Menlo\" color=\"#808080\" size=\"3\">是否有新的要更新的组件，有则更新，上面注释中将的场景应该是比如在A组件的setState传入了第二个参数回调函数，如果在A的componentDidUpdate中调用了setState改变了它包含的B组件的状态（这里假设只改变B 的状态），为了保证回调函数能访问到更新后的B组件，继续执行dirtyComponent中后插入的组件（B）然后更新B组件<br></font><span style=\"color: rgb(128, 128, 128); font-family: Menlo; font-size: 9.8pt;\">      </span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">dirtyComponents.</font><span style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">splice</span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">(</font><span style=\"color: rgb(104, 151, 187); font-family: Menlo; font-size: 9.8pt;\">0</span><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">, </span><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">this</span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">dirtyComponentsLength</span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">)</font><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br></span><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">      </span><span style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">flushBatchedUpdates</span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">()</font><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br></span><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">    </span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">} </font><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">else </span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">{<br>      dirtyComponents.</font><span style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">length </span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">= </font><span style=\"color: rgb(104, 151, 187); font-family: Menlo; font-size: 9.8pt;\">0</span><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br></span><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">    </span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">}<br>  }</font><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">,<br></span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">}</font><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br></span><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\"><br></span><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">var </span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">TRANSACTION_WRAPPERS = [NESTED_UPDATES]</font><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br></span><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\"><br></span><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">function </span><span style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">ReactUpdatesFlushTransaction</span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">() {<br>  </font><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">this</span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">reinitializeTransaction</span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">()</font><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br></span><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">  </span><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">this</span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">dirtyComponentsLength </span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">= </font><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">null</span><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br></span><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">  </span><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">this</span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">reconcileTransaction </span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">= ReactUpdates.</font><span style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">ReactReconcileTransaction</span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">getPooled</span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">(<br>    </font><span style=\"color: rgb(128, 128, 128); font-family: Menlo; font-size: 9.8pt;\">/* useCreateElement */ </span><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">true<br></span><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">  </span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">)</font><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br></span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">}<br><br>Object.</font><span style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">assign</span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">(<br>  </font><span style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">ReactUpdatesFlushTransaction</span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">prototype</span><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">,<br></span><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">  </span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">Transaction</font><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">,<br></span><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">  </span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">{<br>    </font><span style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">getTransactionWrappers</span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">: </font><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">function</span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">() { //这里将wapper加到事务中<br>      </font><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">return </span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">TRANSACTION_WRAPPERS</font><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br></span><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">    </span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">}</font><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">,<br></span><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">    //略去其他……<br></span><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">  </span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">}<br>)</font><span style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br></span><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\"></font></pre>\n    现在我们的更新事务结构如下图所示：\n</div>\n<div><img src=\"/images/2017-02-14/FE612576-70BB-4B9C-9343-07DFAC12DCB4.png\" height=\"690\" width=\"1766\"><br></div>\n<div>重点看下runBatchedUpdate方法是如何更新组件的。</div>\n<div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.8pt;\"><br><span style=\"color:#cc7832;font-weight:bold;\">function </span><span style=\"color:#ffc66d;\">runBatchedUpdates</span>(transaction) {<br>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>len = transaction.<span style=\"color:#9876aa;\">dirtyComponentsLength</span><span style=\"color:#cc7832;\">;</span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#808080;\">// Since reconciling a component higher in the owner hierarchy usually (not<br></span><span style=\"color:#808080;\">  // always -- see shouldComponentUpdate()) will reconcile children, reconcile<br></span><span style=\"color:#808080;\">  // them before their children by sorting the array.<br></span><span style=\"color:#808080;\">  </span>dirtyComponents.<span style=\"color:#ffc66d;\">sort</span>(<span style=\"color:#ffc66d;\">mountOrderComparator</span>)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#808080;\">// Any updates enqueued while reconciling must be performed after this entire<br></span><span style=\"color:#808080;\">  // batch. Otherwise, if dirtyComponents is [A, B] where A has children B and<br></span><span style=\"color:#808080;\">  // C, B could update twice in a single batch if C's render enqueues an update<br></span><span style=\"color:#808080;\">  // to B (since B would have already updated, we should skip it, and the only<br></span><span style=\"color:#808080;\">  // way we can know to do so is by checking the batch counter).<br></span><span style=\"color:#808080;\">  </span>updateBatchNumber++<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(<span style=\"color:#cc7832;font-weight:bold;\">var </span>i = <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">; </span>i &lt; len<span style=\"color:#cc7832;\">; </span>i++) {<br>    <span style=\"color:#808080;\">// If a component is unmounted before pending changes apply, it will still<br></span><span style=\"color:#808080;\">    // be here, but we assume that it has cleared its _pendingCallbacks and<br></span><span style=\"color:#808080;\">    // that performUpdateIfNecessary is a noop.<br></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>component = dirtyComponents[i]<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">   </span><br>    ReactReconciler.<span style=\"color:#ffc66d;\">performUpdateIfNecessary</span>(<br>      component<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">      </span>transaction.<span style=\"color:#9876aa;\">reconcileTransaction</span><span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">      </span>updateBatchNumber<br>    )<span style=\"color:#cc7832;\">;<br></span><br>  }<br>}\n</pre>\n</div>\n<div>遍历dirtyComponent数组，对每个component实例调用performUpdateIfNecessary，</div>\n<div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#629755;font-style:italic;\">/**<br></span><span style=\"color:#629755;font-style:italic;\"> * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`<br></span><span style=\"color:#629755;font-style:italic;\"> * is set, update the component.<br></span><span style=\"color:#629755;font-style:italic;\"> *<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction} transaction<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@internal<br></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\"><span style=\"color:#629755;font-style:italic;\">*/<br></span>performUpdateIfNecessary: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(transaction) {<br>  <span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingElement </span>!= <span style=\"color:#cc7832;font-weight:bold;\">null</span>) { //如果渲染的ReactElement发生变化更新渲染的ReactElement<br>    ReactReconciler.<span style=\"color:#ffc66d;\">receiveComponent</span>(<br>      <span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingElement</span><span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">      </span>transaction<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_context<br></span><span style=\"color:#9876aa;\">    </span>)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>} <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingStateQueue </span>!== <span style=\"color:#cc7832;font-weight:bold;\">null </span>|| <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingForceUpdate</span>) {//如果只是状态发生变化<br>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">updateComponent</span>( //这里调用diff算法<br>      transaction<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span><span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span><span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_context</span><span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_context<br></span><span style=\"color:#9876aa;\">    </span>)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>callbacks = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingCallbacks</span><span style=\"color:#cc7832;\">; <br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingCallbacks </span>= <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(callbacks) {<br>      <span style=\"color:#cc7832;font-weight:bold;\">for </span>(<span style=\"color:#cc7832;font-weight:bold;\">var </span>j = <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">; </span>j &lt; callbacks.<span style=\"color:#9876aa;\">length</span><span style=\"color:#cc7832;\">; </span>j++) {<br>        transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<br>          callbacks[j]<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">          </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">getPublicInstance</span>()<br>        )<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">      </span>}<br>    }<br>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_updateBatchNumber </span>= <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>}<br>}<span style=\"color:#cc7832;\">,<br></span>\n</span></pre>\n</div>\n<div><br></div>\n<div>所以整个setState执行流程参见下图：</div>\n<div><br></div>\n<div><img src=\"/images/2017-02-14/xxx.png\" height=\"656\" width=\"614\"><br></div>\n<div>diff算法部分源码在（src/renderers/shared/stack/reconciler/ReactMultiChild.js）</div>\n<div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#629755;font-style:italic;\">/**<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?object} nextNestedChildrenElements Nested child element maps.<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction} transaction<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@final<br></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\"><span style=\"color:#629755;font-style:italic;\">* </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@protected<br></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\"><span style=\"color:#629755;font-style:italic;\">*/<br></span><span style=\"color:#ffc66d;\">_updateChildren</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(nextNestedChildrenElements<span style=\"color:#cc7832;\">, </span>transaction<span style=\"color:#cc7832;\">, </span>context) {<br>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>prevChildren = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_renderedChildren</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>removedNodes = {}<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>mountImages = []<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextChildren = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_reconcilerUpdateChildren</span>(  &lt;————— 1 下面详细介绍（注意mountImages和removedNode都是在这个函数赋值的）<br>    prevChildren<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>nextNestedChildrenElements<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>mountImages<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>removedNodes<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>transaction<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>context<br>  )<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(!nextChildren &amp;&amp; !prevChildren) {<br>    <span style=\"color:#cc7832;font-weight:bold;\">return</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>}<br>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>updates = <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>name<span style=\"color:#cc7832;\">;//以下是diff算法部分，讲解参见博客链接<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#808080;\">// `nextIndex` will increment for each child in `nextChildren`, but<br></span><span style=\"color:#808080;\">  // `lastIndex` will be the last index visited in `prevChildren`.<br></span><span style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextIndex = <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>lastIndex = <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#808080;\">// `nextMountIndex` will increment for each newly mounted child.<br></span><span style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextMountIndex = <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>lastPlacedNode = <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(name <span style=\"color:#cc7832;font-weight:bold;\">in </span>nextChildren) {<br>    <span style=\"color:#cc7832;font-weight:bold;\">if </span>(!nextChildren.<span style=\"color:#ffc66d;\">hasOwnProperty</span>(name)) {<br>      <span style=\"color:#cc7832;font-weight:bold;\">continue</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>}<br>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>prevChild = prevChildren &amp;&amp; prevChildren[name]<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextChild = nextChildren[name]<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(prevChild === nextChild) {<br>      updates = <span style=\"color:#ffc66d;\">enqueue</span>(<br>        updates<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">moveChild</span>(prevChild<span style=\"color:#cc7832;\">, </span>lastPlacedNode<span style=\"color:#cc7832;\">, </span>nextIndex<span style=\"color:#cc7832;\">, </span>lastIndex)<br>      )<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">      </span>lastIndex = <span style=\"color:#9876aa;\">Math</span>.<span style=\"color:#ffc66d;\">max</span>(prevChild.<span style=\"color:#9876aa;\">_mountIndex</span><span style=\"color:#cc7832;\">, </span>lastIndex)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">      </span>prevChild.<span style=\"color:#9876aa;\">_mountIndex </span>= nextIndex<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br>      <span style=\"color:#cc7832;font-weight:bold;\">if </span>(prevChild) {<br>        <span style=\"color:#808080;\">// Update `lastIndex` before `_mountIndex` gets unset by unmounting.<br></span><span style=\"color:#808080;\">        </span>lastIndex = <span style=\"color:#9876aa;\">Math</span>.<span style=\"color:#ffc66d;\">max</span>(prevChild.<span style=\"color:#9876aa;\">_mountIndex</span><span style=\"color:#cc7832;\">, </span>lastIndex)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">// The `removedNodes` loop below will actually remove the child.<br></span><span style=\"color:#808080;\">      </span>}<br>      <span style=\"color:#808080;\">// The child must be instantiated before it's mounted.<br></span><span style=\"color:#808080;\">      </span>updates = <span style=\"color:#ffc66d;\">enqueue</span>(<br>        updates<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_mountChildAtIndex</span>(<br>          nextChild<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">          </span>mountImages[nextMountIndex]<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">          </span>lastPlacedNode<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">          </span>nextIndex<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">          </span>transaction<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">          </span>context<br>        )<br>      )<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">      </span>nextMountIndex++<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>}<br>    nextIndex++<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>lastPlacedNode = ReactReconciler.<span style=\"color:#ffc66d;\">getHostNode</span>(nextChild)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>}<br>  <span style=\"color:#808080;\">// Remove children that are no longer present.<br></span><span style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(name <span style=\"color:#cc7832;font-weight:bold;\">in </span>removedNodes) {<br>    <span style=\"color:#cc7832;font-weight:bold;\">if </span>(removedNodes.<span style=\"color:#ffc66d;\">hasOwnProperty</span>(name)) {<br>      updates = <span style=\"color:#ffc66d;\">enqueue</span>(<br>        updates<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_unmountChild</span>(prevChildren[name]<span style=\"color:#cc7832;\">, </span>removedNodes[name])<br>      )<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>}<br>  }<br>  <span style=\"color:#cc7832;font-weight:bold;\">if </span>(updates) {<br>    <span style=\"color:#ffc66d;\">processQueue</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>updates)<span style=\"color:#cc7832;\">;//注意这里将上面比较后缓存的变更进行处理更新dom树，使所有变更在浏览器中得以展现，代码参见（src/<font style=\"font-size: 12px; color: rgb(204, 120, 50); font-family: Menlo;\">renderers/dom/stack/client/DOMChildrenOperations.js</font>）的processUpdate<br></span><span style=\"color:#cc7832;\">  </span>}<br>  <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_renderedChildren </span>= nextChildren<span style=\"color:#cc7832;\">;<br></span><br>}<span style=\"color:#cc7832;\">,</span>\n</span></span></pre>\n    React在执行diff算法之前先做了两件事情：\n</div>\n<div>\n    <ol start=\"1\">\n        <li>将新的ReactElement结构树（可能包含很多层）’拍平’，以{ key：xx，value：element}方式返回</li>\n        <li>遍历上一步生成的key——ReactElement映射和原有的key——ReactComponent实例映射做比较，新建或删除ReactComponent。</li>\n    </ol>\n</div>\n<div>经过上面两个步骤生成了新的key——ReactComponent实例，和原有的key——ReactComponent映射进行diff算法。</div>\n<div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#ffc66d;\">_reconcilerUpdateChildren</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br>  prevChildren<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>nextNestedChildrenElements<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>mountImages<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>removedNodes<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>transaction<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>context<br>) {<br>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>nextChildren<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>selfDebugID = <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">;<br></span> //第一步：调用（src/<font style=\"font-size: 12px; color: rgb(169, 183, 198); font-family: Menlo;\">shared/utils/traverseAllChildren.js</font>）对子节点进行深度优先遍历，同时根据子节点所在的层级按照一定命名规则生成唯一key存在object中，这样虽然所有树状结构的子节点被’拍平’存储，但是能保证在diff操作的时候同一层级的子节点进行比较（即连个map中key相同的子节点一定在同一层）<br>  nextChildren = flattenChildren(nextNestedChildrenElements<span style=\"color:#cc7832;\">, </span>selfDebugID)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>ReactChildReconciler.<span style=\"color:#ffc66d;\">updateChildren</span>( //第二步：参见下面详细介绍<br>    prevChildren<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>nextChildren<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>mountImages<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>removedNodes<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>transaction<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_hostContainerInfo</span><span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>context<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>selfDebugID<br>  )<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">return </span>nextChildren<span style=\"color:#cc7832;\">;<br></span>}<span style=\"color:#cc7832;\">,</span>\n</pre>\n    <div>\n\t\t<pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#629755;font-style:italic;\">/**<br></span><span style=\"color:#629755;font-style:italic;\"> * Updates the rendered children and returns a new set of children.<br></span><span style=\"color:#629755;font-style:italic;\"> *<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?object} prevChildren Previously initialized set of children.<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?object} nextChildren Flat child element maps.<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction} transaction<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{object} context<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@return </span><span style=\"color:#629755;font-style:italic;\">{?object} A new set of child instances.<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@internal<br></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\"><span style=\"color:#629755;font-style:italic;\">*/<br></span><span style=\"color:#ffc66d;\">updateChildren</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br>  prevChildren<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>nextChildren<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>mountImages<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>removedNodes<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>transaction<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>hostParent<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>hostContainerInfo<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>context<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>selfDebugID <span style=\"color:#808080;\">// 0 in production and for roots<br></span>) {<br>  <span style=\"color:#808080;\">// We currently don't have a way to track moves here but if we use iterators<br></span><span style=\"color:#808080;\">  // instead of for..in we can zip the iterators and check if an item has<br></span><span style=\"color:#808080;\">  // moved.<br></span><span style=\"color:#808080;\">  // </span><span style=\"color:#a8c023;font-style:italic;\">TODO: If nothing has changed, return the prevChildren object so that we<br></span><span style=\"color:#a8c023;font-style:italic;\">  </span><span style=\"color:#808080;\">// can quickly bailout if nothing has changed.<br></span><span style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(!nextChildren &amp;&amp; !prevChildren) {<br>    <span style=\"color:#cc7832;font-weight:bold;\">return</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>}<br>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>name<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>prevChild<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(name <span style=\"color:#cc7832;font-weight:bold;\">in </span>nextChildren) {<br>    <span style=\"color:#cc7832;font-weight:bold;\">if </span>(!nextChildren.<span style=\"color:#ffc66d;\">hasOwnProperty</span>(name)) {<br>      <span style=\"color:#cc7832;font-weight:bold;\">continue</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>}<br>    prevChild = prevChildren &amp;&amp; prevChildren[name]<span style=\"color:#cc7832;\">; //如果旧映射里找到对应的ReactComponent实例<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>prevElement = prevChild &amp;&amp; prevChild.<span style=\"color:#9876aa;\">_currentElement</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextElement = nextChildren[name]<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(prevChild != <span style=\"color:#cc7832;font-weight:bold;\">null </span>&amp;&amp;<br>        shouldUpdateReactComponent(prevElement<span style=\"color:#cc7832;\">, </span>nextElement)) {//取出实例中的ReactElement与新的做比较，如果类型相同调用实例更新函数<br>      ReactReconciler.<span style=\"color:#ffc66d;\">receiveComponent</span>(<br>        prevChild<span style=\"color:#cc7832;\">, </span>nextElement<span style=\"color:#cc7832;\">, </span>transaction<span style=\"color:#cc7832;\">, </span>context<br>      )<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">      </span>nextChildren[name] = prevChild<span style=\"color:#cc7832;\">; <br></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{ //否则清理旧的ReactComponent实例，加入到removeNodes映射中，初始化新实例加入映射中，调用新实例的mountComponent获得对应的渲染markup加入到<font style=\"font-family: Menlo; background-color: rgb(43, 43, 43); font-size: 12px; color: rgb(169, 183, 198);\">mountImages 。<font style=\"font-family: Menlo; background-color: rgb(43, 43, 43); font-size: 12px; color: rgb(169, 183, 198);\">removeNodes映射和mountImage映射在diff算法执行过程中加入到更新队列然后批量更新dom。</font></font><br>      <span style=\"color:#cc7832;font-weight:bold;\">if </span>(<br>        !ReactFeatureFlags.<span style=\"color:#9876aa;\">prepareNewChildrenBeforeUnmountInStack </span>&amp;&amp;<br>        prevChild<br>      ) {<br>        removedNodes[name] = ReactReconciler.<span style=\"color:#ffc66d;\">getHostNode</span>(prevChild)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span>ReactReconciler.<span style=\"color:#ffc66d;\">unmountComponent</span>(<br>          prevChild<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">          </span><span style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">, </span><span style=\"color:#808080;\">/* safely */<br></span><span style=\"color:#808080;\">          </span><span style=\"color:#cc7832;font-weight:bold;\">false </span><span style=\"color:#808080;\">/* skipLifecycle */<br></span><span style=\"color:#808080;\">        </span>)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">      </span>}<br>      <span style=\"color:#808080;\">// The child must be instantiated before it's mounted.<br></span><span style=\"color:#808080;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextChildInstance = instantiateReactComponent(nextElement<span style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">true</span>)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">      </span>nextChildren[name] = nextChildInstance<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">      </span><span style=\"color:#808080;\">// Creating mount image now ensures refs are resolved in right order<br></span><span style=\"color:#808080;\">      // (see <a href=\"https://github.com/facebook/react/pull/7101\" target=\"_blank\" rel=\"external\">https://github.com/facebook/react/pull/7101</a> for explanation).<br></span><span style=\"color:#808080;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextChildMountImage = ReactReconciler.<span style=\"color:#ffc66d;\">mountComponent</span>(<br>        nextChildInstance<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">        </span>transaction<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">        </span>hostParent<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">        </span>hostContainerInfo<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">        </span>context<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">        </span>selfDebugID<br>      )<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">      </span>mountImages.<span style=\"color:#ffc66d;\">push</span>(nextChildMountImage)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(<br>        ReactFeatureFlags.<span style=\"color:#9876aa;\">prepareNewChildrenBeforeUnmountInStack </span>&amp;&amp;<br>        prevChild<br>      ) {<br>        removedNodes[name] = ReactReconciler.<span style=\"color:#ffc66d;\">getHostNode</span>(prevChild)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span>ReactReconciler.<span style=\"color:#ffc66d;\">unmountComponent</span>(<br>          prevChild<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">          </span><span style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">, </span><span style=\"color:#808080;\">/* safely */<br></span><span style=\"color:#808080;\">          </span><span style=\"color:#cc7832;font-weight:bold;\">false </span><span style=\"color:#808080;\">/* skipLifecycle */<br></span><span style=\"color:#808080;\">        </span>)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">      </span>}<br>    }<br>  }<br>  <span style=\"color:#808080;\">// Unmount children that are no longer present.<br></span><span style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(name <span style=\"color:#cc7832;font-weight:bold;\">in </span>prevChildren) {<br>    <span style=\"color:#cc7832;font-weight:bold;\">if </span>(prevChildren.<span style=\"color:#ffc66d;\">hasOwnProperty</span>(name) &amp;&amp;<br>        !(nextChildren &amp;&amp; nextChildren.<span style=\"color:#ffc66d;\">hasOwnProperty</span>(name))) {<br>      prevChild = prevChildren[name]<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">      </span>removedNodes[name] = ReactReconciler.<span style=\"color:#ffc66d;\">getHostNode</span>(prevChild)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">      </span>ReactReconciler.<span style=\"color:#ffc66d;\">unmountComponent</span>(<br>        prevChild<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">, </span><span style=\"color:#808080;\">/* safely */<br></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">false </span><span style=\"color:#808080;\">/* skipLifecycle */<br></span><span style=\"color:#808080;\">      </span>)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>}<br>  }<br>}<span style=\"color:#cc7832;\">,</span></span></pre>\n    </div>\n    <div><br></div>\n    <div>diff算法原理详解参见：<br></div>\n</div>\n<div><a href=\"https://zhuanlan.zhihu.com/p/20346379?refer=purerender\" target=\"_blank\" rel=\"external\">https://zhuanlan.zhihu.com/p/20346379?refer=purerender</a> 或《深入React技术栈》3.5章（可以找我借）讲得很详细。<br>\n</div>\n<div><br></div>\n","excerpt":"","more":"<div>\n    React通过this.setState方法更新state，当this.setState被调用的时候会根据更新策略执行情况（是否在更新中）来判断是否重新调用render方法还是放到更新队列中。看下setState源码，题外话：React创建组件有三种方式:\n    1）函数方式(无状态组件) 2）React.createClass(es5)  3) extends React.Component(es6)，后两种方式中\n    setState会自动注入到组件中，因此在自定义组件中能通过this.setState直接访问。三种创建方式的区别参见<a\n        href=\"http://www.cnblogs.com/wonyun/p/5930333.html\">这篇文章</a>。<br>\n    <div>——以下代码是React v15.4.2版本——</div>\n</div>\n<div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><br/><span\n        style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Sets a subset of the state. Always use this to mutate<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * state. You should treat `this.state` as immutable.<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * There is no guarantee that `this.state` will be immediately updated, so<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * accessing `this.state` after calling this method may return the old value.<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * There is no guarantee that calls to `setState` will run synchronously,<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * as they may eventually be batched together.  You can provide an optional<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * callback that will be executed when the call to setState is actually<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * completed.<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * When a function is provided to setState, it will be called at some point in<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * the future (not synchronously). It will be called with the up to date<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * component arguments (state, props, context). These values can be different<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * from this.* because your function may be called after receiveProps but before<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * shouldComponentUpdate, and this new state, props, and context will not yet be<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * assigned to this.<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span\n        style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n        style=\"color:#629755;font-style:italic;\">{object|function} partialState Next partial state or function to<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> *        produce next partial state to be merged with current state.<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n        style=\"color:#629755;font-style:italic;\">{?function} callback Called after state is updated.<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@final<br/></span><span\n        style=\"color:#629755;font-weight:bold;font-style:italic;\"/><span\n        style=\"color:#629755;font-style:italic;\">* </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@protected<br/></span><span\n        style=\"color:#629755;font-weight:bold;font-style:italic;\"/><span\n        style=\"color:#629755;font-style:italic;\">*/<br/></span><span style=\"color:#ffc66d;\">ReactComponent</span>.<span\n        style=\"color:#9876aa;\">prototype</span>.<span style=\"color:#ffc66d;\">setState </span>= <span\n        style=\"color:#cc7832;font-weight:bold;\">function</span>(partialState<span\n        style=\"color:#cc7832;\">, </span>callback) {<span style=\"color:#cc7832;\"><br/></span><span\n        style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span\n        style=\"color:#9876aa;\">updater</span>.<span style=\"color:#ffc66d;\">enqueueSetState</span>(<span\n        style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>partialState<span\n        style=\"color:#cc7832;\">, </span>callback<span style=\"color:#cc7832;\">, </span><span\n        style=\"color:#6a8759;\">'setState'</span>)<span style=\"color:#cc7832;\">;<br/></span>}<span\n        style=\"color:#cc7832;\">;</span>\n</pre>\n    <pre style=\"background-color: rgb(43, 43, 43);\"><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(169, 183, 198);\"><span\n            style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Sets a subset of the state. This only exists because _pendingState is<br/></span><span\n            style=\"color:#629755;font-style:italic;\"> * internal. This provides a merging strategy that is not available to deep<br/></span><span\n            style=\"color:#629755;font-style:italic;\"> * properties which is confusing. </span><span\n            style=\"color:#a8c023;font-style:italic;\">TODO: Expose pendingState or don't use it<br/></span><span\n            style=\"color:#a8c023;font-style:italic;\"/><span\n            style=\"color:#629755;font-style:italic;\">* during the merge.<br/></span><span\n            style=\"color:#629755;font-style:italic;\"> *<br/></span><span\n            style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n            style=\"color:#629755;font-style:italic;\">{ReactClass} publicInstance The instance that should rerender.<br/></span><span\n            style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n            style=\"color:#629755;font-style:italic;\">{object} partialState Next partial state to be merged with state.<br/></span><span\n            style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n            style=\"color:#629755;font-style:italic;\">{?function} callback Called after state is updated.<br/></span><span\n            style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n            style=\"color:#629755;font-style:italic;\">{?string} Name of the calling function in the public API.<br/></span><span\n            style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@internal<br/></span><span\n            style=\"color:#629755;font-weight:bold;font-style:italic;\"/><span\n            style=\"color:#629755;font-style:italic;\">*/<br/></span><span style=\"color:#ffc66d;\">enqueueSetState</span>: <span\n            style=\"color:#cc7832;font-weight:bold;\">function</span>(publicInstance<span style=\"color:#cc7832;\">, </span>partialState<span\n            style=\"color:#cc7832;\">, </span>callback<span style=\"color:#cc7832;\">, </span>callerName) {<br/>  </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#cc7832\"><b>//获得组件实例</b></font><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\"><br/>  </font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">internalInstance = </font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">getInternalInstanceReadyForUpdate</span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(<br/>    publicInstance</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(106, 135, 89);\">'setState'<br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(106, 135, 89);\">  </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">)</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\"><br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">if </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(!internalInstance) {<br/>    </font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">return</span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">}<br/><br/>  //初始化state更新队列<br/>  </font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">queue =<br/>    internalInstance.</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_pendingStateQueue </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">||<br/>    (internalInstance.</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_pendingStateQueue </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">= [])</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">queue.</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">push</span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(partialState)</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  //如果setState设置了回调函数，添加到组件实例的队列中<br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">if </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\"\n            color=\"#a9b7c6\">(callback) {<br/>    validateCallback(callback</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">, </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">callerName)</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">if </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(internalInstance.</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_pendingCallbacks</span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">) {<br/>      internalInstance.</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_pendingCallbacks</span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">.</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">push</span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(callback)</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">} </font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">else </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">{<br/>      internalInstance.</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_pendingCallbacks </span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">= [callback]</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font color=\"#a9b7c6\"><font\n            face=\"Menlo\" size=\"2\">}<br/>  }<br/>  <br/>  </font></font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">enqueueUpdate</span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(internalInstance)</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><font\n            style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">}</font><span\n            style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,</span></pre>\n</div>\n<div><font style=\"font-size: 14px;\"><span\n        style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: 'PingFang SC'; color: rgb(69, 69, 69);\">最后调用（</span><span\n        style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(69, 69, 69);\">src/renderers/shared/stack/reconciler/ReactUpdates.js</span><span\n        style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: 'PingFang SC'; color: rgb(69, 69, 69);\">）</span><span\n        style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(69, 69, 69);\">ReactUpdates</span><span\n        style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: 'PingFang SC'; color: rgb(69, 69, 69);\">的enqueueUpdate函数执行更新。</span></font>\n</div>\n<div><font style=\"font-size: 14px;\"><span\n        style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; color: rgb(69, 69, 69);\"/></font><span\n        style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; color: rgb(69, 69, 69);\"><font\n        style=\"font-size: 14px;\"><font face=\"PingFang SC\"><pre\n        style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span\n        style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Mark a component as needing a rerender, adding an optional callback to a<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * list of functions which will be executed once the rerender occurs.<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> */<br/></span><span style=\"color:#cc7832;font-weight:bold;\">function </span><span\n        style=\"color:#ffc66d;\">enqueueUpdate</span>(component) {<br/>  <span\n        style=\"color:#ffc66d;\">ensureInjected</span>()<span style=\"color:#cc7832;\">;</span><span style=\"color:#808080;\"><br/></span><span\n        style=\"color:#808080;\"><br/></span><span style=\"color:#808080;\">  </span><span\n        style=\"color:#cc7832;font-weight:bold;\">if </span>(!batchingStrategy.<span\n        style=\"color:#9876aa;\">isBatchingUpdates</span>) {//如果当前没有处于更新中，<br/>    batchingStrategy.<span\n        style=\"color:#ffc66d;\">batchedUpdates</span>(<span style=\"color:#ffc66d;\">enqueueUpdate</span><span\n        style=\"color:#cc7832;\">, </span>component)<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">return</span><span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><br/>  dirtyComponents.<span\n        style=\"color:#ffc66d;\">push</span>(component)<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(component.<span\n        style=\"color:#9876aa;\">_updateBatchNumber </span>== <span style=\"color:#cc7832;font-weight:bold;\">null</span>) {<br/>    component.<span\n        style=\"color:#9876aa;\">_updateBatchNumber </span>= updateBatchNumber + <span style=\"color:#6897bb;\">1</span><span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/>}\n</pre></font></font></span><br/></div>\n<div>\n    batchingStrategy在ReactDefaultBatchingStrategy.js（src/renderers/shared/stack/reconciler/ReactDefaultBatchingStrategy.js），这里要介绍下React的事务，事务是将需要执行的方法封装起来，在通过perform方法执行，以保证在执行目标方法前，事务中的一组initialize方法限制性，目标方法执行后，一组close方法能够得到执行，参见下图（src/renderers/shared/stack/reconciler/Transaction.js中）：\n</div>\n<div><img\n        src=\"/images/2017-02-14/3C5D0315-7718-4DC6-89B9-0C7A281294F2.png\"\n        height=\"670\" width=\"1066\"/><br/></div>\n<div>再回到我们的更新策略对象中</div>\n<div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><br/><span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>RESET_BATCHED_UPDATES = {<br/>  <span style=\"color:#9876aa;\">initialize</span>: emptyFunction<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span><span\n        style=\"color:#ffc66d;\">close</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>() {<br/>    ReactDefaultBatchingStrategy.<span\n        style=\"color:#9876aa;\">isBatchingUpdates </span>= <span style=\"color:#cc7832;font-weight:bold;\">false</span><span\n        style=\"color:#cc7832;\">;//<font\n        style=\"font-family: Menlo; background-color: rgb(43, 43, 43); font-size: 12px; color: rgb(169, 183, 198);\">事务执行结束后重置当前更新状态</font><br/></span><span\n        style=\"color:#cc7832;\">  </span>}<span style=\"color:#cc7832;\">,<br/></span>}<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\"><br/></span><span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>FLUSH_BATCHED_UPDATES = {<br/>  <span style=\"color:#9876aa;\">initialize</span>: emptyFunction<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#9876aa;\">close</span>: ReactUpdates.<span\n        style=\"color:#ffc66d;\">flushBatchedUpdates</span>.<span style=\"color:#ffc66d;\">bind</span>(ReactUpdates)<span\n        style=\"color:#cc7832;\">,//遍历dirtyComponent数组中的组件，逐个更新<br/></span>}<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;font-weight:bold;\">var </span>TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES<span\n        style=\"color:#cc7832;\">, </span>RESET_BATCHED_UPDATES]<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;font-weight:bold;\">function </span><span\n        style=\"color:#ffc66d;\">ReactDefaultBatchingStrategyTransaction</span>() {<br/>  <span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">reinitializeTransaction</span>()<span\n        style=\"color:#cc7832;\">;<br/></span>}<br/><br/>Object.<span style=\"color:#ffc66d;\">assign</span>(<br/>  <span\n        style=\"color:#ffc66d;\">ReactDefaultBatchingStrategyTransaction</span>.<span\n        style=\"color:#9876aa;\">prototype</span><span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">  </span>Transaction<span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">  </span>{<br/>    <span style=\"color:#ffc66d;\">getTransactionWrappers</span>: <span\n        style=\"color:#cc7832;font-weight:bold;\">function</span>() { //给事务添加wapper<br/>      <span\n        style=\"color:#cc7832;font-weight:bold;\">return </span>TRANSACTION_WRAPPERS<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>}<br/>)<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>transaction = <span\n        style=\"color:#cc7832;font-weight:bold;\">new </span><span style=\"color:#ffc66d;\">ReactDefaultBatchingStrategyTransaction</span>()<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>ReactDefaultBatchingStrategy = {<br/>  <span\n        style=\"color:#9876aa;\">isBatchingUpdates</span>: <span style=\"color:#cc7832;font-weight:bold;\">false</span><span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\"><br/></span><span\n        style=\"color:#cc7832;\">  </span><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span\n        style=\"color:#629755;font-style:italic;\">   * Call the provided function in a context within which calls to `setState`<br/></span><span\n        style=\"color:#629755;font-style:italic;\">   * and friends are batched such that components aren't updated unnecessarily.<br/></span><span\n        style=\"color:#629755;font-style:italic;\">   */<br/></span><span\n        style=\"color:#629755;font-style:italic;\">  </span><span style=\"color:#ffc66d;\">batchedUpdates</span>: <span\n        style=\"color:#cc7832;font-weight:bold;\">function</span>(callback<span style=\"color:#cc7832;\">, </span>a<span\n        style=\"color:#cc7832;\">, </span>b<span style=\"color:#cc7832;\">, </span>c<span style=\"color:#cc7832;\">, </span>d<span\n        style=\"color:#cc7832;\">, </span>e) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>alreadyBatchingUpdates = ReactDefaultBatchingStrategy.<span\n        style=\"color:#9876aa;\">isBatchingUpdates</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span\n        style=\"color:#cc7832;\">    </span>ReactDefaultBatchingStrategy.<span style=\"color:#9876aa;\">isBatchingUpdates </span>= <span\n        style=\"color:#cc7832;font-weight:bold;\">true</span><span style=\"color:#cc7832;\">;//设置当前正在处于更新状态<br/></span><span\n        style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// The code is written this way to avoid extra allocations<br/></span><span\n        style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(alreadyBatchingUpdates) { //个人认为这里是确保同一时间只有一个事务在更新组件，比如一个组件几乎无间隔地调用两次setState，欢迎讨论<br/>      <span\n        style=\"color:#cc7832;font-weight:bold;\">return </span>callback(a<span style=\"color:#cc7832;\">, </span>b<span\n        style=\"color:#cc7832;\">, </span>c<span style=\"color:#cc7832;\">, </span>d<span style=\"color:#cc7832;\">, </span>e)<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>} <span\n        style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>      <span\n        style=\"color:#cc7832;font-weight:bold;\">return </span>transaction.<span style=\"color:#ffc66d;\">perform</span>(callback<span\n        style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">, </span>a<span\n        style=\"color:#cc7832;\">, </span>b<span style=\"color:#cc7832;\">, </span>c<span style=\"color:#cc7832;\">, </span>d<span\n        style=\"color:#cc7832;\">, </span>e)<span style=\"color:#cc7832;\">;//注意这里比较有意思，把<font\n        style=\"font-family: Menlo; font-size: 12px; background-color: rgb(43, 43, 43); color: rgb(255, 198, 109);\">enqueueUpdate作为callback调用，但这时<font\n        style=\"font-family: Menlo; font-size: 12px; background-color: rgb(43, 43, 43); color: rgb(152, 118, 170);\">isBatchingUpdates是true，因此<font\n        style=\"font-family: Menlo; background-color: rgb(43, 43, 43); font-size: 12px; color: rgb(255, 198, 109);\">enqueueUpdate做的事就是把这个要更新的component加入到dirtyComponent数组中，然后在事务wrapper中的close方法</font></font></font></span><span\n        style=\"font-size: 9pt;\">ReactUpdates.</span><span style=\"font-size: 9pt; color: rgb(255, 198, 109);\">flushBatchedUpdates遍历dirtyComponent数组进行更新。</span><span\n        style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span>}<br/>  }<span\n        style=\"color:#cc7832;\">,<br/></span>}<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\"><br/></span>module.<span\n        style=\"color:#ffc66d;\">exports </span>= ReactDefaultBatchingStrategy<span style=\"color:#cc7832;\">;<br/></span>\n</pre>\n    由这段代码可以看到，真正执行更新的实在事务的某个wapper的close方法中，即ReactUpdates.flushBatchedUpdates中进行更新的：\n    <pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.8pt;\"><span\n            style=\"color:#cc7832;font-weight:bold;\">var </span><span style=\"color:#ffc66d;\">flushBatchedUpdates </span>= <span\n            style=\"color:#cc7832;font-weight:bold;\">function</span>() {<br/>  <span style=\"color:#808080;\">// ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents<br/></span><span\n            style=\"color:#808080;\">  // array and perform any updates enqueued by mount-ready handlers (i.e.,<br/></span><span\n            style=\"color:#808080;\">  // componentDidUpdate) but we need to check here too in order to catch<br/></span><span\n            style=\"color:#808080;\">  // updates enqueued by setState callbacks.<br/></span><span\n            style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">while </span>(dirtyComponents.<span\n            style=\"color:#9876aa;\">length</span>) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>transaction = <span\n            style=\"color:#ffc66d;\">ReactUpdatesFlushTransaction</span>.<span style=\"color:#ffc66d;\">getPooled</span>()<span\n            style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>transaction.<span\n            style=\"color:#ffc66d;\">perform</span>(<span style=\"color:#ffc66d;\">runBatchedUpdates</span><span\n            style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">null</span><span\n            style=\"color:#cc7832;\">, </span>transaction)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span\n            style=\"color:#ffc66d;\">ReactUpdatesFlushTransaction</span>.<span\n            style=\"color:#ffc66d;\">release</span>(transaction)<span style=\"color:#cc7832;\">;<br/></span><span\n            style=\"color:#cc7832;\">  </span>}<br/>}<span style=\"color:#cc7832;\">;</span>\n</pre>\n</div>\n<div>注意这里由用到一个事务ReactUpdatesFlushTransaction：</div>\n<div><pre style=\"background-color: rgb(43, 43, 43);\"><font face=\"Menlo\" color=\"#a9b7c6\" size=\"3\"><br/></font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">var </span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">NESTED_UPDATES = {<br/>  </font><span\n        style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">initialize</span><font face=\"Menlo\"\n                                                                                                        color=\"#a9b7c6\"\n                                                                                                        size=\"3\">: </font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">function</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">() {<br/>    </font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">this</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span\n        style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">dirtyComponentsLength </span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">= dirtyComponents.</font><span\n        style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">length</span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">  </span><font face=\"Menlo\" color=\"#a9b7c6\"\n                                                                                               size=\"3\">}</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">,<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">  </span><span\n        style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">close</span><font face=\"Menlo\"\n                                                                                                   color=\"#a9b7c6\"\n                                                                                                   size=\"3\">: </font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">function</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">() {<br/>    </font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">if </span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">(</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">this</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span\n        style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">dirtyComponentsLength </span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">!== dirtyComponents.</font><span\n        style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">length</span><font face=\"Menlo\"\n                                                                                                    color=\"#a9b7c6\" size=\"3\">) {<br/>      </font><span\n        style=\"color: rgb(128, 128, 128); font-family: Menlo; font-size: 9.8pt;\">// Additional updates were enqueued by componentDidUpdate handlers or<br/></span><span\n        style=\"color: rgb(128, 128, 128); font-family: Menlo; font-size: 9.8pt;\">      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run<br/></span><span\n        style=\"color: rgb(128, 128, 128); font-family: Menlo; font-size: 9.8pt;\">      // these new updates so that if A's componentDidUpdate calls setState on<br/></span><span\n        style=\"color: rgb(128, 128, 128); font-family: Menlo; font-size: 9.8pt;\">      // B, B will update before the callback A's updater provided when calling<br/></span><font\n        face=\"Menlo\" color=\"#808080\" size=\"3\">      // setState.在close之前再检查一遍</font><font face=\"Menlo\" color=\"#808080\">dirtyComponent</font><font\n        face=\"Menlo\" color=\"#808080\" size=\"3\">是否有新的要更新的组件，有则更新，上面注释中将的场景应该是比如在A组件的setState传入了第二个参数回调函数，如果在A的componentDidUpdate中调用了setState改变了它包含的B组件的状态（这里假设只改变B 的状态），为了保证回调函数能访问到更新后的B组件，继续执行dirtyComponent中后插入的组件（B）然后更新B组件<br/></font><span\n        style=\"color: rgb(128, 128, 128); font-family: Menlo; font-size: 9.8pt;\">      </span><font face=\"Menlo\"\n                                                                                                    color=\"#a9b7c6\" size=\"3\">dirtyComponents.</font><span\n        style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">splice</span><font face=\"Menlo\"\n                                                                                                    color=\"#a9b7c6\"\n                                                                                                    size=\"3\">(</font><span\n        style=\"color: rgb(104, 151, 187); font-family: Menlo; font-size: 9.8pt;\">0</span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">, </span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">this</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span\n        style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">dirtyComponentsLength</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">)</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">      </span><span\n        style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">flushBatchedUpdates</span><font face=\"Menlo\"\n                                                                                                                 color=\"#a9b7c6\"\n                                                                                                                 size=\"3\">()</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">    </span><font face=\"Menlo\" color=\"#a9b7c6\"\n                                                                                                 size=\"3\">} </font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">else </span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">{<br/>      dirtyComponents.</font><span\n        style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">length </span><font face=\"Menlo\"\n                                                                                                     color=\"#a9b7c6\" size=\"3\">= </font><span\n        style=\"color: rgb(104, 151, 187); font-family: Menlo; font-size: 9.8pt;\">0</span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">    </span><font face=\"Menlo\" color=\"#a9b7c6\"\n                                                                                                 size=\"3\">}<br/>  }</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">,<br/></span><font face=\"Menlo\"\n                                                                                                   color=\"#a9b7c6\"\n                                                                                                   size=\"3\">}</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\"><br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">var </span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">TRANSACTION_WRAPPERS = [NESTED_UPDATES]</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\"><br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">function </span><span\n        style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">ReactUpdatesFlushTransaction</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">() {<br/>  </font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">this</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span\n        style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">reinitializeTransaction</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">()</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">  </span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">this</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span\n        style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">dirtyComponentsLength </span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">= </font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">null</span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">  </span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">this</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span\n        style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">reconcileTransaction </span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">= ReactUpdates.</font><span\n        style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">ReactReconcileTransaction</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span\n        style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">getPooled</span><font face=\"Menlo\"\n                                                                                                       color=\"#a9b7c6\"\n                                                                                                       size=\"3\">(<br/>    </font><span\n        style=\"color: rgb(128, 128, 128); font-family: Menlo; font-size: 9.8pt;\">/* useCreateElement */ </span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">true<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">  </span><font face=\"Menlo\"\n                                                                                                                  color=\"#a9b7c6\"\n                                                                                                                  size=\"3\">)</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><font face=\"Menlo\"\n                                                                                                   color=\"#a9b7c6\"\n                                                                                                   size=\"3\">}<br/><br/>Object.</font><span\n        style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">assign</span><font face=\"Menlo\"\n                                                                                                    color=\"#a9b7c6\" size=\"3\">(<br/>  </font><span\n        style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">ReactUpdatesFlushTransaction</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">.</font><span\n        style=\"color: rgb(152, 118, 170); font-family: Menlo; font-size: 9.8pt;\">prototype</span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">,<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">  </span><font face=\"Menlo\" color=\"#a9b7c6\"\n                                                                                               size=\"3\">Transaction</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">,<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">  </span><font face=\"Menlo\" color=\"#a9b7c6\"\n                                                                                               size=\"3\">{<br/>    </font><span\n        style=\"color: rgb(255, 198, 109); font-family: Menlo; font-size: 9.8pt;\">getTransactionWrappers</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">: </font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">function</span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">() { //这里将wapper加到事务中<br/>      </font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt; font-weight: bold;\">return </span><font\n        face=\"Menlo\" color=\"#a9b7c6\" size=\"3\">TRANSACTION_WRAPPERS</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">    </span><font face=\"Menlo\" color=\"#a9b7c6\"\n                                                                                                 size=\"3\">}</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">,<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">    //略去其他……<br/></span><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">  </span><font face=\"Menlo\" color=\"#a9b7c6\"\n                                                                                               size=\"3\">}<br/>)</font><span\n        style=\"color: rgb(204, 120, 50); font-family: Menlo; font-size: 9.8pt;\">;<br/></span><font face=\"Menlo\"\n                                                                                                   color=\"#a9b7c6\" size=\"3\"\n/></pre>\n    现在我们的更新事务结构如下图所示：\n</div>\n<div><img\n        src=\"/images/2017-02-14/FE612576-70BB-4B9C-9343-07DFAC12DCB4.png\"\n        height=\"690\" width=\"1766\"/><br/></div>\n<div>重点看下runBatchedUpdate方法是如何更新组件的。</div>\n<div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.8pt;\"><br/><span\n        style=\"color:#cc7832;font-weight:bold;\">function </span><span style=\"color:#ffc66d;\">runBatchedUpdates</span>(transaction) {<br/>  <span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>len = transaction.<span style=\"color:#9876aa;\">dirtyComponentsLength</span><span\n        style=\"color:#cc7832;\">;</span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span\n        style=\"color:#808080;\">// Since reconciling a component higher in the owner hierarchy usually (not<br/></span><span\n        style=\"color:#808080;\">  // always -- see shouldComponentUpdate()) will reconcile children, reconcile<br/></span><span\n        style=\"color:#808080;\">  // them before their children by sorting the array.<br/></span><span\n        style=\"color:#808080;\">  </span>dirtyComponents.<span style=\"color:#ffc66d;\">sort</span>(<span style=\"color:#ffc66d;\">mountOrderComparator</span>)<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span\n        style=\"color:#cc7832;\">  </span><span style=\"color:#808080;\">// Any updates enqueued while reconciling must be performed after this entire<br/></span><span\n        style=\"color:#808080;\">  // batch. Otherwise, if dirtyComponents is [A, B] where A has children B and<br/></span><span\n        style=\"color:#808080;\">  // C, B could update twice in a single batch if C's render enqueues an update<br/></span><span\n        style=\"color:#808080;\">  // to B (since B would have already updated, we should skip it, and the only<br/></span><span\n        style=\"color:#808080;\">  // way we can know to do so is by checking the batch counter).<br/></span><span\n        style=\"color:#808080;\">  </span>updateBatchNumber++<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span\n        style=\"color:#cc7832;font-weight:bold;\">for </span>(<span style=\"color:#cc7832;font-weight:bold;\">var </span>i = <span\n        style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">; </span>i &lt; len<span style=\"color:#cc7832;\">; </span>i++) {<br/>    <span\n        style=\"color:#808080;\">// If a component is unmounted before pending changes apply, it will still<br/></span><span\n        style=\"color:#808080;\">    // be here, but we assume that it has cleared its _pendingCallbacks and<br/></span><span\n        style=\"color:#808080;\">    // that performUpdateIfNecessary is a noop.<br/></span><span\n        style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>component = dirtyComponents[i]<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">   </span><br/>    ReactReconciler.<span\n        style=\"color:#ffc66d;\">performUpdateIfNecessary</span>(<br/>      component<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">      </span>transaction.<span\n        style=\"color:#9876aa;\">reconcileTransaction</span><span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">      </span>updateBatchNumber<br/>    )<span style=\"color:#cc7832;\">;<br/></span><br/>  }<br/>}\n</pre>\n</div>\n<div>遍历dirtyComponent数组，对每个component实例调用performUpdateIfNecessary，</div>\n<div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span\n        style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * is set, update the component.<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span\n        style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n        style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction} transaction<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@internal<br/></span><span\n        style=\"color:#629755;font-weight:bold;font-style:italic;\"/><span\n        style=\"color:#629755;font-style:italic;\">*/<br/></span>performUpdateIfNecessary: <span\n        style=\"color:#cc7832;font-weight:bold;\">function</span>(transaction) {<br/>  <span\n        style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span\n        style=\"color:#9876aa;\">_pendingElement </span>!= <span style=\"color:#cc7832;font-weight:bold;\">null</span>) { //如果渲染的ReactElement发生变化更新渲染的ReactElement<br/>    ReactReconciler.<span\n        style=\"color:#ffc66d;\">receiveComponent</span>(<br/>      <span\n        style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span\n        style=\"color:#9876aa;\">_pendingElement</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">      </span>transaction<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">      </span><span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_context<br/></span><span\n        style=\"color:#9876aa;\">    </span>)<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span>} <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(<span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingStateQueue </span>!== <span\n        style=\"color:#cc7832;font-weight:bold;\">null </span>|| <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span\n        style=\"color:#9876aa;\">_pendingForceUpdate</span>) {//如果只是状态发生变化<br/>    <span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span\n        style=\"color:#9876aa;\">updateComponent</span>( //这里调用diff算法<br/>      transaction<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">      </span><span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span><span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">      </span><span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span><span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">      </span><span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_context</span><span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">      </span><span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_context<br/></span><span\n        style=\"color:#9876aa;\">    </span>)<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>    <span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>callbacks = <span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingCallbacks</span><span\n        style=\"color:#cc7832;\">; <br/></span><span style=\"color:#cc7832;\">    </span><span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingCallbacks </span>= <span\n        style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">    </span><span\n        style=\"color:#cc7832;font-weight:bold;\">if </span>(callbacks) {<br/>      <span\n        style=\"color:#cc7832;font-weight:bold;\">for </span>(<span style=\"color:#cc7832;font-weight:bold;\">var </span>j = <span\n        style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">; </span>j &lt; callbacks.<span style=\"color:#9876aa;\">length</span><span\n        style=\"color:#cc7832;\">; </span>j++) {<br/>        transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span\n        style=\"color:#ffc66d;\">enqueue</span>(<br/>          callbacks[j]<span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">          </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span\n        style=\"color:#ffc66d;\">getPublicInstance</span>()<br/>        )<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">      </span>}<br/>    }<br/>    <span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_updateBatchNumber </span>= <span\n        style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span>}<br/>}<span style=\"color:#cc7832;\">,<br/></span>\n</pre>\n</div>\n<div><br/></div>\n<div>所以整个setState执行流程参见下图：</div>\n<div><br/></div>\n<div><img\n        src=\"/images/2017-02-14/xxx.png\"\n        height=\"656\" width=\"614\"/><br/></div>\n<div>diff算法部分源码在（src/renderers/shared/stack/reconciler/ReactMultiChild.js）</div>\n<div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span\n        style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span\n        style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n        style=\"color:#629755;font-style:italic;\">{?object} nextNestedChildrenElements Nested child element maps.<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n        style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction} transaction<br/></span><span\n        style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@final<br/></span><span\n        style=\"color:#629755;font-weight:bold;font-style:italic;\"/><span\n        style=\"color:#629755;font-style:italic;\">* </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@protected<br/></span><span\n        style=\"color:#629755;font-weight:bold;font-style:italic;\"/><span\n        style=\"color:#629755;font-style:italic;\">*/<br/></span><span style=\"color:#ffc66d;\">_updateChildren</span>: <span\n        style=\"color:#cc7832;font-weight:bold;\">function</span>(nextNestedChildrenElements<span\n        style=\"color:#cc7832;\">, </span>transaction<span style=\"color:#cc7832;\">, </span>context) {<br/>  <span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>prevChildren = <span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_renderedChildren</span><span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>removedNodes = {}<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>mountImages = []<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>nextChildren = <span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_reconcilerUpdateChildren</span>(  &lt;————— 1 下面详细介绍（注意mountImages和removedNode都是在这个函数赋值的）<br/>    prevChildren<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>nextNestedChildrenElements<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>mountImages<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>removedNodes<span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">    </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>context<br/>  )<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span\n        style=\"color:#cc7832;font-weight:bold;\">if </span>(!nextChildren &amp;&amp; !prevChildren) {<br/>    <span\n        style=\"color:#cc7832;font-weight:bold;\">return</span><span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span>}<br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>updates = <span\n        style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>name<span\n        style=\"color:#cc7832;\">;//以下是diff算法部分，讲解参见博客链接<br/></span><span style=\"color:#cc7832;\">  </span><span\n        style=\"color:#808080;\">// `nextIndex` will increment for each child in `nextChildren`, but<br/></span><span\n        style=\"color:#808080;\">  // `lastIndex` will be the last index visited in `prevChildren`.<br/></span><span\n        style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextIndex = <span\n        style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>lastIndex = <span style=\"color:#6897bb;\">0</span><span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#808080;\">// `nextMountIndex` will increment for each newly mounted child.<br/></span><span\n        style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextMountIndex = <span\n        style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>lastPlacedNode = <span\n        style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(name <span\n        style=\"color:#cc7832;font-weight:bold;\">in </span>nextChildren) {<br/>    <span\n        style=\"color:#cc7832;font-weight:bold;\">if </span>(!nextChildren.<span style=\"color:#ffc66d;\">hasOwnProperty</span>(name)) {<br/>      <span\n        style=\"color:#cc7832;font-weight:bold;\">continue</span><span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">    </span>}<br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>prevChild = prevChildren &amp;&amp; prevChildren[name]<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>nextChild = nextChildren[name]<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span\n        style=\"color:#cc7832;font-weight:bold;\">if </span>(prevChild === nextChild) {<br/>      updates = <span\n        style=\"color:#ffc66d;\">enqueue</span>(<br/>        updates<span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span\n        style=\"color:#ffc66d;\">moveChild</span>(prevChild<span style=\"color:#cc7832;\">, </span>lastPlacedNode<span\n        style=\"color:#cc7832;\">, </span>nextIndex<span style=\"color:#cc7832;\">, </span>lastIndex)<br/>      )<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>lastIndex = <span\n        style=\"color:#9876aa;\">Math</span>.<span style=\"color:#ffc66d;\">max</span>(prevChild.<span style=\"color:#9876aa;\">_mountIndex</span><span\n        style=\"color:#cc7832;\">, </span>lastIndex)<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">      </span>prevChild.<span style=\"color:#9876aa;\">_mountIndex </span>= nextIndex<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>} <span\n        style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>      <span\n        style=\"color:#cc7832;font-weight:bold;\">if </span>(prevChild) {<br/>        <span style=\"color:#808080;\">// Update `lastIndex` before `_mountIndex` gets unset by unmounting.<br/></span><span\n        style=\"color:#808080;\">        </span>lastIndex = <span style=\"color:#9876aa;\">Math</span>.<span\n        style=\"color:#ffc66d;\">max</span>(prevChild.<span style=\"color:#9876aa;\">_mountIndex</span><span\n        style=\"color:#cc7832;\">, </span>lastIndex)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span\n        style=\"color:#808080;\">// The `removedNodes` loop below will actually remove the child.<br/></span><span\n        style=\"color:#808080;\">      </span>}<br/>      <span style=\"color:#808080;\">// The child must be instantiated before it's mounted.<br/></span><span\n        style=\"color:#808080;\">      </span>updates = <span style=\"color:#ffc66d;\">enqueue</span>(<br/>        updates<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span><span\n        style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_mountChildAtIndex</span>(<br/>          nextChild<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">          </span>mountImages[nextMountIndex]<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">          </span>lastPlacedNode<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">          </span>nextIndex<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">          </span>transaction<span\n        style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">          </span>context<br/>        )<br/>      )<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>nextMountIndex++<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/>    nextIndex++<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>lastPlacedNode = ReactReconciler.<span\n        style=\"color:#ffc66d;\">getHostNode</span>(nextChild)<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span>}<br/>  <span\n        style=\"color:#808080;\">// Remove children that are no longer present.<br/></span><span\n        style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(name <span\n        style=\"color:#cc7832;font-weight:bold;\">in </span>removedNodes) {<br/>    <span\n        style=\"color:#cc7832;font-weight:bold;\">if </span>(removedNodes.<span style=\"color:#ffc66d;\">hasOwnProperty</span>(name)) {<br/>      updates = <span\n        style=\"color:#ffc66d;\">enqueue</span>(<br/>        updates<span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span\n        style=\"color:#ffc66d;\">_unmountChild</span>(prevChildren[name]<span style=\"color:#cc7832;\">, </span>removedNodes[name])<br/>      )<span\n        style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/>  }<br/>  <span\n        style=\"color:#cc7832;font-weight:bold;\">if </span>(updates) {<br/>    <span style=\"color:#ffc66d;\">processQueue</span>(<span\n        style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>updates)<span\n        style=\"color:#cc7832;\">;//注意这里将上面比较后缓存的变更进行处理更新dom树，使所有变更在浏览器中得以展现，代码参见（src/<font\n        style=\"font-size: 12px; color: rgb(204, 120, 50); font-family: Menlo;\">renderers/dom/stack/client/DOMChildrenOperations.js</font>）的processUpdate<br/></span><span\n        style=\"color:#cc7832;\">  </span>}<br/>  <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span\n        style=\"color:#9876aa;\">_renderedChildren </span>= nextChildren<span style=\"color:#cc7832;\">;<br/></span><br/>}<span\n        style=\"color:#cc7832;\">,</span>\n</pre>\n    React在执行diff算法之前先做了两件事情：\n</div>\n<div>\n    <ol start=\"1\">\n        <li>将新的ReactElement结构树（可能包含很多层）’拍平’，以{ key：xx，value：element}方式返回</li>\n        <li>遍历上一步生成的key——ReactElement映射和原有的key——ReactComponent实例映射做比较，新建或删除ReactComponent。</li>\n    </ol>\n</div>\n<div>经过上面两个步骤生成了新的key——ReactComponent实例，和原有的key——ReactComponent映射进行diff算法。</div>\n<div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span\n        style=\"color:#ffc66d;\">_reconcilerUpdateChildren</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br/>  prevChildren<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>nextNestedChildrenElements<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>mountImages<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>removedNodes<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>transaction<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>context<br/>) {<br/>  <span\n        style=\"color:#cc7832;font-weight:bold;\">var </span>nextChildren<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>selfDebugID = <span\n        style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">;<br/></span> //第一步：调用（src/<font\n        style=\"font-size: 12px; color: rgb(169, 183, 198); font-family: Menlo;\">shared/utils/traverseAllChildren.js</font>）对子节点进行深度优先遍历，同时根据子节点所在的层级按照一定命名规则生成唯一key存在object中，这样虽然所有树状结构的子节点被’拍平’存储，但是能保证在diff操作的时候同一层级的子节点进行比较（即连个map中key相同的子节点一定在同一层）<br/>  nextChildren = flattenChildren(nextNestedChildrenElements<span\n        style=\"color:#cc7832;\">, </span>selfDebugID)<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span>ReactChildReconciler.<span style=\"color:#ffc66d;\">updateChildren</span>( //第二步：参见下面详细介绍<br/>    prevChildren<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>nextChildren<span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">    </span>mountImages<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>removedNodes<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>transaction<span\n        style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span><span\n        style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span\n        style=\"color:#9876aa;\">_hostContainerInfo</span><span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">    </span>context<span style=\"color:#cc7832;\">,<br/></span><span\n        style=\"color:#cc7832;\">    </span>selfDebugID<br/>  )<span style=\"color:#cc7832;\">;<br/></span><span\n        style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">return </span>nextChildren<span\n        style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">,</span>\n</pre>\n    <div>\n\t\t<pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span\n                style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Updates the rendered children and returns a new set of children.<br/></span><span\n                style=\"color:#629755;font-style:italic;\"> *<br/></span><span\n                style=\"color:#629755;font-style:italic;\"> * </span><span\n                style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n                style=\"color:#629755;font-style:italic;\">{?object} prevChildren Previously initialized set of children.<br/></span><span\n                style=\"color:#629755;font-style:italic;\"> * </span><span\n                style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n                style=\"color:#629755;font-style:italic;\">{?object} nextChildren Flat child element maps.<br/></span><span\n                style=\"color:#629755;font-style:italic;\"> * </span><span\n                style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n                style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction} transaction<br/></span><span\n                style=\"color:#629755;font-style:italic;\"> * </span><span\n                style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span\n                style=\"color:#629755;font-style:italic;\">{object} context<br/></span><span\n                style=\"color:#629755;font-style:italic;\"> * </span><span\n                style=\"color:#629755;font-weight:bold;font-style:italic;\">@return </span><span\n                style=\"color:#629755;font-style:italic;\">{?object} A new set of child instances.<br/></span><span\n                style=\"color:#629755;font-style:italic;\"> * </span><span\n                style=\"color:#629755;font-weight:bold;font-style:italic;\">@internal<br/></span><span\n                style=\"color:#629755;font-weight:bold;font-style:italic;\"/><span style=\"color:#629755;font-style:italic;\">*/<br/></span><span\n                style=\"color:#ffc66d;\">updateChildren</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br/>  prevChildren<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>nextChildren<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>mountImages<span style=\"color:#cc7832;\">,<br/></span><span\n                style=\"color:#cc7832;\">  </span>removedNodes<span style=\"color:#cc7832;\">,<br/></span><span\n                style=\"color:#cc7832;\">  </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>hostParent<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>hostContainerInfo<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>context<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>selfDebugID <span\n                style=\"color:#808080;\">// 0 in production and for roots<br/></span>) {<br/>  <span style=\"color:#808080;\">// We currently don't have a way to track moves here but if we use iterators<br/></span><span\n                style=\"color:#808080;\">  // instead of for..in we can zip the iterators and check if an item has<br/></span><span\n                style=\"color:#808080;\">  // moved.<br/></span><span style=\"color:#808080;\">  // </span><span\n                style=\"color:#a8c023;font-style:italic;\">TODO: If nothing has changed, return the prevChildren object so that we<br/></span><span\n                style=\"color:#a8c023;font-style:italic;\">  </span><span style=\"color:#808080;\">// can quickly bailout if nothing has changed.<br/></span><span\n                style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(!nextChildren &amp;&amp; !prevChildren) {<br/>    <span\n                style=\"color:#cc7832;font-weight:bold;\">return</span><span style=\"color:#cc7832;\">;<br/></span><span\n                style=\"color:#cc7832;\">  </span>}<br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>name<span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span\n                style=\"color:#cc7832;font-weight:bold;\">var </span>prevChild<span style=\"color:#cc7832;\">;<br/></span><span\n                style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(name <span\n                style=\"color:#cc7832;font-weight:bold;\">in </span>nextChildren) {<br/>    <span\n                style=\"color:#cc7832;font-weight:bold;\">if </span>(!nextChildren.<span\n                style=\"color:#ffc66d;\">hasOwnProperty</span>(name)) {<br/>      <span style=\"color:#cc7832;font-weight:bold;\">continue</span><span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/>    prevChild = prevChildren &amp;&amp; prevChildren[name]<span\n                style=\"color:#cc7832;\">; //如果旧映射里找到对应的ReactComponent实例<br/></span><span style=\"color:#cc7832;\">    </span><span\n                style=\"color:#cc7832;font-weight:bold;\">var </span>prevElement = prevChild &amp;&amp; prevChild.<span\n                style=\"color:#9876aa;\">_currentElement</span><span style=\"color:#cc7832;\">;<br/></span><span\n                style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextElement = nextChildren[name]<span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span\n                style=\"color:#cc7832;font-weight:bold;\">if </span>(prevChild != <span\n                style=\"color:#cc7832;font-weight:bold;\">null </span>&amp;&amp;<br/>        shouldUpdateReactComponent(prevElement<span\n                style=\"color:#cc7832;\">, </span>nextElement)) {//取出实例中的ReactElement与新的做比较，如果类型相同调用实例更新函数<br/>      ReactReconciler.<span\n                style=\"color:#ffc66d;\">receiveComponent</span>(<br/>        prevChild<span style=\"color:#cc7832;\">, </span>nextElement<span\n                style=\"color:#cc7832;\">, </span>transaction<span style=\"color:#cc7832;\">, </span>context<br/>      )<span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>nextChildren[name] = prevChild<span\n                style=\"color:#cc7832;\">; <br/></span><span style=\"color:#cc7832;\">    </span>} <span\n                style=\"color:#cc7832;font-weight:bold;\">else </span>{ //否则清理旧的ReactComponent实例，加入到removeNodes映射中，初始化新实例加入映射中，调用新实例的mountComponent获得对应的渲染markup加入到<font\n                style=\"font-family: Menlo; background-color: rgb(43, 43, 43); font-size: 12px; color: rgb(169, 183, 198);\">mountImages 。<font\n                style=\"font-family: Menlo; background-color: rgb(43, 43, 43); font-size: 12px; color: rgb(169, 183, 198);\">removeNodes映射和mountImage映射在diff算法执行过程中加入到更新队列然后批量更新dom。</font></font><br/>      <span\n                style=\"color:#cc7832;font-weight:bold;\">if </span>(<br/>        !ReactFeatureFlags.<span style=\"color:#9876aa;\">prepareNewChildrenBeforeUnmountInStack </span>&amp;&amp;<br/>        prevChild<br/>      ) {<br/>        removedNodes[name] = ReactReconciler.<span\n                style=\"color:#ffc66d;\">getHostNode</span>(prevChild)<span style=\"color:#cc7832;\">;<br/></span><span\n                style=\"color:#cc7832;\">        </span>ReactReconciler.<span style=\"color:#ffc66d;\">unmountComponent</span>(<br/>          prevChild<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">          </span><span\n                style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">, </span><span\n                style=\"color:#808080;\">/* safely */<br/></span><span style=\"color:#808080;\">          </span><span\n                style=\"color:#cc7832;font-weight:bold;\">false </span><span\n                style=\"color:#808080;\">/* skipLifecycle */<br/></span><span style=\"color:#808080;\">        </span>)<span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>}<br/>      <span\n                style=\"color:#808080;\">// The child must be instantiated before it's mounted.<br/></span><span\n                style=\"color:#808080;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextChildInstance = instantiateReactComponent(nextElement<span\n                style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">true</span>)<span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>nextChildren[name] = nextChildInstance<span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span><span style=\"color:#808080;\">// Creating mount image now ensures refs are resolved in right order<br/></span><span\n                style=\"color:#808080;\">      // (see <a href=\"https://github.com/facebook/react/pull/7101\">https://github.com/facebook/react/pull/7101</a> for explanation).<br/></span><span\n                style=\"color:#808080;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextChildMountImage = ReactReconciler.<span\n                style=\"color:#ffc66d;\">mountComponent</span>(<br/>        nextChildInstance<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>transaction<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>hostParent<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>hostContainerInfo<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>context<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>selfDebugID<br/>      )<span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>mountImages.<span\n                style=\"color:#ffc66d;\">push</span>(nextChildMountImage)<span style=\"color:#cc7832;\">;<br/></span><span\n                style=\"color:#cc7832;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(<br/>        ReactFeatureFlags.<span\n                style=\"color:#9876aa;\">prepareNewChildrenBeforeUnmountInStack </span>&amp;&amp;<br/>        prevChild<br/>      ) {<br/>        removedNodes[name] = ReactReconciler.<span\n                style=\"color:#ffc66d;\">getHostNode</span>(prevChild)<span style=\"color:#cc7832;\">;<br/></span><span\n                style=\"color:#cc7832;\">        </span>ReactReconciler.<span style=\"color:#ffc66d;\">unmountComponent</span>(<br/>          prevChild<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">          </span><span\n                style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">, </span><span\n                style=\"color:#808080;\">/* safely */<br/></span><span style=\"color:#808080;\">          </span><span\n                style=\"color:#cc7832;font-weight:bold;\">false </span><span\n                style=\"color:#808080;\">/* skipLifecycle */<br/></span><span style=\"color:#808080;\">        </span>)<span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>}<br/>    }<br/>  }<br/>  <span\n                style=\"color:#808080;\">// Unmount children that are no longer present.<br/></span><span\n                style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(name <span\n                style=\"color:#cc7832;font-weight:bold;\">in </span>prevChildren) {<br/>    <span\n                style=\"color:#cc7832;font-weight:bold;\">if </span>(prevChildren.<span style=\"color:#ffc66d;\">hasOwnProperty</span>(name) &amp;&amp;<br/>        !(nextChildren &amp;&amp; nextChildren.<span\n                style=\"color:#ffc66d;\">hasOwnProperty</span>(name))) {<br/>      prevChild = prevChildren[name]<span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>removedNodes[name] = ReactReconciler.<span\n                style=\"color:#ffc66d;\">getHostNode</span>(prevChild)<span style=\"color:#cc7832;\">;<br/></span><span\n                style=\"color:#cc7832;\">      </span>ReactReconciler.<span style=\"color:#ffc66d;\">unmountComponent</span>(<br/>        prevChild<span\n                style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span><span\n                style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">, </span><span\n                style=\"color:#808080;\">/* safely */<br/></span><span style=\"color:#808080;\">        </span><span\n                style=\"color:#cc7832;font-weight:bold;\">false </span><span\n                style=\"color:#808080;\">/* skipLifecycle */<br/></span><span style=\"color:#808080;\">      </span>)<span\n                style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/>  }<br/>}<span\n                style=\"color:#cc7832;\">,</span></pre>\n    </div>\n    <div><br/></div>\n    <div>diff算法原理详解参见：<br/></div>\n</div>\n<div><a href=\"https://zhuanlan.zhihu.com/p/20346379?refer=purerender\">https://zhuanlan.zhihu.com/p/20346379?refer=purerender</a> 或《深入React技术栈》3.5章（可以找我借）讲得很详细。<br/>\n</div>\n<div><br/></div>\n"},{"layout":"post","title":"react源码学习——Virtual Dom和渲染、更新原理","date":"2017-01-20T00:43:59.000Z","author":"Lily","_content":"\n<div><span style=\"color: rgb(68, 68, 68); font-family: 'Helvetica Neue', Helvetica, 'Lucida Grande', Arial, 'Hiragino Sans GB', 微软雅黑, 'WenQuanYi Micro Hei', STHeiti, SimSun, sans-serif; font-size: 14px; orphans: 2; widows: 2;\">前端开发过程中，更新页面的数据、样式等操作都要操作dom，而复杂的dom操作通常是产品性能瓶颈原因之一，为此React引入了Virtual Dom的概念，Virtual Dom其实是用js实现了一套dom api，包括虚拟dom模型、生命周期管理、diff算法等。React会将传入的JSX片段转化成虚拟dom节点，当数据更新时，通过diff算法找到要变更的dom节点，并只对变化的部分进行实际的浏览器dom更新，而不是重新渲染整个dom树。下面我们结合组件渲染流程结合源码介绍一下React如何创建虚拟节点，以及如何渲染、更新节点的整个流程。</span><br/></div><div><span style=\"color: rgb(68, 68, 68); font-family: 'Helvetica Neue', Helvetica, 'Lucida Grande', Arial, 'Hiragino Sans GB', 微软雅黑, 'WenQuanYi Micro Hei', STHeiti, SimSun, sans-serif; font-size: 14px; orphans: 2; widows: 2;\">——以下代码是React v15.4.2版本——<br/></span></div><div>React项目渲染组件的方法是：ReactDom.render，将父组件连带所有包含在内的子组件渲染出来。render方法最终调用了 src/renderers/dom/stack/client/ReactMount.js 的render方法。</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Renders a React component into the DOM in the supplied `container`.<br/></span><span style=\"color:#629755;font-style:italic;\"> * See <a href=\"https://facebook.github.io/react/docs/react-dom.html#render\">https://facebook.github.io/react/docs/react-dom.html#render</a><br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * If the React component was previously rendered into `container`, this will<br/></span><span style=\"color:#629755;font-style:italic;\"> * perform an update on it and only mutate the DOM as necessary to reflect the<br/></span><span style=\"color:#629755;font-style:italic;\"> * latest React component.<br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactElement} nextElement Component element to render.<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{DOMElement} container DOM element to render into.<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?function} callback function triggered on completion<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@return </span><span style=\"color:#629755;font-style:italic;\">{ReactComponent} Component instance rendered in `container`.<br/></span><span style=\"color:#629755;font-style:italic;\"> */<br/></span><span style=\"color:#ffc66d;\">render</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(nextElement<span style=\"color:#cc7832;\">, </span>container<span style=\"color:#cc7832;\">, </span>callback) {<br/>  <span style=\"color:#cc7832;font-weight:bold;\">return </span>ReactMount.<span style=\"color:#ffc66d;\">_renderSubtreeIntoContainer</span>(<span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">, </span>nextElement<span style=\"color:#cc7832;\">, </span>container<span style=\"color:#cc7832;\">, </span>callback)<span style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">,</span></pre></div><div>注意这里第一个参数是ReactElement类型，通常为了可读性和开发效率我们传入JSX写的结构，最终会编译转换成调用React的createElement方法生成虚拟元素ReactElement结构传入render中。这里我们先看一下React.createElement做了哪些事情（src/isomorphic/classic/element/ReactElement.js）</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><br/><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Create and return a new ReactElement of the given type.<br/></span><span style=\"color:#629755;font-style:italic;\"> * See <a href=\"https://facebook.github.io/react/docs/react-api.html#createelement\">https://facebook.github.io/react/docs/react-api.html#createelement</a><br/></span><span style=\"color:#629755;font-style:italic;\"> */<br/></span><span style=\"color:#ffc66d;\">ReactElement</span>.<span style=\"color:#ffc66d;\">createElement </span>= <span style=\"color:#cc7832;font-weight:bold;\">function</span>(type<span style=\"color:#cc7832;\">, </span>config<span style=\"color:#cc7832;\">, </span>children) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>propName<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// Reserved names are extracted<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>props = {}<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>key = <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>ref = <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>self = <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>source = <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(config != <span style=\"color:#cc7832;font-weight:bold;\">null</span>) {<br/>        <span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#ffc66d;\">hasValidRef</span>(config)) {<br/>            ref = config.<span style=\"color:#9876aa;\">ref</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/>        <span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#ffc66d;\">hasValidKey</span>(config)) {<br/>            key = <span style=\"color:#6a8759;\">'' </span>+ config.key<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/><br/>        self = config.<span style=\"color:#9876aa;\">__self </span>=== <span style=\"color:#9876aa;\">undefined </span>? <span style=\"color:#cc7832;font-weight:bold;\">null </span>: config.<span style=\"color:#9876aa;\">__self</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>source = config.<span style=\"color:#9876aa;\">__source </span>=== <span style=\"color:#9876aa;\">undefined </span>? <span style=\"color:#cc7832;font-weight:bold;\">null </span>: config.<span style=\"color:#9876aa;\">__source</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">// config中的内容复制到props<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(propName <span style=\"color:#cc7832;font-weight:bold;\">in </span>config) {<br/>            <span style=\"color:#cc7832;font-weight:bold;\">if </span>(hasOwnProperty.<span style=\"color:#ffc66d;\">call</span>(config<span style=\"color:#cc7832;\">, </span>propName) &amp;&amp;<br/>                !RESERVED_PROPS.<span style=\"color:#ffc66d;\">hasOwnProperty</span>(propName)) {<br/>                props[propName] = config[propName]<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span>}<br/>        }<br/>    }<br/><br/>    <span style=\"color:#808080;\">//将第三个及之后的参数作为children赋值给props的children属性<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>childrenLength = arguments.<span style=\"color:#9876aa;\">length </span>- <span style=\"color:#6897bb;\">2</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(childrenLength === <span style=\"color:#6897bb;\">1</span>) {<br/>        props.<span style=\"color:#9876aa;\">children </span>= children<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(childrenLength &gt; <span style=\"color:#6897bb;\">1</span>) {<br/>        <span style=\"color:#cc7832;font-weight:bold;\">var </span>childArray = Array(childrenLength)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(<span style=\"color:#cc7832;font-weight:bold;\">var </span>i = <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">; </span>i &lt; childrenLength<span style=\"color:#cc7832;\">; </span>i++) {<br/>            childArray[i] = arguments[i + <span style=\"color:#6897bb;\">2</span>]<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/><br/>        props.<span style=\"color:#9876aa;\">children </span>= childArray<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/><br/>    <span style=\"color:#808080;\">// 如果某个props为空且存在默认props，赋值<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(type &amp;&amp; type.<span style=\"color:#9876aa;font-style:italic;\">defaultProps</span>) {<br/>        <span style=\"color:#cc7832;font-weight:bold;\">var </span>defaultProps = type.<span style=\"color:#9876aa;font-style:italic;\">defaultProps</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(propName <span style=\"color:#cc7832;font-weight:bold;\">in </span>defaultProps) {<br/>            <span style=\"color:#cc7832;font-weight:bold;\">if </span>(props[propName] === <span style=\"color:#9876aa;\">undefined</span>) {<br/>                props[propName] = defaultProps[propName]<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span>}<br/>        }<br/>    }<br/><br/>    <span style=\"color:#cc7832;font-weight:bold;\">return </span><span style=\"color:#ffc66d;\">ReactElement</span>(<br/>        type<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>key<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>ref<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>self<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>source<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>ReactCurrentOwner.<span style=\"color:#9876aa;\">current</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>props<br/>    )<span style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">;</span>\n</pre></div><div><br/></div><div>下面结合源码详细讲解整个渲染的过程。</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#ffc66d;\">render</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(nextElement<span style=\"color:#cc7832;\">, </span>container<span style=\"color:#cc7832;\">, </span>callback) {<br/>  <span style=\"color:#cc7832;font-weight:bold;\">return </span>ReactMount.<span style=\"color:#ffc66d;\">_renderSubtreeIntoContainer</span>(<span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">, </span>nextElement<span style=\"color:#cc7832;\">, </span>container<span style=\"color:#cc7832;\">, </span>callback)<span style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">,</span>\n</pre>去掉各种检查后的代码如下：</div><div>思路：首先获得dom container里原有的ReactElement，如果存在则将实际需要渲染的ReactElement（上一步用<font style=\"font-family: Menlo; font-size: 12px; background-color: rgb(43, 43, 43); color: rgb(128, 128, 128);\">TopLevelWrapper</font>包裹的child）和新的ReactElement做比较（1），如果应该更新则更新组件（2），否则清空container内之前渲染的组件（3），生成新的根ReactComponent渲染到container中（4）。</div><div>主要流程图如下：<br/><img src=\"/images/2017-01-20/%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B%E5%9B%BE.png\" height=\"558\" width=\"650\"/><br/></div><div><pre style=\"background-color: rgb(43, 43, 43);\"><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">_renderSubtreeIntoContainer</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">: </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">function</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(parentComponent</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">, </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">nextElement</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">, </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">container</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">, </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">callback) {</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\"><br/></span><pre style=\"font-family: Menlo; font-size: 9pt; background-color: rgb(43, 43, 43);\"><span style=\"font-size: 9pt;\"><font><pre style=\"background-color: rgb(43, 43, 43); font-family: Menlo; font-size: 9pt;\">   <span style=\"color: rgb(128, 128, 128);\">//nextElement外包一层react定义的TopLevelWrapper用于屏蔽各类组件的差异记录一些变量，比如顶层组件的计数<br/></span><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">   var </span><font color=\"#a9b7c6\">nextWrappedElement = React.</font><span style=\"color: rgb(152, 118, 170);\">createElement</span><font color=\"#a9b7c6\">(<br/>     </font><span style=\"color: rgb(255, 198, 109);\">TopLevelWrapper</span><span style=\"color: rgb(204, 120, 50);\">,<br/></span><span style=\"color: rgb(204, 120, 50);\">     </span><font color=\"#a9b7c6\">{ </font><span style=\"color: rgb(152, 118, 170);\">child</span><font color=\"#a9b7c6\">: nextElement }<br/>   )</font>;</pre></font></span></pre><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">nextContext = getContextForSubtree(parentComponent)</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;//本次调用返回null<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">prevComponent = </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">getTopLevelWrapperInContainer</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(container)</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\"><br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">if </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(prevComponent) {<br/>    </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">prevWrappedElement = prevComponent.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_currentElement</span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">prevElement = prevWrappedElement.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">props</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">.child</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">if </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(shouldUpdateReactComponent(prevElement</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">, </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">nextElement)) {      &lt;——— 1<br/>      </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">publicInst = prevComponent.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_renderedComponent</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">getPublicInstance</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">()</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">      </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">updatedCallback = callback &amp;&amp; </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">function</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">() {<br/>        callback.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">call</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(publicInst)</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">      </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">}</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">      </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">ReactMount.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">_updateRootComponent</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(   &lt;———— 2<br/>        prevComponent</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">        </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">nextWrappedElement</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">        </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">nextContext</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">        </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">container</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">        </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">updatedCallback<br/>      )</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">      </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">return </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">publicInst</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">} </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">else </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">{<br/>      ReactMount.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">unmountComponentAtNode</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(container)</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;  <font style=\"font-family: Menlo; background-color: rgb(43, 43, 43); font-size: 12px; color: rgb(169, 183, 198);\">&lt;———— 3</font><br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">}<br/>  }<br/><br/>  </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">reactRootElement = </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">getReactRootElementInContainer</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(container)</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;//获得container节点的第一个dom子节点<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">containerHasReactMarkup =<br/>    reactRootElement &amp;&amp; !!</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">internalGetID</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(reactRootElement)</font><font face=\"Menlo\" color=\"#cc7832\" size=\"2\">; //判断这个dom子节点是不是React渲染的（React渲染的会有会有一个‘data-reacted’的attribute属性）<br/></font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">containerHasNonRootReactChild = </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">hasNonRootReactChild</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(container)</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">; //判断container是否包含不是React根节点的React实例<br/></span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\"><br/>  </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font color=\"#a9b7c6\"><font face=\"Menlo\" size=\"2\">shouldReuseMarkup =           //这里不太明白什么情况会重用markup，因为在’3’已经把container中的dom清空了，欢迎讨论<br/>    containerHasReactMarkup &amp;&amp;<br/>    !prevComponent &amp;&amp;<br/>    !containerHasNonRootReactChild</font></font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">component = ReactMount.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">_renderNewRootComponent</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(   </font><font style=\"font-family: Menlo; font-size: 12px; color: rgb(169, 183, 198); background-color: rgb(43, 43, 43);\">&lt;———— 4</font><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\"><br/>    nextWrappedElement</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">container</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">shouldReuseMarkup</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">nextContext</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">callback<br/>  ).</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_renderedComponent</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">getPublicInstance</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">()</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">return </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">component</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">}</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br/></span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\"\n/></pre><br/></div><div>下面分别展开研究四个函数：</div><div><div><ol start=\"1\"><li>shouldUpdateReactComponent.js ( src/renderers/shared/shared/shouldUpdateReactComponent.js ）</li></ol>这里只做了简单的类型比较，如果父节点的类型不同，则即使子节点相同也不做递归比较，官方文档参见<a href=\"https://facebook.github.io/react/docs/reconciliation.html#elements-of-different-types\">这里</a>。<br/></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#cc7832;font-weight:bold;\">function </span><span style=\"color:#ffc66d;\">shouldUpdateReactComponent</span>(prevElement<span style=\"color:#cc7832;\">, </span>nextElement) {<br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>prevEmpty = prevElement === <span style=\"color:#cc7832;font-weight:bold;\">null </span>|| prevElement === <span style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextEmpty = nextElement === <span style=\"color:#cc7832;font-weight:bold;\">null </span>|| nextElement === <span style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(prevEmpty || nextEmpty) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">return </span>prevEmpty === nextEmpty<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>prevType = <span style=\"color:#cc7832;font-weight:bold;\">typeof </span>prevElement<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextType = <span style=\"color:#cc7832;font-weight:bold;\">typeof </span>nextElement<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(prevType === <span style=\"color:#6a8759;\">'string' </span>|| prevType === <span style=\"color:#6a8759;\">'number'</span>) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">return </span>(nextType === <span style=\"color:#6a8759;\">'string' </span>|| nextType === <span style=\"color:#6a8759;\">'number'</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>    <span style=\"color:#cc7832;font-weight:bold;\">return </span>(<br/>      nextType === <span style=\"color:#6a8759;\">'object' </span>&amp;&amp;<br/>      prevElement.<span style=\"color:#9876aa;\">type </span>=== nextElement.<span style=\"color:#9876aa;\">type </span>&amp;&amp;<br/>      prevElement.<span style=\"color:#9876aa;\">key </span>=== nextElement.<span style=\"color:#9876aa;\">key<br/></span><span style=\"color:#9876aa;\">    </span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/>}<br/>\n</pre></div></div><div><font style=\"font-size: 14px;\">  </font></div><div><font style=\"font-size: 14px;\">  2. <span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(69, 69, 69);\">ReactMount._updateRootComponent（  src/renderers/dom/stack/client/ReactMount.js ）</span><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(228, 175, 9);\"><br/>\n</span></font></div><div>最主要的两句：</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\">ReactUpdateQueue.<span style=\"color:#ffc66d;\">enqueueElementInternal</span>(prevComponent<span style=\"color:#cc7832;\">, </span>nextElement<span style=\"color:#cc7832;\">, </span>nextContext)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(callback) {<br/>  ReactUpdateQueue.<span style=\"color:#ffc66d;\">enqueueCallbackInternal</span>(prevComponent<span style=\"color:#cc7832;\">, </span>callback)<span style=\"color:#cc7832;\">;<br/></span>}\n</pre>这里调用了src/renderers/shared/stack/reconciler/ReactUpdateQueue.js 的两个函数，分别给ReactComponent实例添加属性，要渲染的ReactElemnt、初始化上下文和在渲染完成后执行的回掉函数队列，然后调用ReactUpdates.js (src/renderers/shared/stack/reconciler/ReactUpdates.js)的enqueueUpadate加入到更新队列中（更新策略下文将详细讲解）。</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#ffc66d;\">enqueueElementInternal</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(internalInstance<span style=\"color:#cc7832;\">, </span>nextElement<span style=\"color:#cc7832;\">, </span>nextContext) {<br/>  internalInstance.<span style=\"color:#9876aa;\">_pendingElement </span>= nextElement<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#808080;\">// </span><span style=\"color:#a8c023;font-style:italic;\">TODO: introduce _pendingContext instead of setting it directly.<br/></span><span style=\"color:#a8c023;font-style:italic;\">  </span>internalInstance.<span style=\"color:#9876aa;\">_context </span>= nextContext<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#ffc66d;\">enqueueUpdate</span>(internalInstance)<span style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">,</span>\n</pre></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#ffc66d;\">enqueueCallbackInternal</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(internalInstance<span style=\"color:#cc7832;\">, </span>callback) {<br/>  <span style=\"color:#cc7832;font-weight:bold;\">if </span>(internalInstance.<span style=\"color:#9876aa;\">_pendingCallbacks</span>) {<br/>    internalInstance.<span style=\"color:#9876aa;\">_pendingCallbacks</span>.<span style=\"color:#ffc66d;\">push</span>(callback)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>    internalInstance.<span style=\"color:#9876aa;\">_pendingCallbacks </span>= [callback]<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/>  <span style=\"color:#ffc66d;\">enqueueUpdate</span>(internalInstance)<span style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">,</span>\n</pre><br/></div><div> <font style=\"font-size: 14px;\"> 3.</font><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(69, 69, 69);\"><font style=\"font-size: 14px;\">ReactMount.unmountComponentAtNode</font></span></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Unmounts and destroys the React component rendered in the `container`.<br/></span><span style=\"color:#629755;font-style:italic;\"> * See <a href=\"https://facebook.github.io/react/docs/react-dom.html#unmountcomponentatnode\">https://facebook.github.io/react/docs/react-dom.html#unmountcomponentatnode</a><br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{DOMElement} container DOM element containing a React component.<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@return </span><span style=\"color:#629755;font-style:italic;\">{boolean} True if a component was found in and unmounted from<br/></span><span style=\"color:#629755;font-style:italic;\"> *                   `container`<br/></span><span style=\"color:#629755;font-style:italic;\"> */<br/></span><span style=\"color:#ffc66d;\">unmountComponentAtNode</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(container) {<br/><br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>prevComponent = <span style=\"color:#ffc66d;\">getTopLevelWrapperInContainer</span>(container)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(!prevComponent) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">return false</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/>  <span style=\"color:#cc7832;font-weight:bold;\">delete </span>instancesByReactRootID[prevComponent.<span style=\"color:#9876aa;\">_instance</span>.rootID]<span style=\"color:#cc7832;\">;//devtools会用到的映射，这里可以先忽略<br/></span><span style=\"color:#cc7832;\">  </span>ReactUpdates.<span style=\"color:#ffc66d;\">batchedUpdates</span>(<br/>    <span style=\"color:#ffc66d;\">unmountComponentFromNode</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>prevComponent<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>container<br/>  )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">return true</span><span style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">,</span>\n</pre>注意这里也调用ReactUpdates.js (src/renderers/shared/stack/reconciler/ReactUpdates.js)类的函数batchedUpadates更新组件（更新策略下文将详细讲解），传入三个参数，第一个参数作为更新策略执行过程中调用的函数，后两个作为参数，这里要执行的函数是：</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#cc7832;font-weight:bold;\">function </span><span style=\"color:#ffc66d;\">unmountComponentFromNode</span>(instance<span style=\"color:#cc7832;\">, </span>container) {<br/>  //这个函数主要作用是：1.去掉组件中的ref引用，调用组件的unmountComponent函数，这里主要有三类组件文本组件、html标签对应的组件和自定义组件，每种对应的unmountComponent实现方式不同，主要做些清理React内部用到的缓存，组件上绑定的事件之类的工作，具体参见下文。<br/>  ReactReconciler.<span style=\"color:#ffc66d;\">unmountComponent</span>(<br/>    instance<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">false </span><span style=\"color:#808080;\">/* safely */</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">false </span><span style=\"color:#808080;\">/* skipLifecycle */<br/></span><span style=\"color:#808080;\">  </span>)<span style=\"color:#cc7832;\">;<br/></span><br/>  <span style=\"color:#cc7832;font-weight:bold;\">if </span>(container.nodeType === DOC_NODE_TYPE) {<br/>    container = container.documentElement<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><br/>  <span style=\"color:#808080;\">//可以看到这里循环移除了container节点中的全部dom元素，有很多方法可以实现，这里有个有趣的效率对比试验： <a href=\"http://jsperf.com/emptying-a-node\">http://jsperf.com/emptying-a-node</a><br/></span><span style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">while </span>(container.lastChild) {<br/>    container.removeChild(container.lastChild)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><span style=\"background-color:#344134;\">}</span>\n</pre><br/></div><div><ol start=\"4\"><li><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(69, 69, 69);\"><font style=\"font-size: 14px;\">ReactMount._renderNewRootComponent</font></span></li></ol><div><font face=\"Helvetica\" color=\"#454545\">先ReactElement初始<font style=\"font-size: 14px;\">化ReactComponent实例（1），这里可能是自定义组件</font><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(69, 69, 69);\"><font style=\"font-size: 14px;\">ReactCompositeComponent，文本元素对应的ReactDOMTextComponent和浏览器基本元素对应的ReactDOMComponent。然后调用更新策略将组件渲染到container中，以及做一些比如ref绑定等初始化工作（2）。</font><br/>\n</span></font></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#ffc66d;\">_renderNewRootComponent</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br/>  nextElement<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>container<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>shouldReuseMarkup<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>context<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>callback<br/>) {<br/> //<span style=\"color: rgb(98, 151, 85); font-style: italic; font-size: 9pt;\">Listens to window scroll and resize events. We cache scroll values so that </span><span style=\"color: rgb(98, 151, 85); font-style: italic; font-size: 9pt;\">application code can access them without triggering reflows.这里先不做分析</span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span>ReactBrowserEventEmitter.<span style=\"color:#ffc66d;\">ensureScrollValueMonitoring</span>()<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>componentInstance = instantiateReactComponent(nextElement<span style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">false</span>)<span style=\"color:#cc7832;\">; &lt;——— 1<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(callback) {<br/>    componentInstance.<span style=\"color:#9876aa;\">_pendingCallbacks </span>= [<span style=\"color:#cc7832;font-weight:bold;\">function</span>() { //初始化render完成后调用的回掉函数队列<br/>      callback.<span style=\"color:#ffc66d;\">call</span>(componentInstance.<span style=\"color:#9876aa;\">_renderedComponent</span>.<span style=\"color:#ffc66d;\">getPublicInstance</span>())<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}]<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><br/>  <span style=\"color:#808080;\">// The initial render is synchronous but any updates that happen during<br/></span><span style=\"color:#808080;\">  // rendering, in componentWillMount or componentDidMount, will be batched<br/></span><span style=\"color:#808080;\">  // according to the current batching strategy.<br/></span><span style=\"color:#808080;\"><br/></span><span style=\"color:#808080;\">  </span>ReactUpdates.<span style=\"color:#ffc66d;\">batchedUpdates</span>(  &lt;———— 2<br/>    <span style=\"color:#ffc66d;\">batchedMountComponentIntoNode</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>componentInstance<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>container<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>shouldReuseMarkup<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>context<br/>  )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>wrapperID = componentInstance.<span style=\"color:#9876aa;\">_instance</span>.rootID<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>instancesByReactRootID[wrapperID] = componentInstance<span style=\"color:#cc7832;\">; <font style=\"font-family: Menlo; font-size: 12px; background-color: rgb(43, 43, 43); color: rgb(204, 120, 50);\">//devtools会用到的映射，先忽略</font><br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">return </span>componentInstance<span style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">,</span>\n</pre><br/></div></div><div>下面分别展开讲解。</div><div><div><ol start=\"1\"><li><font style=\"font-size: 14px;\"> </font><font><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(69, 69, 69);\"><font><font style=\"font-size: 14px;\">instantiateReactComponent（src/<font style=\"color: rgb(69, 69, 69); font-family: Helvetica;\">renderers/shared/stack/reconciler/instantiateReactComponent.js</font>） 初始化组件实例，这里用到了工厂模式，根据传入的参数‘生产’对应的React Component实例。<span style=\"color: rgb(51, 51, 51); font-family: -apple-system, 'PingFang SC', 'Hiragino Sans GB', Arial, 'Microsoft YaHei', 'Helvetica Neue', sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); float: none;\">分别实例化</span><code style=\"box-sizing: border-box; outline: none; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 0.2em 0.4em; word-break: break-word; color: rgb(78, 89, 128); background-color: rgb(248, 248, 248); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">ReactDOMTextComponent</code><span style=\"color: rgb(51, 51, 51); font-family: -apple-system, 'PingFang SC', 'Hiragino Sans GB', Arial, 'Microsoft YaHei', 'Helvetica Neue', sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; float: none;\">, </span><code style=\"box-sizing: border-box; outline: none; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 0.2em 0.4em; word-break: break-word; color: rgb(78, 89, 128); background-color: rgb(248, 248, 248); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">ReactDOMComponent</code><span style=\"color: rgb(51, 51, 51); font-family: -apple-system, 'PingFang SC', 'Hiragino Sans GB', Arial, 'Microsoft YaHei', 'Helvetica Neue', sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); float: none;\">, </span><code style=\"box-sizing: border-box; outline: none; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 0.2em 0.4em; word-break: break-word; color: rgb(78, 89, 128); background-color: rgb(248, 248, 248); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">ReactCompositeComponent</code><span style=\"color: rgb(51, 51, 51); font-family: -apple-system, 'PingFang SC', 'Hiragino Sans GB', Arial, 'Microsoft YaHei', 'Helvetica Neue', sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; float: none;\">类。这些类用来管理</span><code style=\"box-sizing: border-box; outline: none; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 0.2em 0.4em; word-break: break-word; color: rgb(78, 89, 128); background-color: rgb(248, 248, 248); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">ReactElement</code><span style=\"color: rgb(51, 51, 51); font-family: -apple-system, 'PingFang SC', 'Hiragino Sans GB', Arial, 'Microsoft YaHei', 'Helvetica Neue', sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; float: none;\">,负责将不同的</span><code style=\"box-sizing: border-box; outline: none; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 0.2em 0.4em; word-break: break-word; color: rgb(78, 89, 128); background-color: rgb(248, 248, 248); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">ReactElement</code><span style=\"color: rgb(51, 51, 51); font-family: -apple-system, 'PingFang SC', 'Hiragino Sans GB', Arial, 'Microsoft YaHei', 'Helvetica Neue', sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; float: none;\">转化成DOM(通过mountComponent方法),负责更新DOM(通过receiveComponent方法，updateComponent方法，下面详细介绍)等。</span></font></font></span></font></li></ol><div style=\"text-align: center; \"><img src=\"/images/2017-01-20/%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B%E5%9B%BE%20(1).png\" height=\"251\" width=\"554\"/><br/></div><div><font face=\"Helvetica\" color=\"#454545\"/></div></div></div><div><font face=\"Helvetica\" color=\"#454545\"><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Given a ReactNode, create an instance that will actually be mounted.<br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactNode} node<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{boolean} shouldHaveDebugID<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@return </span><span style=\"color:#629755;font-style:italic;\">{object} A new instance of the element's constructor.<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@protected<br/></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\" /><span style=\"color:#629755;font-style:italic;\">*/<br/></span><span style=\"color:#cc7832;font-weight:bold;\">function </span><span style=\"color:#ffc66d;\">instantiateReactComponent</span>(node<span style=\"color:#cc7832;\">, </span>shouldHaveDebugID) {<br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>instance<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(node === <span style=\"color:#cc7832;font-weight:bold;\">null </span>|| node === <span style=\"color:#cc7832;font-weight:bold;\">false</span>) {<br/>    instance = ReactEmptyComponent.<span style=\"color:#ffc66d;\">create</span>(<span style=\"color:#ffc66d;\">instantiateReactComponent</span>)<span style=\"color:#cc7832;\">;//这里生成一个空的component对象</span><span style=\"font-size: 9pt;\">ReactDOMEmptyComponent，渲染一行注释，可以忽略</span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span>} <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(<span style=\"color:#cc7832;font-weight:bold;\">typeof </span>node === <span style=\"color:#6a8759;\">'object'</span>) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>element = node<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>type = element.<span style=\"color:#9876aa;\">type</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\"><br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">typeof </span>element.<span style=\"color:#9876aa;\">type </span>=== <span style=\"color:#6a8759;\">'string'</span>) { //如果类型是浏览器标签比如“div”、“span”之类 创建<font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); color: rgb(78, 89, 128);\">ReactDOMComponent 对象</font><br/>      instance = ReactHostComponent.<span style=\"color:#ffc66d;\">createInternalComponent</span>(element)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(<span style=\"color:#ffc66d;\">isInternalComponentType</span>(element.<span style=\"color:#9876aa;\">type</span>)) {//这个判断是否是内部组件的方式没有遇到过（待研究补充）<br/>      <span style=\"color:#808080;\">// This is temporarily available for custom components that are not string<br/></span><span style=\"color:#808080;\">      // representations. I.e. ART. Once those are updated to use the string<br/></span><span style=\"color:#808080;\">      // representation, we can drop this code path.<br/></span><span style=\"color:#808080;\">      </span>instance = <span style=\"color:#cc7832;font-weight:bold;\">new </span>element.<span style=\"color:#9876aa;\">type</span>(element)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">      </span><span style=\"color:#808080;\">// We renamed this. Allow the old name for compat. :(<br/></span><span style=\"color:#808080;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(!instance.<span style=\"color:#9876aa;\">getHostNode</span>) {<br/>        instance.<span style=\"color:#9876aa;\">getHostNode </span>= instance.<span style=\"color:#ffc66d;\">getNativeNode</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>}<br/>    } <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>      instance = <span style=\"color:#cc7832;font-weight:bold;\">new </span><span style=\"color:#ffc66d;\">ReactCompositeComponentWrapper</span>(element)<span style=\"color:#cc7832;\">; //创建自定义组件<font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); color: rgb(78, 89, 128);\">ReactCompositeComponent对象</font><br/></span><span style=\"color:#cc7832;\">    </span>}<br/>  } <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(<span style=\"color:#cc7832;font-weight:bold;\">typeof </span>node === <span style=\"color:#6a8759;\">'string' </span>|| <span style=\"color:#cc7832;font-weight:bold;\">typeof </span>node === <span style=\"color:#6a8759;\">'number'</span>) {<span style=\"color:#cc7832;\">//创建文本节点<font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); color: rgb(78, 89, 128);\">ReactDOMTextComponent 对象</font></span><br/>    instance = ReactHostComponent.<span style=\"color:#ffc66d;\">createInstanceForText</span>(node)<span style=\"color:#cc7832;\">; <br/></span><span style=\"color:#cc7832;\">  </span>} <br/><br/>  <span style=\"color:#808080;\">// These two fields are used by the DOM and ART diffing algorithms<br/></span><span style=\"color:#808080;\">  // respectively. Instead of using expandos on components, we should be<br/></span><span style=\"color:#808080;\">  // storing the state needed by the diffing algorithms elsewhere.<br/></span><span style=\"color:#808080;\">  </span>instance.<span style=\"color:#9876aa;\">_mountIndex </span>= <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>instance.<span style=\"color:#9876aa;\">_mountImage </span>= <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><br/>  <span style=\"color:#cc7832;font-weight:bold;\">return </span>instance<span style=\"color:#cc7832;\">;<br/></span>}<br/></pre></font></div><div><font face=\"Helvetica\" color=\"#454545\"><br/></font></div><div><font face=\"Helvetica\" color=\"#454545\">下面分别展开介绍三种组件的渲染、更新、卸载策略。</font></div><div><br/></div><div><font face=\"Helvetica\" color=\"#454545\">1.1）<font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); font-size: 12px; color: rgb(78, 89, 128);\">ReactDOMTextComponent（src/<font style=\"font-size: 12px; color: rgb(78, 89, 128); font-family: Menlo;\">renderers/dom/stack/client/ReactDOMTextComponent.js）</font></font></font></div><div><font face=\"Helvetica\" color=\"#454545\"><font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); font-size: 12px; color: rgb(78, 89, 128);\"><font style=\"font-size: 12px; color: rgb(78, 89, 128); font-family: Menlo;\"/></font></font></div><div>重点看下三个函数：</div><div><br/></div><div>    1) mountComponent 在render的时候调用，返回渲染内容，针对文本节点返回：</div><div>        &lt;!-- react-text:domId —&gt;这是文本内容&lt;!-- /react-text —&gt;</div><div><br/></div><div><div>  2）receiveComponent 在setState触发更新时调用这个函数，如果文本不同，只替换了注释中的内容。</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#ffc66d;\">receiveComponent</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(nextText<span style=\"color:#cc7832;\">, </span>transaction) {<br/>  <span style=\"color:#cc7832;font-weight:bold;\">if </span>(nextText !== <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span>) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement </span>= nextText<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextStringText = <span style=\"color:#6a8759;\">'' </span>+ nextText<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(nextStringText !== <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_stringText</span>) {<span style=\"color:#808080;\"><br/></span><span style=\"color:#808080;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_stringText </span>= nextStringText<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>commentNodes = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">getHostNode</span>()<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>DOMChildrenOperations.<span style=\"color:#ffc66d;\">replaceDelimitedText</span>(<br/>        commentNodes[<span style=\"color:#6897bb;\">0</span>]<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>commentNodes[<span style=\"color:#6897bb;\">1</span>]<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>nextStringText<br/>      )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/>  }<br/>}<span style=\"color:#cc7832;\">,</span>\n</pre><br/></div><div>3）unmountComponent 去掉对text节点引用，重置一些变量。</div><div><br/></div><div><br/></div><div>1.2）<font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); color: rgb(78, 89, 128);\">ReactDOMComponent</font></div><div><br/></div><div>    1）mountComponent 生成组件对应的dom结构</div><div>代码比较长，主要分为四个步骤：</div><div><ol start=\"1\"><li>做一些生成markup前的“准备工作”  ，针对不同类型做一些变量初始化以及让React事件系统捕捉指定事件。</li></ol>           以input标签为例介绍一下：<br/><div><ul><li> ReactDOMInput.mountWrapper(this, props, hostParent);  <br/></li></ul></div><div>           给input组件实例初始化状态，mountWrapper函数里只给实例设置了一个属性用以保存input的初始value和初始checked值。</div><div>           <span style=\"color:#cc7832;font-weight:bold;\">var </span>defaultValue = props.<span style=\"color:#9876aa;\">defaultValue</span><span style=\"color:#cc7832;\">;<br/></span><span>    <span>       </span></span>inst.<span style=\"color:#9876aa;\">_wrapperState </span>= {</div><div><span style=\"color:#9876aa;\">             initialChecked</span>: props.<span style=\"color:#9876aa;\">checked </span>!= <span style=\"color:#cc7832;font-weight:bold;\">null </span>? props.<span style=\"color:#9876aa;\">checked </span>: props.<span style=\"color:#9876aa;\">defaultChecked</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  <span>           </span></span><span style=\"color:#9876aa;\">initialValue</span>: props.<span style=\"color:#9876aa;\">value </span>!= <span style=\"color:#cc7832;font-weight:bold;\">null </span>? props.<span style=\"color:#9876aa;\">value </span>: defaultValue<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\"><span>    <span>  </span></span>       </span><span style=\"color:#9876aa;\">listeners</span>: <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">,<br/></span>           }<span style=\"color:#cc7832;\">;</span></div><div><ul><li> props = ReactDOMInput.getHostProps(this, props); 将更多input元素要用到的属性初始化并赋给事例，如value、type、max、min等等</li><li> transaction.getReactMountReady().enqueue(trackInputValue, this);<br/></li><li> transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this); 添加预定义事件，这里react添加了invalid事件</li><li> ensureListeningTo(this, 'onChange', transaction); 对于受控组件确保监听on change事件</li></ul><div><br/></div><div/></div><ol start=\"2\"><li>设置正确的namespace，根据父容器的namespace类型和当前实例的tag类型设置namespace 变量是html svg还是mathml<br/></li><li><b>创建将渲染在页面的markup（重要！！！讲解参见注释）</b></li></ol><div><ol start=\"4\"><li>做一些“收尾”工作，比如input、texture的内容初始化以及各个元素的autofocus设置<br/></li></ol></div></div><div>       </div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><br/><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Generates root tag markup then recurses. This method has side effects and<br/></span><span style=\"color:#629755;font-style:italic;\"> * is not idempotent.<br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@internal<br/></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\" /><span style=\"color:#629755;font-style:italic;\">* </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction|ReactServerRenderingTransaction} transaction<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?ReactDOMComponent} the parent component instance<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?object} info about the host container<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{object} context<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@return </span><span style=\"color:#629755;font-style:italic;\">{string} The computed markup.<br/></span><span style=\"color:#629755;font-style:italic;\"> */<br/></span>mountComponent: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br/>    transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>hostParent<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>hostContainerInfo<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>context<br/>) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_rootNodeID </span>= globalIdCounter++<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_domID </span>= hostContainerInfo.<span style=\"color:#9876aa;\">_idCounter</span>++<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_hostParent </span>= hostParent<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_hostContainerInfo </span>= hostContainerInfo<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>props = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span>.<span style=\"color:#9876aa;\">props</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">switch </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span>) {  &lt;———— <span style=\"color:#6897bb;\">1 </span>做一些生成markup前的“准备工作”<br/>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'audio'</span>:<br/>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'form'</span>:<br/>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'iframe'</span>:<br/>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'img'</span>:<br/>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'link'</span>:<br/>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'object'</span>:<br/>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'source'</span>:<br/>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'video'</span>:<br/>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'details'</span>:<br/>            <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_wrapperState </span>= {<br/>                <span style=\"color:#9876aa;\">listeners</span>: <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>}<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span><span style=\"color:#808080;\">//针对一些特性元素预先绑定一些事件<br/></span><span style=\"color:#808080;\">            </span>transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<span style=\"color:#ffc66d;\">trapBubbledEventsLocal</span><span style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span><span style=\"color:#cc7832;font-weight:bold;\">break</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'input'</span>:<span style=\"color:#808080;\">//给input组件实例初始化状态<br/></span><span style=\"color:#808080;\">            </span>ReactDOMInput.<span style=\"color:#ffc66d;\">mountWrapper</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>props<span style=\"color:#cc7832;\">, </span>hostParent)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span>props = ReactDOMInput.<span style=\"color:#ffc66d;\">getHostProps</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>props)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span>transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<span style=\"color:#ffc66d;\">trackInputValue</span><span style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span>transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<span style=\"color:#ffc66d;\">trapBubbledEventsLocal</span><span style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span><span style=\"color:#808080;\">// For controlled components we always need to ensure we're listening<br/></span><span style=\"color:#808080;\">            // to onChange. Even if there is no listener.<br/></span><span style=\"color:#808080;\">            </span><span style=\"color:#ffc66d;\">ensureListeningTo</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span><span style=\"color:#6a8759;\">'onChange'</span><span style=\"color:#cc7832;\">, </span>transaction)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span><span style=\"color:#cc7832;font-weight:bold;\">break</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">       //略去其他……</span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span>}<br/><br/>    <span style=\"color:#ffc66d;\">assertValidProps</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>props)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// We create tags in the namespace of their parent container, except HTML<br/></span><span style=\"color:#808080;\">    // tags get no namespace.<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>namespaceURI<span style=\"color:#cc7832;\">; </span>&lt;————— <span style=\"color:#6897bb;\">2 </span>设置正确的namespace<br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>parentTag<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(hostParent != <span style=\"color:#cc7832;font-weight:bold;\">null</span>) {<br/>        namespaceURI = hostParent.<span style=\"color:#9876aa;\">_namespaceURI</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>parentTag = hostParent.<span style=\"color:#9876aa;\">_tag</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(hostContainerInfo.<span style=\"color:#9876aa;\">_tag</span>) {<br/>        namespaceURI = hostContainerInfo.<span style=\"color:#9876aa;\">_namespaceURI</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>parentTag = hostContainerInfo.<span style=\"color:#9876aa;\">_tag</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/>    <span style=\"color:#cc7832;font-weight:bold;\">if </span>(namespaceURI == <span style=\"color:#cc7832;font-weight:bold;\">null </span>||<br/>        namespaceURI === DOMNamespaces.<span style=\"color:#9876aa;\">svg </span>&amp;&amp; parentTag === <span style=\"color:#6a8759;\">'foreignobject'</span>) {<br/>        namespaceURI = DOMNamespaces.<span style=\"color:#9876aa;\">html</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/>    <span style=\"color:#cc7832;font-weight:bold;\">if </span>(namespaceURI === DOMNamespaces.<span style=\"color:#9876aa;\">html</span>) {<br/>        <span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag </span>=== <span style=\"color:#6a8759;\">'svg'</span>) {<br/>            namespaceURI = DOMNamespaces.<span style=\"color:#9876aa;\">svg</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>} <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag </span>=== <span style=\"color:#6a8759;\">'math'</span>) {<br/>            namespaceURI = DOMNamespaces.<span style=\"color:#9876aa;\">mathml</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/>    }<br/>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_namespaceURI </span>= namespaceURI<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>mountImage<span style=\"color:#cc7832;\">; </span>&lt;————— <span style=\"color:#6897bb;\">3 </span>创建将渲染在页面的markup<br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>type = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span>.<span style=\"color:#9876aa;\">type</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">//默认用createElement创建<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(transaction.<span style=\"color:#9876aa;\">useCreateElement</span>) {<br/>        <span style=\"color:#cc7832;font-weight:bold;\">var </span>ownerDocument = hostContainerInfo.<span style=\"color:#9876aa;\">_ownerDocument</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>el<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(namespaceURI === DOMNamespaces.<span style=\"color:#9876aa;\">html</span>) {<br/>            <span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag </span>=== <span style=\"color:#6a8759;\">'script'</span>) {<br/>                <span style=\"color:#808080;\">//如果是script标签，注意这里包在div里再获取<br/></span><span style=\"color:#808080;\">                // Create the script via .innerHTML so its \"parser-inserted\" flag is<br/></span><span style=\"color:#808080;\">                // set to true and it does not execute<br/></span><span style=\"color:#808080;\">                </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>div = ownerDocument.<span style=\"color:#ffc66d;\">createElement</span>(<span style=\"color:#6a8759;\">'div'</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">                </span>div.<span style=\"color:#9876aa;\">innerHTML </span>= <span style=\"color:#6a8759;\">`&lt;</span>${type}<span style=\"color:#6a8759;\">&gt;&lt;/</span>${type}<span style=\"color:#6a8759;\">&gt;`</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">                </span>el = div.<span style=\"color:#ffc66d;\">removeChild</span>(div.<span style=\"color:#9876aa;\">firstChild</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span>} <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(props.<span style=\"color:#9876aa;\">is</span>) {<br/>                <span style=\"color:#808080;\">//和用户自定义元素相关，参见：https://developer.<a href=\"http://mozilla.org/en-US/docs/Web/API/Document/createElement\">mozilla.org/en-US/docs/Web/API/Document/createElement</a> <br/></span><span style=\"color:#808080;\">                //https://www.<a href=\"http://w3.org/TR/custom-elements/#customized-built-in-element\">w3.org/TR/custom-elements/#customized-built-in-element</a> 同时也是为了解决firefox下createElement的bug<br/></span><span style=\"color:#808080;\">                </span>el = ownerDocument.<span style=\"color:#ffc66d;\">createElement</span>(type<span style=\"color:#cc7832;\">, </span>props.<span style=\"color:#9876aa;\">is</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>                <span style=\"color:#808080;\">// Separate else branch instead of using `props.is || undefined` above becuase of a Firefox bug.<br/></span><span style=\"color:#808080;\">                // See discussion in <a href=\"https://github.com/facebook/react/pull/6896\">https://github.com/facebook/react/pull/6896</a><br/></span><span style=\"color:#808080;\">                // and discussion in <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1276240\">https://bugzilla.mozilla.org/show_bug.cgi?id=1276240</a><br/></span><span style=\"color:#808080;\">                </span>el = ownerDocument.<span style=\"color:#ffc66d;\">createElement</span>(type)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span>}<br/>        } <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>            el = ownerDocument.<span style=\"color:#ffc66d;\">createElementNS</span>(<br/>                namespaceURI<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">                </span>type<br/>            )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/>        <span style=\"color:#808080;\">//如果tag名包含’－’或指定“is”属性认为是用户自定义标签<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>isCustomComponentTag = <span style=\"color:#ffc66d;\">isCustomComponent</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span><span style=\"color:#cc7832;\">, </span>props)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//分别在react实例添加属性指向刚创建的节点，同时给节点添加属性指向当前实例<br/></span><span style=\"color:#808080;\">        </span>ReactDOMComponentTree.<span style=\"color:#ffc66d;\">precacheNode</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>el)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_flags </span>|= Flags.<span style=\"color:#9876aa;\">hasCachedChildNodes</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//如果是最外层标签，不是递归创建的子节点，则设置为React根元素，比如ReactDom.render(‘&lt;div&gt;&lt;input/&gt;&lt;/div&gt;’,node) 在创建到div层的时候设置为根元素，然后递归渲染子元素（input）的时候hostParent不为空了。<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(!<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_hostParent</span>) {<br/>            DOMPropertyOperations.<span style=\"color:#ffc66d;\">setAttributeForRoot</span>(el)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/>        <span style=\"color:#808080;\">//根据新旧props的差异更新对应dom元素上的属性，首次渲染没有旧props<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_updateDOMProperties</span>(<span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">, </span>props<span style=\"color:#cc7832;\">, </span>transaction<span style=\"color:#cc7832;\">, </span>isCustomComponentTag)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//初始化DOMLazyTree结构，根据不同浏览器选择不同的渲染策略，参见（src/renderers/dom/stack/client/DOMLazyTree.js）<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>lazyTree = DOMLazyTree(el)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//如果有子节点，则遍历子节点递归调用ReactReconciler.mountComponent（这个函数主要还是调用子节点实例对应的mountComponent）生成子节点的markup（可以简单理解为子节点dom树），保存到lazyTree中，<br/></span><span style=\"color:#808080;\">        //根据不同浏览器渲染dom的效率选择将子元素缓存在DOMLazyTree的队列中延迟渲染还是直接拼成一个完整的dom树返回<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_createInitialChildren</span>(transaction<span style=\"color:#cc7832;\">, </span>props<span style=\"color:#cc7832;\">, </span>context<span style=\"color:#cc7832;\">, </span>lazyTree)<span style=\"color:#cc7832;\">;    &lt;============<br/></span><span style=\"color:#cc7832;\">        </span>mountImage = lazyTree<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>        <span style=\"color:#808080;\">//判断是否是合法的tag名（用正则）<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#ffc66d;\">validateDangerousTag</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//用字符串拼接的方式创建起始标签，并添加事件监听、属性和样式内容<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>tagOpen = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_createOpenTagMarkupAndPutListeners</span>(transaction<span style=\"color:#cc7832;\">, </span>props)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//如果有子节点，则遍历子节点递归生成每一个子节点的ReactComponent实例，然后调用每个实例的ReactReconciler.mountComponent生成子节点的dom树<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>tagContent = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_createContentMarkup</span>(transaction<span style=\"color:#cc7832;\">, </span>props<span style=\"color:#cc7832;\">, </span>context)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//闭合标签<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(!tagContent &amp;&amp; omittedCloseTags[<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span>]) {<br/>            mountImage = tagOpen + <span style=\"color:#6a8759;\">'/&gt;'</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>            mountImage = tagOpen + <span style=\"color:#6a8759;\">'&gt;' </span>+ tagContent + <span style=\"color:#6a8759;\">'&lt;/' </span>+ type + <span style=\"color:#6a8759;\">'&gt;'</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/>    }<br/><br/>    <span style=\"color:#cc7832;font-weight:bold;\">switch </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span>) { &lt;—————<span style=\"color:#6897bb;\">4 </span>给事务添加组件渲染完毕后做的事情<br/>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'input'</span>:<br/>            transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<br/>                <span style=\"color:#ffc66d;\">inputPostMount</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">                </span><span style=\"color:#cc7832;font-weight:bold;\">this<br/></span><span style=\"color:#cc7832;font-weight:bold;\">            </span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(props.<span style=\"color:#9876aa;\">autoFocus</span>) {<br/>                transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<br/>                    AutoFocusUtils.<span style=\"color:#ffc66d;\">focusDOMComponent</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">                    </span><span style=\"color:#cc7832;font-weight:bold;\">this<br/></span><span style=\"color:#cc7832;font-weight:bold;\">                </span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span>}<br/>            <span style=\"color:#cc7832;font-weight:bold;\">break</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">       //略去其他……  </span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span>}<br/><br/>    <span style=\"color:#cc7832;font-weight:bold;\">return </span>mountImage<span style=\"color:#cc7832;\">;<br/></span>}\n</pre>这里额外讲一下 <b>this._createInitialChildren(transaction, props, context, lazyTree)</b>生成子元素dom树的函数，如果props.children是数组，调用以下函数。</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#ffc66d;\">mountChildren</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(nestedChildren<span style=\"color:#cc7832;\">, </span>transaction<span style=\"color:#cc7832;\">, </span>context) {<br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>children = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_reconcilerInstantiateChildren</span>(<span style=\"color:#808080;\">//深度遍历子节点获得所有子节点，同时调用</span><span style=\"font-size: 9pt; background-color: rgb(52, 65, 52);\">instantiateReactComponent生成子节点对应的</span><span style=\"font-size: 9pt; color: rgb(128, 128, 128);\">ReactComponent组</span><span style=\"color:#808080;\"><br/></span><span style=\"color:#808080;\">    </span>nestedChildren<span style=\"color:#cc7832;\">, </span>transaction<span style=\"color:#cc7832;\">, </span>context<br/>  )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_renderedChildren </span>= children<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>mountImages = []<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>index = <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(<span style=\"color:#cc7832;font-weight:bold;\">var </span>name <span style=\"color:#cc7832;font-weight:bold;\">in </span>children) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">if </span>(children.<span style=\"color:#9876aa;\">hasOwnProperty</span>(name)) {<br/>      <span style=\"color:#cc7832;font-weight:bold;\">var </span>child = children[name]<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>selfDebugID = <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">     </span><br/>      <span style=\"color:#cc7832;font-weight:bold;\">var </span>mountImage = ReactReconciler.<span style=\"color:#ffc66d;\">mountComponent</span>(//调用每个子节点的ReactComponent实例的mountComponent递归渲染所有子节点<br/>        child<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_hostContainerInfo</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>context<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>selfDebugID<br/>      )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>child.<span style=\"color:#9876aa;\">_mountIndex </span>= index++<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>mountImages.<span style=\"color:#ffc66d;\">push</span>(mountImage)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/>  }<br/>  <span style=\"color:#cc7832;font-weight:bold;\">return </span>mountImages<span style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">,<br/></span>\n</pre> </div><div><div/><div>再顺便提一下，源码中用到了DOMLazyTree，并根据不同浏览器对dom片段生成的速度做了优化。</div><div><pre style=\"background-color: rgb(43, 43, 43); font-family: Menlo; font-size: 9pt;\"><pre style=\"background-color: rgb(43, 43, 43); font-family: Menlo; font-size: 9pt;\"><span style=\"color: rgb(98, 151, 85); font-style: italic;\">/**<br/></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> * In IE (8-11) and Edge, appending nodes with no children is dramatically<br/></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> * faster than appending a full subtree, so we essentially queue up the<br/></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> * .appendChild calls here and apply them so each node is added to its parent<br/></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> * before any children are added.<br/></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> *<br/></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> * In other browsers, doing so is slower or neutral compared to the other order<br/></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> * (in Firefox, twice as slow) so we only do this inversion in IE.<br/></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> *<br/></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> * See <a href=\"https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode\">https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode</a>.<br/></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> */<br/></span><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">var </span><font color=\"#a9b7c6\">enableLazy = (<br/>  </font><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">typeof </span><span style=\"color: rgb(152, 118, 170);\">document </span><font color=\"#a9b7c6\">!== </font><span style=\"color: rgb(106, 135, 89);\">'undefined' </span><font color=\"#a9b7c6\">&amp;&amp;<br/>  </font><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">typeof </span><span style=\"color: rgb(152, 118, 170);\">document</span><font color=\"#a9b7c6\">.</font><span style=\"color: rgb(152, 118, 170);\">documentMode </span><font color=\"#a9b7c6\">=== </font><span style=\"color: rgb(106, 135, 89);\">'number'<br/></span><span style=\"color: rgb(106, 135, 89);\">  </span><font color=\"#a9b7c6\">||<br/>  </font><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">typeof </span><span style=\"color: rgb(152, 118, 170);\">navigator </span><font color=\"#a9b7c6\">!== </font><span style=\"color: rgb(106, 135, 89);\">'undefined' </span><font color=\"#a9b7c6\">&amp;&amp;<br/>  </font><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">typeof </span><span style=\"color: rgb(152, 118, 170);\">navigator</span><font color=\"#a9b7c6\">.</font><span style=\"color: rgb(152, 118, 170);\">userAgent </span><font color=\"#a9b7c6\">=== </font><span style=\"color: rgb(106, 135, 89);\">'string' </span><font color=\"#a9b7c6\">&amp;&amp;<br/>  </font><span style=\"color: rgb(106, 135, 89);\">/\\bEdge\\/\\d/</span><font color=\"#a9b7c6\">.</font><span style=\"color: rgb(255, 198, 109);\">test</span><font color=\"#a9b7c6\">(</font><span style=\"color: rgb(152, 118, 170);\">navigator</span><font color=\"#a9b7c6\">.</font><span style=\"color: rgb(152, 118, 170);\">userAgent</span><font color=\"#a9b7c6\">)<br/>)</font>;</pre><pre style=\"background-color: rgb(43, 43, 43); font-family: Menlo; font-size: 9pt;\"><span style=\"font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\"> function </span><span style=\"font-size: 9pt; color: rgb(255, 198, 109);\">queueChild</span><font style=\"font-size: 9pt;\" color=\"#a9b7c6\">(parentTree</font><span style=\"font-size: 9pt; color: rgb(204, 120, 50);\">, </span><font style=\"font-size: 9pt;\" color=\"#a9b7c6\">childTree) {</font><br/></pre><pre style=\"background-color: rgb(43, 43, 43); font-family: Menlo; font-size: 9pt;\"><pre style=\"background-color: rgb(43, 43, 43); font-family: Menlo; font-size: 9pt;\"><font color=\"#a9b7c6\">  </font><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">if </span><font color=\"#a9b7c6\">(enableLazy) {<br/>    parentTree.</font><span style=\"color: rgb(152, 118, 170);\">children</span><font color=\"#a9b7c6\">.</font><span style=\"color: rgb(255, 198, 109);\">push</span><font color=\"#a9b7c6\">(childTree)</font><span style=\"color: rgb(204, 120, 50);\">;<br/></span><span style=\"color: rgb(204, 120, 50);\">  </span><font color=\"#a9b7c6\">} </font><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">else </span><font color=\"#a9b7c6\">{<br/>    parentTree.node.</font><span style=\"color: rgb(152, 118, 170);\">appendChild</span><font color=\"#a9b7c6\">(childTree.node)</font><span style=\"color: rgb(204, 120, 50);\">;<br/></span><span style=\"color: rgb(204, 120, 50);\">  </span><font color=\"#a9b7c6\">}<br/></font><span style=\"color: rgb(169, 183, 198); background-color: rgb(52, 65, 52);\">}</span><font color=\"#a9b7c6\"\n/></pre><br/></pre></pre></div><div><font face=\"Helvetica\" color=\"#454545\"><font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); font-size: 12px; color: rgb(78, 89, 128);\"/></font></div></div><div><div>然后会在这里判断是把子节点缓存起来还是直接挂到父节点上。缓存起来的节点会在ReactMount的_mountImageIntoNode递归地将子节点逐个挂到父节点上，主要用在<code style=\"box-sizing: border-box; outline: none; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 0.2em 0.4em; word-break: break-word; color: rgb(78, 89, 128); background-color: rgb(248, 248, 248); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">ReactDOMComponent</code><span style=\"color: rgb(51, 51, 51); font-family: -apple-system, 'PingFang SC', 'Hiragino Sans GB', Arial, 'Microsoft YaHei', 'Helvetica Neue', sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); float: none;\">, </span><code style=\"box-sizing: border-box; outline: none; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 0.2em 0.4em; word-break: break-word; color: rgb(78, 89, 128); background-color: rgb(248, 248, 248); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">ReactCompositeComponent。</code></div><div/><div><br/></div>  </div><div>2）receiveComponent 在setState触发更新时调用这个函</div><div><div/></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"/></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Updates a DOM component after it has already been allocated and<br/></span><span style=\"color:#629755;font-style:italic;\"> * attached to the DOM. Reconciles the root DOM node, then recurses.<br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction} transaction<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactElement} prevElement<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactElement} nextElement<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@internal<br/></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\" /><span style=\"color:#629755;font-style:italic;\">* </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@overridable<br/></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\" /><span style=\"color:#629755;font-style:italic;\">*/<br/></span><span style=\"color:#ffc66d;\">updateComponent</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(transaction<span style=\"color:#cc7832;\">, </span>prevElement<span style=\"color:#cc7832;\">, </span>nextElement<span style=\"color:#cc7832;\">, </span>context) {<br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>lastProps = prevElement.props<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextProps = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span>.props<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  //获得last 和next props<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">switch </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span>) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'input'</span>:<br/>      lastProps = ReactDOMInput.<span style=\"color:#ffc66d;\">getHostProps</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>lastProps)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>nextProps = ReactDOMInput.<span style=\"color:#ffc66d;\">getHostProps</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>nextProps)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">break</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    //略去其他……</span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">default</span>:<br/>      <span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">typeof </span>lastProps.<span style=\"color:#9876aa;\">onClick </span>!== <span style=\"color:#6a8759;\">'function' </span>&amp;&amp;<br/>          <span style=\"color:#cc7832;font-weight:bold;\">typeof </span>nextProps.<span style=\"color:#9876aa;\">onClick </span>=== <span style=\"color:#6a8759;\">'function'</span>) {<br/>        transaction.getReactMountReady().<span style=\"color:#ffc66d;\">enqueue</span>(<br/>          <span style=\"color:#ffc66d;\">trapClickOnNonInteractiveElement</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">          </span><span style=\"color:#cc7832;font-weight:bold;\">this<br/></span><span style=\"color:#cc7832;font-weight:bold;\">        </span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>}<br/>      <span style=\"color:#cc7832;font-weight:bold;\">break</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><br/>  <span style=\"color:#ffc66d;\">assertValidProps</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>nextProps)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>isCustomComponentTag = <span style=\"color:#ffc66d;\">isCustomComponent</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span><span style=\"color:#cc7832;\">, </span>nextProps)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#808080;\">//根据新旧props的差异更新对应dom元素上的属性<br/></span><span style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_updateDOMProperties</span>(lastProps<span style=\"color:#cc7832;\">, </span>nextProps<span style=\"color:#cc7832;\">, </span>transaction<span style=\"color:#cc7832;\">, </span>isCustomComponentTag)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#808080;\">//更新子节点内容，diff算法（diff算法下文将详细介绍）<br/></span><span style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_updateDOMChildren</span>(<br/>    lastProps<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>nextProps<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>context<br/>  )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#808080;\">//更新节点后根据新的props中的值设置dom属性比如value、checked等<br/></span><span style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">switch </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span>) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'input'</span>:<br/>      <span style=\"color:#808080;\">// Update the wrapper around inputs *after* updating props. This has to<br/></span><span style=\"color:#808080;\">      // happen after `_updateDOMProperties`. Otherwise HTML5 input validations<br/></span><span style=\"color:#808080;\">      // raise warnings and prevent the new value from being assigned.<br/></span><span style=\"color:#808080;\">      </span>ReactDOMInput.<span style=\"color:#ffc66d;\">updateWrapper</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">break</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    <b>//略去其他……</b></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span>}<br/>}<span style=\"color:#cc7832;\">,</span>\n</pre><br/></div><div>3）unmountComponent 去掉React Component实例上的事件监听器，循环调用子组件的unmountComponent方法，不直接删除dom节点，由父节点统一清除。</div><div><br/></div><div>1.3）<font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); color: rgb(78, 89, 128);\">ReactCompositeComponent</font></div><div><br/></div><div> 1）mountComponent</div><div style=\"text-align: center; \"><img src=\"/images/2017-01-20/%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B%E5%9B%BE%20(2).png\" height=\"548\" width=\"213\"/><br/></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><br/><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Initializes the component, renders markup, and registers event listeners.<br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction|ReactServerRenderingTransaction} transaction<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?object} hostParent<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?object} hostContainerInfo<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?object} context<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@return </span><span style=\"color:#629755;font-style:italic;\">{?string} Rendered markup to be inserted into the DOM.<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@final<br/></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\" /><span style=\"color:#629755;font-style:italic;\">* </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@internal<br/></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\" /><span style=\"color:#629755;font-style:italic;\">*/<br/></span>mountComponent: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br/>    transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>hostParent<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>hostContainerInfo<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>context<br/>) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_context </span>= context<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_mountOrder </span>= nextMountID++<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_hostParent </span>= hostParent<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_hostContainerInfo </span>= hostContainerInfo<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>publicProps = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span>.<span style=\"color:#9876aa;\">props</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>publicContext = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_processContext</span>(context)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>Component = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span>.<span style=\"color:#9876aa;\">type</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>updateQueue = transaction.<span style=\"color:#ffc66d;\">getUpdateQueue</span>()<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// Initialize the public class<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>doConstruct = <span style=\"color:#ffc66d;\">shouldConstruct</span>(Component)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>inst = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_constructComponent</span>(<br/>        doConstruct<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>publicProps<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>publicContext<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>updateQueue<br/>    )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>renderedElement<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// Support functional components<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(!doConstruct &amp;&amp; (inst == <span style=\"color:#cc7832;font-weight:bold;\">null </span>|| inst.<span style=\"color:#ffc66d;\">render </span>== <span style=\"color:#cc7832;font-weight:bold;\">null</span>)) {<br/>        renderedElement = inst<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>inst = <span style=\"color:#cc7832;font-weight:bold;\">new </span><span style=\"color:#ffc66d;\">StatelessComponent</span>(Component)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_compositeType </span>= ReactCompositeComponentTypes.<span style=\"color:#9876aa;\">StatelessFunctional</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>        <span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#ffc66d;\">isPureComponent</span>(Component)) {<br/>            <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_compositeType </span>= ReactCompositeComponentTypes.<span style=\"color:#9876aa;\">PureClass</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>            <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_compositeType </span>= ReactCompositeComponentTypes.<span style=\"color:#9876aa;\">ImpureClass</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/>    }<br/><br/>    <span style=\"color:#808080;\">// These should be set up in the constructor, but as a convenience for<br/></span><span style=\"color:#808080;\">    // simpler class abstractions, we set them up after the fact.<br/></span><span style=\"color:#808080;\">    </span>inst.<span style=\"color:#9876aa;\">props </span>= publicProps<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>inst.<span style=\"color:#9876aa;\">context </span>= publicContext<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>inst.<span style=\"color:#9876aa;\">refs </span>= emptyObject<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>inst.<span style=\"color:#9876aa;\">updater </span>= updateQueue<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_instance </span>= inst<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// Store a reference from the instance back to the internal representation<br/></span><span style=\"color:#808080;\">    </span>ReactInstanceMap.<span style=\"color:#ffc66d;\">set</span>(inst<span style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>initialState = inst.<span style=\"color:#9876aa;\">state</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(initialState === <span style=\"color:#9876aa;\">undefined</span>) {<br/>        inst.<span style=\"color:#9876aa;\">state </span>= initialState = <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/><br/>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingStateQueue </span>= <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingReplaceState </span>= <span style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingForceUpdate </span>= <span style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">//调用生命周期函数<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(inst.<span style=\"color:#9876aa;\">componentWillMount</span>) {<br/>        inst.<span style=\"color:#9876aa;\">componentWillMount</span>()<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">// When mounting, calls to `setState` by `componentWillMount` will set<br/></span><span style=\"color:#808080;\">        // `this._pendingStateQueue` without triggering a re-render.注意这里新的state是在</span><span style=\"color: rgb(152, 118, 170); font-size: 9pt;\">componentWillMount执行完后更新的，因此在<font style=\"font-family: Menlo; font-size: 12px; background-color: rgb(43, 43, 43); color: rgb(152, 118, 170);\">componentWillMount</font>里的this.state不是最新的</span><span style=\"color:#808080;\"><br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingStateQueue</span>) {<br/>            inst.<span style=\"color:#9876aa;\">state </span>= <span style=\"color:#cc7832;font-weight:bold;\">this</span>._processPendingState(inst.<span style=\"color:#9876aa;\">props</span><span style=\"color:#cc7832;\">, </span>inst.<span style=\"color:#9876aa;\">context</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/>    }<br/><br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>markup<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">//带错误监听，内部调用performInitialMount，render函数返回的内容用来初始化一个ReactComponent实例，然后调用ReactReconciler.mountComponent获得dom树<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(inst.<span style=\"color:#ffc66d;\">unstable_handleError</span>) {<br/>        markup = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">performInitialMountWithErrorHandling</span>(<br/>            renderedElement<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>hostParent<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>hostContainerInfo<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>context<br/>        )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>        markup = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">performInitialMount</span>(<br/>            renderedElement<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>hostParent<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>hostContainerInfo<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>context<br/>        )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/>    <span style=\"color:#808080;\">//<font style=\"font-family: Menlo; font-size: 12px; background-color: rgb(43, 43, 43); color: rgb(255, 198, 109);\">componentDidMount执行</font><br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(inst.<span style=\"color:#ffc66d;\">componentDidMount</span>) {<br/>        transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(inst.<span style=\"color:#ffc66d;\">componentDidMount</span><span style=\"color:#cc7832;\">, </span>inst)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/><br/>    <span style=\"color:#808080;\">// setState callbacks during willMount should end up here<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">const </span>callbacks = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingCallbacks</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(callbacks) {<br/>        <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingCallbacks </span>= <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(let i = <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">; </span>i &lt; callbacks.<span style=\"color:#9876aa;\">length</span><span style=\"color:#cc7832;\">; </span>i++) {<br/>            transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<br/>                callbacks[i]<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">                </span>inst<br/>            )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/>    }<br/><br/>    <span style=\"color:#cc7832;font-weight:bold;\">return </span>markup<span style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">,</span>\n</pre><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#cc7832;\"><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#ffc66d;\">performInitialMount</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br/>  renderedElement<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>hostParent<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>hostContainerInfo<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>context<br/>) {<br/>  <span style=\"color:#808080;\">// If not a stateless component, we now render<br/></span><span style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(renderedElement === <span style=\"color:#9876aa;\">undefined</span>) {<br/>    renderedElement = <span style=\"color:#cc7832;font-weight:bold;\">this</span>._renderValidatedComponent()<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>nodeType = ReactNodeTypes.<span style=\"color:#ffc66d;\">getType</span>(renderedElement)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_renderedNodeType </span>= nodeType<span style=\"color:#cc7832;\">;</span></pre><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#cc7832;\">  //得到当前ReactElement对应的ReactComponent实例<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>child = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_instantiateReactComponent</span>(<br/>    renderedElement<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>nodeType !== ReactNodeTypes.<span style=\"color:#9876aa;\">EMPTY </span><span style=\"color:#808080;\">/* shouldHaveDebugID */<br/></span><span style=\"color:#808080;\">  </span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_renderedComponent </span>= child<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>debugID = <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">;</span><br/>  //递归生成子节点dom树<br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>markup = ReactReconciler.<span style=\"color:#ffc66d;\">mountComponent</span>(<br/>    child<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>hostParent<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>hostContainerInfo<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_processChildContext</span>(context)<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>debugID<br/>  )<span style=\"color:#cc7832;\">;</span><br/><br/>  <span style=\"color:#cc7832;font-weight:bold;\">return </span>markup<span style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">,<br/></span>\n</pre><br/></span></pre>2）receiveComponent </div><div>这里负责生命周期的componentWillReceiveProps、shouldComponentUpdate、componentWillUpdate、render、componentDidUpdate。注意在前三个生命周期函数中调用this.state无法获取更新后的this.state因为为实例更新state的inst.state=nextState在componentWillUpdate之后调用，即render和componentDidUpdate中可以，禁止在shouldComponentUpdate和componentWillUpdate中调用setState，会造成循环调用（原因参见src/renderers/shared/stack/reconciler/ReactCompositeComponent.js的performUpdateIfNecessary方法）</div><div style=\"text-align: center; \"><img src=\"/images/2017-01-20/%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B%E5%9B%BE%20(3).png\" height=\"685\" width=\"564\"/><br/></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><br/><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Perform an update to a mounted component. The componentWillReceiveProps and<br/></span><span style=\"color:#629755;font-style:italic;\"> * shouldComponentUpdate methods are called, then (assuming the update isn't<br/></span><span style=\"color:#629755;font-style:italic;\"> * skipped) the remaining update lifecycle methods are called and the DOM<br/></span><span style=\"color:#629755;font-style:italic;\"> * representation is updated.<br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * By default, this implements React's rendering and reconciliation algorithm.<br/></span><span style=\"color:#629755;font-style:italic;\"> * Sophisticated clients may wish to override this.<br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction} transaction<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactElement} prevParentElement<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactElement} nextParentElement<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@internal<br/></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\" /><span style=\"color:#629755;font-style:italic;\">* </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@overridable<br/></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\" /><span style=\"color:#629755;font-style:italic;\">*/<br/></span>updateComponent: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br/>    transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>prevParentElement<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>nextParentElement<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>prevUnmaskedContext<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>nextUnmaskedContext<br/>) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>inst = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_instance</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>willReceive = <span style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextContext<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// Determine if the context has changed or not<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_context </span>=== nextUnmaskedContext) {<br/>        nextContext = inst.<span style=\"color:#9876aa;\">context</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>        nextContext = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_processContext</span>(nextUnmaskedContext)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>willReceive = <span style=\"color:#cc7832;font-weight:bold;\">true</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/><br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>prevProps = prevParentElement.<span style=\"color:#9876aa;\">props</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextProps = nextParentElement.<span style=\"color:#9876aa;\">props</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// Not a simple state update but a props update<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(prevParentElement !== nextParentElement) {<br/>        willReceive = <span style=\"color:#cc7832;font-weight:bold;\">true</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/><br/>    <span style=\"color:#808080;\">// An update here will schedule an update but immediately set<br/></span><span style=\"color:#808080;\">    // _pendingStateQueue which will ensure that any state updates gets<br/></span><span style=\"color:#808080;\">    // immediately reconciled instead of waiting for the next batch.<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(willReceive &amp;&amp; inst.<span style=\"color:#ffc66d;\">componentWillReceiveProps</span>) {<br/>        inst.<span style=\"color:#ffc66d;\">componentWillReceiveProps</span>(nextProps<span style=\"color:#cc7832;\">, </span>nextContext)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/><br/>    <span style=\"color:#808080;\">// If updating happens to enqueue any new updates, we shouldn't execute new<br/></span><span style=\"color:#808080;\">    // callbacks until the next render happens, so stash the callbacks first.<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>callbacks = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingCallbacks</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingCallbacks </span>= <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextState = <span style=\"color:#cc7832;font-weight:bold;\">this</span>._processPendingState(nextProps<span style=\"color:#cc7832;\">, </span>nextContext)<span style=\"color:#cc7832;\">; </span><span style=\"color:#808080;\">//获得nextState<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>shouldUpdate = <span style=\"color:#cc7832;font-weight:bold;\">true</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(!<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingForceUpdate</span>) { <span style=\"color:#808080;\">//没设置forseupdate<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>prevState = inst.<span style=\"color:#9876aa;\">state</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>shouldUpdate = willReceive || nextState !== prevState<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//如果提供shouldComponentUpdate，调用函数，否则新旧state和props浅比较确定是否更新<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(inst.<span style=\"color:#ffc66d;\">shouldComponentUpdate</span>) {<br/>            shouldUpdate = inst.<span style=\"color:#ffc66d;\">shouldComponentUpdate</span>(nextProps<span style=\"color:#cc7832;\">, </span>nextState<span style=\"color:#cc7832;\">, </span>nextContext)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>            <span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_compositeType </span>=== ReactCompositeComponentTypes.<span style=\"color:#9876aa;\">PureClass</span>) {<br/>                shouldUpdate =<br/>                    !shallowEqual(prevProps<span style=\"color:#cc7832;\">, </span>nextProps) ||<br/>                    !shallowEqual(inst.<span style=\"color:#9876aa;\">state</span><span style=\"color:#cc7832;\">, </span>nextState)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span>}<br/>        }<br/>    }<br/><br/>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_updateBatchNumber </span>= <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(shouldUpdate) {<br/>        <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingForceUpdate </span>= <span style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">// Will set `this.props`, `this.state` and `this.context`.<br/></span><span style=\"color:#808080;\">        //设置新props、state，调用生命周期函数（如果提供），更新dom<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>._performComponentUpdate(<br/>            nextParentElement<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>nextProps<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>nextState<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>nextContext<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>nextUnmaskedContext<br/>        )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>        <span style=\"color:#808080;\">// If it's determined that a component should not update, we still want<br/></span><span style=\"color:#808080;\">        // to set props and state but we shortcut the rest of the update.<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement </span>= nextParentElement<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_context </span>= nextUnmaskedContext<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>inst.<span style=\"color:#9876aa;\">props </span>= nextProps<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>inst.<span style=\"color:#9876aa;\">state </span>= nextState<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>inst.<span style=\"color:#9876aa;\">context </span>= nextContext<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/>    <span style=\"color:#808080;\">//render之后调用的事件队列<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(callbacks) {<br/>        <span style=\"color:#cc7832;font-weight:bold;\">for </span>(<span style=\"color:#cc7832;font-weight:bold;\">var </span>j = <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">; </span>j &lt; callbacks.<span style=\"color:#9876aa;\">length</span><span style=\"color:#cc7832;\">; </span>j++) {<br/>            transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<br/>                callbacks[j]<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">                </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">getPublicInstance</span>()<br/>            )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/>    }<br/>}<span style=\"color:#cc7832;\">,</span>\n</pre><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Merges new props and state, notifies delegate methods of update and<br/></span><span style=\"color:#629755;font-style:italic;\"> * performs update.<br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactElement} nextElement Next element<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{object} nextProps Next public object to set as properties.<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?object} nextState Next object to set as state.<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?object} nextContext Next public object to set as context.<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction} transaction<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?object} unmaskedContext<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@private<br/></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\" /><span style=\"color:#629755;font-style:italic;\">*/<br/></span>_performComponentUpdate: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br/>  nextElement<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>nextProps<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>nextState<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>nextContext<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>unmaskedContext<br/>) {<br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>inst = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_instance</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>hasComponentDidUpdate = Boolean(inst.<span style=\"color:#ffc66d;\">componentDidUpdate</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>prevProps<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>prevState<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>prevContext<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(hasComponentDidUpdate) {<br/>    prevProps = inst.<span style=\"color:#9876aa;\">props</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>prevState = inst.<span style=\"color:#9876aa;\">state</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>prevContext = inst.<span style=\"color:#9876aa;\">context</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><br/>  <span style=\"color:#cc7832;font-weight:bold;\">if </span>(inst.<span style=\"color:#ffc66d;\">componentWillUpdate</span>) {<br/>     inst.<span style=\"color:#ffc66d;\">componentWillUpdate</span>(nextProps<span style=\"color:#cc7832;\">, </span>nextState<span style=\"color:#cc7832;\">, </span>nextContext)<span style=\"color:#cc7832;\">;</span><br/>  }<br/><br/>  <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement </span>= nextElement<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_context </span>= unmaskedContext<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>inst.<span style=\"color:#9876aa;\">props </span>= nextProps<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>inst.<span style=\"color:#9876aa;\">state </span>= nextState<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>inst.<span style=\"color:#9876aa;\">context </span>= nextContext<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(inst.<span style=\"color:#ffc66d;\">unstable_handleError</span>) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>._updateRenderedComponentWithErrorHandling(transaction<span style=\"color:#cc7832;\">, </span>unmaskedContext)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>._updateRenderedComponent(transaction<span style=\"color:#cc7832;\">, </span>unmaskedContext)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><br/>  <span style=\"color:#cc7832;font-weight:bold;\">if </span>(hasComponentDidUpdate) {<br/>      transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<br/>        inst.<span style=\"color:#ffc66d;\">componentDidUpdate</span>.<span style=\"color:#ffc66d;\">bind</span>(inst<span style=\"color:#cc7832;\">, </span>prevProps<span style=\"color:#cc7832;\">, </span>prevState<span style=\"color:#cc7832;\">, </span>prevContext)<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>inst<br/>      )<span style=\"color:#cc7832;\">;</span><br/>  }<br/>}<span style=\"color:#cc7832;\">,</span>\n</pre><br/></div><div>3）unmountComponent 调用生命周期函数componentWillUnmount（如果提供），调用当前组件对应的React Component实例对应的unmountComponent函数，重置一堆变量。</div><div><br/></div><div><br/></div><div/><ol start=\"2\"><li>渲染组件的工作主要在这个函数，通过<font style=\"font-family: Helvetica; color: rgb(69, 69, 69);\">instantiateReactComponent</font>得到了各种类型组件对应的ReactComponent实例（可以理解为一个ReactComponent实例的树，包含所有子节点的ReactComponent实例），然后调用实例的mountComponent方法（上面讲解过）得到要渲染的‘markup’可能是一个dom树，或一个DOMLazyTree结构保存将子节点的dom结构树保存到数组里，最后插入到container中。</li></ol></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Mounts this component and inserts it into the DOM.<br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactComponent} componentInstance The instance to mount.<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{DOMElement} container DOM element to mount into.<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction} transaction<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{boolean} shouldReuseMarkup If true, do not insert markup<br/></span><span style=\"color:#629755;font-style:italic;\"> */<br/></span><span style=\"color:#cc7832;font-weight:bold;\">function </span><span style=\"color:#ffc66d;\">mountComponentIntoNode</span>(<br/>  wrapperInstance<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>container<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>shouldReuseMarkup<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>context<br/>) {<br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>markerName<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(ReactFeatureFlags.<span style=\"color:#9876aa;\">logTopLevelRenders</span>) { //记录拼接组件对应的dom模板所用的时长<br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>wrappedElement = wrapperInstance.<span style=\"color:#9876aa;\">_currentElement</span>.<span style=\"color:#9876aa;\">props</span>.child<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>type = wrappedElement.<span style=\"color:#9876aa;\">type</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>markerName = <span style=\"color:#6a8759;\">'React mount: ' </span>+ (<br/>      <span style=\"color:#cc7832;font-weight:bold;\">typeof </span>type === <span style=\"color:#6a8759;\">'string' </span>? type :<br/>      type.<span style=\"color:#9876aa;\">displayName </span>|| type.<span style=\"color:#9876aa;\">name<br/></span><span style=\"color:#9876aa;\">    </span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#9876aa;\">console</span>.<span style=\"color:#ffc66d;\">time</span>(markerName)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>markup = ReactReconciler.<span style=\"color:#ffc66d;\">mountComponent</span>( //调用组件实例的mountComponent方法获得要渲染的结构（可能是一个html片段或一个src/<font style=\"font-size: 12px; color: rgb(169, 183, 198); font-family: Menlo;\">renderers/dom/stack/client/DOMLazyTree.js结构）</font>，添加事件以及ref属性<br/>    wrapperInstance<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>ReactDOMContainerInfo(wrapperInstance<span style=\"color:#cc7832;\">, </span>container)<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>context<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#6897bb;\">0 </span><span style=\"color:#808080;\">/* parentDebugID */<br/></span><span style=\"color:#808080;\">  </span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(markerName) {<br/>    <span style=\"color:#9876aa;\">console</span>.<span style=\"color:#ffc66d;\">timeEnd</span>(markerName)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><br/>  wrapperInstance.<span style=\"color:#9876aa;\">_renderedComponent</span>.<span style=\"color:#9876aa;\">_topLevelWrapper </span>= wrapperInstance<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>ReactMount.<span style=\"color:#ffc66d;\">_mountImageIntoNode</span>( //将上面得到的结构（递归）渲染到container dom节点中，显示在页面上<br/>    markup<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>container<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>wrapperInstance<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>shouldReuseMarkup<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>transaction<br/>  )<span style=\"color:#cc7832;\">;<br/></span>}\n</pre><br/></div><div>以上是对虚拟dom和渲染策略的讲解。</div><div><br/></div><div>推荐阅读：</div><div><span style=\"font: 12.0px Helvetica; color: #e4af09\"><a href=\"https://zhuanlan.zhihu.com/purerender\">https://zhuanlan.zhihu.com/purerender</a></span><span style=\"font: 12.0px Helvetica; color: #454545\" /><span style=\"font: 12.0px 'PingFang SC'; color: #454545\">关于</span><span style=\"font: 12.0px Helvetica; color: #454545\">react</span><span style=\"font: 12.0px 'PingFang SC'; color: #454545\">源码解析系列文章</span><span style=\"font: 12.0px Helvetica; color: #454545\"><br/>\n<span style=\"color: #e4af09\"><a href=\"http://purplebamboo.github.io/2015/09/15/reactjs_source_analyze_part_one/\">http://purplebamboo.github.io/2015/09/15/reactjs_source_analyze_part_one/</a></span></span></div><div><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-size: 12px; font-family: Helvetica;\"><font color=\"#e4af09\">《深入React技术栈》这本书的第三章（有需要可以找我借）<br/></font>\n</span><br/></div><div><br/></div><div><br/></div>","source":"_posts/react源码学习——Virtual Dom和渲染、更新原理.html","raw":"---\nlayout: post\ntitle:  react源码学习——Virtual Dom和渲染、更新原理\ndate:   2017-01-20 08:43:59\nauthor: Lily\ncategories: frontend\ntags:\n- react\n- 源码解读\n---\n\n<div><span style=\"color: rgb(68, 68, 68); font-family: 'Helvetica Neue', Helvetica, 'Lucida Grande', Arial, 'Hiragino Sans GB', 微软雅黑, 'WenQuanYi Micro Hei', STHeiti, SimSun, sans-serif; font-size: 14px; orphans: 2; widows: 2;\">前端开发过程中，更新页面的数据、样式等操作都要操作dom，而复杂的dom操作通常是产品性能瓶颈原因之一，为此React引入了Virtual Dom的概念，Virtual Dom其实是用js实现了一套dom api，包括虚拟dom模型、生命周期管理、diff算法等。React会将传入的JSX片段转化成虚拟dom节点，当数据更新时，通过diff算法找到要变更的dom节点，并只对变化的部分进行实际的浏览器dom更新，而不是重新渲染整个dom树。下面我们结合组件渲染流程结合源码介绍一下React如何创建虚拟节点，以及如何渲染、更新节点的整个流程。</span><br/></div><div><span style=\"color: rgb(68, 68, 68); font-family: 'Helvetica Neue', Helvetica, 'Lucida Grande', Arial, 'Hiragino Sans GB', 微软雅黑, 'WenQuanYi Micro Hei', STHeiti, SimSun, sans-serif; font-size: 14px; orphans: 2; widows: 2;\">——以下代码是React v15.4.2版本——<br/></span></div><div>React项目渲染组件的方法是：ReactDom.render，将父组件连带所有包含在内的子组件渲染出来。render方法最终调用了 src/renderers/dom/stack/client/ReactMount.js 的render方法。</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Renders a React component into the DOM in the supplied `container`.<br/></span><span style=\"color:#629755;font-style:italic;\"> * See <a href=\"https://facebook.github.io/react/docs/react-dom.html#render\">https://facebook.github.io/react/docs/react-dom.html#render</a><br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * If the React component was previously rendered into `container`, this will<br/></span><span style=\"color:#629755;font-style:italic;\"> * perform an update on it and only mutate the DOM as necessary to reflect the<br/></span><span style=\"color:#629755;font-style:italic;\"> * latest React component.<br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactElement} nextElement Component element to render.<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{DOMElement} container DOM element to render into.<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?function} callback function triggered on completion<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@return </span><span style=\"color:#629755;font-style:italic;\">{ReactComponent} Component instance rendered in `container`.<br/></span><span style=\"color:#629755;font-style:italic;\"> */<br/></span><span style=\"color:#ffc66d;\">render</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(nextElement<span style=\"color:#cc7832;\">, </span>container<span style=\"color:#cc7832;\">, </span>callback) {<br/>  <span style=\"color:#cc7832;font-weight:bold;\">return </span>ReactMount.<span style=\"color:#ffc66d;\">_renderSubtreeIntoContainer</span>(<span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">, </span>nextElement<span style=\"color:#cc7832;\">, </span>container<span style=\"color:#cc7832;\">, </span>callback)<span style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">,</span></pre></div><div>注意这里第一个参数是ReactElement类型，通常为了可读性和开发效率我们传入JSX写的结构，最终会编译转换成调用React的createElement方法生成虚拟元素ReactElement结构传入render中。这里我们先看一下React.createElement做了哪些事情（src/isomorphic/classic/element/ReactElement.js）</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><br/><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Create and return a new ReactElement of the given type.<br/></span><span style=\"color:#629755;font-style:italic;\"> * See <a href=\"https://facebook.github.io/react/docs/react-api.html#createelement\">https://facebook.github.io/react/docs/react-api.html#createelement</a><br/></span><span style=\"color:#629755;font-style:italic;\"> */<br/></span><span style=\"color:#ffc66d;\">ReactElement</span>.<span style=\"color:#ffc66d;\">createElement </span>= <span style=\"color:#cc7832;font-weight:bold;\">function</span>(type<span style=\"color:#cc7832;\">, </span>config<span style=\"color:#cc7832;\">, </span>children) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>propName<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// Reserved names are extracted<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>props = {}<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>key = <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>ref = <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>self = <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>source = <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(config != <span style=\"color:#cc7832;font-weight:bold;\">null</span>) {<br/>        <span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#ffc66d;\">hasValidRef</span>(config)) {<br/>            ref = config.<span style=\"color:#9876aa;\">ref</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/>        <span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#ffc66d;\">hasValidKey</span>(config)) {<br/>            key = <span style=\"color:#6a8759;\">'' </span>+ config.key<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/><br/>        self = config.<span style=\"color:#9876aa;\">__self </span>=== <span style=\"color:#9876aa;\">undefined </span>? <span style=\"color:#cc7832;font-weight:bold;\">null </span>: config.<span style=\"color:#9876aa;\">__self</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>source = config.<span style=\"color:#9876aa;\">__source </span>=== <span style=\"color:#9876aa;\">undefined </span>? <span style=\"color:#cc7832;font-weight:bold;\">null </span>: config.<span style=\"color:#9876aa;\">__source</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">// config中的内容复制到props<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(propName <span style=\"color:#cc7832;font-weight:bold;\">in </span>config) {<br/>            <span style=\"color:#cc7832;font-weight:bold;\">if </span>(hasOwnProperty.<span style=\"color:#ffc66d;\">call</span>(config<span style=\"color:#cc7832;\">, </span>propName) &amp;&amp;<br/>                !RESERVED_PROPS.<span style=\"color:#ffc66d;\">hasOwnProperty</span>(propName)) {<br/>                props[propName] = config[propName]<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span>}<br/>        }<br/>    }<br/><br/>    <span style=\"color:#808080;\">//将第三个及之后的参数作为children赋值给props的children属性<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>childrenLength = arguments.<span style=\"color:#9876aa;\">length </span>- <span style=\"color:#6897bb;\">2</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(childrenLength === <span style=\"color:#6897bb;\">1</span>) {<br/>        props.<span style=\"color:#9876aa;\">children </span>= children<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(childrenLength &gt; <span style=\"color:#6897bb;\">1</span>) {<br/>        <span style=\"color:#cc7832;font-weight:bold;\">var </span>childArray = Array(childrenLength)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(<span style=\"color:#cc7832;font-weight:bold;\">var </span>i = <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">; </span>i &lt; childrenLength<span style=\"color:#cc7832;\">; </span>i++) {<br/>            childArray[i] = arguments[i + <span style=\"color:#6897bb;\">2</span>]<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/><br/>        props.<span style=\"color:#9876aa;\">children </span>= childArray<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/><br/>    <span style=\"color:#808080;\">// 如果某个props为空且存在默认props，赋值<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(type &amp;&amp; type.<span style=\"color:#9876aa;font-style:italic;\">defaultProps</span>) {<br/>        <span style=\"color:#cc7832;font-weight:bold;\">var </span>defaultProps = type.<span style=\"color:#9876aa;font-style:italic;\">defaultProps</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(propName <span style=\"color:#cc7832;font-weight:bold;\">in </span>defaultProps) {<br/>            <span style=\"color:#cc7832;font-weight:bold;\">if </span>(props[propName] === <span style=\"color:#9876aa;\">undefined</span>) {<br/>                props[propName] = defaultProps[propName]<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span>}<br/>        }<br/>    }<br/><br/>    <span style=\"color:#cc7832;font-weight:bold;\">return </span><span style=\"color:#ffc66d;\">ReactElement</span>(<br/>        type<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>key<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>ref<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>self<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>source<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>ReactCurrentOwner.<span style=\"color:#9876aa;\">current</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>props<br/>    )<span style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">;</span>\n</pre></div><div><br/></div><div>下面结合源码详细讲解整个渲染的过程。</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#ffc66d;\">render</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(nextElement<span style=\"color:#cc7832;\">, </span>container<span style=\"color:#cc7832;\">, </span>callback) {<br/>  <span style=\"color:#cc7832;font-weight:bold;\">return </span>ReactMount.<span style=\"color:#ffc66d;\">_renderSubtreeIntoContainer</span>(<span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">, </span>nextElement<span style=\"color:#cc7832;\">, </span>container<span style=\"color:#cc7832;\">, </span>callback)<span style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">,</span>\n</pre>去掉各种检查后的代码如下：</div><div>思路：首先获得dom container里原有的ReactElement，如果存在则将实际需要渲染的ReactElement（上一步用<font style=\"font-family: Menlo; font-size: 12px; background-color: rgb(43, 43, 43); color: rgb(128, 128, 128);\">TopLevelWrapper</font>包裹的child）和新的ReactElement做比较（1），如果应该更新则更新组件（2），否则清空container内之前渲染的组件（3），生成新的根ReactComponent渲染到container中（4）。</div><div>主要流程图如下：<br/><img src=\"/images/2017-01-20/%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B%E5%9B%BE.png\" height=\"558\" width=\"650\"/><br/></div><div><pre style=\"background-color: rgb(43, 43, 43);\"><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">_renderSubtreeIntoContainer</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">: </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">function</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(parentComponent</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">, </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">nextElement</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">, </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">container</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">, </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">callback) {</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\"><br/></span><pre style=\"font-family: Menlo; font-size: 9pt; background-color: rgb(43, 43, 43);\"><span style=\"font-size: 9pt;\"><font><pre style=\"background-color: rgb(43, 43, 43); font-family: Menlo; font-size: 9pt;\">   <span style=\"color: rgb(128, 128, 128);\">//nextElement外包一层react定义的TopLevelWrapper用于屏蔽各类组件的差异记录一些变量，比如顶层组件的计数<br/></span><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">   var </span><font color=\"#a9b7c6\">nextWrappedElement = React.</font><span style=\"color: rgb(152, 118, 170);\">createElement</span><font color=\"#a9b7c6\">(<br/>     </font><span style=\"color: rgb(255, 198, 109);\">TopLevelWrapper</span><span style=\"color: rgb(204, 120, 50);\">,<br/></span><span style=\"color: rgb(204, 120, 50);\">     </span><font color=\"#a9b7c6\">{ </font><span style=\"color: rgb(152, 118, 170);\">child</span><font color=\"#a9b7c6\">: nextElement }<br/>   )</font>;</pre></font></span></pre><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">nextContext = getContextForSubtree(parentComponent)</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;//本次调用返回null<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">prevComponent = </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">getTopLevelWrapperInContainer</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(container)</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\"><br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">if </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(prevComponent) {<br/>    </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">prevWrappedElement = prevComponent.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_currentElement</span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">prevElement = prevWrappedElement.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">props</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">.child</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">if </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(shouldUpdateReactComponent(prevElement</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">, </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">nextElement)) {      &lt;——— 1<br/>      </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">publicInst = prevComponent.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_renderedComponent</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">getPublicInstance</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">()</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">      </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">updatedCallback = callback &amp;&amp; </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">function</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">() {<br/>        callback.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">call</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(publicInst)</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">      </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">}</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">      </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">ReactMount.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">_updateRootComponent</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(   &lt;———— 2<br/>        prevComponent</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">        </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">nextWrappedElement</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">        </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">nextContext</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">        </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">container</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">        </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">updatedCallback<br/>      )</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">      </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">return </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">publicInst</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">} </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">else </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">{<br/>      ReactMount.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">unmountComponentAtNode</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(container)</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;  <font style=\"font-family: Menlo; background-color: rgb(43, 43, 43); font-size: 12px; color: rgb(169, 183, 198);\">&lt;———— 3</font><br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">}<br/>  }<br/><br/>  </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">reactRootElement = </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">getReactRootElementInContainer</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(container)</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;//获得container节点的第一个dom子节点<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">containerHasReactMarkup =<br/>    reactRootElement &amp;&amp; !!</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">internalGetID</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(reactRootElement)</font><font face=\"Menlo\" color=\"#cc7832\" size=\"2\">; //判断这个dom子节点是不是React渲染的（React渲染的会有会有一个‘data-reacted’的attribute属性）<br/></font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">containerHasNonRootReactChild = </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">hasNonRootReactChild</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(container)</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">; //判断container是否包含不是React根节点的React实例<br/></span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\"><br/>  </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font color=\"#a9b7c6\"><font face=\"Menlo\" size=\"2\">shouldReuseMarkup =           //这里不太明白什么情况会重用markup，因为在’3’已经把container中的dom清空了，欢迎讨论<br/>    containerHasReactMarkup &amp;&amp;<br/>    !prevComponent &amp;&amp;<br/>    !containerHasNonRootReactChild</font></font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">component = ReactMount.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">_renderNewRootComponent</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(   </font><font style=\"font-family: Menlo; font-size: 12px; color: rgb(169, 183, 198); background-color: rgb(43, 43, 43);\">&lt;———— 4</font><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\"><br/>    nextWrappedElement</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">container</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">shouldReuseMarkup</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">nextContext</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">callback<br/>  ).</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_renderedComponent</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">getPublicInstance</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">()</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">return </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">component</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">}</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br/></span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\"\n/></pre><br/></div><div>下面分别展开研究四个函数：</div><div><div><ol start=\"1\"><li>shouldUpdateReactComponent.js ( src/renderers/shared/shared/shouldUpdateReactComponent.js ）</li></ol>这里只做了简单的类型比较，如果父节点的类型不同，则即使子节点相同也不做递归比较，官方文档参见<a href=\"https://facebook.github.io/react/docs/reconciliation.html#elements-of-different-types\">这里</a>。<br/></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#cc7832;font-weight:bold;\">function </span><span style=\"color:#ffc66d;\">shouldUpdateReactComponent</span>(prevElement<span style=\"color:#cc7832;\">, </span>nextElement) {<br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>prevEmpty = prevElement === <span style=\"color:#cc7832;font-weight:bold;\">null </span>|| prevElement === <span style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextEmpty = nextElement === <span style=\"color:#cc7832;font-weight:bold;\">null </span>|| nextElement === <span style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(prevEmpty || nextEmpty) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">return </span>prevEmpty === nextEmpty<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>prevType = <span style=\"color:#cc7832;font-weight:bold;\">typeof </span>prevElement<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextType = <span style=\"color:#cc7832;font-weight:bold;\">typeof </span>nextElement<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(prevType === <span style=\"color:#6a8759;\">'string' </span>|| prevType === <span style=\"color:#6a8759;\">'number'</span>) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">return </span>(nextType === <span style=\"color:#6a8759;\">'string' </span>|| nextType === <span style=\"color:#6a8759;\">'number'</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>    <span style=\"color:#cc7832;font-weight:bold;\">return </span>(<br/>      nextType === <span style=\"color:#6a8759;\">'object' </span>&amp;&amp;<br/>      prevElement.<span style=\"color:#9876aa;\">type </span>=== nextElement.<span style=\"color:#9876aa;\">type </span>&amp;&amp;<br/>      prevElement.<span style=\"color:#9876aa;\">key </span>=== nextElement.<span style=\"color:#9876aa;\">key<br/></span><span style=\"color:#9876aa;\">    </span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/>}<br/>\n</pre></div></div><div><font style=\"font-size: 14px;\">  </font></div><div><font style=\"font-size: 14px;\">  2. <span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(69, 69, 69);\">ReactMount._updateRootComponent（  src/renderers/dom/stack/client/ReactMount.js ）</span><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(228, 175, 9);\"><br/>\n</span></font></div><div>最主要的两句：</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\">ReactUpdateQueue.<span style=\"color:#ffc66d;\">enqueueElementInternal</span>(prevComponent<span style=\"color:#cc7832;\">, </span>nextElement<span style=\"color:#cc7832;\">, </span>nextContext)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(callback) {<br/>  ReactUpdateQueue.<span style=\"color:#ffc66d;\">enqueueCallbackInternal</span>(prevComponent<span style=\"color:#cc7832;\">, </span>callback)<span style=\"color:#cc7832;\">;<br/></span>}\n</pre>这里调用了src/renderers/shared/stack/reconciler/ReactUpdateQueue.js 的两个函数，分别给ReactComponent实例添加属性，要渲染的ReactElemnt、初始化上下文和在渲染完成后执行的回掉函数队列，然后调用ReactUpdates.js (src/renderers/shared/stack/reconciler/ReactUpdates.js)的enqueueUpadate加入到更新队列中（更新策略下文将详细讲解）。</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#ffc66d;\">enqueueElementInternal</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(internalInstance<span style=\"color:#cc7832;\">, </span>nextElement<span style=\"color:#cc7832;\">, </span>nextContext) {<br/>  internalInstance.<span style=\"color:#9876aa;\">_pendingElement </span>= nextElement<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#808080;\">// </span><span style=\"color:#a8c023;font-style:italic;\">TODO: introduce _pendingContext instead of setting it directly.<br/></span><span style=\"color:#a8c023;font-style:italic;\">  </span>internalInstance.<span style=\"color:#9876aa;\">_context </span>= nextContext<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#ffc66d;\">enqueueUpdate</span>(internalInstance)<span style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">,</span>\n</pre></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#ffc66d;\">enqueueCallbackInternal</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(internalInstance<span style=\"color:#cc7832;\">, </span>callback) {<br/>  <span style=\"color:#cc7832;font-weight:bold;\">if </span>(internalInstance.<span style=\"color:#9876aa;\">_pendingCallbacks</span>) {<br/>    internalInstance.<span style=\"color:#9876aa;\">_pendingCallbacks</span>.<span style=\"color:#ffc66d;\">push</span>(callback)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>    internalInstance.<span style=\"color:#9876aa;\">_pendingCallbacks </span>= [callback]<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/>  <span style=\"color:#ffc66d;\">enqueueUpdate</span>(internalInstance)<span style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">,</span>\n</pre><br/></div><div> <font style=\"font-size: 14px;\"> 3.</font><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(69, 69, 69);\"><font style=\"font-size: 14px;\">ReactMount.unmountComponentAtNode</font></span></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Unmounts and destroys the React component rendered in the `container`.<br/></span><span style=\"color:#629755;font-style:italic;\"> * See <a href=\"https://facebook.github.io/react/docs/react-dom.html#unmountcomponentatnode\">https://facebook.github.io/react/docs/react-dom.html#unmountcomponentatnode</a><br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{DOMElement} container DOM element containing a React component.<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@return </span><span style=\"color:#629755;font-style:italic;\">{boolean} True if a component was found in and unmounted from<br/></span><span style=\"color:#629755;font-style:italic;\"> *                   `container`<br/></span><span style=\"color:#629755;font-style:italic;\"> */<br/></span><span style=\"color:#ffc66d;\">unmountComponentAtNode</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(container) {<br/><br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>prevComponent = <span style=\"color:#ffc66d;\">getTopLevelWrapperInContainer</span>(container)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(!prevComponent) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">return false</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/>  <span style=\"color:#cc7832;font-weight:bold;\">delete </span>instancesByReactRootID[prevComponent.<span style=\"color:#9876aa;\">_instance</span>.rootID]<span style=\"color:#cc7832;\">;//devtools会用到的映射，这里可以先忽略<br/></span><span style=\"color:#cc7832;\">  </span>ReactUpdates.<span style=\"color:#ffc66d;\">batchedUpdates</span>(<br/>    <span style=\"color:#ffc66d;\">unmountComponentFromNode</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>prevComponent<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>container<br/>  )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">return true</span><span style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">,</span>\n</pre>注意这里也调用ReactUpdates.js (src/renderers/shared/stack/reconciler/ReactUpdates.js)类的函数batchedUpadates更新组件（更新策略下文将详细讲解），传入三个参数，第一个参数作为更新策略执行过程中调用的函数，后两个作为参数，这里要执行的函数是：</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#cc7832;font-weight:bold;\">function </span><span style=\"color:#ffc66d;\">unmountComponentFromNode</span>(instance<span style=\"color:#cc7832;\">, </span>container) {<br/>  //这个函数主要作用是：1.去掉组件中的ref引用，调用组件的unmountComponent函数，这里主要有三类组件文本组件、html标签对应的组件和自定义组件，每种对应的unmountComponent实现方式不同，主要做些清理React内部用到的缓存，组件上绑定的事件之类的工作，具体参见下文。<br/>  ReactReconciler.<span style=\"color:#ffc66d;\">unmountComponent</span>(<br/>    instance<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">false </span><span style=\"color:#808080;\">/* safely */</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">false </span><span style=\"color:#808080;\">/* skipLifecycle */<br/></span><span style=\"color:#808080;\">  </span>)<span style=\"color:#cc7832;\">;<br/></span><br/>  <span style=\"color:#cc7832;font-weight:bold;\">if </span>(container.nodeType === DOC_NODE_TYPE) {<br/>    container = container.documentElement<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><br/>  <span style=\"color:#808080;\">//可以看到这里循环移除了container节点中的全部dom元素，有很多方法可以实现，这里有个有趣的效率对比试验： <a href=\"http://jsperf.com/emptying-a-node\">http://jsperf.com/emptying-a-node</a><br/></span><span style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">while </span>(container.lastChild) {<br/>    container.removeChild(container.lastChild)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><span style=\"background-color:#344134;\">}</span>\n</pre><br/></div><div><ol start=\"4\"><li><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(69, 69, 69);\"><font style=\"font-size: 14px;\">ReactMount._renderNewRootComponent</font></span></li></ol><div><font face=\"Helvetica\" color=\"#454545\">先ReactElement初始<font style=\"font-size: 14px;\">化ReactComponent实例（1），这里可能是自定义组件</font><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(69, 69, 69);\"><font style=\"font-size: 14px;\">ReactCompositeComponent，文本元素对应的ReactDOMTextComponent和浏览器基本元素对应的ReactDOMComponent。然后调用更新策略将组件渲染到container中，以及做一些比如ref绑定等初始化工作（2）。</font><br/>\n</span></font></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#ffc66d;\">_renderNewRootComponent</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br/>  nextElement<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>container<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>shouldReuseMarkup<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>context<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>callback<br/>) {<br/> //<span style=\"color: rgb(98, 151, 85); font-style: italic; font-size: 9pt;\">Listens to window scroll and resize events. We cache scroll values so that </span><span style=\"color: rgb(98, 151, 85); font-style: italic; font-size: 9pt;\">application code can access them without triggering reflows.这里先不做分析</span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span>ReactBrowserEventEmitter.<span style=\"color:#ffc66d;\">ensureScrollValueMonitoring</span>()<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>componentInstance = instantiateReactComponent(nextElement<span style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">false</span>)<span style=\"color:#cc7832;\">; &lt;——— 1<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(callback) {<br/>    componentInstance.<span style=\"color:#9876aa;\">_pendingCallbacks </span>= [<span style=\"color:#cc7832;font-weight:bold;\">function</span>() { //初始化render完成后调用的回掉函数队列<br/>      callback.<span style=\"color:#ffc66d;\">call</span>(componentInstance.<span style=\"color:#9876aa;\">_renderedComponent</span>.<span style=\"color:#ffc66d;\">getPublicInstance</span>())<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}]<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><br/>  <span style=\"color:#808080;\">// The initial render is synchronous but any updates that happen during<br/></span><span style=\"color:#808080;\">  // rendering, in componentWillMount or componentDidMount, will be batched<br/></span><span style=\"color:#808080;\">  // according to the current batching strategy.<br/></span><span style=\"color:#808080;\"><br/></span><span style=\"color:#808080;\">  </span>ReactUpdates.<span style=\"color:#ffc66d;\">batchedUpdates</span>(  &lt;———— 2<br/>    <span style=\"color:#ffc66d;\">batchedMountComponentIntoNode</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>componentInstance<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>container<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>shouldReuseMarkup<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>context<br/>  )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>wrapperID = componentInstance.<span style=\"color:#9876aa;\">_instance</span>.rootID<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>instancesByReactRootID[wrapperID] = componentInstance<span style=\"color:#cc7832;\">; <font style=\"font-family: Menlo; font-size: 12px; background-color: rgb(43, 43, 43); color: rgb(204, 120, 50);\">//devtools会用到的映射，先忽略</font><br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">return </span>componentInstance<span style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">,</span>\n</pre><br/></div></div><div>下面分别展开讲解。</div><div><div><ol start=\"1\"><li><font style=\"font-size: 14px;\"> </font><font><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(69, 69, 69);\"><font><font style=\"font-size: 14px;\">instantiateReactComponent（src/<font style=\"color: rgb(69, 69, 69); font-family: Helvetica;\">renderers/shared/stack/reconciler/instantiateReactComponent.js</font>） 初始化组件实例，这里用到了工厂模式，根据传入的参数‘生产’对应的React Component实例。<span style=\"color: rgb(51, 51, 51); font-family: -apple-system, 'PingFang SC', 'Hiragino Sans GB', Arial, 'Microsoft YaHei', 'Helvetica Neue', sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); float: none;\">分别实例化</span><code style=\"box-sizing: border-box; outline: none; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 0.2em 0.4em; word-break: break-word; color: rgb(78, 89, 128); background-color: rgb(248, 248, 248); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">ReactDOMTextComponent</code><span style=\"color: rgb(51, 51, 51); font-family: -apple-system, 'PingFang SC', 'Hiragino Sans GB', Arial, 'Microsoft YaHei', 'Helvetica Neue', sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; float: none;\">, </span><code style=\"box-sizing: border-box; outline: none; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 0.2em 0.4em; word-break: break-word; color: rgb(78, 89, 128); background-color: rgb(248, 248, 248); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">ReactDOMComponent</code><span style=\"color: rgb(51, 51, 51); font-family: -apple-system, 'PingFang SC', 'Hiragino Sans GB', Arial, 'Microsoft YaHei', 'Helvetica Neue', sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); float: none;\">, </span><code style=\"box-sizing: border-box; outline: none; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 0.2em 0.4em; word-break: break-word; color: rgb(78, 89, 128); background-color: rgb(248, 248, 248); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">ReactCompositeComponent</code><span style=\"color: rgb(51, 51, 51); font-family: -apple-system, 'PingFang SC', 'Hiragino Sans GB', Arial, 'Microsoft YaHei', 'Helvetica Neue', sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; float: none;\">类。这些类用来管理</span><code style=\"box-sizing: border-box; outline: none; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 0.2em 0.4em; word-break: break-word; color: rgb(78, 89, 128); background-color: rgb(248, 248, 248); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">ReactElement</code><span style=\"color: rgb(51, 51, 51); font-family: -apple-system, 'PingFang SC', 'Hiragino Sans GB', Arial, 'Microsoft YaHei', 'Helvetica Neue', sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; float: none;\">,负责将不同的</span><code style=\"box-sizing: border-box; outline: none; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 0.2em 0.4em; word-break: break-word; color: rgb(78, 89, 128); background-color: rgb(248, 248, 248); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">ReactElement</code><span style=\"color: rgb(51, 51, 51); font-family: -apple-system, 'PingFang SC', 'Hiragino Sans GB', Arial, 'Microsoft YaHei', 'Helvetica Neue', sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; float: none;\">转化成DOM(通过mountComponent方法),负责更新DOM(通过receiveComponent方法，updateComponent方法，下面详细介绍)等。</span></font></font></span></font></li></ol><div style=\"text-align: center; \"><img src=\"/images/2017-01-20/%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B%E5%9B%BE%20(1).png\" height=\"251\" width=\"554\"/><br/></div><div><font face=\"Helvetica\" color=\"#454545\"/></div></div></div><div><font face=\"Helvetica\" color=\"#454545\"><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Given a ReactNode, create an instance that will actually be mounted.<br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactNode} node<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{boolean} shouldHaveDebugID<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@return </span><span style=\"color:#629755;font-style:italic;\">{object} A new instance of the element's constructor.<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@protected<br/></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\" /><span style=\"color:#629755;font-style:italic;\">*/<br/></span><span style=\"color:#cc7832;font-weight:bold;\">function </span><span style=\"color:#ffc66d;\">instantiateReactComponent</span>(node<span style=\"color:#cc7832;\">, </span>shouldHaveDebugID) {<br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>instance<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(node === <span style=\"color:#cc7832;font-weight:bold;\">null </span>|| node === <span style=\"color:#cc7832;font-weight:bold;\">false</span>) {<br/>    instance = ReactEmptyComponent.<span style=\"color:#ffc66d;\">create</span>(<span style=\"color:#ffc66d;\">instantiateReactComponent</span>)<span style=\"color:#cc7832;\">;//这里生成一个空的component对象</span><span style=\"font-size: 9pt;\">ReactDOMEmptyComponent，渲染一行注释，可以忽略</span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span>} <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(<span style=\"color:#cc7832;font-weight:bold;\">typeof </span>node === <span style=\"color:#6a8759;\">'object'</span>) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>element = node<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>type = element.<span style=\"color:#9876aa;\">type</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\"><br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">typeof </span>element.<span style=\"color:#9876aa;\">type </span>=== <span style=\"color:#6a8759;\">'string'</span>) { //如果类型是浏览器标签比如“div”、“span”之类 创建<font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); color: rgb(78, 89, 128);\">ReactDOMComponent 对象</font><br/>      instance = ReactHostComponent.<span style=\"color:#ffc66d;\">createInternalComponent</span>(element)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(<span style=\"color:#ffc66d;\">isInternalComponentType</span>(element.<span style=\"color:#9876aa;\">type</span>)) {//这个判断是否是内部组件的方式没有遇到过（待研究补充）<br/>      <span style=\"color:#808080;\">// This is temporarily available for custom components that are not string<br/></span><span style=\"color:#808080;\">      // representations. I.e. ART. Once those are updated to use the string<br/></span><span style=\"color:#808080;\">      // representation, we can drop this code path.<br/></span><span style=\"color:#808080;\">      </span>instance = <span style=\"color:#cc7832;font-weight:bold;\">new </span>element.<span style=\"color:#9876aa;\">type</span>(element)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">      </span><span style=\"color:#808080;\">// We renamed this. Allow the old name for compat. :(<br/></span><span style=\"color:#808080;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(!instance.<span style=\"color:#9876aa;\">getHostNode</span>) {<br/>        instance.<span style=\"color:#9876aa;\">getHostNode </span>= instance.<span style=\"color:#ffc66d;\">getNativeNode</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>}<br/>    } <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>      instance = <span style=\"color:#cc7832;font-weight:bold;\">new </span><span style=\"color:#ffc66d;\">ReactCompositeComponentWrapper</span>(element)<span style=\"color:#cc7832;\">; //创建自定义组件<font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); color: rgb(78, 89, 128);\">ReactCompositeComponent对象</font><br/></span><span style=\"color:#cc7832;\">    </span>}<br/>  } <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(<span style=\"color:#cc7832;font-weight:bold;\">typeof </span>node === <span style=\"color:#6a8759;\">'string' </span>|| <span style=\"color:#cc7832;font-weight:bold;\">typeof </span>node === <span style=\"color:#6a8759;\">'number'</span>) {<span style=\"color:#cc7832;\">//创建文本节点<font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); color: rgb(78, 89, 128);\">ReactDOMTextComponent 对象</font></span><br/>    instance = ReactHostComponent.<span style=\"color:#ffc66d;\">createInstanceForText</span>(node)<span style=\"color:#cc7832;\">; <br/></span><span style=\"color:#cc7832;\">  </span>} <br/><br/>  <span style=\"color:#808080;\">// These two fields are used by the DOM and ART diffing algorithms<br/></span><span style=\"color:#808080;\">  // respectively. Instead of using expandos on components, we should be<br/></span><span style=\"color:#808080;\">  // storing the state needed by the diffing algorithms elsewhere.<br/></span><span style=\"color:#808080;\">  </span>instance.<span style=\"color:#9876aa;\">_mountIndex </span>= <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>instance.<span style=\"color:#9876aa;\">_mountImage </span>= <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><br/>  <span style=\"color:#cc7832;font-weight:bold;\">return </span>instance<span style=\"color:#cc7832;\">;<br/></span>}<br/></pre></font></div><div><font face=\"Helvetica\" color=\"#454545\"><br/></font></div><div><font face=\"Helvetica\" color=\"#454545\">下面分别展开介绍三种组件的渲染、更新、卸载策略。</font></div><div><br/></div><div><font face=\"Helvetica\" color=\"#454545\">1.1）<font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); font-size: 12px; color: rgb(78, 89, 128);\">ReactDOMTextComponent（src/<font style=\"font-size: 12px; color: rgb(78, 89, 128); font-family: Menlo;\">renderers/dom/stack/client/ReactDOMTextComponent.js）</font></font></font></div><div><font face=\"Helvetica\" color=\"#454545\"><font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); font-size: 12px; color: rgb(78, 89, 128);\"><font style=\"font-size: 12px; color: rgb(78, 89, 128); font-family: Menlo;\"/></font></font></div><div>重点看下三个函数：</div><div><br/></div><div>    1) mountComponent 在render的时候调用，返回渲染内容，针对文本节点返回：</div><div>        &lt;!-- react-text:domId —&gt;这是文本内容&lt;!-- /react-text —&gt;</div><div><br/></div><div><div>  2）receiveComponent 在setState触发更新时调用这个函数，如果文本不同，只替换了注释中的内容。</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#ffc66d;\">receiveComponent</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(nextText<span style=\"color:#cc7832;\">, </span>transaction) {<br/>  <span style=\"color:#cc7832;font-weight:bold;\">if </span>(nextText !== <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span>) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement </span>= nextText<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextStringText = <span style=\"color:#6a8759;\">'' </span>+ nextText<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(nextStringText !== <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_stringText</span>) {<span style=\"color:#808080;\"><br/></span><span style=\"color:#808080;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_stringText </span>= nextStringText<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>commentNodes = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">getHostNode</span>()<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>DOMChildrenOperations.<span style=\"color:#ffc66d;\">replaceDelimitedText</span>(<br/>        commentNodes[<span style=\"color:#6897bb;\">0</span>]<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>commentNodes[<span style=\"color:#6897bb;\">1</span>]<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>nextStringText<br/>      )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/>  }<br/>}<span style=\"color:#cc7832;\">,</span>\n</pre><br/></div><div>3）unmountComponent 去掉对text节点引用，重置一些变量。</div><div><br/></div><div><br/></div><div>1.2）<font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); color: rgb(78, 89, 128);\">ReactDOMComponent</font></div><div><br/></div><div>    1）mountComponent 生成组件对应的dom结构</div><div>代码比较长，主要分为四个步骤：</div><div><ol start=\"1\"><li>做一些生成markup前的“准备工作”  ，针对不同类型做一些变量初始化以及让React事件系统捕捉指定事件。</li></ol>           以input标签为例介绍一下：<br/><div><ul><li> ReactDOMInput.mountWrapper(this, props, hostParent);  <br/></li></ul></div><div>           给input组件实例初始化状态，mountWrapper函数里只给实例设置了一个属性用以保存input的初始value和初始checked值。</div><div>           <span style=\"color:#cc7832;font-weight:bold;\">var </span>defaultValue = props.<span style=\"color:#9876aa;\">defaultValue</span><span style=\"color:#cc7832;\">;<br/></span><span>    <span>       </span></span>inst.<span style=\"color:#9876aa;\">_wrapperState </span>= {</div><div><span style=\"color:#9876aa;\">             initialChecked</span>: props.<span style=\"color:#9876aa;\">checked </span>!= <span style=\"color:#cc7832;font-weight:bold;\">null </span>? props.<span style=\"color:#9876aa;\">checked </span>: props.<span style=\"color:#9876aa;\">defaultChecked</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  <span>           </span></span><span style=\"color:#9876aa;\">initialValue</span>: props.<span style=\"color:#9876aa;\">value </span>!= <span style=\"color:#cc7832;font-weight:bold;\">null </span>? props.<span style=\"color:#9876aa;\">value </span>: defaultValue<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\"><span>    <span>  </span></span>       </span><span style=\"color:#9876aa;\">listeners</span>: <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">,<br/></span>           }<span style=\"color:#cc7832;\">;</span></div><div><ul><li> props = ReactDOMInput.getHostProps(this, props); 将更多input元素要用到的属性初始化并赋给事例，如value、type、max、min等等</li><li> transaction.getReactMountReady().enqueue(trackInputValue, this);<br/></li><li> transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this); 添加预定义事件，这里react添加了invalid事件</li><li> ensureListeningTo(this, 'onChange', transaction); 对于受控组件确保监听on change事件</li></ul><div><br/></div><div/></div><ol start=\"2\"><li>设置正确的namespace，根据父容器的namespace类型和当前实例的tag类型设置namespace 变量是html svg还是mathml<br/></li><li><b>创建将渲染在页面的markup（重要！！！讲解参见注释）</b></li></ol><div><ol start=\"4\"><li>做一些“收尾”工作，比如input、texture的内容初始化以及各个元素的autofocus设置<br/></li></ol></div></div><div>       </div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><br/><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Generates root tag markup then recurses. This method has side effects and<br/></span><span style=\"color:#629755;font-style:italic;\"> * is not idempotent.<br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@internal<br/></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\" /><span style=\"color:#629755;font-style:italic;\">* </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction|ReactServerRenderingTransaction} transaction<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?ReactDOMComponent} the parent component instance<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?object} info about the host container<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{object} context<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@return </span><span style=\"color:#629755;font-style:italic;\">{string} The computed markup.<br/></span><span style=\"color:#629755;font-style:italic;\"> */<br/></span>mountComponent: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br/>    transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>hostParent<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>hostContainerInfo<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>context<br/>) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_rootNodeID </span>= globalIdCounter++<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_domID </span>= hostContainerInfo.<span style=\"color:#9876aa;\">_idCounter</span>++<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_hostParent </span>= hostParent<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_hostContainerInfo </span>= hostContainerInfo<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>props = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span>.<span style=\"color:#9876aa;\">props</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">switch </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span>) {  &lt;———— <span style=\"color:#6897bb;\">1 </span>做一些生成markup前的“准备工作”<br/>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'audio'</span>:<br/>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'form'</span>:<br/>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'iframe'</span>:<br/>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'img'</span>:<br/>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'link'</span>:<br/>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'object'</span>:<br/>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'source'</span>:<br/>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'video'</span>:<br/>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'details'</span>:<br/>            <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_wrapperState </span>= {<br/>                <span style=\"color:#9876aa;\">listeners</span>: <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>}<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span><span style=\"color:#808080;\">//针对一些特性元素预先绑定一些事件<br/></span><span style=\"color:#808080;\">            </span>transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<span style=\"color:#ffc66d;\">trapBubbledEventsLocal</span><span style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span><span style=\"color:#cc7832;font-weight:bold;\">break</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'input'</span>:<span style=\"color:#808080;\">//给input组件实例初始化状态<br/></span><span style=\"color:#808080;\">            </span>ReactDOMInput.<span style=\"color:#ffc66d;\">mountWrapper</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>props<span style=\"color:#cc7832;\">, </span>hostParent)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span>props = ReactDOMInput.<span style=\"color:#ffc66d;\">getHostProps</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>props)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span>transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<span style=\"color:#ffc66d;\">trackInputValue</span><span style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span>transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<span style=\"color:#ffc66d;\">trapBubbledEventsLocal</span><span style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span><span style=\"color:#808080;\">// For controlled components we always need to ensure we're listening<br/></span><span style=\"color:#808080;\">            // to onChange. Even if there is no listener.<br/></span><span style=\"color:#808080;\">            </span><span style=\"color:#ffc66d;\">ensureListeningTo</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span><span style=\"color:#6a8759;\">'onChange'</span><span style=\"color:#cc7832;\">, </span>transaction)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span><span style=\"color:#cc7832;font-weight:bold;\">break</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">       //略去其他……</span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span>}<br/><br/>    <span style=\"color:#ffc66d;\">assertValidProps</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>props)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// We create tags in the namespace of their parent container, except HTML<br/></span><span style=\"color:#808080;\">    // tags get no namespace.<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>namespaceURI<span style=\"color:#cc7832;\">; </span>&lt;————— <span style=\"color:#6897bb;\">2 </span>设置正确的namespace<br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>parentTag<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(hostParent != <span style=\"color:#cc7832;font-weight:bold;\">null</span>) {<br/>        namespaceURI = hostParent.<span style=\"color:#9876aa;\">_namespaceURI</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>parentTag = hostParent.<span style=\"color:#9876aa;\">_tag</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(hostContainerInfo.<span style=\"color:#9876aa;\">_tag</span>) {<br/>        namespaceURI = hostContainerInfo.<span style=\"color:#9876aa;\">_namespaceURI</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>parentTag = hostContainerInfo.<span style=\"color:#9876aa;\">_tag</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/>    <span style=\"color:#cc7832;font-weight:bold;\">if </span>(namespaceURI == <span style=\"color:#cc7832;font-weight:bold;\">null </span>||<br/>        namespaceURI === DOMNamespaces.<span style=\"color:#9876aa;\">svg </span>&amp;&amp; parentTag === <span style=\"color:#6a8759;\">'foreignobject'</span>) {<br/>        namespaceURI = DOMNamespaces.<span style=\"color:#9876aa;\">html</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/>    <span style=\"color:#cc7832;font-weight:bold;\">if </span>(namespaceURI === DOMNamespaces.<span style=\"color:#9876aa;\">html</span>) {<br/>        <span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag </span>=== <span style=\"color:#6a8759;\">'svg'</span>) {<br/>            namespaceURI = DOMNamespaces.<span style=\"color:#9876aa;\">svg</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>} <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag </span>=== <span style=\"color:#6a8759;\">'math'</span>) {<br/>            namespaceURI = DOMNamespaces.<span style=\"color:#9876aa;\">mathml</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/>    }<br/>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_namespaceURI </span>= namespaceURI<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>mountImage<span style=\"color:#cc7832;\">; </span>&lt;————— <span style=\"color:#6897bb;\">3 </span>创建将渲染在页面的markup<br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>type = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span>.<span style=\"color:#9876aa;\">type</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">//默认用createElement创建<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(transaction.<span style=\"color:#9876aa;\">useCreateElement</span>) {<br/>        <span style=\"color:#cc7832;font-weight:bold;\">var </span>ownerDocument = hostContainerInfo.<span style=\"color:#9876aa;\">_ownerDocument</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>el<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(namespaceURI === DOMNamespaces.<span style=\"color:#9876aa;\">html</span>) {<br/>            <span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag </span>=== <span style=\"color:#6a8759;\">'script'</span>) {<br/>                <span style=\"color:#808080;\">//如果是script标签，注意这里包在div里再获取<br/></span><span style=\"color:#808080;\">                // Create the script via .innerHTML so its \"parser-inserted\" flag is<br/></span><span style=\"color:#808080;\">                // set to true and it does not execute<br/></span><span style=\"color:#808080;\">                </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>div = ownerDocument.<span style=\"color:#ffc66d;\">createElement</span>(<span style=\"color:#6a8759;\">'div'</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">                </span>div.<span style=\"color:#9876aa;\">innerHTML </span>= <span style=\"color:#6a8759;\">`&lt;</span>${type}<span style=\"color:#6a8759;\">&gt;&lt;/</span>${type}<span style=\"color:#6a8759;\">&gt;`</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">                </span>el = div.<span style=\"color:#ffc66d;\">removeChild</span>(div.<span style=\"color:#9876aa;\">firstChild</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span>} <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(props.<span style=\"color:#9876aa;\">is</span>) {<br/>                <span style=\"color:#808080;\">//和用户自定义元素相关，参见：https://developer.<a href=\"http://mozilla.org/en-US/docs/Web/API/Document/createElement\">mozilla.org/en-US/docs/Web/API/Document/createElement</a> <br/></span><span style=\"color:#808080;\">                //https://www.<a href=\"http://w3.org/TR/custom-elements/#customized-built-in-element\">w3.org/TR/custom-elements/#customized-built-in-element</a> 同时也是为了解决firefox下createElement的bug<br/></span><span style=\"color:#808080;\">                </span>el = ownerDocument.<span style=\"color:#ffc66d;\">createElement</span>(type<span style=\"color:#cc7832;\">, </span>props.<span style=\"color:#9876aa;\">is</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>                <span style=\"color:#808080;\">// Separate else branch instead of using `props.is || undefined` above becuase of a Firefox bug.<br/></span><span style=\"color:#808080;\">                // See discussion in <a href=\"https://github.com/facebook/react/pull/6896\">https://github.com/facebook/react/pull/6896</a><br/></span><span style=\"color:#808080;\">                // and discussion in <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1276240\">https://bugzilla.mozilla.org/show_bug.cgi?id=1276240</a><br/></span><span style=\"color:#808080;\">                </span>el = ownerDocument.<span style=\"color:#ffc66d;\">createElement</span>(type)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span>}<br/>        } <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>            el = ownerDocument.<span style=\"color:#ffc66d;\">createElementNS</span>(<br/>                namespaceURI<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">                </span>type<br/>            )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/>        <span style=\"color:#808080;\">//如果tag名包含’－’或指定“is”属性认为是用户自定义标签<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>isCustomComponentTag = <span style=\"color:#ffc66d;\">isCustomComponent</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span><span style=\"color:#cc7832;\">, </span>props)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//分别在react实例添加属性指向刚创建的节点，同时给节点添加属性指向当前实例<br/></span><span style=\"color:#808080;\">        </span>ReactDOMComponentTree.<span style=\"color:#ffc66d;\">precacheNode</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>el)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_flags </span>|= Flags.<span style=\"color:#9876aa;\">hasCachedChildNodes</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//如果是最外层标签，不是递归创建的子节点，则设置为React根元素，比如ReactDom.render(‘&lt;div&gt;&lt;input/&gt;&lt;/div&gt;’,node) 在创建到div层的时候设置为根元素，然后递归渲染子元素（input）的时候hostParent不为空了。<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(!<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_hostParent</span>) {<br/>            DOMPropertyOperations.<span style=\"color:#ffc66d;\">setAttributeForRoot</span>(el)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/>        <span style=\"color:#808080;\">//根据新旧props的差异更新对应dom元素上的属性，首次渲染没有旧props<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_updateDOMProperties</span>(<span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">, </span>props<span style=\"color:#cc7832;\">, </span>transaction<span style=\"color:#cc7832;\">, </span>isCustomComponentTag)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//初始化DOMLazyTree结构，根据不同浏览器选择不同的渲染策略，参见（src/renderers/dom/stack/client/DOMLazyTree.js）<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>lazyTree = DOMLazyTree(el)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//如果有子节点，则遍历子节点递归调用ReactReconciler.mountComponent（这个函数主要还是调用子节点实例对应的mountComponent）生成子节点的markup（可以简单理解为子节点dom树），保存到lazyTree中，<br/></span><span style=\"color:#808080;\">        //根据不同浏览器渲染dom的效率选择将子元素缓存在DOMLazyTree的队列中延迟渲染还是直接拼成一个完整的dom树返回<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_createInitialChildren</span>(transaction<span style=\"color:#cc7832;\">, </span>props<span style=\"color:#cc7832;\">, </span>context<span style=\"color:#cc7832;\">, </span>lazyTree)<span style=\"color:#cc7832;\">;    &lt;============<br/></span><span style=\"color:#cc7832;\">        </span>mountImage = lazyTree<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>        <span style=\"color:#808080;\">//判断是否是合法的tag名（用正则）<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#ffc66d;\">validateDangerousTag</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//用字符串拼接的方式创建起始标签，并添加事件监听、属性和样式内容<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>tagOpen = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_createOpenTagMarkupAndPutListeners</span>(transaction<span style=\"color:#cc7832;\">, </span>props)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//如果有子节点，则遍历子节点递归生成每一个子节点的ReactComponent实例，然后调用每个实例的ReactReconciler.mountComponent生成子节点的dom树<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>tagContent = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_createContentMarkup</span>(transaction<span style=\"color:#cc7832;\">, </span>props<span style=\"color:#cc7832;\">, </span>context)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//闭合标签<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(!tagContent &amp;&amp; omittedCloseTags[<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span>]) {<br/>            mountImage = tagOpen + <span style=\"color:#6a8759;\">'/&gt;'</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>            mountImage = tagOpen + <span style=\"color:#6a8759;\">'&gt;' </span>+ tagContent + <span style=\"color:#6a8759;\">'&lt;/' </span>+ type + <span style=\"color:#6a8759;\">'&gt;'</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/>    }<br/><br/>    <span style=\"color:#cc7832;font-weight:bold;\">switch </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span>) { &lt;—————<span style=\"color:#6897bb;\">4 </span>给事务添加组件渲染完毕后做的事情<br/>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'input'</span>:<br/>            transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<br/>                <span style=\"color:#ffc66d;\">inputPostMount</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">                </span><span style=\"color:#cc7832;font-weight:bold;\">this<br/></span><span style=\"color:#cc7832;font-weight:bold;\">            </span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(props.<span style=\"color:#9876aa;\">autoFocus</span>) {<br/>                transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<br/>                    AutoFocusUtils.<span style=\"color:#ffc66d;\">focusDOMComponent</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">                    </span><span style=\"color:#cc7832;font-weight:bold;\">this<br/></span><span style=\"color:#cc7832;font-weight:bold;\">                </span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span>}<br/>            <span style=\"color:#cc7832;font-weight:bold;\">break</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">       //略去其他……  </span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span>}<br/><br/>    <span style=\"color:#cc7832;font-weight:bold;\">return </span>mountImage<span style=\"color:#cc7832;\">;<br/></span>}\n</pre>这里额外讲一下 <b>this._createInitialChildren(transaction, props, context, lazyTree)</b>生成子元素dom树的函数，如果props.children是数组，调用以下函数。</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#ffc66d;\">mountChildren</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(nestedChildren<span style=\"color:#cc7832;\">, </span>transaction<span style=\"color:#cc7832;\">, </span>context) {<br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>children = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_reconcilerInstantiateChildren</span>(<span style=\"color:#808080;\">//深度遍历子节点获得所有子节点，同时调用</span><span style=\"font-size: 9pt; background-color: rgb(52, 65, 52);\">instantiateReactComponent生成子节点对应的</span><span style=\"font-size: 9pt; color: rgb(128, 128, 128);\">ReactComponent组</span><span style=\"color:#808080;\"><br/></span><span style=\"color:#808080;\">    </span>nestedChildren<span style=\"color:#cc7832;\">, </span>transaction<span style=\"color:#cc7832;\">, </span>context<br/>  )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_renderedChildren </span>= children<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>mountImages = []<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>index = <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(<span style=\"color:#cc7832;font-weight:bold;\">var </span>name <span style=\"color:#cc7832;font-weight:bold;\">in </span>children) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">if </span>(children.<span style=\"color:#9876aa;\">hasOwnProperty</span>(name)) {<br/>      <span style=\"color:#cc7832;font-weight:bold;\">var </span>child = children[name]<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>selfDebugID = <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">     </span><br/>      <span style=\"color:#cc7832;font-weight:bold;\">var </span>mountImage = ReactReconciler.<span style=\"color:#ffc66d;\">mountComponent</span>(//调用每个子节点的ReactComponent实例的mountComponent递归渲染所有子节点<br/>        child<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_hostContainerInfo</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>context<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>selfDebugID<br/>      )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>child.<span style=\"color:#9876aa;\">_mountIndex </span>= index++<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>mountImages.<span style=\"color:#ffc66d;\">push</span>(mountImage)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/>  }<br/>  <span style=\"color:#cc7832;font-weight:bold;\">return </span>mountImages<span style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">,<br/></span>\n</pre> </div><div><div/><div>再顺便提一下，源码中用到了DOMLazyTree，并根据不同浏览器对dom片段生成的速度做了优化。</div><div><pre style=\"background-color: rgb(43, 43, 43); font-family: Menlo; font-size: 9pt;\"><pre style=\"background-color: rgb(43, 43, 43); font-family: Menlo; font-size: 9pt;\"><span style=\"color: rgb(98, 151, 85); font-style: italic;\">/**<br/></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> * In IE (8-11) and Edge, appending nodes with no children is dramatically<br/></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> * faster than appending a full subtree, so we essentially queue up the<br/></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> * .appendChild calls here and apply them so each node is added to its parent<br/></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> * before any children are added.<br/></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> *<br/></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> * In other browsers, doing so is slower or neutral compared to the other order<br/></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> * (in Firefox, twice as slow) so we only do this inversion in IE.<br/></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> *<br/></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> * See <a href=\"https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode\">https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode</a>.<br/></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> */<br/></span><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">var </span><font color=\"#a9b7c6\">enableLazy = (<br/>  </font><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">typeof </span><span style=\"color: rgb(152, 118, 170);\">document </span><font color=\"#a9b7c6\">!== </font><span style=\"color: rgb(106, 135, 89);\">'undefined' </span><font color=\"#a9b7c6\">&amp;&amp;<br/>  </font><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">typeof </span><span style=\"color: rgb(152, 118, 170);\">document</span><font color=\"#a9b7c6\">.</font><span style=\"color: rgb(152, 118, 170);\">documentMode </span><font color=\"#a9b7c6\">=== </font><span style=\"color: rgb(106, 135, 89);\">'number'<br/></span><span style=\"color: rgb(106, 135, 89);\">  </span><font color=\"#a9b7c6\">||<br/>  </font><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">typeof </span><span style=\"color: rgb(152, 118, 170);\">navigator </span><font color=\"#a9b7c6\">!== </font><span style=\"color: rgb(106, 135, 89);\">'undefined' </span><font color=\"#a9b7c6\">&amp;&amp;<br/>  </font><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">typeof </span><span style=\"color: rgb(152, 118, 170);\">navigator</span><font color=\"#a9b7c6\">.</font><span style=\"color: rgb(152, 118, 170);\">userAgent </span><font color=\"#a9b7c6\">=== </font><span style=\"color: rgb(106, 135, 89);\">'string' </span><font color=\"#a9b7c6\">&amp;&amp;<br/>  </font><span style=\"color: rgb(106, 135, 89);\">/\\bEdge\\/\\d/</span><font color=\"#a9b7c6\">.</font><span style=\"color: rgb(255, 198, 109);\">test</span><font color=\"#a9b7c6\">(</font><span style=\"color: rgb(152, 118, 170);\">navigator</span><font color=\"#a9b7c6\">.</font><span style=\"color: rgb(152, 118, 170);\">userAgent</span><font color=\"#a9b7c6\">)<br/>)</font>;</pre><pre style=\"background-color: rgb(43, 43, 43); font-family: Menlo; font-size: 9pt;\"><span style=\"font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\"> function </span><span style=\"font-size: 9pt; color: rgb(255, 198, 109);\">queueChild</span><font style=\"font-size: 9pt;\" color=\"#a9b7c6\">(parentTree</font><span style=\"font-size: 9pt; color: rgb(204, 120, 50);\">, </span><font style=\"font-size: 9pt;\" color=\"#a9b7c6\">childTree) {</font><br/></pre><pre style=\"background-color: rgb(43, 43, 43); font-family: Menlo; font-size: 9pt;\"><pre style=\"background-color: rgb(43, 43, 43); font-family: Menlo; font-size: 9pt;\"><font color=\"#a9b7c6\">  </font><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">if </span><font color=\"#a9b7c6\">(enableLazy) {<br/>    parentTree.</font><span style=\"color: rgb(152, 118, 170);\">children</span><font color=\"#a9b7c6\">.</font><span style=\"color: rgb(255, 198, 109);\">push</span><font color=\"#a9b7c6\">(childTree)</font><span style=\"color: rgb(204, 120, 50);\">;<br/></span><span style=\"color: rgb(204, 120, 50);\">  </span><font color=\"#a9b7c6\">} </font><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">else </span><font color=\"#a9b7c6\">{<br/>    parentTree.node.</font><span style=\"color: rgb(152, 118, 170);\">appendChild</span><font color=\"#a9b7c6\">(childTree.node)</font><span style=\"color: rgb(204, 120, 50);\">;<br/></span><span style=\"color: rgb(204, 120, 50);\">  </span><font color=\"#a9b7c6\">}<br/></font><span style=\"color: rgb(169, 183, 198); background-color: rgb(52, 65, 52);\">}</span><font color=\"#a9b7c6\"\n/></pre><br/></pre></pre></div><div><font face=\"Helvetica\" color=\"#454545\"><font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); font-size: 12px; color: rgb(78, 89, 128);\"/></font></div></div><div><div>然后会在这里判断是把子节点缓存起来还是直接挂到父节点上。缓存起来的节点会在ReactMount的_mountImageIntoNode递归地将子节点逐个挂到父节点上，主要用在<code style=\"box-sizing: border-box; outline: none; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 0.2em 0.4em; word-break: break-word; color: rgb(78, 89, 128); background-color: rgb(248, 248, 248); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">ReactDOMComponent</code><span style=\"color: rgb(51, 51, 51); font-family: -apple-system, 'PingFang SC', 'Hiragino Sans GB', Arial, 'Microsoft YaHei', 'Helvetica Neue', sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); float: none;\">, </span><code style=\"box-sizing: border-box; outline: none; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 0.2em 0.4em; word-break: break-word; color: rgb(78, 89, 128); background-color: rgb(248, 248, 248); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">ReactCompositeComponent。</code></div><div/><div><br/></div>  </div><div>2）receiveComponent 在setState触发更新时调用这个函</div><div><div/></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"/></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Updates a DOM component after it has already been allocated and<br/></span><span style=\"color:#629755;font-style:italic;\"> * attached to the DOM. Reconciles the root DOM node, then recurses.<br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction} transaction<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactElement} prevElement<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactElement} nextElement<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@internal<br/></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\" /><span style=\"color:#629755;font-style:italic;\">* </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@overridable<br/></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\" /><span style=\"color:#629755;font-style:italic;\">*/<br/></span><span style=\"color:#ffc66d;\">updateComponent</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(transaction<span style=\"color:#cc7832;\">, </span>prevElement<span style=\"color:#cc7832;\">, </span>nextElement<span style=\"color:#cc7832;\">, </span>context) {<br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>lastProps = prevElement.props<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextProps = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span>.props<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  //获得last 和next props<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">switch </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span>) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'input'</span>:<br/>      lastProps = ReactDOMInput.<span style=\"color:#ffc66d;\">getHostProps</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>lastProps)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>nextProps = ReactDOMInput.<span style=\"color:#ffc66d;\">getHostProps</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>nextProps)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">break</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    //略去其他……</span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">default</span>:<br/>      <span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">typeof </span>lastProps.<span style=\"color:#9876aa;\">onClick </span>!== <span style=\"color:#6a8759;\">'function' </span>&amp;&amp;<br/>          <span style=\"color:#cc7832;font-weight:bold;\">typeof </span>nextProps.<span style=\"color:#9876aa;\">onClick </span>=== <span style=\"color:#6a8759;\">'function'</span>) {<br/>        transaction.getReactMountReady().<span style=\"color:#ffc66d;\">enqueue</span>(<br/>          <span style=\"color:#ffc66d;\">trapClickOnNonInteractiveElement</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">          </span><span style=\"color:#cc7832;font-weight:bold;\">this<br/></span><span style=\"color:#cc7832;font-weight:bold;\">        </span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>}<br/>      <span style=\"color:#cc7832;font-weight:bold;\">break</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><br/>  <span style=\"color:#ffc66d;\">assertValidProps</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>nextProps)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>isCustomComponentTag = <span style=\"color:#ffc66d;\">isCustomComponent</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span><span style=\"color:#cc7832;\">, </span>nextProps)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#808080;\">//根据新旧props的差异更新对应dom元素上的属性<br/></span><span style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_updateDOMProperties</span>(lastProps<span style=\"color:#cc7832;\">, </span>nextProps<span style=\"color:#cc7832;\">, </span>transaction<span style=\"color:#cc7832;\">, </span>isCustomComponentTag)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#808080;\">//更新子节点内容，diff算法（diff算法下文将详细介绍）<br/></span><span style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_updateDOMChildren</span>(<br/>    lastProps<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>nextProps<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>context<br/>  )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#808080;\">//更新节点后根据新的props中的值设置dom属性比如value、checked等<br/></span><span style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">switch </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span>) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'input'</span>:<br/>      <span style=\"color:#808080;\">// Update the wrapper around inputs *after* updating props. This has to<br/></span><span style=\"color:#808080;\">      // happen after `_updateDOMProperties`. Otherwise HTML5 input validations<br/></span><span style=\"color:#808080;\">      // raise warnings and prevent the new value from being assigned.<br/></span><span style=\"color:#808080;\">      </span>ReactDOMInput.<span style=\"color:#ffc66d;\">updateWrapper</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">break</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    <b>//略去其他……</b></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span>}<br/>}<span style=\"color:#cc7832;\">,</span>\n</pre><br/></div><div>3）unmountComponent 去掉React Component实例上的事件监听器，循环调用子组件的unmountComponent方法，不直接删除dom节点，由父节点统一清除。</div><div><br/></div><div>1.3）<font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); color: rgb(78, 89, 128);\">ReactCompositeComponent</font></div><div><br/></div><div> 1）mountComponent</div><div style=\"text-align: center; \"><img src=\"/images/2017-01-20/%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B%E5%9B%BE%20(2).png\" height=\"548\" width=\"213\"/><br/></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><br/><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Initializes the component, renders markup, and registers event listeners.<br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction|ReactServerRenderingTransaction} transaction<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?object} hostParent<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?object} hostContainerInfo<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?object} context<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@return </span><span style=\"color:#629755;font-style:italic;\">{?string} Rendered markup to be inserted into the DOM.<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@final<br/></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\" /><span style=\"color:#629755;font-style:italic;\">* </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@internal<br/></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\" /><span style=\"color:#629755;font-style:italic;\">*/<br/></span>mountComponent: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br/>    transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>hostParent<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>hostContainerInfo<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>context<br/>) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_context </span>= context<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_mountOrder </span>= nextMountID++<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_hostParent </span>= hostParent<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_hostContainerInfo </span>= hostContainerInfo<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>publicProps = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span>.<span style=\"color:#9876aa;\">props</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>publicContext = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_processContext</span>(context)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>Component = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span>.<span style=\"color:#9876aa;\">type</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>updateQueue = transaction.<span style=\"color:#ffc66d;\">getUpdateQueue</span>()<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// Initialize the public class<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>doConstruct = <span style=\"color:#ffc66d;\">shouldConstruct</span>(Component)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>inst = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_constructComponent</span>(<br/>        doConstruct<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>publicProps<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>publicContext<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>updateQueue<br/>    )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>renderedElement<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// Support functional components<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(!doConstruct &amp;&amp; (inst == <span style=\"color:#cc7832;font-weight:bold;\">null </span>|| inst.<span style=\"color:#ffc66d;\">render </span>== <span style=\"color:#cc7832;font-weight:bold;\">null</span>)) {<br/>        renderedElement = inst<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>inst = <span style=\"color:#cc7832;font-weight:bold;\">new </span><span style=\"color:#ffc66d;\">StatelessComponent</span>(Component)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_compositeType </span>= ReactCompositeComponentTypes.<span style=\"color:#9876aa;\">StatelessFunctional</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>        <span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#ffc66d;\">isPureComponent</span>(Component)) {<br/>            <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_compositeType </span>= ReactCompositeComponentTypes.<span style=\"color:#9876aa;\">PureClass</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>            <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_compositeType </span>= ReactCompositeComponentTypes.<span style=\"color:#9876aa;\">ImpureClass</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/>    }<br/><br/>    <span style=\"color:#808080;\">// These should be set up in the constructor, but as a convenience for<br/></span><span style=\"color:#808080;\">    // simpler class abstractions, we set them up after the fact.<br/></span><span style=\"color:#808080;\">    </span>inst.<span style=\"color:#9876aa;\">props </span>= publicProps<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>inst.<span style=\"color:#9876aa;\">context </span>= publicContext<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>inst.<span style=\"color:#9876aa;\">refs </span>= emptyObject<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>inst.<span style=\"color:#9876aa;\">updater </span>= updateQueue<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_instance </span>= inst<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// Store a reference from the instance back to the internal representation<br/></span><span style=\"color:#808080;\">    </span>ReactInstanceMap.<span style=\"color:#ffc66d;\">set</span>(inst<span style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>initialState = inst.<span style=\"color:#9876aa;\">state</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(initialState === <span style=\"color:#9876aa;\">undefined</span>) {<br/>        inst.<span style=\"color:#9876aa;\">state </span>= initialState = <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/><br/>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingStateQueue </span>= <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingReplaceState </span>= <span style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingForceUpdate </span>= <span style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">//调用生命周期函数<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(inst.<span style=\"color:#9876aa;\">componentWillMount</span>) {<br/>        inst.<span style=\"color:#9876aa;\">componentWillMount</span>()<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">// When mounting, calls to `setState` by `componentWillMount` will set<br/></span><span style=\"color:#808080;\">        // `this._pendingStateQueue` without triggering a re-render.注意这里新的state是在</span><span style=\"color: rgb(152, 118, 170); font-size: 9pt;\">componentWillMount执行完后更新的，因此在<font style=\"font-family: Menlo; font-size: 12px; background-color: rgb(43, 43, 43); color: rgb(152, 118, 170);\">componentWillMount</font>里的this.state不是最新的</span><span style=\"color:#808080;\"><br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingStateQueue</span>) {<br/>            inst.<span style=\"color:#9876aa;\">state </span>= <span style=\"color:#cc7832;font-weight:bold;\">this</span>._processPendingState(inst.<span style=\"color:#9876aa;\">props</span><span style=\"color:#cc7832;\">, </span>inst.<span style=\"color:#9876aa;\">context</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/>    }<br/><br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>markup<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">//带错误监听，内部调用performInitialMount，render函数返回的内容用来初始化一个ReactComponent实例，然后调用ReactReconciler.mountComponent获得dom树<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(inst.<span style=\"color:#ffc66d;\">unstable_handleError</span>) {<br/>        markup = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">performInitialMountWithErrorHandling</span>(<br/>            renderedElement<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>hostParent<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>hostContainerInfo<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>context<br/>        )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>        markup = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">performInitialMount</span>(<br/>            renderedElement<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>hostParent<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>hostContainerInfo<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>context<br/>        )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/>    <span style=\"color:#808080;\">//<font style=\"font-family: Menlo; font-size: 12px; background-color: rgb(43, 43, 43); color: rgb(255, 198, 109);\">componentDidMount执行</font><br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(inst.<span style=\"color:#ffc66d;\">componentDidMount</span>) {<br/>        transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(inst.<span style=\"color:#ffc66d;\">componentDidMount</span><span style=\"color:#cc7832;\">, </span>inst)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/><br/>    <span style=\"color:#808080;\">// setState callbacks during willMount should end up here<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">const </span>callbacks = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingCallbacks</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(callbacks) {<br/>        <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingCallbacks </span>= <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(let i = <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">; </span>i &lt; callbacks.<span style=\"color:#9876aa;\">length</span><span style=\"color:#cc7832;\">; </span>i++) {<br/>            transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<br/>                callbacks[i]<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">                </span>inst<br/>            )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/>    }<br/><br/>    <span style=\"color:#cc7832;font-weight:bold;\">return </span>markup<span style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">,</span>\n</pre><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#cc7832;\"><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#ffc66d;\">performInitialMount</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br/>  renderedElement<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>hostParent<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>hostContainerInfo<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>context<br/>) {<br/>  <span style=\"color:#808080;\">// If not a stateless component, we now render<br/></span><span style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(renderedElement === <span style=\"color:#9876aa;\">undefined</span>) {<br/>    renderedElement = <span style=\"color:#cc7832;font-weight:bold;\">this</span>._renderValidatedComponent()<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>nodeType = ReactNodeTypes.<span style=\"color:#ffc66d;\">getType</span>(renderedElement)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_renderedNodeType </span>= nodeType<span style=\"color:#cc7832;\">;</span></pre><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#cc7832;\">  //得到当前ReactElement对应的ReactComponent实例<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>child = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_instantiateReactComponent</span>(<br/>    renderedElement<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>nodeType !== ReactNodeTypes.<span style=\"color:#9876aa;\">EMPTY </span><span style=\"color:#808080;\">/* shouldHaveDebugID */<br/></span><span style=\"color:#808080;\">  </span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_renderedComponent </span>= child<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>debugID = <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">;</span><br/>  //递归生成子节点dom树<br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>markup = ReactReconciler.<span style=\"color:#ffc66d;\">mountComponent</span>(<br/>    child<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>hostParent<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>hostContainerInfo<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_processChildContext</span>(context)<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>debugID<br/>  )<span style=\"color:#cc7832;\">;</span><br/><br/>  <span style=\"color:#cc7832;font-weight:bold;\">return </span>markup<span style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">,<br/></span>\n</pre><br/></span></pre>2）receiveComponent </div><div>这里负责生命周期的componentWillReceiveProps、shouldComponentUpdate、componentWillUpdate、render、componentDidUpdate。注意在前三个生命周期函数中调用this.state无法获取更新后的this.state因为为实例更新state的inst.state=nextState在componentWillUpdate之后调用，即render和componentDidUpdate中可以，禁止在shouldComponentUpdate和componentWillUpdate中调用setState，会造成循环调用（原因参见src/renderers/shared/stack/reconciler/ReactCompositeComponent.js的performUpdateIfNecessary方法）</div><div style=\"text-align: center; \"><img src=\"/images/2017-01-20/%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B%E5%9B%BE%20(3).png\" height=\"685\" width=\"564\"/><br/></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><br/><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Perform an update to a mounted component. The componentWillReceiveProps and<br/></span><span style=\"color:#629755;font-style:italic;\"> * shouldComponentUpdate methods are called, then (assuming the update isn't<br/></span><span style=\"color:#629755;font-style:italic;\"> * skipped) the remaining update lifecycle methods are called and the DOM<br/></span><span style=\"color:#629755;font-style:italic;\"> * representation is updated.<br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * By default, this implements React's rendering and reconciliation algorithm.<br/></span><span style=\"color:#629755;font-style:italic;\"> * Sophisticated clients may wish to override this.<br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction} transaction<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactElement} prevParentElement<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactElement} nextParentElement<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@internal<br/></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\" /><span style=\"color:#629755;font-style:italic;\">* </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@overridable<br/></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\" /><span style=\"color:#629755;font-style:italic;\">*/<br/></span>updateComponent: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br/>    transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>prevParentElement<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>nextParentElement<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>prevUnmaskedContext<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>nextUnmaskedContext<br/>) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>inst = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_instance</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>willReceive = <span style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextContext<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// Determine if the context has changed or not<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_context </span>=== nextUnmaskedContext) {<br/>        nextContext = inst.<span style=\"color:#9876aa;\">context</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>        nextContext = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_processContext</span>(nextUnmaskedContext)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>willReceive = <span style=\"color:#cc7832;font-weight:bold;\">true</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/><br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>prevProps = prevParentElement.<span style=\"color:#9876aa;\">props</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextProps = nextParentElement.<span style=\"color:#9876aa;\">props</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// Not a simple state update but a props update<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(prevParentElement !== nextParentElement) {<br/>        willReceive = <span style=\"color:#cc7832;font-weight:bold;\">true</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/><br/>    <span style=\"color:#808080;\">// An update here will schedule an update but immediately set<br/></span><span style=\"color:#808080;\">    // _pendingStateQueue which will ensure that any state updates gets<br/></span><span style=\"color:#808080;\">    // immediately reconciled instead of waiting for the next batch.<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(willReceive &amp;&amp; inst.<span style=\"color:#ffc66d;\">componentWillReceiveProps</span>) {<br/>        inst.<span style=\"color:#ffc66d;\">componentWillReceiveProps</span>(nextProps<span style=\"color:#cc7832;\">, </span>nextContext)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/><br/>    <span style=\"color:#808080;\">// If updating happens to enqueue any new updates, we shouldn't execute new<br/></span><span style=\"color:#808080;\">    // callbacks until the next render happens, so stash the callbacks first.<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>callbacks = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingCallbacks</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingCallbacks </span>= <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextState = <span style=\"color:#cc7832;font-weight:bold;\">this</span>._processPendingState(nextProps<span style=\"color:#cc7832;\">, </span>nextContext)<span style=\"color:#cc7832;\">; </span><span style=\"color:#808080;\">//获得nextState<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>shouldUpdate = <span style=\"color:#cc7832;font-weight:bold;\">true</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(!<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingForceUpdate</span>) { <span style=\"color:#808080;\">//没设置forseupdate<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>prevState = inst.<span style=\"color:#9876aa;\">state</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>shouldUpdate = willReceive || nextState !== prevState<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//如果提供shouldComponentUpdate，调用函数，否则新旧state和props浅比较确定是否更新<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(inst.<span style=\"color:#ffc66d;\">shouldComponentUpdate</span>) {<br/>            shouldUpdate = inst.<span style=\"color:#ffc66d;\">shouldComponentUpdate</span>(nextProps<span style=\"color:#cc7832;\">, </span>nextState<span style=\"color:#cc7832;\">, </span>nextContext)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>            <span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_compositeType </span>=== ReactCompositeComponentTypes.<span style=\"color:#9876aa;\">PureClass</span>) {<br/>                shouldUpdate =<br/>                    !shallowEqual(prevProps<span style=\"color:#cc7832;\">, </span>nextProps) ||<br/>                    !shallowEqual(inst.<span style=\"color:#9876aa;\">state</span><span style=\"color:#cc7832;\">, </span>nextState)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span>}<br/>        }<br/>    }<br/><br/>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_updateBatchNumber </span>= <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(shouldUpdate) {<br/>        <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingForceUpdate </span>= <span style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">// Will set `this.props`, `this.state` and `this.context`.<br/></span><span style=\"color:#808080;\">        //设置新props、state，调用生命周期函数（如果提供），更新dom<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>._performComponentUpdate(<br/>            nextParentElement<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>nextProps<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>nextState<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>nextContext<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>nextUnmaskedContext<br/>        )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>        <span style=\"color:#808080;\">// If it's determined that a component should not update, we still want<br/></span><span style=\"color:#808080;\">        // to set props and state but we shortcut the rest of the update.<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement </span>= nextParentElement<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_context </span>= nextUnmaskedContext<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>inst.<span style=\"color:#9876aa;\">props </span>= nextProps<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>inst.<span style=\"color:#9876aa;\">state </span>= nextState<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>inst.<span style=\"color:#9876aa;\">context </span>= nextContext<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/>    <span style=\"color:#808080;\">//render之后调用的事件队列<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(callbacks) {<br/>        <span style=\"color:#cc7832;font-weight:bold;\">for </span>(<span style=\"color:#cc7832;font-weight:bold;\">var </span>j = <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">; </span>j &lt; callbacks.<span style=\"color:#9876aa;\">length</span><span style=\"color:#cc7832;\">; </span>j++) {<br/>            transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<br/>                callbacks[j]<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">                </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">getPublicInstance</span>()<br/>            )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/>    }<br/>}<span style=\"color:#cc7832;\">,</span>\n</pre><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Merges new props and state, notifies delegate methods of update and<br/></span><span style=\"color:#629755;font-style:italic;\"> * performs update.<br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactElement} nextElement Next element<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{object} nextProps Next public object to set as properties.<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?object} nextState Next object to set as state.<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?object} nextContext Next public object to set as context.<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction} transaction<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?object} unmaskedContext<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@private<br/></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\" /><span style=\"color:#629755;font-style:italic;\">*/<br/></span>_performComponentUpdate: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br/>  nextElement<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>nextProps<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>nextState<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>nextContext<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>unmaskedContext<br/>) {<br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>inst = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_instance</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>hasComponentDidUpdate = Boolean(inst.<span style=\"color:#ffc66d;\">componentDidUpdate</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>prevProps<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>prevState<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>prevContext<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(hasComponentDidUpdate) {<br/>    prevProps = inst.<span style=\"color:#9876aa;\">props</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>prevState = inst.<span style=\"color:#9876aa;\">state</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>prevContext = inst.<span style=\"color:#9876aa;\">context</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><br/>  <span style=\"color:#cc7832;font-weight:bold;\">if </span>(inst.<span style=\"color:#ffc66d;\">componentWillUpdate</span>) {<br/>     inst.<span style=\"color:#ffc66d;\">componentWillUpdate</span>(nextProps<span style=\"color:#cc7832;\">, </span>nextState<span style=\"color:#cc7832;\">, </span>nextContext)<span style=\"color:#cc7832;\">;</span><br/>  }<br/><br/>  <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement </span>= nextElement<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_context </span>= unmaskedContext<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>inst.<span style=\"color:#9876aa;\">props </span>= nextProps<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>inst.<span style=\"color:#9876aa;\">state </span>= nextState<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>inst.<span style=\"color:#9876aa;\">context </span>= nextContext<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(inst.<span style=\"color:#ffc66d;\">unstable_handleError</span>) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>._updateRenderedComponentWithErrorHandling(transaction<span style=\"color:#cc7832;\">, </span>unmaskedContext)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>._updateRenderedComponent(transaction<span style=\"color:#cc7832;\">, </span>unmaskedContext)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><br/>  <span style=\"color:#cc7832;font-weight:bold;\">if </span>(hasComponentDidUpdate) {<br/>      transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<br/>        inst.<span style=\"color:#ffc66d;\">componentDidUpdate</span>.<span style=\"color:#ffc66d;\">bind</span>(inst<span style=\"color:#cc7832;\">, </span>prevProps<span style=\"color:#cc7832;\">, </span>prevState<span style=\"color:#cc7832;\">, </span>prevContext)<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>inst<br/>      )<span style=\"color:#cc7832;\">;</span><br/>  }<br/>}<span style=\"color:#cc7832;\">,</span>\n</pre><br/></div><div>3）unmountComponent 调用生命周期函数componentWillUnmount（如果提供），调用当前组件对应的React Component实例对应的unmountComponent函数，重置一堆变量。</div><div><br/></div><div><br/></div><div/><ol start=\"2\"><li>渲染组件的工作主要在这个函数，通过<font style=\"font-family: Helvetica; color: rgb(69, 69, 69);\">instantiateReactComponent</font>得到了各种类型组件对应的ReactComponent实例（可以理解为一个ReactComponent实例的树，包含所有子节点的ReactComponent实例），然后调用实例的mountComponent方法（上面讲解过）得到要渲染的‘markup’可能是一个dom树，或一个DOMLazyTree结构保存将子节点的dom结构树保存到数组里，最后插入到container中。</li></ol></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Mounts this component and inserts it into the DOM.<br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactComponent} componentInstance The instance to mount.<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{DOMElement} container DOM element to mount into.<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction} transaction<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{boolean} shouldReuseMarkup If true, do not insert markup<br/></span><span style=\"color:#629755;font-style:italic;\"> */<br/></span><span style=\"color:#cc7832;font-weight:bold;\">function </span><span style=\"color:#ffc66d;\">mountComponentIntoNode</span>(<br/>  wrapperInstance<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>container<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>shouldReuseMarkup<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>context<br/>) {<br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>markerName<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(ReactFeatureFlags.<span style=\"color:#9876aa;\">logTopLevelRenders</span>) { //记录拼接组件对应的dom模板所用的时长<br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>wrappedElement = wrapperInstance.<span style=\"color:#9876aa;\">_currentElement</span>.<span style=\"color:#9876aa;\">props</span>.child<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>type = wrappedElement.<span style=\"color:#9876aa;\">type</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>markerName = <span style=\"color:#6a8759;\">'React mount: ' </span>+ (<br/>      <span style=\"color:#cc7832;font-weight:bold;\">typeof </span>type === <span style=\"color:#6a8759;\">'string' </span>? type :<br/>      type.<span style=\"color:#9876aa;\">displayName </span>|| type.<span style=\"color:#9876aa;\">name<br/></span><span style=\"color:#9876aa;\">    </span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#9876aa;\">console</span>.<span style=\"color:#ffc66d;\">time</span>(markerName)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>markup = ReactReconciler.<span style=\"color:#ffc66d;\">mountComponent</span>( //调用组件实例的mountComponent方法获得要渲染的结构（可能是一个html片段或一个src/<font style=\"font-size: 12px; color: rgb(169, 183, 198); font-family: Menlo;\">renderers/dom/stack/client/DOMLazyTree.js结构）</font>，添加事件以及ref属性<br/>    wrapperInstance<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>ReactDOMContainerInfo(wrapperInstance<span style=\"color:#cc7832;\">, </span>container)<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>context<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#6897bb;\">0 </span><span style=\"color:#808080;\">/* parentDebugID */<br/></span><span style=\"color:#808080;\">  </span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(markerName) {<br/>    <span style=\"color:#9876aa;\">console</span>.<span style=\"color:#ffc66d;\">timeEnd</span>(markerName)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><br/>  wrapperInstance.<span style=\"color:#9876aa;\">_renderedComponent</span>.<span style=\"color:#9876aa;\">_topLevelWrapper </span>= wrapperInstance<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>ReactMount.<span style=\"color:#ffc66d;\">_mountImageIntoNode</span>( //将上面得到的结构（递归）渲染到container dom节点中，显示在页面上<br/>    markup<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>container<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>wrapperInstance<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>shouldReuseMarkup<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>transaction<br/>  )<span style=\"color:#cc7832;\">;<br/></span>}\n</pre><br/></div><div>以上是对虚拟dom和渲染策略的讲解。</div><div><br/></div><div>推荐阅读：</div><div><span style=\"font: 12.0px Helvetica; color: #e4af09\"><a href=\"https://zhuanlan.zhihu.com/purerender\">https://zhuanlan.zhihu.com/purerender</a></span><span style=\"font: 12.0px Helvetica; color: #454545\" /><span style=\"font: 12.0px 'PingFang SC'; color: #454545\">关于</span><span style=\"font: 12.0px Helvetica; color: #454545\">react</span><span style=\"font: 12.0px 'PingFang SC'; color: #454545\">源码解析系列文章</span><span style=\"font: 12.0px Helvetica; color: #454545\"><br/>\n<span style=\"color: #e4af09\"><a href=\"http://purplebamboo.github.io/2015/09/15/reactjs_source_analyze_part_one/\">http://purplebamboo.github.io/2015/09/15/reactjs_source_analyze_part_one/</a></span></span></div><div><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-size: 12px; font-family: Helvetica;\"><font color=\"#e4af09\">《深入React技术栈》这本书的第三章（有需要可以找我借）<br/></font>\n</span><br/></div><div><br/></div><div><br/></div>","slug":"react源码学习——Virtual Dom和渲染、更新原理","published":1,"updated":"2017-02-13T11:56:48.000Z","comments":1,"photos":[],"link":"","_id":"cizknqusd001r95c4ajiuuoat","content":"\n<div><span style=\"color: rgb(68, 68, 68); font-family: 'Helvetica Neue', Helvetica, 'Lucida Grande', Arial, 'Hiragino Sans GB', 微软雅黑, 'WenQuanYi Micro Hei', STHeiti, SimSun, sans-serif; font-size: 14px; orphans: 2; widows: 2;\">前端开发过程中，更新页面的数据、样式等操作都要操作dom，而复杂的dom操作通常是产品性能瓶颈原因之一，为此React引入了Virtual Dom的概念，Virtual Dom其实是用js实现了一套dom api，包括虚拟dom模型、生命周期管理、diff算法等。React会将传入的JSX片段转化成虚拟dom节点，当数据更新时，通过diff算法找到要变更的dom节点，并只对变化的部分进行实际的浏览器dom更新，而不是重新渲染整个dom树。下面我们结合组件渲染流程结合源码介绍一下React如何创建虚拟节点，以及如何渲染、更新节点的整个流程。</span><br></div><div><span style=\"color: rgb(68, 68, 68); font-family: 'Helvetica Neue', Helvetica, 'Lucida Grande', Arial, 'Hiragino Sans GB', 微软雅黑, 'WenQuanYi Micro Hei', STHeiti, SimSun, sans-serif; font-size: 14px; orphans: 2; widows: 2;\">——以下代码是React v15.4.2版本——<br></span></div><div>React项目渲染组件的方法是：ReactDom.render，将父组件连带所有包含在内的子组件渲染出来。render方法最终调用了 src/renderers/dom/stack/client/ReactMount.js 的render方法。</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#629755;font-style:italic;\">/**<br></span><span style=\"color:#629755;font-style:italic;\"> * Renders a React component into the DOM in the supplied `container`.<br></span><span style=\"color:#629755;font-style:italic;\"> * See <a href=\"https://facebook.github.io/react/docs/react-dom.html#render\" target=\"_blank\" rel=\"external\">https://facebook.github.io/react/docs/react-dom.html#render</a><br></span><span style=\"color:#629755;font-style:italic;\"> *<br></span><span style=\"color:#629755;font-style:italic;\"> * If the React component was previously rendered into `container`, this will<br></span><span style=\"color:#629755;font-style:italic;\"> * perform an update on it and only mutate the DOM as necessary to reflect the<br></span><span style=\"color:#629755;font-style:italic;\"> * latest React component.<br></span><span style=\"color:#629755;font-style:italic;\"> *<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactElement} nextElement Component element to render.<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{DOMElement} container DOM element to render into.<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?function} callback function triggered on completion<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@return </span><span style=\"color:#629755;font-style:italic;\">{ReactComponent} Component instance rendered in `container`.<br></span><span style=\"color:#629755;font-style:italic;\"> */<br></span><span style=\"color:#ffc66d;\">render</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(nextElement<span style=\"color:#cc7832;\">, </span>container<span style=\"color:#cc7832;\">, </span>callback) {<br>  <span style=\"color:#cc7832;font-weight:bold;\">return </span>ReactMount.<span style=\"color:#ffc66d;\">_renderSubtreeIntoContainer</span>(<span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">, </span>nextElement<span style=\"color:#cc7832;\">, </span>container<span style=\"color:#cc7832;\">, </span>callback)<span style=\"color:#cc7832;\">;<br></span>}<span style=\"color:#cc7832;\">,</span></pre></div><div>注意这里第一个参数是ReactElement类型，通常为了可读性和开发效率我们传入JSX写的结构，最终会编译转换成调用React的createElement方法生成虚拟元素ReactElement结构传入render中。这里我们先看一下React.createElement做了哪些事情（src/isomorphic/classic/element/ReactElement.js）</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><br><span style=\"color:#629755;font-style:italic;\">/**<br></span><span style=\"color:#629755;font-style:italic;\"> * Create and return a new ReactElement of the given type.<br></span><span style=\"color:#629755;font-style:italic;\"> * See <a href=\"https://facebook.github.io/react/docs/react-api.html#createelement\" target=\"_blank\" rel=\"external\">https://facebook.github.io/react/docs/react-api.html#createelement</a><br></span><span style=\"color:#629755;font-style:italic;\"> */<br></span><span style=\"color:#ffc66d;\">ReactElement</span>.<span style=\"color:#ffc66d;\">createElement </span>= <span style=\"color:#cc7832;font-weight:bold;\">function</span>(type<span style=\"color:#cc7832;\">, </span>config<span style=\"color:#cc7832;\">, </span>children) {<br>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>propName<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// Reserved names are extracted<br></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>props = {}<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>key = <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>ref = <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>self = <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>source = <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(config != <span style=\"color:#cc7832;font-weight:bold;\">null</span>) {<br>        <span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#ffc66d;\">hasValidRef</span>(config)) {<br>            ref = config.<span style=\"color:#9876aa;\">ref</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span>}<br>        <span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#ffc66d;\">hasValidKey</span>(config)) {<br>            key = <span style=\"color:#6a8759;\">'' </span>+ config.key<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span>}<br><br>        self = config.<span style=\"color:#9876aa;\">__self </span>=== <span style=\"color:#9876aa;\">undefined </span>? <span style=\"color:#cc7832;font-weight:bold;\">null </span>: config.<span style=\"color:#9876aa;\">__self</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span>source = config.<span style=\"color:#9876aa;\">__source </span>=== <span style=\"color:#9876aa;\">undefined </span>? <span style=\"color:#cc7832;font-weight:bold;\">null </span>: config.<span style=\"color:#9876aa;\">__source</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">// config中的内容复制到props<br></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(propName <span style=\"color:#cc7832;font-weight:bold;\">in </span>config) {<br>            <span style=\"color:#cc7832;font-weight:bold;\">if </span>(hasOwnProperty.<span style=\"color:#ffc66d;\">call</span>(config<span style=\"color:#cc7832;\">, </span>propName) &amp;&amp;<br>                !RESERVED_PROPS.<span style=\"color:#ffc66d;\">hasOwnProperty</span>(propName)) {<br>                props[propName] = config[propName]<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">            </span>}<br>        }<br>    }<br><br>    <span style=\"color:#808080;\">//将第三个及之后的参数作为children赋值给props的children属性<br></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>childrenLength = arguments.<span style=\"color:#9876aa;\">length </span>- <span style=\"color:#6897bb;\">2</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(childrenLength === <span style=\"color:#6897bb;\">1</span>) {<br>        props.<span style=\"color:#9876aa;\">children </span>= children<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(childrenLength &gt; <span style=\"color:#6897bb;\">1</span>) {<br>        <span style=\"color:#cc7832;font-weight:bold;\">var </span>childArray = Array(childrenLength)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(<span style=\"color:#cc7832;font-weight:bold;\">var </span>i = <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">; </span>i &lt; childrenLength<span style=\"color:#cc7832;\">; </span>i++) {<br>            childArray[i] = arguments[i + <span style=\"color:#6897bb;\">2</span>]<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span>}<br><br>        props.<span style=\"color:#9876aa;\">children </span>= childArray<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>}<br><br>    <span style=\"color:#808080;\">// 如果某个props为空且存在默认props，赋值<br></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(type &amp;&amp; type.<span style=\"color:#9876aa;font-style:italic;\">defaultProps</span>) {<br>        <span style=\"color:#cc7832;font-weight:bold;\">var </span>defaultProps = type.<span style=\"color:#9876aa;font-style:italic;\">defaultProps</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(propName <span style=\"color:#cc7832;font-weight:bold;\">in </span>defaultProps) {<br>            <span style=\"color:#cc7832;font-weight:bold;\">if </span>(props[propName] === <span style=\"color:#9876aa;\">undefined</span>) {<br>                props[propName] = defaultProps[propName]<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">            </span>}<br>        }<br>    }<br><br>    <span style=\"color:#cc7832;font-weight:bold;\">return </span><span style=\"color:#ffc66d;\">ReactElement</span>(<br>        type<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">        </span>key<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">        </span>ref<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">        </span>self<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">        </span>source<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">        </span>ReactCurrentOwner.<span style=\"color:#9876aa;\">current</span><span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">        </span>props<br>    )<span style=\"color:#cc7832;\">;<br></span>}<span style=\"color:#cc7832;\">;</span>\n</pre></div><div><br></div><div>下面结合源码详细讲解整个渲染的过程。</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#ffc66d;\">render</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(nextElement<span style=\"color:#cc7832;\">, </span>container<span style=\"color:#cc7832;\">, </span>callback) {<br>  <span style=\"color:#cc7832;font-weight:bold;\">return </span>ReactMount.<span style=\"color:#ffc66d;\">_renderSubtreeIntoContainer</span>(<span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">, </span>nextElement<span style=\"color:#cc7832;\">, </span>container<span style=\"color:#cc7832;\">, </span>callback)<span style=\"color:#cc7832;\">;<br></span>}<span style=\"color:#cc7832;\">,</span>\n</pre>去掉各种检查后的代码如下：</div><div>思路：首先获得dom container里原有的ReactElement，如果存在则将实际需要渲染的ReactElement（上一步用<font style=\"font-family: Menlo; font-size: 12px; background-color: rgb(43, 43, 43); color: rgb(128, 128, 128);\">TopLevelWrapper</font>包裹的child）和新的ReactElement做比较（1），如果应该更新则更新组件（2），否则清空container内之前渲染的组件（3），生成新的根ReactComponent渲染到container中（4）。</div><div>主要流程图如下：<br><img src=\"/images/2017-01-20/%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B%E5%9B%BE.png\" height=\"558\" width=\"650\"><br></div><div><pre style=\"background-color: rgb(43, 43, 43);\"><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">_renderSubtreeIntoContainer</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">: </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">function</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(parentComponent</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">, </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">nextElement</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">, </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">container</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">, </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">callback) {</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\"><br></span><pre style=\"font-family: Menlo; font-size: 9pt; background-color: rgb(43, 43, 43);\"><span style=\"font-size: 9pt;\"><font><pre style=\"background-color: rgb(43, 43, 43); font-family: Menlo; font-size: 9pt;\">   <span style=\"color: rgb(128, 128, 128);\">//nextElement外包一层react定义的TopLevelWrapper用于屏蔽各类组件的差异记录一些变量，比如顶层组件的计数<br></span><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">   var </span><font color=\"#a9b7c6\">nextWrappedElement = React.</font><span style=\"color: rgb(152, 118, 170);\">createElement</span><font color=\"#a9b7c6\">(<br>     </font><span style=\"color: rgb(255, 198, 109);\">TopLevelWrapper</span><span style=\"color: rgb(204, 120, 50);\">,<br></span><span style=\"color: rgb(204, 120, 50);\">     </span><font color=\"#a9b7c6\">{ </font><span style=\"color: rgb(152, 118, 170);\">child</span><font color=\"#a9b7c6\">: nextElement }<br>   )</font>;</pre></font></span></pre><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">nextContext = getContextForSubtree(parentComponent)</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;//本次调用返回null<br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">prevComponent = </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">getTopLevelWrapperInContainer</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(container)</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\"><br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">if </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(prevComponent) {<br>    </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">prevWrappedElement = prevComponent.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_currentElement</span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">prevElement = prevWrappedElement.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">props</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">.child</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">if </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(shouldUpdateReactComponent(prevElement</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">, </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">nextElement)) {      &lt;——— 1<br>      </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">publicInst = prevComponent.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_renderedComponent</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">getPublicInstance</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">()</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">      </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">updatedCallback = callback &amp;&amp; </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">function</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">() {<br>        callback.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">call</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(publicInst)</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">      </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">}</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">      </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">ReactMount.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">_updateRootComponent</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(   &lt;———— 2<br>        prevComponent</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">        </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">nextWrappedElement</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">        </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">nextContext</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">        </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">container</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">        </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">updatedCallback<br>      )</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">      </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">return </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">publicInst</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">} </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">else </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">{<br>      ReactMount.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">unmountComponentAtNode</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(container)</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;  <font style=\"font-family: Menlo; background-color: rgb(43, 43, 43); font-size: 12px; color: rgb(169, 183, 198);\">&lt;———— 3</font><br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">}<br>  }<br><br>  </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">reactRootElement = </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">getReactRootElementInContainer</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(container)</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;//获得container节点的第一个dom子节点<br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">containerHasReactMarkup =<br>    reactRootElement &amp;&amp; !!</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">internalGetID</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(reactRootElement)</font><font face=\"Menlo\" color=\"#cc7832\" size=\"2\">; //判断这个dom子节点是不是React渲染的（React渲染的会有会有一个‘data-reacted’的attribute属性）<br></font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">containerHasNonRootReactChild = </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">hasNonRootReactChild</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(container)</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">; //判断container是否包含不是React根节点的React实例<br></span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\"><br>  </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font color=\"#a9b7c6\"><font face=\"Menlo\" size=\"2\">shouldReuseMarkup =           //这里不太明白什么情况会重用markup，因为在’3’已经把container中的dom清空了，欢迎讨论<br>    containerHasReactMarkup &amp;&amp;<br>    !prevComponent &amp;&amp;<br>    !containerHasNonRootReactChild</font></font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">component = ReactMount.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">_renderNewRootComponent</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(   </font><font style=\"font-family: Menlo; font-size: 12px; color: rgb(169, 183, 198); background-color: rgb(43, 43, 43);\">&lt;———— 4</font><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\"><br>    nextWrappedElement</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">container</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">shouldReuseMarkup</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">nextContext</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">callback<br>  ).</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_renderedComponent</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">getPublicInstance</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">()</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">return </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">component</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br></span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">}</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br></span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\"></font></pre><br></div><div>下面分别展开研究四个函数：</div><div><div><ol start=\"1\"><li>shouldUpdateReactComponent.js ( src/renderers/shared/shared/shouldUpdateReactComponent.js ）</li></ol>这里只做了简单的类型比较，如果父节点的类型不同，则即使子节点相同也不做递归比较，官方文档参见<a href=\"https://facebook.github.io/react/docs/reconciliation.html#elements-of-different-types\" target=\"_blank\" rel=\"external\">这里</a>。<br></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#cc7832;font-weight:bold;\">function </span><span style=\"color:#ffc66d;\">shouldUpdateReactComponent</span>(prevElement<span style=\"color:#cc7832;\">, </span>nextElement) {<br>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>prevEmpty = prevElement === <span style=\"color:#cc7832;font-weight:bold;\">null </span>|| prevElement === <span style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextEmpty = nextElement === <span style=\"color:#cc7832;font-weight:bold;\">null </span>|| nextElement === <span style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(prevEmpty || nextEmpty) {<br>    <span style=\"color:#cc7832;font-weight:bold;\">return </span>prevEmpty === nextEmpty<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>}<br><br>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>prevType = <span style=\"color:#cc7832;font-weight:bold;\">typeof </span>prevElement<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextType = <span style=\"color:#cc7832;font-weight:bold;\">typeof </span>nextElement<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(prevType === <span style=\"color:#6a8759;\">'string' </span>|| prevType === <span style=\"color:#6a8759;\">'number'</span>) {<br>    <span style=\"color:#cc7832;font-weight:bold;\">return </span>(nextType === <span style=\"color:#6a8759;\">'string' </span>|| nextType === <span style=\"color:#6a8759;\">'number'</span>)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br>    <span style=\"color:#cc7832;font-weight:bold;\">return </span>(<br>      nextType === <span style=\"color:#6a8759;\">'object' </span>&amp;&amp;<br>      prevElement.<span style=\"color:#9876aa;\">type </span>=== nextElement.<span style=\"color:#9876aa;\">type </span>&amp;&amp;<br>      prevElement.<span style=\"color:#9876aa;\">key </span>=== nextElement.<span style=\"color:#9876aa;\">key<br></span><span style=\"color:#9876aa;\">    </span>)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>}<br>}<br>\n</pre></div></div><div><font style=\"font-size: 14px;\">  </font></div><div><font style=\"font-size: 14px;\">  2. <span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(69, 69, 69);\">ReactMount._updateRootComponent（  src/renderers/dom/stack/client/ReactMount.js ）</span><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(228, 175, 9);\"><br>\n</span></font></div><div>最主要的两句：</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\">ReactUpdateQueue.<span style=\"color:#ffc66d;\">enqueueElementInternal</span>(prevComponent<span style=\"color:#cc7832;\">, </span>nextElement<span style=\"color:#cc7832;\">, </span>nextContext)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(callback) {<br>  ReactUpdateQueue.<span style=\"color:#ffc66d;\">enqueueCallbackInternal</span>(prevComponent<span style=\"color:#cc7832;\">, </span>callback)<span style=\"color:#cc7832;\">;<br></span>}\n</pre>这里调用了src/renderers/shared/stack/reconciler/ReactUpdateQueue.js 的两个函数，分别给ReactComponent实例添加属性，要渲染的ReactElemnt、初始化上下文和在渲染完成后执行的回掉函数队列，然后调用ReactUpdates.js (src/renderers/shared/stack/reconciler/ReactUpdates.js)的enqueueUpadate加入到更新队列中（更新策略下文将详细讲解）。</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#ffc66d;\">enqueueElementInternal</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(internalInstance<span style=\"color:#cc7832;\">, </span>nextElement<span style=\"color:#cc7832;\">, </span>nextContext) {<br>  internalInstance.<span style=\"color:#9876aa;\">_pendingElement </span>= nextElement<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#808080;\">// </span><span style=\"color:#a8c023;font-style:italic;\">TODO: introduce _pendingContext instead of setting it directly.<br></span><span style=\"color:#a8c023;font-style:italic;\">  </span>internalInstance.<span style=\"color:#9876aa;\">_context </span>= nextContext<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#ffc66d;\">enqueueUpdate</span>(internalInstance)<span style=\"color:#cc7832;\">;<br></span>}<span style=\"color:#cc7832;\">,</span>\n</pre></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#ffc66d;\">enqueueCallbackInternal</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(internalInstance<span style=\"color:#cc7832;\">, </span>callback) {<br>  <span style=\"color:#cc7832;font-weight:bold;\">if </span>(internalInstance.<span style=\"color:#9876aa;\">_pendingCallbacks</span>) {<br>    internalInstance.<span style=\"color:#9876aa;\">_pendingCallbacks</span>.<span style=\"color:#ffc66d;\">push</span>(callback)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br>    internalInstance.<span style=\"color:#9876aa;\">_pendingCallbacks </span>= [callback]<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>}<br>  <span style=\"color:#ffc66d;\">enqueueUpdate</span>(internalInstance)<span style=\"color:#cc7832;\">;<br></span>}<span style=\"color:#cc7832;\">,</span>\n</pre><br></div><div> <font style=\"font-size: 14px;\"> 3.</font><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(69, 69, 69);\"><font style=\"font-size: 14px;\">ReactMount.unmountComponentAtNode</font></span></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#629755;font-style:italic;\">/**<br></span><span style=\"color:#629755;font-style:italic;\"> * Unmounts and destroys the React component rendered in the `container`.<br></span><span style=\"color:#629755;font-style:italic;\"> * See <a href=\"https://facebook.github.io/react/docs/react-dom.html#unmountcomponentatnode\" target=\"_blank\" rel=\"external\">https://facebook.github.io/react/docs/react-dom.html#unmountcomponentatnode</a><br></span><span style=\"color:#629755;font-style:italic;\"> *<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{DOMElement} container DOM element containing a React component.<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@return </span><span style=\"color:#629755;font-style:italic;\">{boolean} True if a component was found in and unmounted from<br></span><span style=\"color:#629755;font-style:italic;\"> *                   `container`<br></span><span style=\"color:#629755;font-style:italic;\"> */<br></span><span style=\"color:#ffc66d;\">unmountComponentAtNode</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(container) {<br><br>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>prevComponent = <span style=\"color:#ffc66d;\">getTopLevelWrapperInContainer</span>(container)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(!prevComponent) {<br>    <span style=\"color:#cc7832;font-weight:bold;\">return false</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>}<br>  <span style=\"color:#cc7832;font-weight:bold;\">delete </span>instancesByReactRootID[prevComponent.<span style=\"color:#9876aa;\">_instance</span>.rootID]<span style=\"color:#cc7832;\">;//devtools会用到的映射，这里可以先忽略<br></span><span style=\"color:#cc7832;\">  </span>ReactUpdates.<span style=\"color:#ffc66d;\">batchedUpdates</span>(<br>    <span style=\"color:#ffc66d;\">unmountComponentFromNode</span><span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>prevComponent<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>container<br>  )<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">return true</span><span style=\"color:#cc7832;\">;<br></span>}<span style=\"color:#cc7832;\">,</span>\n</pre>注意这里也调用ReactUpdates.js (src/renderers/shared/stack/reconciler/ReactUpdates.js)类的函数batchedUpadates更新组件（更新策略下文将详细讲解），传入三个参数，第一个参数作为更新策略执行过程中调用的函数，后两个作为参数，这里要执行的函数是：</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#cc7832;font-weight:bold;\">function </span><span style=\"color:#ffc66d;\">unmountComponentFromNode</span>(instance<span style=\"color:#cc7832;\">, </span>container) {<br>  //这个函数主要作用是：1.去掉组件中的ref引用，调用组件的unmountComponent函数，这里主要有三类组件文本组件、html标签对应的组件和自定义组件，每种对应的unmountComponent实现方式不同，主要做些清理React内部用到的缓存，组件上绑定的事件之类的工作，具体参见下文。<br>  ReactReconciler.<span style=\"color:#ffc66d;\">unmountComponent</span>(<br>    instance<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">false </span><span style=\"color:#808080;\">/* safely */</span><span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">false </span><span style=\"color:#808080;\">/* skipLifecycle */<br></span><span style=\"color:#808080;\">  </span>)<span style=\"color:#cc7832;\">;<br></span><br>  <span style=\"color:#cc7832;font-weight:bold;\">if </span>(container.nodeType === DOC_NODE_TYPE) {<br>    container = container.documentElement<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>}<br><br>  <span style=\"color:#808080;\">//可以看到这里循环移除了container节点中的全部dom元素，有很多方法可以实现，这里有个有趣的效率对比试验： <a href=\"http://jsperf.com/emptying-a-node\" target=\"_blank\" rel=\"external\">http://jsperf.com/emptying-a-node</a><br></span><span style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">while </span>(container.lastChild) {<br>    container.removeChild(container.lastChild)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>}<br><span style=\"background-color:#344134;\">}</span>\n</pre><br></div><div><ol start=\"4\"><li><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(69, 69, 69);\"><font style=\"font-size: 14px;\">ReactMount._renderNewRootComponent</font></span></li></ol><div><font face=\"Helvetica\" color=\"#454545\">先ReactElement初始<font style=\"font-size: 14px;\">化ReactComponent实例（1），这里可能是自定义组件</font><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(69, 69, 69);\"><font style=\"font-size: 14px;\">ReactCompositeComponent，文本元素对应的ReactDOMTextComponent和浏览器基本元素对应的ReactDOMComponent。然后调用更新策略将组件渲染到container中，以及做一些比如ref绑定等初始化工作（2）。</font><br>\n</span></font></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#ffc66d;\">_renderNewRootComponent</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br>  nextElement<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>container<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>shouldReuseMarkup<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>context<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>callback<br>) {<br> //<span style=\"color: rgb(98, 151, 85); font-style: italic; font-size: 9pt;\">Listens to window scroll and resize events. We cache scroll values so that </span><span style=\"color: rgb(98, 151, 85); font-style: italic; font-size: 9pt;\">application code can access them without triggering reflows.这里先不做分析</span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">  </span>ReactBrowserEventEmitter.<span style=\"color:#ffc66d;\">ensureScrollValueMonitoring</span>()<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>componentInstance = instantiateReactComponent(nextElement<span style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">false</span>)<span style=\"color:#cc7832;\">; &lt;——— 1<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(callback) {<br>    componentInstance.<span style=\"color:#9876aa;\">_pendingCallbacks </span>= [<span style=\"color:#cc7832;font-weight:bold;\">function</span>() { //初始化render完成后调用的回掉函数队列<br>      callback.<span style=\"color:#ffc66d;\">call</span>(componentInstance.<span style=\"color:#9876aa;\">_renderedComponent</span>.<span style=\"color:#ffc66d;\">getPublicInstance</span>())<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>}]<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>}<br><br>  <span style=\"color:#808080;\">// The initial render is synchronous but any updates that happen during<br></span><span style=\"color:#808080;\">  // rendering, in componentWillMount or componentDidMount, will be batched<br></span><span style=\"color:#808080;\">  // according to the current batching strategy.<br></span><span style=\"color:#808080;\"><br></span><span style=\"color:#808080;\">  </span>ReactUpdates.<span style=\"color:#ffc66d;\">batchedUpdates</span>(  &lt;———— 2<br>    <span style=\"color:#ffc66d;\">batchedMountComponentIntoNode</span><span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>componentInstance<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>container<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>shouldReuseMarkup<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>context<br>  )<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>wrapperID = componentInstance.<span style=\"color:#9876aa;\">_instance</span>.rootID<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>instancesByReactRootID[wrapperID] = componentInstance<span style=\"color:#cc7832;\">; <font style=\"font-family: Menlo; font-size: 12px; background-color: rgb(43, 43, 43); color: rgb(204, 120, 50);\">//devtools会用到的映射，先忽略</font><br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">return </span>componentInstance<span style=\"color:#cc7832;\">;<br></span>}<span style=\"color:#cc7832;\">,</span>\n</pre><br></div></div><div>下面分别展开讲解。</div><div><div><ol start=\"1\"><li><font style=\"font-size: 14px;\"> </font><font><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(69, 69, 69);\"><font><font style=\"font-size: 14px;\">instantiateReactComponent（src/<font style=\"color: rgb(69, 69, 69); font-family: Helvetica;\">renderers/shared/stack/reconciler/instantiateReactComponent.js</font>） 初始化组件实例，这里用到了工厂模式，根据传入的参数‘生产’对应的React Component实例。<span style=\"color: rgb(51, 51, 51); font-family: -apple-system, 'PingFang SC', 'Hiragino Sans GB', Arial, 'Microsoft YaHei', 'Helvetica Neue', sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); float: none;\">分别实例化</span><code style=\"box-sizing: border-box; outline: none; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 0.2em 0.4em; word-break: break-word; color: rgb(78, 89, 128); background-color: rgb(248, 248, 248); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">ReactDOMTextComponent</code><span style=\"color: rgb(51, 51, 51); font-family: -apple-system, 'PingFang SC', 'Hiragino Sans GB', Arial, 'Microsoft YaHei', 'Helvetica Neue', sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; float: none;\">, </span><code style=\"box-sizing: border-box; outline: none; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 0.2em 0.4em; word-break: break-word; color: rgb(78, 89, 128); background-color: rgb(248, 248, 248); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">ReactDOMComponent</code><span style=\"color: rgb(51, 51, 51); font-family: -apple-system, 'PingFang SC', 'Hiragino Sans GB', Arial, 'Microsoft YaHei', 'Helvetica Neue', sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); float: none;\">, </span><code style=\"box-sizing: border-box; outline: none; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 0.2em 0.4em; word-break: break-word; color: rgb(78, 89, 128); background-color: rgb(248, 248, 248); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">ReactCompositeComponent</code><span style=\"color: rgb(51, 51, 51); font-family: -apple-system, 'PingFang SC', 'Hiragino Sans GB', Arial, 'Microsoft YaHei', 'Helvetica Neue', sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; float: none;\">类。这些类用来管理</span><code style=\"box-sizing: border-box; outline: none; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 0.2em 0.4em; word-break: break-word; color: rgb(78, 89, 128); background-color: rgb(248, 248, 248); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">ReactElement</code><span style=\"color: rgb(51, 51, 51); font-family: -apple-system, 'PingFang SC', 'Hiragino Sans GB', Arial, 'Microsoft YaHei', 'Helvetica Neue', sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; float: none;\">,负责将不同的</span><code style=\"box-sizing: border-box; outline: none; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 0.2em 0.4em; word-break: break-word; color: rgb(78, 89, 128); background-color: rgb(248, 248, 248); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">ReactElement</code><span style=\"color: rgb(51, 51, 51); font-family: -apple-system, 'PingFang SC', 'Hiragino Sans GB', Arial, 'Microsoft YaHei', 'Helvetica Neue', sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; float: none;\">转化成DOM(通过mountComponent方法),负责更新DOM(通过receiveComponent方法，updateComponent方法，下面详细介绍)等。</span></font></font></span></font></li></ol><div style=\"text-align: center; \"><img src=\"/images/2017-01-20/%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B%E5%9B%BE%20(1).png\" height=\"251\" width=\"554\"><br></div><div><font face=\"Helvetica\" color=\"#454545\"></font></div></div></div><div><font face=\"Helvetica\" color=\"#454545\"><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#629755;font-style:italic;\">/**<br></span><span style=\"color:#629755;font-style:italic;\"> * Given a ReactNode, create an instance that will actually be mounted.<br></span><span style=\"color:#629755;font-style:italic;\"> *<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactNode} node<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{boolean} shouldHaveDebugID<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@return </span><span style=\"color:#629755;font-style:italic;\">{object} A new instance of the element's constructor.<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@protected<br></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\"><span style=\"color:#629755;font-style:italic;\">*/<br></span><span style=\"color:#cc7832;font-weight:bold;\">function </span><span style=\"color:#ffc66d;\">instantiateReactComponent</span>(node<span style=\"color:#cc7832;\">, </span>shouldHaveDebugID) {<br>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>instance<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(node === <span style=\"color:#cc7832;font-weight:bold;\">null </span>|| node === <span style=\"color:#cc7832;font-weight:bold;\">false</span>) {<br>    instance = ReactEmptyComponent.<span style=\"color:#ffc66d;\">create</span>(<span style=\"color:#ffc66d;\">instantiateReactComponent</span>)<span style=\"color:#cc7832;\">;//这里生成一个空的component对象</span><span style=\"font-size: 9pt;\">ReactDOMEmptyComponent，渲染一行注释，可以忽略</span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">  </span>} <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(<span style=\"color:#cc7832;font-weight:bold;\">typeof </span>node === <span style=\"color:#6a8759;\">'object'</span>) {<br>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>element = node<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>type = element.<span style=\"color:#9876aa;\">type</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\"><br></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">typeof </span>element.<span style=\"color:#9876aa;\">type </span>=== <span style=\"color:#6a8759;\">'string'</span>) { //如果类型是浏览器标签比如“div”、“span”之类 创建<font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); color: rgb(78, 89, 128);\">ReactDOMComponent 对象</font><br>      instance = ReactHostComponent.<span style=\"color:#ffc66d;\">createInternalComponent</span>(element)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(<span style=\"color:#ffc66d;\">isInternalComponentType</span>(element.<span style=\"color:#9876aa;\">type</span>)) {//这个判断是否是内部组件的方式没有遇到过（待研究补充）<br>      <span style=\"color:#808080;\">// This is temporarily available for custom components that are not string<br></span><span style=\"color:#808080;\">      // representations. I.e. ART. Once those are updated to use the string<br></span><span style=\"color:#808080;\">      // representation, we can drop this code path.<br></span><span style=\"color:#808080;\">      </span>instance = <span style=\"color:#cc7832;font-weight:bold;\">new </span>element.<span style=\"color:#9876aa;\">type</span>(element)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">      </span><span style=\"color:#808080;\">// We renamed this. Allow the old name for compat. :(<br></span><span style=\"color:#808080;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(!instance.<span style=\"color:#9876aa;\">getHostNode</span>) {<br>        instance.<span style=\"color:#9876aa;\">getHostNode </span>= instance.<span style=\"color:#ffc66d;\">getNativeNode</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">      </span>}<br>    } <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br>      instance = <span style=\"color:#cc7832;font-weight:bold;\">new </span><span style=\"color:#ffc66d;\">ReactCompositeComponentWrapper</span>(element)<span style=\"color:#cc7832;\">; //创建自定义组件<font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); color: rgb(78, 89, 128);\">ReactCompositeComponent对象</font><br></span><span style=\"color:#cc7832;\">    </span>}<br>  } <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(<span style=\"color:#cc7832;font-weight:bold;\">typeof </span>node === <span style=\"color:#6a8759;\">'string' </span>|| <span style=\"color:#cc7832;font-weight:bold;\">typeof </span>node === <span style=\"color:#6a8759;\">'number'</span>) {<span style=\"color:#cc7832;\">//创建文本节点<font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); color: rgb(78, 89, 128);\">ReactDOMTextComponent 对象</font></span><br>    instance = ReactHostComponent.<span style=\"color:#ffc66d;\">createInstanceForText</span>(node)<span style=\"color:#cc7832;\">; <br></span><span style=\"color:#cc7832;\">  </span>} <br><br>  <span style=\"color:#808080;\">// These two fields are used by the DOM and ART diffing algorithms<br></span><span style=\"color:#808080;\">  // respectively. Instead of using expandos on components, we should be<br></span><span style=\"color:#808080;\">  // storing the state needed by the diffing algorithms elsewhere.<br></span><span style=\"color:#808080;\">  </span>instance.<span style=\"color:#9876aa;\">_mountIndex </span>= <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>instance.<span style=\"color:#9876aa;\">_mountImage </span>= <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br></span><br>  <span style=\"color:#cc7832;font-weight:bold;\">return </span>instance<span style=\"color:#cc7832;\">;<br></span>}<br></span></pre></font></div><div><font face=\"Helvetica\" color=\"#454545\"><br></font></div><div><font face=\"Helvetica\" color=\"#454545\">下面分别展开介绍三种组件的渲染、更新、卸载策略。</font></div><div><br></div><div><font face=\"Helvetica\" color=\"#454545\">1.1）<font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); font-size: 12px; color: rgb(78, 89, 128);\">ReactDOMTextComponent（src/<font style=\"font-size: 12px; color: rgb(78, 89, 128); font-family: Menlo;\">renderers/dom/stack/client/ReactDOMTextComponent.js）</font></font></font></div><div><font face=\"Helvetica\" color=\"#454545\"><font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); font-size: 12px; color: rgb(78, 89, 128);\"><font style=\"font-size: 12px; color: rgb(78, 89, 128); font-family: Menlo;\"></font></font></font></div><div>重点看下三个函数：</div><div><br></div><div>    1) mountComponent 在render的时候调用，返回渲染内容，针对文本节点返回：</div><div>        &lt;!-- react-text:domId —&gt;这是文本内容&lt;!-- /react-text —&gt;</div><div><br></div><div><div>  2）receiveComponent 在setState触发更新时调用这个函数，如果文本不同，只替换了注释中的内容。</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#ffc66d;\">receiveComponent</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(nextText<span style=\"color:#cc7832;\">, </span>transaction) {<br>  <span style=\"color:#cc7832;font-weight:bold;\">if </span>(nextText !== <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span>) {<br>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement </span>= nextText<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextStringText = <span style=\"color:#6a8759;\">'' </span>+ nextText<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(nextStringText !== <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_stringText</span>) {<span style=\"color:#808080;\"><br></span><span style=\"color:#808080;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_stringText </span>= nextStringText<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>commentNodes = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">getHostNode</span>()<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">      </span>DOMChildrenOperations.<span style=\"color:#ffc66d;\">replaceDelimitedText</span>(<br>        commentNodes[<span style=\"color:#6897bb;\">0</span>]<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">        </span>commentNodes[<span style=\"color:#6897bb;\">1</span>]<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">        </span>nextStringText<br>      )<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>}<br>  }<br>}<span style=\"color:#cc7832;\">,</span>\n</pre><br></div><div>3）unmountComponent 去掉对text节点引用，重置一些变量。</div><div><br></div><div><br></div><div>1.2）<font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); color: rgb(78, 89, 128);\">ReactDOMComponent</font></div><div><br></div><div>    1）mountComponent 生成组件对应的dom结构</div><div>代码比较长，主要分为四个步骤：</div><div><ol start=\"1\"><li>做一些生成markup前的“准备工作”  ，针对不同类型做一些变量初始化以及让React事件系统捕捉指定事件。</li></ol>           以input标签为例介绍一下：<br><div><ul><li> ReactDOMInput.mountWrapper(this, props, hostParent);  <br></li></ul></div><div>           给input组件实例初始化状态，mountWrapper函数里只给实例设置了一个属性用以保存input的初始value和初始checked值。</div><div>           <span style=\"color:#cc7832;font-weight:bold;\">var </span>defaultValue = props.<span style=\"color:#9876aa;\">defaultValue</span><span style=\"color:#cc7832;\">;<br></span><span>    <span>       </span></span>inst.<span style=\"color:#9876aa;\">_wrapperState </span>= {</div><div><span style=\"color:#9876aa;\">             initialChecked</span>: props.<span style=\"color:#9876aa;\">checked </span>!= <span style=\"color:#cc7832;font-weight:bold;\">null </span>? props.<span style=\"color:#9876aa;\">checked </span>: props.<span style=\"color:#9876aa;\">defaultChecked</span><span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  <span>           </span></span><span style=\"color:#9876aa;\">initialValue</span>: props.<span style=\"color:#9876aa;\">value </span>!= <span style=\"color:#cc7832;font-weight:bold;\">null </span>? props.<span style=\"color:#9876aa;\">value </span>: defaultValue<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\"><span>    <span>  </span></span>       </span><span style=\"color:#9876aa;\">listeners</span>: <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">,<br></span>           }<span style=\"color:#cc7832;\">;</span></div><div><ul><li> props = ReactDOMInput.getHostProps(this, props); 将更多input元素要用到的属性初始化并赋给事例，如value、type、max、min等等</li><li> transaction.getReactMountReady().enqueue(trackInputValue, this);<br></li><li> transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this); 添加预定义事件，这里react添加了invalid事件</li><li> ensureListeningTo(this, 'onChange', transaction); 对于受控组件确保监听on change事件</li></ul><div><br></div><div></div><ol start=\"2\"><li>设置正确的namespace，根据父容器的namespace类型和当前实例的tag类型设置namespace 变量是html svg还是mathml<br></li><li><b>创建将渲染在页面的markup（重要！！！讲解参见注释）</b></li></ol><div><ol start=\"4\"><li>做一些“收尾”工作，比如input、texture的内容初始化以及各个元素的autofocus设置<br></li></ol></div></div><div>       </div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><br><span style=\"color:#629755;font-style:italic;\">/**<br></span><span style=\"color:#629755;font-style:italic;\"> * Generates root tag markup then recurses. This method has side effects and<br></span><span style=\"color:#629755;font-style:italic;\"> * is not idempotent.<br></span><span style=\"color:#629755;font-style:italic;\"> *<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@internal<br></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\"><span style=\"color:#629755;font-style:italic;\">* </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction|ReactServerRenderingTransaction} transaction<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?ReactDOMComponent} the parent component instance<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?object} info about the host container<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{object} context<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@return </span><span style=\"color:#629755;font-style:italic;\">{string} The computed markup.<br></span><span style=\"color:#629755;font-style:italic;\"> */<br></span>mountComponent: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br>    transaction<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>hostParent<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>hostContainerInfo<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>context<br>) {<br>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_rootNodeID </span>= globalIdCounter++<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_domID </span>= hostContainerInfo.<span style=\"color:#9876aa;\">_idCounter</span>++<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_hostParent </span>= hostParent<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_hostContainerInfo </span>= hostContainerInfo<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>props = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span>.<span style=\"color:#9876aa;\">props</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">switch </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span>) {  &lt;———— <span style=\"color:#6897bb;\">1 </span>做一些生成markup前的“准备工作”<br>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'audio'</span>:<br>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'form'</span>:<br>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'iframe'</span>:<br>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'img'</span>:<br>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'link'</span>:<br>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'object'</span>:<br>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'source'</span>:<br>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'video'</span>:<br>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'details'</span>:<br>            <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_wrapperState </span>= {<br>                <span style=\"color:#9876aa;\">listeners</span>: <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">            </span>}<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">            </span><span style=\"color:#808080;\">//针对一些特性元素预先绑定一些事件<br></span><span style=\"color:#808080;\">            </span>transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<span style=\"color:#ffc66d;\">trapBubbledEventsLocal</span><span style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">            </span><span style=\"color:#cc7832;font-weight:bold;\">break</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'input'</span>:<span style=\"color:#808080;\">//给input组件实例初始化状态<br></span><span style=\"color:#808080;\">            </span>ReactDOMInput.<span style=\"color:#ffc66d;\">mountWrapper</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>props<span style=\"color:#cc7832;\">, </span>hostParent)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">            </span>props = ReactDOMInput.<span style=\"color:#ffc66d;\">getHostProps</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>props)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">            </span>transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<span style=\"color:#ffc66d;\">trackInputValue</span><span style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">            </span>transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<span style=\"color:#ffc66d;\">trapBubbledEventsLocal</span><span style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">            </span><span style=\"color:#808080;\">// For controlled components we always need to ensure we're listening<br></span><span style=\"color:#808080;\">            // to onChange. Even if there is no listener.<br></span><span style=\"color:#808080;\">            </span><span style=\"color:#ffc66d;\">ensureListeningTo</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span><span style=\"color:#6a8759;\">'onChange'</span><span style=\"color:#cc7832;\">, </span>transaction)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">            </span><span style=\"color:#cc7832;font-weight:bold;\">break</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">       //略去其他……</span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">    </span>}<br><br>    <span style=\"color:#ffc66d;\">assertValidProps</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>props)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// We create tags in the namespace of their parent container, except HTML<br></span><span style=\"color:#808080;\">    // tags get no namespace.<br></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>namespaceURI<span style=\"color:#cc7832;\">; </span>&lt;————— <span style=\"color:#6897bb;\">2 </span>设置正确的namespace<br>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>parentTag<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(hostParent != <span style=\"color:#cc7832;font-weight:bold;\">null</span>) {<br>        namespaceURI = hostParent.<span style=\"color:#9876aa;\">_namespaceURI</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span>parentTag = hostParent.<span style=\"color:#9876aa;\">_tag</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(hostContainerInfo.<span style=\"color:#9876aa;\">_tag</span>) {<br>        namespaceURI = hostContainerInfo.<span style=\"color:#9876aa;\">_namespaceURI</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span>parentTag = hostContainerInfo.<span style=\"color:#9876aa;\">_tag</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>}<br>    <span style=\"color:#cc7832;font-weight:bold;\">if </span>(namespaceURI == <span style=\"color:#cc7832;font-weight:bold;\">null </span>||<br>        namespaceURI === DOMNamespaces.<span style=\"color:#9876aa;\">svg </span>&amp;&amp; parentTag === <span style=\"color:#6a8759;\">'foreignobject'</span>) {<br>        namespaceURI = DOMNamespaces.<span style=\"color:#9876aa;\">html</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>}<br>    <span style=\"color:#cc7832;font-weight:bold;\">if </span>(namespaceURI === DOMNamespaces.<span style=\"color:#9876aa;\">html</span>) {<br>        <span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag </span>=== <span style=\"color:#6a8759;\">'svg'</span>) {<br>            namespaceURI = DOMNamespaces.<span style=\"color:#9876aa;\">svg</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span>} <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag </span>=== <span style=\"color:#6a8759;\">'math'</span>) {<br>            namespaceURI = DOMNamespaces.<span style=\"color:#9876aa;\">mathml</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span>}<br>    }<br>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_namespaceURI </span>= namespaceURI<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>mountImage<span style=\"color:#cc7832;\">; </span>&lt;————— <span style=\"color:#6897bb;\">3 </span>创建将渲染在页面的markup<br>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>type = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span>.<span style=\"color:#9876aa;\">type</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">//默认用createElement创建<br></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(transaction.<span style=\"color:#9876aa;\">useCreateElement</span>) {<br>        <span style=\"color:#cc7832;font-weight:bold;\">var </span>ownerDocument = hostContainerInfo.<span style=\"color:#9876aa;\">_ownerDocument</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>el<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(namespaceURI === DOMNamespaces.<span style=\"color:#9876aa;\">html</span>) {<br>            <span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag </span>=== <span style=\"color:#6a8759;\">'script'</span>) {<br>                <span style=\"color:#808080;\">//如果是script标签，注意这里包在div里再获取<br></span><span style=\"color:#808080;\">                // Create the script via .innerHTML so its \"parser-inserted\" flag is<br></span><span style=\"color:#808080;\">                // set to true and it does not execute<br></span><span style=\"color:#808080;\">                </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>div = ownerDocument.<span style=\"color:#ffc66d;\">createElement</span>(<span style=\"color:#6a8759;\">'div'</span>)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">                </span>div.<span style=\"color:#9876aa;\">innerHTML </span>= <span style=\"color:#6a8759;\">`&lt;</span>${type}<span style=\"color:#6a8759;\">&gt;&lt;/</span>${type}<span style=\"color:#6a8759;\">&gt;`</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">                </span>el = div.<span style=\"color:#ffc66d;\">removeChild</span>(div.<span style=\"color:#9876aa;\">firstChild</span>)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">            </span>} <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(props.<span style=\"color:#9876aa;\">is</span>) {<br>                <span style=\"color:#808080;\">//和用户自定义元素相关，参见：https://developer.<a href=\"http://mozilla.org/en-US/docs/Web/API/Document/createElement\" target=\"_blank\" rel=\"external\">mozilla.org/en-US/docs/Web/API/Document/createElement</a> <br></span><span style=\"color:#808080;\">                //https://www.<a href=\"http://w3.org/TR/custom-elements/#customized-built-in-element\" target=\"_blank\" rel=\"external\">w3.org/TR/custom-elements/#customized-built-in-element</a> 同时也是为了解决firefox下createElement的bug<br></span><span style=\"color:#808080;\">                </span>el = ownerDocument.<span style=\"color:#ffc66d;\">createElement</span>(type<span style=\"color:#cc7832;\">, </span>props.<span style=\"color:#9876aa;\">is</span>)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">            </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br>                <span style=\"color:#808080;\">// Separate else branch instead of using `props.is || undefined` above becuase of a Firefox bug.<br></span><span style=\"color:#808080;\">                // See discussion in <a href=\"https://github.com/facebook/react/pull/6896\" target=\"_blank\" rel=\"external\">https://github.com/facebook/react/pull/6896</a><br></span><span style=\"color:#808080;\">                // and discussion in <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1276240\" target=\"_blank\" rel=\"external\">https://bugzilla.mozilla.org/show_bug.cgi?id=1276240</a><br></span><span style=\"color:#808080;\">                </span>el = ownerDocument.<span style=\"color:#ffc66d;\">createElement</span>(type)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">            </span>}<br>        } <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br>            el = ownerDocument.<span style=\"color:#ffc66d;\">createElementNS</span>(<br>                namespaceURI<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">                </span>type<br>            )<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span>}<br>        <span style=\"color:#808080;\">//如果tag名包含’－’或指定“is”属性认为是用户自定义标签<br></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>isCustomComponentTag = <span style=\"color:#ffc66d;\">isCustomComponent</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span><span style=\"color:#cc7832;\">, </span>props)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//分别在react实例添加属性指向刚创建的节点，同时给节点添加属性指向当前实例<br></span><span style=\"color:#808080;\">        </span>ReactDOMComponentTree.<span style=\"color:#ffc66d;\">precacheNode</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>el)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_flags </span>|= Flags.<span style=\"color:#9876aa;\">hasCachedChildNodes</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//如果是最外层标签，不是递归创建的子节点，则设置为React根元素，比如ReactDom.render(‘&lt;div&gt;&lt;input/&gt;&lt;/div&gt;’,node) 在创建到div层的时候设置为根元素，然后递归渲染子元素（input）的时候hostParent不为空了。<br></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(!<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_hostParent</span>) {<br>            DOMPropertyOperations.<span style=\"color:#ffc66d;\">setAttributeForRoot</span>(el)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span>}<br>        <span style=\"color:#808080;\">//根据新旧props的差异更新对应dom元素上的属性，首次渲染没有旧props<br></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_updateDOMProperties</span>(<span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">, </span>props<span style=\"color:#cc7832;\">, </span>transaction<span style=\"color:#cc7832;\">, </span>isCustomComponentTag)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//初始化DOMLazyTree结构，根据不同浏览器选择不同的渲染策略，参见（src/renderers/dom/stack/client/DOMLazyTree.js）<br></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>lazyTree = DOMLazyTree(el)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//如果有子节点，则遍历子节点递归调用ReactReconciler.mountComponent（这个函数主要还是调用子节点实例对应的mountComponent）生成子节点的markup（可以简单理解为子节点dom树），保存到lazyTree中，<br></span><span style=\"color:#808080;\">        //根据不同浏览器渲染dom的效率选择将子元素缓存在DOMLazyTree的队列中延迟渲染还是直接拼成一个完整的dom树返回<br></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_createInitialChildren</span>(transaction<span style=\"color:#cc7832;\">, </span>props<span style=\"color:#cc7832;\">, </span>context<span style=\"color:#cc7832;\">, </span>lazyTree)<span style=\"color:#cc7832;\">;    &lt;============<br></span><span style=\"color:#cc7832;\">        </span>mountImage = lazyTree<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br>        <span style=\"color:#808080;\">//判断是否是合法的tag名（用正则）<br></span><span style=\"color:#808080;\">        </span><span style=\"color:#ffc66d;\">validateDangerousTag</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span>)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//用字符串拼接的方式创建起始标签，并添加事件监听、属性和样式内容<br></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>tagOpen = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_createOpenTagMarkupAndPutListeners</span>(transaction<span style=\"color:#cc7832;\">, </span>props)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//如果有子节点，则遍历子节点递归生成每一个子节点的ReactComponent实例，然后调用每个实例的ReactReconciler.mountComponent生成子节点的dom树<br></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>tagContent = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_createContentMarkup</span>(transaction<span style=\"color:#cc7832;\">, </span>props<span style=\"color:#cc7832;\">, </span>context)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//闭合标签<br></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(!tagContent &amp;&amp; omittedCloseTags[<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span>]) {<br>            mountImage = tagOpen + <span style=\"color:#6a8759;\">'/&gt;'</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br>            mountImage = tagOpen + <span style=\"color:#6a8759;\">'&gt;' </span>+ tagContent + <span style=\"color:#6a8759;\">'&lt;/' </span>+ type + <span style=\"color:#6a8759;\">'&gt;'</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span>}<br>    }<br><br>    <span style=\"color:#cc7832;font-weight:bold;\">switch </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span>) { &lt;—————<span style=\"color:#6897bb;\">4 </span>给事务添加组件渲染完毕后做的事情<br>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'input'</span>:<br>            transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<br>                <span style=\"color:#ffc66d;\">inputPostMount</span><span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">                </span><span style=\"color:#cc7832;font-weight:bold;\">this<br></span><span style=\"color:#cc7832;font-weight:bold;\">            </span>)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">            </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(props.<span style=\"color:#9876aa;\">autoFocus</span>) {<br>                transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<br>                    AutoFocusUtils.<span style=\"color:#ffc66d;\">focusDOMComponent</span><span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">                    </span><span style=\"color:#cc7832;font-weight:bold;\">this<br></span><span style=\"color:#cc7832;font-weight:bold;\">                </span>)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">            </span>}<br>            <span style=\"color:#cc7832;font-weight:bold;\">break</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">       //略去其他……  </span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">    </span>}<br><br>    <span style=\"color:#cc7832;font-weight:bold;\">return </span>mountImage<span style=\"color:#cc7832;\">;<br></span>}\n</span></pre>这里额外讲一下 <b>this._createInitialChildren(transaction, props, context, lazyTree)</b>生成子元素dom树的函数，如果props.children是数组，调用以下函数。</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#ffc66d;\">mountChildren</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(nestedChildren<span style=\"color:#cc7832;\">, </span>transaction<span style=\"color:#cc7832;\">, </span>context) {<br>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>children = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_reconcilerInstantiateChildren</span>(<span style=\"color:#808080;\">//深度遍历子节点获得所有子节点，同时调用</span><span style=\"font-size: 9pt; background-color: rgb(52, 65, 52);\">instantiateReactComponent生成子节点对应的</span><span style=\"font-size: 9pt; color: rgb(128, 128, 128);\">ReactComponent组</span><span style=\"color:#808080;\"><br></span><span style=\"color:#808080;\">    </span>nestedChildren<span style=\"color:#cc7832;\">, </span>transaction<span style=\"color:#cc7832;\">, </span>context<br>  )<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_renderedChildren </span>= children<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>mountImages = []<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>index = <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(<span style=\"color:#cc7832;font-weight:bold;\">var </span>name <span style=\"color:#cc7832;font-weight:bold;\">in </span>children) {<br>    <span style=\"color:#cc7832;font-weight:bold;\">if </span>(children.<span style=\"color:#9876aa;\">hasOwnProperty</span>(name)) {<br>      <span style=\"color:#cc7832;font-weight:bold;\">var </span>child = children[name]<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>selfDebugID = <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">     </span><br>      <span style=\"color:#cc7832;font-weight:bold;\">var </span>mountImage = ReactReconciler.<span style=\"color:#ffc66d;\">mountComponent</span>(//调用每个子节点的ReactComponent实例的mountComponent递归渲染所有子节点<br>        child<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">        </span>transaction<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_hostContainerInfo</span><span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">        </span>context<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">        </span>selfDebugID<br>      )<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">      </span>child.<span style=\"color:#9876aa;\">_mountIndex </span>= index++<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">      </span>mountImages.<span style=\"color:#ffc66d;\">push</span>(mountImage)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>}<br>  }<br>  <span style=\"color:#cc7832;font-weight:bold;\">return </span>mountImages<span style=\"color:#cc7832;\">;<br></span>}<span style=\"color:#cc7832;\">,<br></span>\n</pre> </div><div><div><div>再顺便提一下，源码中用到了DOMLazyTree，并根据不同浏览器对dom片段生成的速度做了优化。</div><div><pre style=\"background-color: rgb(43, 43, 43); font-family: Menlo; font-size: 9pt;\"><pre style=\"background-color: rgb(43, 43, 43); font-family: Menlo; font-size: 9pt;\"><span style=\"color: rgb(98, 151, 85); font-style: italic;\">/**<br></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> * In IE (8-11) and Edge, appending nodes with no children is dramatically<br></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> * faster than appending a full subtree, so we essentially queue up the<br></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> * .appendChild calls here and apply them so each node is added to its parent<br></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> * before any children are added.<br></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> *<br></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> * In other browsers, doing so is slower or neutral compared to the other order<br></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> * (in Firefox, twice as slow) so we only do this inversion in IE.<br></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> *<br></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> * See <a href=\"https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode\" target=\"_blank\" rel=\"external\">https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode</a>.<br></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> */<br></span><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">var </span><font color=\"#a9b7c6\">enableLazy = (<br>  </font><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">typeof </span><span style=\"color: rgb(152, 118, 170);\">document </span><font color=\"#a9b7c6\">!== </font><span style=\"color: rgb(106, 135, 89);\">'undefined' </span><font color=\"#a9b7c6\">&amp;&amp;<br>  </font><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">typeof </span><span style=\"color: rgb(152, 118, 170);\">document</span><font color=\"#a9b7c6\">.</font><span style=\"color: rgb(152, 118, 170);\">documentMode </span><font color=\"#a9b7c6\">=== </font><span style=\"color: rgb(106, 135, 89);\">'number'<br></span><span style=\"color: rgb(106, 135, 89);\">  </span><font color=\"#a9b7c6\">||<br>  </font><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">typeof </span><span style=\"color: rgb(152, 118, 170);\">navigator </span><font color=\"#a9b7c6\">!== </font><span style=\"color: rgb(106, 135, 89);\">'undefined' </span><font color=\"#a9b7c6\">&amp;&amp;<br>  </font><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">typeof </span><span style=\"color: rgb(152, 118, 170);\">navigator</span><font color=\"#a9b7c6\">.</font><span style=\"color: rgb(152, 118, 170);\">userAgent </span><font color=\"#a9b7c6\">=== </font><span style=\"color: rgb(106, 135, 89);\">'string' </span><font color=\"#a9b7c6\">&amp;&amp;<br>  </font><span style=\"color: rgb(106, 135, 89);\">/\\bEdge\\/\\d/</span><font color=\"#a9b7c6\">.</font><span style=\"color: rgb(255, 198, 109);\">test</span><font color=\"#a9b7c6\">(</font><span style=\"color: rgb(152, 118, 170);\">navigator</span><font color=\"#a9b7c6\">.</font><span style=\"color: rgb(152, 118, 170);\">userAgent</span><font color=\"#a9b7c6\">)<br>)</font>;</pre><pre style=\"background-color: rgb(43, 43, 43); font-family: Menlo; font-size: 9pt;\"><span style=\"font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\"> function </span><span style=\"font-size: 9pt; color: rgb(255, 198, 109);\">queueChild</span><font style=\"font-size: 9pt;\" color=\"#a9b7c6\">(parentTree</font><span style=\"font-size: 9pt; color: rgb(204, 120, 50);\">, </span><font style=\"font-size: 9pt;\" color=\"#a9b7c6\">childTree) {</font><br></pre><pre style=\"background-color: rgb(43, 43, 43); font-family: Menlo; font-size: 9pt;\"><pre style=\"background-color: rgb(43, 43, 43); font-family: Menlo; font-size: 9pt;\"><font color=\"#a9b7c6\">  </font><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">if </span><font color=\"#a9b7c6\">(enableLazy) {<br>    parentTree.</font><span style=\"color: rgb(152, 118, 170);\">children</span><font color=\"#a9b7c6\">.</font><span style=\"color: rgb(255, 198, 109);\">push</span><font color=\"#a9b7c6\">(childTree)</font><span style=\"color: rgb(204, 120, 50);\">;<br></span><span style=\"color: rgb(204, 120, 50);\">  </span><font color=\"#a9b7c6\">} </font><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">else </span><font color=\"#a9b7c6\">{<br>    parentTree.node.</font><span style=\"color: rgb(152, 118, 170);\">appendChild</span><font color=\"#a9b7c6\">(childTree.node)</font><span style=\"color: rgb(204, 120, 50);\">;<br></span><span style=\"color: rgb(204, 120, 50);\">  </span><font color=\"#a9b7c6\">}<br></font><span style=\"color: rgb(169, 183, 198); background-color: rgb(52, 65, 52);\">}</span><font color=\"#a9b7c6\"></font></pre><br></pre></pre></div><div><font face=\"Helvetica\" color=\"#454545\"><font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); font-size: 12px; color: rgb(78, 89, 128);\"></font></font></div></div><div><div>然后会在这里判断是把子节点缓存起来还是直接挂到父节点上。缓存起来的节点会在ReactMount的_mountImageIntoNode递归地将子节点逐个挂到父节点上，主要用在<code style=\"box-sizing: border-box; outline: none; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 0.2em 0.4em; word-break: break-word; color: rgb(78, 89, 128); background-color: rgb(248, 248, 248); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">ReactDOMComponent</code><span style=\"color: rgb(51, 51, 51); font-family: -apple-system, 'PingFang SC', 'Hiragino Sans GB', Arial, 'Microsoft YaHei', 'Helvetica Neue', sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); float: none;\">, </span><code style=\"box-sizing: border-box; outline: none; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 0.2em 0.4em; word-break: break-word; color: rgb(78, 89, 128); background-color: rgb(248, 248, 248); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">ReactCompositeComponent。</code></div><div><div><br></div>  </div><div>2）receiveComponent 在setState触发更新时调用这个函</div><div><div></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"></pre></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#629755;font-style:italic;\">/**<br></span><span style=\"color:#629755;font-style:italic;\"> * Updates a DOM component after it has already been allocated and<br></span><span style=\"color:#629755;font-style:italic;\"> * attached to the DOM. Reconciles the root DOM node, then recurses.<br></span><span style=\"color:#629755;font-style:italic;\"> *<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction} transaction<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactElement} prevElement<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactElement} nextElement<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@internal<br></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\"><span style=\"color:#629755;font-style:italic;\">* </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@overridable<br></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\"><span style=\"color:#629755;font-style:italic;\">*/<br></span><span style=\"color:#ffc66d;\">updateComponent</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(transaction<span style=\"color:#cc7832;\">, </span>prevElement<span style=\"color:#cc7832;\">, </span>nextElement<span style=\"color:#cc7832;\">, </span>context) {<br>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>lastProps = prevElement.props<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextProps = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span>.props<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  //获得last 和next props<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">switch </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span>) {<br>    <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'input'</span>:<br>      lastProps = ReactDOMInput.<span style=\"color:#ffc66d;\">getHostProps</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>lastProps)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">      </span>nextProps = ReactDOMInput.<span style=\"color:#ffc66d;\">getHostProps</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>nextProps)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">break</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    //略去其他……</span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">default</span>:<br>      <span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">typeof </span>lastProps.<span style=\"color:#9876aa;\">onClick </span>!== <span style=\"color:#6a8759;\">'function' </span>&amp;&amp;<br>          <span style=\"color:#cc7832;font-weight:bold;\">typeof </span>nextProps.<span style=\"color:#9876aa;\">onClick </span>=== <span style=\"color:#6a8759;\">'function'</span>) {<br>        transaction.getReactMountReady().<span style=\"color:#ffc66d;\">enqueue</span>(<br>          <span style=\"color:#ffc66d;\">trapClickOnNonInteractiveElement</span><span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">          </span><span style=\"color:#cc7832;font-weight:bold;\">this<br></span><span style=\"color:#cc7832;font-weight:bold;\">        </span>)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">      </span>}<br>      <span style=\"color:#cc7832;font-weight:bold;\">break</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>}<br><br>  <span style=\"color:#ffc66d;\">assertValidProps</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>nextProps)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>isCustomComponentTag = <span style=\"color:#ffc66d;\">isCustomComponent</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span><span style=\"color:#cc7832;\">, </span>nextProps)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#808080;\">//根据新旧props的差异更新对应dom元素上的属性<br></span><span style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_updateDOMProperties</span>(lastProps<span style=\"color:#cc7832;\">, </span>nextProps<span style=\"color:#cc7832;\">, </span>transaction<span style=\"color:#cc7832;\">, </span>isCustomComponentTag)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#808080;\">//更新子节点内容，diff算法（diff算法下文将详细介绍）<br></span><span style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_updateDOMChildren</span>(<br>    lastProps<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>nextProps<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>transaction<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>context<br>  )<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#808080;\">//更新节点后根据新的props中的值设置dom属性比如value、checked等<br></span><span style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">switch </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span>) {<br>    <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'input'</span>:<br>      <span style=\"color:#808080;\">// Update the wrapper around inputs *after* updating props. This has to<br></span><span style=\"color:#808080;\">      // happen after `_updateDOMProperties`. Otherwise HTML5 input validations<br></span><span style=\"color:#808080;\">      // raise warnings and prevent the new value from being assigned.<br></span><span style=\"color:#808080;\">      </span>ReactDOMInput.<span style=\"color:#ffc66d;\">updateWrapper</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">break</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    <b>//略去其他……</b></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">  </span>}<br>}<span style=\"color:#cc7832;\">,</span>\n</span></span></pre><br></div><div>3）unmountComponent 去掉React Component实例上的事件监听器，循环调用子组件的unmountComponent方法，不直接删除dom节点，由父节点统一清除。</div><div><br></div><div>1.3）<font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); color: rgb(78, 89, 128);\">ReactCompositeComponent</font></div><div><br></div><div> 1）mountComponent</div><div style=\"text-align: center; \"><img src=\"/images/2017-01-20/%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B%E5%9B%BE%20(2).png\" height=\"548\" width=\"213\"><br></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><br><span style=\"color:#629755;font-style:italic;\">/**<br></span><span style=\"color:#629755;font-style:italic;\"> * Initializes the component, renders markup, and registers event listeners.<br></span><span style=\"color:#629755;font-style:italic;\"> *<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction|ReactServerRenderingTransaction} transaction<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?object} hostParent<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?object} hostContainerInfo<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?object} context<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@return </span><span style=\"color:#629755;font-style:italic;\">{?string} Rendered markup to be inserted into the DOM.<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@final<br></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\"><span style=\"color:#629755;font-style:italic;\">* </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@internal<br></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\"><span style=\"color:#629755;font-style:italic;\">*/<br></span>mountComponent: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br>    transaction<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>hostParent<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>hostContainerInfo<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>context<br>) {<br>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_context </span>= context<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_mountOrder </span>= nextMountID++<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_hostParent </span>= hostParent<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_hostContainerInfo </span>= hostContainerInfo<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>publicProps = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span>.<span style=\"color:#9876aa;\">props</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>publicContext = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_processContext</span>(context)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>Component = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span>.<span style=\"color:#9876aa;\">type</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>updateQueue = transaction.<span style=\"color:#ffc66d;\">getUpdateQueue</span>()<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// Initialize the public class<br></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>doConstruct = <span style=\"color:#ffc66d;\">shouldConstruct</span>(Component)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>inst = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_constructComponent</span>(<br>        doConstruct<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">        </span>publicProps<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">        </span>publicContext<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">        </span>updateQueue<br>    )<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>renderedElement<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// Support functional components<br></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(!doConstruct &amp;&amp; (inst == <span style=\"color:#cc7832;font-weight:bold;\">null </span>|| inst.<span style=\"color:#ffc66d;\">render </span>== <span style=\"color:#cc7832;font-weight:bold;\">null</span>)) {<br>        renderedElement = inst<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span>inst = <span style=\"color:#cc7832;font-weight:bold;\">new </span><span style=\"color:#ffc66d;\">StatelessComponent</span>(Component)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_compositeType </span>= ReactCompositeComponentTypes.<span style=\"color:#9876aa;\">StatelessFunctional</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br>        <span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#ffc66d;\">isPureComponent</span>(Component)) {<br>            <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_compositeType </span>= ReactCompositeComponentTypes.<span style=\"color:#9876aa;\">PureClass</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br>            <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_compositeType </span>= ReactCompositeComponentTypes.<span style=\"color:#9876aa;\">ImpureClass</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span>}<br>    }<br><br>    <span style=\"color:#808080;\">// These should be set up in the constructor, but as a convenience for<br></span><span style=\"color:#808080;\">    // simpler class abstractions, we set them up after the fact.<br></span><span style=\"color:#808080;\">    </span>inst.<span style=\"color:#9876aa;\">props </span>= publicProps<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>inst.<span style=\"color:#9876aa;\">context </span>= publicContext<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>inst.<span style=\"color:#9876aa;\">refs </span>= emptyObject<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>inst.<span style=\"color:#9876aa;\">updater </span>= updateQueue<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_instance </span>= inst<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// Store a reference from the instance back to the internal representation<br></span><span style=\"color:#808080;\">    </span>ReactInstanceMap.<span style=\"color:#ffc66d;\">set</span>(inst<span style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>initialState = inst.<span style=\"color:#9876aa;\">state</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(initialState === <span style=\"color:#9876aa;\">undefined</span>) {<br>        inst.<span style=\"color:#9876aa;\">state </span>= initialState = <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>}<br><br>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingStateQueue </span>= <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingReplaceState </span>= <span style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingForceUpdate </span>= <span style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">//调用生命周期函数<br></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(inst.<span style=\"color:#9876aa;\">componentWillMount</span>) {<br>        inst.<span style=\"color:#9876aa;\">componentWillMount</span>()<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">// When mounting, calls to `setState` by `componentWillMount` will set<br></span><span style=\"color:#808080;\">        // `this._pendingStateQueue` without triggering a re-render.注意这里新的state是在</span><span style=\"color: rgb(152, 118, 170); font-size: 9pt;\">componentWillMount执行完后更新的，因此在<font style=\"font-family: Menlo; font-size: 12px; background-color: rgb(43, 43, 43); color: rgb(152, 118, 170);\">componentWillMount</font>里的this.state不是最新的</span><span style=\"color:#808080;\"><br></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingStateQueue</span>) {<br>            inst.<span style=\"color:#9876aa;\">state </span>= <span style=\"color:#cc7832;font-weight:bold;\">this</span>._processPendingState(inst.<span style=\"color:#9876aa;\">props</span><span style=\"color:#cc7832;\">, </span>inst.<span style=\"color:#9876aa;\">context</span>)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span>}<br>    }<br><br>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>markup<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">//带错误监听，内部调用performInitialMount，render函数返回的内容用来初始化一个ReactComponent实例，然后调用ReactReconciler.mountComponent获得dom树<br></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(inst.<span style=\"color:#ffc66d;\">unstable_handleError</span>) {<br>        markup = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">performInitialMountWithErrorHandling</span>(<br>            renderedElement<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">            </span>hostParent<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">            </span>hostContainerInfo<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">            </span>transaction<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">            </span>context<br>        )<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br>        markup = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">performInitialMount</span>(<br>            renderedElement<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">            </span>hostParent<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">            </span>hostContainerInfo<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">            </span>transaction<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">            </span>context<br>        )<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>}<br>    <span style=\"color:#808080;\">//<font style=\"font-family: Menlo; font-size: 12px; background-color: rgb(43, 43, 43); color: rgb(255, 198, 109);\">componentDidMount执行</font><br></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(inst.<span style=\"color:#ffc66d;\">componentDidMount</span>) {<br>        transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(inst.<span style=\"color:#ffc66d;\">componentDidMount</span><span style=\"color:#cc7832;\">, </span>inst)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>}<br><br>    <span style=\"color:#808080;\">// setState callbacks during willMount should end up here<br></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">const </span>callbacks = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingCallbacks</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(callbacks) {<br>        <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingCallbacks </span>= <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(let i = <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">; </span>i &lt; callbacks.<span style=\"color:#9876aa;\">length</span><span style=\"color:#cc7832;\">; </span>i++) {<br>            transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<br>                callbacks[i]<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">                </span>inst<br>            )<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span>}<br>    }<br><br>    <span style=\"color:#cc7832;font-weight:bold;\">return </span>markup<span style=\"color:#cc7832;\">;<br></span>}<span style=\"color:#cc7832;\">,</span>\n</span></span></pre><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#cc7832;\"><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#ffc66d;\">performInitialMount</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br>  renderedElement<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>hostParent<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>hostContainerInfo<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>transaction<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>context<br>) {<br>  <span style=\"color:#808080;\">// If not a stateless component, we now render<br></span><span style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(renderedElement === <span style=\"color:#9876aa;\">undefined</span>) {<br>    renderedElement = <span style=\"color:#cc7832;font-weight:bold;\">this</span>._renderValidatedComponent()<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>}<br><br>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>nodeType = ReactNodeTypes.<span style=\"color:#ffc66d;\">getType</span>(renderedElement)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_renderedNodeType </span>= nodeType<span style=\"color:#cc7832;\">;</span></pre><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#cc7832;\">  //得到当前ReactElement对应的ReactComponent实例<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>child = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_instantiateReactComponent</span>(<br>    renderedElement<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>nodeType !== ReactNodeTypes.<span style=\"color:#9876aa;\">EMPTY </span><span style=\"color:#808080;\">/* shouldHaveDebugID */<br></span><span style=\"color:#808080;\">  </span>)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_renderedComponent </span>= child<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>debugID = <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">;</span><br>  //递归生成子节点dom树<br>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>markup = ReactReconciler.<span style=\"color:#ffc66d;\">mountComponent</span>(<br>    child<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>transaction<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>hostParent<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>hostContainerInfo<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_processChildContext</span>(context)<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>debugID<br>  )<span style=\"color:#cc7832;\">;</span><br><br>  <span style=\"color:#cc7832;font-weight:bold;\">return </span>markup<span style=\"color:#cc7832;\">;<br></span>}<span style=\"color:#cc7832;\">,<br></span>\n</pre><br></span></pre>2）receiveComponent </div><div>这里负责生命周期的componentWillReceiveProps、shouldComponentUpdate、componentWillUpdate、render、componentDidUpdate。注意在前三个生命周期函数中调用this.state无法获取更新后的this.state因为为实例更新state的inst.state=nextState在componentWillUpdate之后调用，即render和componentDidUpdate中可以，禁止在shouldComponentUpdate和componentWillUpdate中调用setState，会造成循环调用（原因参见src/renderers/shared/stack/reconciler/ReactCompositeComponent.js的performUpdateIfNecessary方法）</div><div style=\"text-align: center; \"><img src=\"/images/2017-01-20/%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B%E5%9B%BE%20(3).png\" height=\"685\" width=\"564\"><br></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><br><span style=\"color:#629755;font-style:italic;\">/**<br></span><span style=\"color:#629755;font-style:italic;\"> * Perform an update to a mounted component. The componentWillReceiveProps and<br></span><span style=\"color:#629755;font-style:italic;\"> * shouldComponentUpdate methods are called, then (assuming the update isn't<br></span><span style=\"color:#629755;font-style:italic;\"> * skipped) the remaining update lifecycle methods are called and the DOM<br></span><span style=\"color:#629755;font-style:italic;\"> * representation is updated.<br></span><span style=\"color:#629755;font-style:italic;\"> *<br></span><span style=\"color:#629755;font-style:italic;\"> * By default, this implements React's rendering and reconciliation algorithm.<br></span><span style=\"color:#629755;font-style:italic;\"> * Sophisticated clients may wish to override this.<br></span><span style=\"color:#629755;font-style:italic;\"> *<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction} transaction<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactElement} prevParentElement<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactElement} nextParentElement<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@internal<br></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\"><span style=\"color:#629755;font-style:italic;\">* </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@overridable<br></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\"><span style=\"color:#629755;font-style:italic;\">*/<br></span>updateComponent: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br>    transaction<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>prevParentElement<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>nextParentElement<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>prevUnmaskedContext<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>nextUnmaskedContext<br>) {<br>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>inst = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_instance</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>willReceive = <span style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextContext<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// Determine if the context has changed or not<br></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_context </span>=== nextUnmaskedContext) {<br>        nextContext = inst.<span style=\"color:#9876aa;\">context</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br>        nextContext = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_processContext</span>(nextUnmaskedContext)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span>willReceive = <span style=\"color:#cc7832;font-weight:bold;\">true</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>}<br><br>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>prevProps = prevParentElement.<span style=\"color:#9876aa;\">props</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextProps = nextParentElement.<span style=\"color:#9876aa;\">props</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// Not a simple state update but a props update<br></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(prevParentElement !== nextParentElement) {<br>        willReceive = <span style=\"color:#cc7832;font-weight:bold;\">true</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>}<br><br>    <span style=\"color:#808080;\">// An update here will schedule an update but immediately set<br></span><span style=\"color:#808080;\">    // _pendingStateQueue which will ensure that any state updates gets<br></span><span style=\"color:#808080;\">    // immediately reconciled instead of waiting for the next batch.<br></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(willReceive &amp;&amp; inst.<span style=\"color:#ffc66d;\">componentWillReceiveProps</span>) {<br>        inst.<span style=\"color:#ffc66d;\">componentWillReceiveProps</span>(nextProps<span style=\"color:#cc7832;\">, </span>nextContext)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>}<br><br>    <span style=\"color:#808080;\">// If updating happens to enqueue any new updates, we shouldn't execute new<br></span><span style=\"color:#808080;\">    // callbacks until the next render happens, so stash the callbacks first.<br></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>callbacks = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingCallbacks</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingCallbacks </span>= <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextState = <span style=\"color:#cc7832;font-weight:bold;\">this</span>._processPendingState(nextProps<span style=\"color:#cc7832;\">, </span>nextContext)<span style=\"color:#cc7832;\">; </span><span style=\"color:#808080;\">//获得nextState<br></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>shouldUpdate = <span style=\"color:#cc7832;font-weight:bold;\">true</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(!<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingForceUpdate</span>) { <span style=\"color:#808080;\">//没设置forseupdate<br></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>prevState = inst.<span style=\"color:#9876aa;\">state</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span>shouldUpdate = willReceive || nextState !== prevState<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//如果提供shouldComponentUpdate，调用函数，否则新旧state和props浅比较确定是否更新<br></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(inst.<span style=\"color:#ffc66d;\">shouldComponentUpdate</span>) {<br>            shouldUpdate = inst.<span style=\"color:#ffc66d;\">shouldComponentUpdate</span>(nextProps<span style=\"color:#cc7832;\">, </span>nextState<span style=\"color:#cc7832;\">, </span>nextContext)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br>            <span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_compositeType </span>=== ReactCompositeComponentTypes.<span style=\"color:#9876aa;\">PureClass</span>) {<br>                shouldUpdate =<br>                    !shallowEqual(prevProps<span style=\"color:#cc7832;\">, </span>nextProps) ||<br>                    !shallowEqual(inst.<span style=\"color:#9876aa;\">state</span><span style=\"color:#cc7832;\">, </span>nextState)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">            </span>}<br>        }<br>    }<br><br>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_updateBatchNumber </span>= <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(shouldUpdate) {<br>        <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingForceUpdate </span>= <span style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">// Will set `this.props`, `this.state` and `this.context`.<br></span><span style=\"color:#808080;\">        //设置新props、state，调用生命周期函数（如果提供），更新dom<br></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>._performComponentUpdate(<br>            nextParentElement<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">            </span>nextProps<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">            </span>nextState<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">            </span>nextContext<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">            </span>transaction<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">            </span>nextUnmaskedContext<br>        )<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br>        <span style=\"color:#808080;\">// If it's determined that a component should not update, we still want<br></span><span style=\"color:#808080;\">        // to set props and state but we shortcut the rest of the update.<br></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement </span>= nextParentElement<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_context </span>= nextUnmaskedContext<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span>inst.<span style=\"color:#9876aa;\">props </span>= nextProps<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span>inst.<span style=\"color:#9876aa;\">state </span>= nextState<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span>inst.<span style=\"color:#9876aa;\">context </span>= nextContext<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>}<br>    <span style=\"color:#808080;\">//render之后调用的事件队列<br></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(callbacks) {<br>        <span style=\"color:#cc7832;font-weight:bold;\">for </span>(<span style=\"color:#cc7832;font-weight:bold;\">var </span>j = <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">; </span>j &lt; callbacks.<span style=\"color:#9876aa;\">length</span><span style=\"color:#cc7832;\">; </span>j++) {<br>            transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<br>                callbacks[j]<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">                </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">getPublicInstance</span>()<br>            )<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">        </span>}<br>    }<br>}<span style=\"color:#cc7832;\">,</span>\n</span></span></pre><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#629755;font-style:italic;\">/**<br></span><span style=\"color:#629755;font-style:italic;\"> * Merges new props and state, notifies delegate methods of update and<br></span><span style=\"color:#629755;font-style:italic;\"> * performs update.<br></span><span style=\"color:#629755;font-style:italic;\"> *<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactElement} nextElement Next element<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{object} nextProps Next public object to set as properties.<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?object} nextState Next object to set as state.<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?object} nextContext Next public object to set as context.<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction} transaction<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?object} unmaskedContext<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@private<br></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\"><span style=\"color:#629755;font-style:italic;\">*/<br></span>_performComponentUpdate: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br>  nextElement<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>nextProps<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>nextState<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>nextContext<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>transaction<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>unmaskedContext<br>) {<br>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>inst = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_instance</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>hasComponentDidUpdate = Boolean(inst.<span style=\"color:#ffc66d;\">componentDidUpdate</span>)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>prevProps<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>prevState<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>prevContext<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(hasComponentDidUpdate) {<br>    prevProps = inst.<span style=\"color:#9876aa;\">props</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>prevState = inst.<span style=\"color:#9876aa;\">state</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>prevContext = inst.<span style=\"color:#9876aa;\">context</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>}<br><br>  <span style=\"color:#cc7832;font-weight:bold;\">if </span>(inst.<span style=\"color:#ffc66d;\">componentWillUpdate</span>) {<br>     inst.<span style=\"color:#ffc66d;\">componentWillUpdate</span>(nextProps<span style=\"color:#cc7832;\">, </span>nextState<span style=\"color:#cc7832;\">, </span>nextContext)<span style=\"color:#cc7832;\">;</span><br>  }<br><br>  <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement </span>= nextElement<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_context </span>= unmaskedContext<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>inst.<span style=\"color:#9876aa;\">props </span>= nextProps<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>inst.<span style=\"color:#9876aa;\">state </span>= nextState<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>inst.<span style=\"color:#9876aa;\">context </span>= nextContext<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(inst.<span style=\"color:#ffc66d;\">unstable_handleError</span>) {<br>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>._updateRenderedComponentWithErrorHandling(transaction<span style=\"color:#cc7832;\">, </span>unmaskedContext)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>._updateRenderedComponent(transaction<span style=\"color:#cc7832;\">, </span>unmaskedContext)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>}<br><br>  <span style=\"color:#cc7832;font-weight:bold;\">if </span>(hasComponentDidUpdate) {<br>      transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<br>        inst.<span style=\"color:#ffc66d;\">componentDidUpdate</span>.<span style=\"color:#ffc66d;\">bind</span>(inst<span style=\"color:#cc7832;\">, </span>prevProps<span style=\"color:#cc7832;\">, </span>prevState<span style=\"color:#cc7832;\">, </span>prevContext)<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">        </span>inst<br>      )<span style=\"color:#cc7832;\">;</span><br>  }<br>}<span style=\"color:#cc7832;\">,</span>\n</span></pre><br></div><div>3）unmountComponent 调用生命周期函数componentWillUnmount（如果提供），调用当前组件对应的React Component实例对应的unmountComponent函数，重置一堆变量。</div><div><br></div><div><br></div><div><ol start=\"2\"><li>渲染组件的工作主要在这个函数，通过<font style=\"font-family: Helvetica; color: rgb(69, 69, 69);\">instantiateReactComponent</font>得到了各种类型组件对应的ReactComponent实例（可以理解为一个ReactComponent实例的树，包含所有子节点的ReactComponent实例），然后调用实例的mountComponent方法（上面讲解过）得到要渲染的‘markup’可能是一个dom树，或一个DOMLazyTree结构保存将子节点的dom结构树保存到数组里，最后插入到container中。</li></ol></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#629755;font-style:italic;\">/**<br></span><span style=\"color:#629755;font-style:italic;\"> * Mounts this component and inserts it into the DOM.<br></span><span style=\"color:#629755;font-style:italic;\"> *<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactComponent} componentInstance The instance to mount.<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{DOMElement} container DOM element to mount into.<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction} transaction<br></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{boolean} shouldReuseMarkup If true, do not insert markup<br></span><span style=\"color:#629755;font-style:italic;\"> */<br></span><span style=\"color:#cc7832;font-weight:bold;\">function </span><span style=\"color:#ffc66d;\">mountComponentIntoNode</span>(<br>  wrapperInstance<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>container<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>transaction<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>shouldReuseMarkup<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">  </span>context<br>) {<br>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>markerName<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(ReactFeatureFlags.<span style=\"color:#9876aa;\">logTopLevelRenders</span>) { //记录拼接组件对应的dom模板所用的时长<br>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>wrappedElement = wrapperInstance.<span style=\"color:#9876aa;\">_currentElement</span>.<span style=\"color:#9876aa;\">props</span>.child<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>type = wrappedElement.<span style=\"color:#9876aa;\">type</span><span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span>markerName = <span style=\"color:#6a8759;\">'React mount: ' </span>+ (<br>      <span style=\"color:#cc7832;font-weight:bold;\">typeof </span>type === <span style=\"color:#6a8759;\">'string' </span>? type :<br>      type.<span style=\"color:#9876aa;\">displayName </span>|| type.<span style=\"color:#9876aa;\">name<br></span><span style=\"color:#9876aa;\">    </span>)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#9876aa;\">console</span>.<span style=\"color:#ffc66d;\">time</span>(markerName)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>}<br><br>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>markup = ReactReconciler.<span style=\"color:#ffc66d;\">mountComponent</span>( //调用组件实例的mountComponent方法获得要渲染的结构（可能是一个html片段或一个src/<font style=\"font-size: 12px; color: rgb(169, 183, 198); font-family: Menlo;\">renderers/dom/stack/client/DOMLazyTree.js结构）</font>，添加事件以及ref属性<br>    wrapperInstance<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>transaction<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>ReactDOMContainerInfo(wrapperInstance<span style=\"color:#cc7832;\">, </span>container)<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>context<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#6897bb;\">0 </span><span style=\"color:#808080;\">/* parentDebugID */<br></span><span style=\"color:#808080;\">  </span>)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\"><br></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(markerName) {<br>    <span style=\"color:#9876aa;\">console</span>.<span style=\"color:#ffc66d;\">timeEnd</span>(markerName)<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>}<br><br>  wrapperInstance.<span style=\"color:#9876aa;\">_renderedComponent</span>.<span style=\"color:#9876aa;\">_topLevelWrapper </span>= wrapperInstance<span style=\"color:#cc7832;\">;<br></span><span style=\"color:#cc7832;\">  </span>ReactMount.<span style=\"color:#ffc66d;\">_mountImageIntoNode</span>( //将上面得到的结构（递归）渲染到container dom节点中，显示在页面上<br>    markup<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>container<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>wrapperInstance<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>shouldReuseMarkup<span style=\"color:#cc7832;\">,<br></span><span style=\"color:#cc7832;\">    </span>transaction<br>  )<span style=\"color:#cc7832;\">;<br></span>}\n</pre><br></div><div>以上是对虚拟dom和渲染策略的讲解。</div><div><br></div><div>推荐阅读：</div><div><span style=\"font: 12.0px Helvetica; color: #e4af09\"><a href=\"https://zhuanlan.zhihu.com/purerender\" target=\"_blank\" rel=\"external\">https://zhuanlan.zhihu.com/purerender</a></span><span style=\"font: 12.0px Helvetica; color: #454545\"><span style=\"font: 12.0px 'PingFang SC'; color: #454545\">关于</span><span style=\"font: 12.0px Helvetica; color: #454545\">react</span><span style=\"font: 12.0px 'PingFang SC'; color: #454545\">源码解析系列文章</span><span style=\"font: 12.0px Helvetica; color: #454545\"><br>\n<span style=\"color: #e4af09\"><a href=\"http://purplebamboo.github.io/2015/09/15/reactjs_source_analyze_part_one/\" target=\"_blank\" rel=\"external\">http://purplebamboo.github.io/2015/09/15/reactjs_source_analyze_part_one/</a></span></span></span></div><div><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-size: 12px; font-family: Helvetica;\"><font color=\"#e4af09\">《深入React技术栈》这本书的第三章（有需要可以找我借）<br></font>\n</span><br></div><div><br></div><div><br></div></div></div></div></div></div>","excerpt":"","more":"\n<div><span style=\"color: rgb(68, 68, 68); font-family: 'Helvetica Neue', Helvetica, 'Lucida Grande', Arial, 'Hiragino Sans GB', 微软雅黑, 'WenQuanYi Micro Hei', STHeiti, SimSun, sans-serif; font-size: 14px; orphans: 2; widows: 2;\">前端开发过程中，更新页面的数据、样式等操作都要操作dom，而复杂的dom操作通常是产品性能瓶颈原因之一，为此React引入了Virtual Dom的概念，Virtual Dom其实是用js实现了一套dom api，包括虚拟dom模型、生命周期管理、diff算法等。React会将传入的JSX片段转化成虚拟dom节点，当数据更新时，通过diff算法找到要变更的dom节点，并只对变化的部分进行实际的浏览器dom更新，而不是重新渲染整个dom树。下面我们结合组件渲染流程结合源码介绍一下React如何创建虚拟节点，以及如何渲染、更新节点的整个流程。</span><br/></div><div><span style=\"color: rgb(68, 68, 68); font-family: 'Helvetica Neue', Helvetica, 'Lucida Grande', Arial, 'Hiragino Sans GB', 微软雅黑, 'WenQuanYi Micro Hei', STHeiti, SimSun, sans-serif; font-size: 14px; orphans: 2; widows: 2;\">——以下代码是React v15.4.2版本——<br/></span></div><div>React项目渲染组件的方法是：ReactDom.render，将父组件连带所有包含在内的子组件渲染出来。render方法最终调用了 src/renderers/dom/stack/client/ReactMount.js 的render方法。</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Renders a React component into the DOM in the supplied `container`.<br/></span><span style=\"color:#629755;font-style:italic;\"> * See <a href=\"https://facebook.github.io/react/docs/react-dom.html#render\">https://facebook.github.io/react/docs/react-dom.html#render</a><br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * If the React component was previously rendered into `container`, this will<br/></span><span style=\"color:#629755;font-style:italic;\"> * perform an update on it and only mutate the DOM as necessary to reflect the<br/></span><span style=\"color:#629755;font-style:italic;\"> * latest React component.<br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactElement} nextElement Component element to render.<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{DOMElement} container DOM element to render into.<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?function} callback function triggered on completion<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@return </span><span style=\"color:#629755;font-style:italic;\">{ReactComponent} Component instance rendered in `container`.<br/></span><span style=\"color:#629755;font-style:italic;\"> */<br/></span><span style=\"color:#ffc66d;\">render</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(nextElement<span style=\"color:#cc7832;\">, </span>container<span style=\"color:#cc7832;\">, </span>callback) {<br/>  <span style=\"color:#cc7832;font-weight:bold;\">return </span>ReactMount.<span style=\"color:#ffc66d;\">_renderSubtreeIntoContainer</span>(<span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">, </span>nextElement<span style=\"color:#cc7832;\">, </span>container<span style=\"color:#cc7832;\">, </span>callback)<span style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">,</span></pre></div><div>注意这里第一个参数是ReactElement类型，通常为了可读性和开发效率我们传入JSX写的结构，最终会编译转换成调用React的createElement方法生成虚拟元素ReactElement结构传入render中。这里我们先看一下React.createElement做了哪些事情（src/isomorphic/classic/element/ReactElement.js）</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><br/><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Create and return a new ReactElement of the given type.<br/></span><span style=\"color:#629755;font-style:italic;\"> * See <a href=\"https://facebook.github.io/react/docs/react-api.html#createelement\">https://facebook.github.io/react/docs/react-api.html#createelement</a><br/></span><span style=\"color:#629755;font-style:italic;\"> */<br/></span><span style=\"color:#ffc66d;\">ReactElement</span>.<span style=\"color:#ffc66d;\">createElement </span>= <span style=\"color:#cc7832;font-weight:bold;\">function</span>(type<span style=\"color:#cc7832;\">, </span>config<span style=\"color:#cc7832;\">, </span>children) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>propName<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// Reserved names are extracted<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>props = {}<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>key = <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>ref = <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>self = <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>source = <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(config != <span style=\"color:#cc7832;font-weight:bold;\">null</span>) {<br/>        <span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#ffc66d;\">hasValidRef</span>(config)) {<br/>            ref = config.<span style=\"color:#9876aa;\">ref</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/>        <span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#ffc66d;\">hasValidKey</span>(config)) {<br/>            key = <span style=\"color:#6a8759;\">'' </span>+ config.key<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/><br/>        self = config.<span style=\"color:#9876aa;\">__self </span>=== <span style=\"color:#9876aa;\">undefined </span>? <span style=\"color:#cc7832;font-weight:bold;\">null </span>: config.<span style=\"color:#9876aa;\">__self</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>source = config.<span style=\"color:#9876aa;\">__source </span>=== <span style=\"color:#9876aa;\">undefined </span>? <span style=\"color:#cc7832;font-weight:bold;\">null </span>: config.<span style=\"color:#9876aa;\">__source</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">// config中的内容复制到props<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(propName <span style=\"color:#cc7832;font-weight:bold;\">in </span>config) {<br/>            <span style=\"color:#cc7832;font-weight:bold;\">if </span>(hasOwnProperty.<span style=\"color:#ffc66d;\">call</span>(config<span style=\"color:#cc7832;\">, </span>propName) &amp;&amp;<br/>                !RESERVED_PROPS.<span style=\"color:#ffc66d;\">hasOwnProperty</span>(propName)) {<br/>                props[propName] = config[propName]<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span>}<br/>        }<br/>    }<br/><br/>    <span style=\"color:#808080;\">//将第三个及之后的参数作为children赋值给props的children属性<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>childrenLength = arguments.<span style=\"color:#9876aa;\">length </span>- <span style=\"color:#6897bb;\">2</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(childrenLength === <span style=\"color:#6897bb;\">1</span>) {<br/>        props.<span style=\"color:#9876aa;\">children </span>= children<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(childrenLength &gt; <span style=\"color:#6897bb;\">1</span>) {<br/>        <span style=\"color:#cc7832;font-weight:bold;\">var </span>childArray = Array(childrenLength)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(<span style=\"color:#cc7832;font-weight:bold;\">var </span>i = <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">; </span>i &lt; childrenLength<span style=\"color:#cc7832;\">; </span>i++) {<br/>            childArray[i] = arguments[i + <span style=\"color:#6897bb;\">2</span>]<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/><br/>        props.<span style=\"color:#9876aa;\">children </span>= childArray<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/><br/>    <span style=\"color:#808080;\">// 如果某个props为空且存在默认props，赋值<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(type &amp;&amp; type.<span style=\"color:#9876aa;font-style:italic;\">defaultProps</span>) {<br/>        <span style=\"color:#cc7832;font-weight:bold;\">var </span>defaultProps = type.<span style=\"color:#9876aa;font-style:italic;\">defaultProps</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(propName <span style=\"color:#cc7832;font-weight:bold;\">in </span>defaultProps) {<br/>            <span style=\"color:#cc7832;font-weight:bold;\">if </span>(props[propName] === <span style=\"color:#9876aa;\">undefined</span>) {<br/>                props[propName] = defaultProps[propName]<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span>}<br/>        }<br/>    }<br/><br/>    <span style=\"color:#cc7832;font-weight:bold;\">return </span><span style=\"color:#ffc66d;\">ReactElement</span>(<br/>        type<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>key<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>ref<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>self<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>source<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>ReactCurrentOwner.<span style=\"color:#9876aa;\">current</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>props<br/>    )<span style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">;</span>\n</pre></div><div><br/></div><div>下面结合源码详细讲解整个渲染的过程。</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#ffc66d;\">render</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(nextElement<span style=\"color:#cc7832;\">, </span>container<span style=\"color:#cc7832;\">, </span>callback) {<br/>  <span style=\"color:#cc7832;font-weight:bold;\">return </span>ReactMount.<span style=\"color:#ffc66d;\">_renderSubtreeIntoContainer</span>(<span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">, </span>nextElement<span style=\"color:#cc7832;\">, </span>container<span style=\"color:#cc7832;\">, </span>callback)<span style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">,</span>\n</pre>去掉各种检查后的代码如下：</div><div>思路：首先获得dom container里原有的ReactElement，如果存在则将实际需要渲染的ReactElement（上一步用<font style=\"font-family: Menlo; font-size: 12px; background-color: rgb(43, 43, 43); color: rgb(128, 128, 128);\">TopLevelWrapper</font>包裹的child）和新的ReactElement做比较（1），如果应该更新则更新组件（2），否则清空container内之前渲染的组件（3），生成新的根ReactComponent渲染到container中（4）。</div><div>主要流程图如下：<br/><img src=\"/images/2017-01-20/%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B%E5%9B%BE.png\" height=\"558\" width=\"650\"/><br/></div><div><pre style=\"background-color: rgb(43, 43, 43);\"><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">_renderSubtreeIntoContainer</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">: </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">function</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(parentComponent</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">, </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">nextElement</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">, </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">container</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">, </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">callback) {</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\"><br/></span><pre style=\"font-family: Menlo; font-size: 9pt; background-color: rgb(43, 43, 43);\"><span style=\"font-size: 9pt;\"><font><pre style=\"background-color: rgb(43, 43, 43); font-family: Menlo; font-size: 9pt;\">   <span style=\"color: rgb(128, 128, 128);\">//nextElement外包一层react定义的TopLevelWrapper用于屏蔽各类组件的差异记录一些变量，比如顶层组件的计数<br/></span><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">   var </span><font color=\"#a9b7c6\">nextWrappedElement = React.</font><span style=\"color: rgb(152, 118, 170);\">createElement</span><font color=\"#a9b7c6\">(<br/>     </font><span style=\"color: rgb(255, 198, 109);\">TopLevelWrapper</span><span style=\"color: rgb(204, 120, 50);\">,<br/></span><span style=\"color: rgb(204, 120, 50);\">     </span><font color=\"#a9b7c6\">{ </font><span style=\"color: rgb(152, 118, 170);\">child</span><font color=\"#a9b7c6\">: nextElement }<br/>   )</font>;</pre></font></span></pre><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">nextContext = getContextForSubtree(parentComponent)</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;//本次调用返回null<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">prevComponent = </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">getTopLevelWrapperInContainer</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(container)</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\"><br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">if </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(prevComponent) {<br/>    </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">prevWrappedElement = prevComponent.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_currentElement</span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">prevElement = prevWrappedElement.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">props</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">.child</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">if </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(shouldUpdateReactComponent(prevElement</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">, </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">nextElement)) {      &lt;——— 1<br/>      </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">publicInst = prevComponent.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_renderedComponent</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">getPublicInstance</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">()</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">      </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">updatedCallback = callback &amp;&amp; </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">function</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">() {<br/>        callback.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">call</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(publicInst)</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">      </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">}</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">      </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">ReactMount.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">_updateRootComponent</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(   &lt;———— 2<br/>        prevComponent</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">        </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">nextWrappedElement</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">        </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">nextContext</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">        </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">container</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">        </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">updatedCallback<br/>      )</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">      </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">return </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">publicInst</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">} </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">else </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">{<br/>      ReactMount.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">unmountComponentAtNode</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(container)</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;  <font style=\"font-family: Menlo; background-color: rgb(43, 43, 43); font-size: 12px; color: rgb(169, 183, 198);\">&lt;———— 3</font><br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">}<br/>  }<br/><br/>  </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">reactRootElement = </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">getReactRootElementInContainer</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(container)</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;//获得container节点的第一个dom子节点<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">containerHasReactMarkup =<br/>    reactRootElement &amp;&amp; !!</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">internalGetID</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(reactRootElement)</font><font face=\"Menlo\" color=\"#cc7832\" size=\"2\">; //判断这个dom子节点是不是React渲染的（React渲染的会有会有一个‘data-reacted’的attribute属性）<br/></font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">containerHasNonRootReactChild = </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">hasNonRootReactChild</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(container)</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">; //判断container是否包含不是React根节点的React实例<br/></span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\"><br/>  </font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font color=\"#a9b7c6\"><font face=\"Menlo\" size=\"2\">shouldReuseMarkup =           //这里不太明白什么情况会重用markup，因为在’3’已经把container中的dom清空了，欢迎讨论<br/>    containerHasReactMarkup &amp;&amp;<br/>    !prevComponent &amp;&amp;<br/>    !containerHasNonRootReactChild</font></font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">var </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">component = ReactMount.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">_renderNewRootComponent</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">(   </font><font style=\"font-family: Menlo; font-size: 12px; color: rgb(169, 183, 198); background-color: rgb(43, 43, 43);\">&lt;———— 4</font><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\"><br/>    nextWrappedElement</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">container</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">shouldReuseMarkup</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">nextContext</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">    </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">callback<br/>  ).</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(152, 118, 170);\">_renderedComponent</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">.</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(255, 198, 109);\">getPublicInstance</span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">()</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">  </span><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\">return </span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">component</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">;<br/></span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\">}</font><span style=\"font-family: Menlo; font-size: 9pt; color: rgb(204, 120, 50);\">,<br/></span><font style=\"font-family: Menlo; font-size: 9pt;\" color=\"#a9b7c6\"\n/></pre><br/></div><div>下面分别展开研究四个函数：</div><div><div><ol start=\"1\"><li>shouldUpdateReactComponent.js ( src/renderers/shared/shared/shouldUpdateReactComponent.js ）</li></ol>这里只做了简单的类型比较，如果父节点的类型不同，则即使子节点相同也不做递归比较，官方文档参见<a href=\"https://facebook.github.io/react/docs/reconciliation.html#elements-of-different-types\">这里</a>。<br/></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#cc7832;font-weight:bold;\">function </span><span style=\"color:#ffc66d;\">shouldUpdateReactComponent</span>(prevElement<span style=\"color:#cc7832;\">, </span>nextElement) {<br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>prevEmpty = prevElement === <span style=\"color:#cc7832;font-weight:bold;\">null </span>|| prevElement === <span style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextEmpty = nextElement === <span style=\"color:#cc7832;font-weight:bold;\">null </span>|| nextElement === <span style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(prevEmpty || nextEmpty) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">return </span>prevEmpty === nextEmpty<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>prevType = <span style=\"color:#cc7832;font-weight:bold;\">typeof </span>prevElement<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextType = <span style=\"color:#cc7832;font-weight:bold;\">typeof </span>nextElement<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(prevType === <span style=\"color:#6a8759;\">'string' </span>|| prevType === <span style=\"color:#6a8759;\">'number'</span>) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">return </span>(nextType === <span style=\"color:#6a8759;\">'string' </span>|| nextType === <span style=\"color:#6a8759;\">'number'</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>    <span style=\"color:#cc7832;font-weight:bold;\">return </span>(<br/>      nextType === <span style=\"color:#6a8759;\">'object' </span>&amp;&amp;<br/>      prevElement.<span style=\"color:#9876aa;\">type </span>=== nextElement.<span style=\"color:#9876aa;\">type </span>&amp;&amp;<br/>      prevElement.<span style=\"color:#9876aa;\">key </span>=== nextElement.<span style=\"color:#9876aa;\">key<br/></span><span style=\"color:#9876aa;\">    </span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/>}<br/>\n</pre></div></div><div><font style=\"font-size: 14px;\">  </font></div><div><font style=\"font-size: 14px;\">  2. <span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(69, 69, 69);\">ReactMount._updateRootComponent（  src/renderers/dom/stack/client/ReactMount.js ）</span><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(228, 175, 9);\"><br/>\n</span></font></div><div>最主要的两句：</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\">ReactUpdateQueue.<span style=\"color:#ffc66d;\">enqueueElementInternal</span>(prevComponent<span style=\"color:#cc7832;\">, </span>nextElement<span style=\"color:#cc7832;\">, </span>nextContext)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(callback) {<br/>  ReactUpdateQueue.<span style=\"color:#ffc66d;\">enqueueCallbackInternal</span>(prevComponent<span style=\"color:#cc7832;\">, </span>callback)<span style=\"color:#cc7832;\">;<br/></span>}\n</pre>这里调用了src/renderers/shared/stack/reconciler/ReactUpdateQueue.js 的两个函数，分别给ReactComponent实例添加属性，要渲染的ReactElemnt、初始化上下文和在渲染完成后执行的回掉函数队列，然后调用ReactUpdates.js (src/renderers/shared/stack/reconciler/ReactUpdates.js)的enqueueUpadate加入到更新队列中（更新策略下文将详细讲解）。</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#ffc66d;\">enqueueElementInternal</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(internalInstance<span style=\"color:#cc7832;\">, </span>nextElement<span style=\"color:#cc7832;\">, </span>nextContext) {<br/>  internalInstance.<span style=\"color:#9876aa;\">_pendingElement </span>= nextElement<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#808080;\">// </span><span style=\"color:#a8c023;font-style:italic;\">TODO: introduce _pendingContext instead of setting it directly.<br/></span><span style=\"color:#a8c023;font-style:italic;\">  </span>internalInstance.<span style=\"color:#9876aa;\">_context </span>= nextContext<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#ffc66d;\">enqueueUpdate</span>(internalInstance)<span style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">,</span>\n</pre></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#ffc66d;\">enqueueCallbackInternal</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(internalInstance<span style=\"color:#cc7832;\">, </span>callback) {<br/>  <span style=\"color:#cc7832;font-weight:bold;\">if </span>(internalInstance.<span style=\"color:#9876aa;\">_pendingCallbacks</span>) {<br/>    internalInstance.<span style=\"color:#9876aa;\">_pendingCallbacks</span>.<span style=\"color:#ffc66d;\">push</span>(callback)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>    internalInstance.<span style=\"color:#9876aa;\">_pendingCallbacks </span>= [callback]<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/>  <span style=\"color:#ffc66d;\">enqueueUpdate</span>(internalInstance)<span style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">,</span>\n</pre><br/></div><div> <font style=\"font-size: 14px;\"> 3.</font><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(69, 69, 69);\"><font style=\"font-size: 14px;\">ReactMount.unmountComponentAtNode</font></span></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Unmounts and destroys the React component rendered in the `container`.<br/></span><span style=\"color:#629755;font-style:italic;\"> * See <a href=\"https://facebook.github.io/react/docs/react-dom.html#unmountcomponentatnode\">https://facebook.github.io/react/docs/react-dom.html#unmountcomponentatnode</a><br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{DOMElement} container DOM element containing a React component.<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@return </span><span style=\"color:#629755;font-style:italic;\">{boolean} True if a component was found in and unmounted from<br/></span><span style=\"color:#629755;font-style:italic;\"> *                   `container`<br/></span><span style=\"color:#629755;font-style:italic;\"> */<br/></span><span style=\"color:#ffc66d;\">unmountComponentAtNode</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(container) {<br/><br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>prevComponent = <span style=\"color:#ffc66d;\">getTopLevelWrapperInContainer</span>(container)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(!prevComponent) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">return false</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/>  <span style=\"color:#cc7832;font-weight:bold;\">delete </span>instancesByReactRootID[prevComponent.<span style=\"color:#9876aa;\">_instance</span>.rootID]<span style=\"color:#cc7832;\">;//devtools会用到的映射，这里可以先忽略<br/></span><span style=\"color:#cc7832;\">  </span>ReactUpdates.<span style=\"color:#ffc66d;\">batchedUpdates</span>(<br/>    <span style=\"color:#ffc66d;\">unmountComponentFromNode</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>prevComponent<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>container<br/>  )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">return true</span><span style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">,</span>\n</pre>注意这里也调用ReactUpdates.js (src/renderers/shared/stack/reconciler/ReactUpdates.js)类的函数batchedUpadates更新组件（更新策略下文将详细讲解），传入三个参数，第一个参数作为更新策略执行过程中调用的函数，后两个作为参数，这里要执行的函数是：</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#cc7832;font-weight:bold;\">function </span><span style=\"color:#ffc66d;\">unmountComponentFromNode</span>(instance<span style=\"color:#cc7832;\">, </span>container) {<br/>  //这个函数主要作用是：1.去掉组件中的ref引用，调用组件的unmountComponent函数，这里主要有三类组件文本组件、html标签对应的组件和自定义组件，每种对应的unmountComponent实现方式不同，主要做些清理React内部用到的缓存，组件上绑定的事件之类的工作，具体参见下文。<br/>  ReactReconciler.<span style=\"color:#ffc66d;\">unmountComponent</span>(<br/>    instance<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">false </span><span style=\"color:#808080;\">/* safely */</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">false </span><span style=\"color:#808080;\">/* skipLifecycle */<br/></span><span style=\"color:#808080;\">  </span>)<span style=\"color:#cc7832;\">;<br/></span><br/>  <span style=\"color:#cc7832;font-weight:bold;\">if </span>(container.nodeType === DOC_NODE_TYPE) {<br/>    container = container.documentElement<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><br/>  <span style=\"color:#808080;\">//可以看到这里循环移除了container节点中的全部dom元素，有很多方法可以实现，这里有个有趣的效率对比试验： <a href=\"http://jsperf.com/emptying-a-node\">http://jsperf.com/emptying-a-node</a><br/></span><span style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">while </span>(container.lastChild) {<br/>    container.removeChild(container.lastChild)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><span style=\"background-color:#344134;\">}</span>\n</pre><br/></div><div><ol start=\"4\"><li><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(69, 69, 69);\"><font style=\"font-size: 14px;\">ReactMount._renderNewRootComponent</font></span></li></ol><div><font face=\"Helvetica\" color=\"#454545\">先ReactElement初始<font style=\"font-size: 14px;\">化ReactComponent实例（1），这里可能是自定义组件</font><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(69, 69, 69);\"><font style=\"font-size: 14px;\">ReactCompositeComponent，文本元素对应的ReactDOMTextComponent和浏览器基本元素对应的ReactDOMComponent。然后调用更新策略将组件渲染到container中，以及做一些比如ref绑定等初始化工作（2）。</font><br/>\n</span></font></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#ffc66d;\">_renderNewRootComponent</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br/>  nextElement<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>container<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>shouldReuseMarkup<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>context<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>callback<br/>) {<br/> //<span style=\"color: rgb(98, 151, 85); font-style: italic; font-size: 9pt;\">Listens to window scroll and resize events. We cache scroll values so that </span><span style=\"color: rgb(98, 151, 85); font-style: italic; font-size: 9pt;\">application code can access them without triggering reflows.这里先不做分析</span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span>ReactBrowserEventEmitter.<span style=\"color:#ffc66d;\">ensureScrollValueMonitoring</span>()<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>componentInstance = instantiateReactComponent(nextElement<span style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">false</span>)<span style=\"color:#cc7832;\">; &lt;——— 1<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(callback) {<br/>    componentInstance.<span style=\"color:#9876aa;\">_pendingCallbacks </span>= [<span style=\"color:#cc7832;font-weight:bold;\">function</span>() { //初始化render完成后调用的回掉函数队列<br/>      callback.<span style=\"color:#ffc66d;\">call</span>(componentInstance.<span style=\"color:#9876aa;\">_renderedComponent</span>.<span style=\"color:#ffc66d;\">getPublicInstance</span>())<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}]<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><br/>  <span style=\"color:#808080;\">// The initial render is synchronous but any updates that happen during<br/></span><span style=\"color:#808080;\">  // rendering, in componentWillMount or componentDidMount, will be batched<br/></span><span style=\"color:#808080;\">  // according to the current batching strategy.<br/></span><span style=\"color:#808080;\"><br/></span><span style=\"color:#808080;\">  </span>ReactUpdates.<span style=\"color:#ffc66d;\">batchedUpdates</span>(  &lt;———— 2<br/>    <span style=\"color:#ffc66d;\">batchedMountComponentIntoNode</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>componentInstance<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>container<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>shouldReuseMarkup<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>context<br/>  )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>wrapperID = componentInstance.<span style=\"color:#9876aa;\">_instance</span>.rootID<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>instancesByReactRootID[wrapperID] = componentInstance<span style=\"color:#cc7832;\">; <font style=\"font-family: Menlo; font-size: 12px; background-color: rgb(43, 43, 43); color: rgb(204, 120, 50);\">//devtools会用到的映射，先忽略</font><br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">return </span>componentInstance<span style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">,</span>\n</pre><br/></div></div><div>下面分别展开讲解。</div><div><div><ol start=\"1\"><li><font style=\"font-size: 14px;\"> </font><font><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-family: Helvetica; color: rgb(69, 69, 69);\"><font><font style=\"font-size: 14px;\">instantiateReactComponent（src/<font style=\"color: rgb(69, 69, 69); font-family: Helvetica;\">renderers/shared/stack/reconciler/instantiateReactComponent.js</font>） 初始化组件实例，这里用到了工厂模式，根据传入的参数‘生产’对应的React Component实例。<span style=\"color: rgb(51, 51, 51); font-family: -apple-system, 'PingFang SC', 'Hiragino Sans GB', Arial, 'Microsoft YaHei', 'Helvetica Neue', sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); float: none;\">分别实例化</span><code style=\"box-sizing: border-box; outline: none; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 0.2em 0.4em; word-break: break-word; color: rgb(78, 89, 128); background-color: rgb(248, 248, 248); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">ReactDOMTextComponent</code><span style=\"color: rgb(51, 51, 51); font-family: -apple-system, 'PingFang SC', 'Hiragino Sans GB', Arial, 'Microsoft YaHei', 'Helvetica Neue', sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; float: none;\">, </span><code style=\"box-sizing: border-box; outline: none; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 0.2em 0.4em; word-break: break-word; color: rgb(78, 89, 128); background-color: rgb(248, 248, 248); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">ReactDOMComponent</code><span style=\"color: rgb(51, 51, 51); font-family: -apple-system, 'PingFang SC', 'Hiragino Sans GB', Arial, 'Microsoft YaHei', 'Helvetica Neue', sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); float: none;\">, </span><code style=\"box-sizing: border-box; outline: none; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 0.2em 0.4em; word-break: break-word; color: rgb(78, 89, 128); background-color: rgb(248, 248, 248); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">ReactCompositeComponent</code><span style=\"color: rgb(51, 51, 51); font-family: -apple-system, 'PingFang SC', 'Hiragino Sans GB', Arial, 'Microsoft YaHei', 'Helvetica Neue', sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; float: none;\">类。这些类用来管理</span><code style=\"box-sizing: border-box; outline: none; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 0.2em 0.4em; word-break: break-word; color: rgb(78, 89, 128); background-color: rgb(248, 248, 248); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">ReactElement</code><span style=\"color: rgb(51, 51, 51); font-family: -apple-system, 'PingFang SC', 'Hiragino Sans GB', Arial, 'Microsoft YaHei', 'Helvetica Neue', sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; float: none;\">,负责将不同的</span><code style=\"box-sizing: border-box; outline: none; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 0.2em 0.4em; word-break: break-word; color: rgb(78, 89, 128); background-color: rgb(248, 248, 248); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">ReactElement</code><span style=\"color: rgb(51, 51, 51); font-family: -apple-system, 'PingFang SC', 'Hiragino Sans GB', Arial, 'Microsoft YaHei', 'Helvetica Neue', sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; float: none;\">转化成DOM(通过mountComponent方法),负责更新DOM(通过receiveComponent方法，updateComponent方法，下面详细介绍)等。</span></font></font></span></font></li></ol><div style=\"text-align: center; \"><img src=\"/images/2017-01-20/%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B%E5%9B%BE%20(1).png\" height=\"251\" width=\"554\"/><br/></div><div><font face=\"Helvetica\" color=\"#454545\"/></div></div></div><div><font face=\"Helvetica\" color=\"#454545\"><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Given a ReactNode, create an instance that will actually be mounted.<br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactNode} node<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{boolean} shouldHaveDebugID<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@return </span><span style=\"color:#629755;font-style:italic;\">{object} A new instance of the element's constructor.<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@protected<br/></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\" /><span style=\"color:#629755;font-style:italic;\">*/<br/></span><span style=\"color:#cc7832;font-weight:bold;\">function </span><span style=\"color:#ffc66d;\">instantiateReactComponent</span>(node<span style=\"color:#cc7832;\">, </span>shouldHaveDebugID) {<br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>instance<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(node === <span style=\"color:#cc7832;font-weight:bold;\">null </span>|| node === <span style=\"color:#cc7832;font-weight:bold;\">false</span>) {<br/>    instance = ReactEmptyComponent.<span style=\"color:#ffc66d;\">create</span>(<span style=\"color:#ffc66d;\">instantiateReactComponent</span>)<span style=\"color:#cc7832;\">;//这里生成一个空的component对象</span><span style=\"font-size: 9pt;\">ReactDOMEmptyComponent，渲染一行注释，可以忽略</span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span>} <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(<span style=\"color:#cc7832;font-weight:bold;\">typeof </span>node === <span style=\"color:#6a8759;\">'object'</span>) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>element = node<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>type = element.<span style=\"color:#9876aa;\">type</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\"><br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">typeof </span>element.<span style=\"color:#9876aa;\">type </span>=== <span style=\"color:#6a8759;\">'string'</span>) { //如果类型是浏览器标签比如“div”、“span”之类 创建<font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); color: rgb(78, 89, 128);\">ReactDOMComponent 对象</font><br/>      instance = ReactHostComponent.<span style=\"color:#ffc66d;\">createInternalComponent</span>(element)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(<span style=\"color:#ffc66d;\">isInternalComponentType</span>(element.<span style=\"color:#9876aa;\">type</span>)) {//这个判断是否是内部组件的方式没有遇到过（待研究补充）<br/>      <span style=\"color:#808080;\">// This is temporarily available for custom components that are not string<br/></span><span style=\"color:#808080;\">      // representations. I.e. ART. Once those are updated to use the string<br/></span><span style=\"color:#808080;\">      // representation, we can drop this code path.<br/></span><span style=\"color:#808080;\">      </span>instance = <span style=\"color:#cc7832;font-weight:bold;\">new </span>element.<span style=\"color:#9876aa;\">type</span>(element)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">      </span><span style=\"color:#808080;\">// We renamed this. Allow the old name for compat. :(<br/></span><span style=\"color:#808080;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(!instance.<span style=\"color:#9876aa;\">getHostNode</span>) {<br/>        instance.<span style=\"color:#9876aa;\">getHostNode </span>= instance.<span style=\"color:#ffc66d;\">getNativeNode</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>}<br/>    } <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>      instance = <span style=\"color:#cc7832;font-weight:bold;\">new </span><span style=\"color:#ffc66d;\">ReactCompositeComponentWrapper</span>(element)<span style=\"color:#cc7832;\">; //创建自定义组件<font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); color: rgb(78, 89, 128);\">ReactCompositeComponent对象</font><br/></span><span style=\"color:#cc7832;\">    </span>}<br/>  } <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(<span style=\"color:#cc7832;font-weight:bold;\">typeof </span>node === <span style=\"color:#6a8759;\">'string' </span>|| <span style=\"color:#cc7832;font-weight:bold;\">typeof </span>node === <span style=\"color:#6a8759;\">'number'</span>) {<span style=\"color:#cc7832;\">//创建文本节点<font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); color: rgb(78, 89, 128);\">ReactDOMTextComponent 对象</font></span><br/>    instance = ReactHostComponent.<span style=\"color:#ffc66d;\">createInstanceForText</span>(node)<span style=\"color:#cc7832;\">; <br/></span><span style=\"color:#cc7832;\">  </span>} <br/><br/>  <span style=\"color:#808080;\">// These two fields are used by the DOM and ART diffing algorithms<br/></span><span style=\"color:#808080;\">  // respectively. Instead of using expandos on components, we should be<br/></span><span style=\"color:#808080;\">  // storing the state needed by the diffing algorithms elsewhere.<br/></span><span style=\"color:#808080;\">  </span>instance.<span style=\"color:#9876aa;\">_mountIndex </span>= <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>instance.<span style=\"color:#9876aa;\">_mountImage </span>= <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><br/>  <span style=\"color:#cc7832;font-weight:bold;\">return </span>instance<span style=\"color:#cc7832;\">;<br/></span>}<br/></pre></font></div><div><font face=\"Helvetica\" color=\"#454545\"><br/></font></div><div><font face=\"Helvetica\" color=\"#454545\">下面分别展开介绍三种组件的渲染、更新、卸载策略。</font></div><div><br/></div><div><font face=\"Helvetica\" color=\"#454545\">1.1）<font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); font-size: 12px; color: rgb(78, 89, 128);\">ReactDOMTextComponent（src/<font style=\"font-size: 12px; color: rgb(78, 89, 128); font-family: Menlo;\">renderers/dom/stack/client/ReactDOMTextComponent.js）</font></font></font></div><div><font face=\"Helvetica\" color=\"#454545\"><font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); font-size: 12px; color: rgb(78, 89, 128);\"><font style=\"font-size: 12px; color: rgb(78, 89, 128); font-family: Menlo;\"/></font></font></div><div>重点看下三个函数：</div><div><br/></div><div>    1) mountComponent 在render的时候调用，返回渲染内容，针对文本节点返回：</div><div>        &lt;!-- react-text:domId —&gt;这是文本内容&lt;!-- /react-text —&gt;</div><div><br/></div><div><div>  2）receiveComponent 在setState触发更新时调用这个函数，如果文本不同，只替换了注释中的内容。</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#ffc66d;\">receiveComponent</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(nextText<span style=\"color:#cc7832;\">, </span>transaction) {<br/>  <span style=\"color:#cc7832;font-weight:bold;\">if </span>(nextText !== <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span>) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement </span>= nextText<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextStringText = <span style=\"color:#6a8759;\">'' </span>+ nextText<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(nextStringText !== <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_stringText</span>) {<span style=\"color:#808080;\"><br/></span><span style=\"color:#808080;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_stringText </span>= nextStringText<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>commentNodes = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">getHostNode</span>()<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>DOMChildrenOperations.<span style=\"color:#ffc66d;\">replaceDelimitedText</span>(<br/>        commentNodes[<span style=\"color:#6897bb;\">0</span>]<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>commentNodes[<span style=\"color:#6897bb;\">1</span>]<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>nextStringText<br/>      )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/>  }<br/>}<span style=\"color:#cc7832;\">,</span>\n</pre><br/></div><div>3）unmountComponent 去掉对text节点引用，重置一些变量。</div><div><br/></div><div><br/></div><div>1.2）<font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); color: rgb(78, 89, 128);\">ReactDOMComponent</font></div><div><br/></div><div>    1）mountComponent 生成组件对应的dom结构</div><div>代码比较长，主要分为四个步骤：</div><div><ol start=\"1\"><li>做一些生成markup前的“准备工作”  ，针对不同类型做一些变量初始化以及让React事件系统捕捉指定事件。</li></ol>           以input标签为例介绍一下：<br/><div><ul><li> ReactDOMInput.mountWrapper(this, props, hostParent);  <br/></li></ul></div><div>           给input组件实例初始化状态，mountWrapper函数里只给实例设置了一个属性用以保存input的初始value和初始checked值。</div><div>           <span style=\"color:#cc7832;font-weight:bold;\">var </span>defaultValue = props.<span style=\"color:#9876aa;\">defaultValue</span><span style=\"color:#cc7832;\">;<br/></span><span>    <span>       </span></span>inst.<span style=\"color:#9876aa;\">_wrapperState </span>= {</div><div><span style=\"color:#9876aa;\">             initialChecked</span>: props.<span style=\"color:#9876aa;\">checked </span>!= <span style=\"color:#cc7832;font-weight:bold;\">null </span>? props.<span style=\"color:#9876aa;\">checked </span>: props.<span style=\"color:#9876aa;\">defaultChecked</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  <span>           </span></span><span style=\"color:#9876aa;\">initialValue</span>: props.<span style=\"color:#9876aa;\">value </span>!= <span style=\"color:#cc7832;font-weight:bold;\">null </span>? props.<span style=\"color:#9876aa;\">value </span>: defaultValue<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\"><span>    <span>  </span></span>       </span><span style=\"color:#9876aa;\">listeners</span>: <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">,<br/></span>           }<span style=\"color:#cc7832;\">;</span></div><div><ul><li> props = ReactDOMInput.getHostProps(this, props); 将更多input元素要用到的属性初始化并赋给事例，如value、type、max、min等等</li><li> transaction.getReactMountReady().enqueue(trackInputValue, this);<br/></li><li> transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this); 添加预定义事件，这里react添加了invalid事件</li><li> ensureListeningTo(this, 'onChange', transaction); 对于受控组件确保监听on change事件</li></ul><div><br/></div><div/></div><ol start=\"2\"><li>设置正确的namespace，根据父容器的namespace类型和当前实例的tag类型设置namespace 变量是html svg还是mathml<br/></li><li><b>创建将渲染在页面的markup（重要！！！讲解参见注释）</b></li></ol><div><ol start=\"4\"><li>做一些“收尾”工作，比如input、texture的内容初始化以及各个元素的autofocus设置<br/></li></ol></div></div><div>       </div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><br/><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Generates root tag markup then recurses. This method has side effects and<br/></span><span style=\"color:#629755;font-style:italic;\"> * is not idempotent.<br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@internal<br/></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\" /><span style=\"color:#629755;font-style:italic;\">* </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction|ReactServerRenderingTransaction} transaction<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?ReactDOMComponent} the parent component instance<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?object} info about the host container<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{object} context<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@return </span><span style=\"color:#629755;font-style:italic;\">{string} The computed markup.<br/></span><span style=\"color:#629755;font-style:italic;\"> */<br/></span>mountComponent: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br/>    transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>hostParent<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>hostContainerInfo<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>context<br/>) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_rootNodeID </span>= globalIdCounter++<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_domID </span>= hostContainerInfo.<span style=\"color:#9876aa;\">_idCounter</span>++<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_hostParent </span>= hostParent<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_hostContainerInfo </span>= hostContainerInfo<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>props = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span>.<span style=\"color:#9876aa;\">props</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">switch </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span>) {  &lt;———— <span style=\"color:#6897bb;\">1 </span>做一些生成markup前的“准备工作”<br/>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'audio'</span>:<br/>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'form'</span>:<br/>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'iframe'</span>:<br/>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'img'</span>:<br/>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'link'</span>:<br/>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'object'</span>:<br/>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'source'</span>:<br/>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'video'</span>:<br/>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'details'</span>:<br/>            <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_wrapperState </span>= {<br/>                <span style=\"color:#9876aa;\">listeners</span>: <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>}<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span><span style=\"color:#808080;\">//针对一些特性元素预先绑定一些事件<br/></span><span style=\"color:#808080;\">            </span>transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<span style=\"color:#ffc66d;\">trapBubbledEventsLocal</span><span style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span><span style=\"color:#cc7832;font-weight:bold;\">break</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'input'</span>:<span style=\"color:#808080;\">//给input组件实例初始化状态<br/></span><span style=\"color:#808080;\">            </span>ReactDOMInput.<span style=\"color:#ffc66d;\">mountWrapper</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>props<span style=\"color:#cc7832;\">, </span>hostParent)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span>props = ReactDOMInput.<span style=\"color:#ffc66d;\">getHostProps</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>props)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span>transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<span style=\"color:#ffc66d;\">trackInputValue</span><span style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span>transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<span style=\"color:#ffc66d;\">trapBubbledEventsLocal</span><span style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span><span style=\"color:#808080;\">// For controlled components we always need to ensure we're listening<br/></span><span style=\"color:#808080;\">            // to onChange. Even if there is no listener.<br/></span><span style=\"color:#808080;\">            </span><span style=\"color:#ffc66d;\">ensureListeningTo</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span><span style=\"color:#6a8759;\">'onChange'</span><span style=\"color:#cc7832;\">, </span>transaction)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span><span style=\"color:#cc7832;font-weight:bold;\">break</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">       //略去其他……</span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span>}<br/><br/>    <span style=\"color:#ffc66d;\">assertValidProps</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>props)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// We create tags in the namespace of their parent container, except HTML<br/></span><span style=\"color:#808080;\">    // tags get no namespace.<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>namespaceURI<span style=\"color:#cc7832;\">; </span>&lt;————— <span style=\"color:#6897bb;\">2 </span>设置正确的namespace<br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>parentTag<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(hostParent != <span style=\"color:#cc7832;font-weight:bold;\">null</span>) {<br/>        namespaceURI = hostParent.<span style=\"color:#9876aa;\">_namespaceURI</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>parentTag = hostParent.<span style=\"color:#9876aa;\">_tag</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(hostContainerInfo.<span style=\"color:#9876aa;\">_tag</span>) {<br/>        namespaceURI = hostContainerInfo.<span style=\"color:#9876aa;\">_namespaceURI</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>parentTag = hostContainerInfo.<span style=\"color:#9876aa;\">_tag</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/>    <span style=\"color:#cc7832;font-weight:bold;\">if </span>(namespaceURI == <span style=\"color:#cc7832;font-weight:bold;\">null </span>||<br/>        namespaceURI === DOMNamespaces.<span style=\"color:#9876aa;\">svg </span>&amp;&amp; parentTag === <span style=\"color:#6a8759;\">'foreignobject'</span>) {<br/>        namespaceURI = DOMNamespaces.<span style=\"color:#9876aa;\">html</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/>    <span style=\"color:#cc7832;font-weight:bold;\">if </span>(namespaceURI === DOMNamespaces.<span style=\"color:#9876aa;\">html</span>) {<br/>        <span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag </span>=== <span style=\"color:#6a8759;\">'svg'</span>) {<br/>            namespaceURI = DOMNamespaces.<span style=\"color:#9876aa;\">svg</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>} <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag </span>=== <span style=\"color:#6a8759;\">'math'</span>) {<br/>            namespaceURI = DOMNamespaces.<span style=\"color:#9876aa;\">mathml</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/>    }<br/>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_namespaceURI </span>= namespaceURI<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>mountImage<span style=\"color:#cc7832;\">; </span>&lt;————— <span style=\"color:#6897bb;\">3 </span>创建将渲染在页面的markup<br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>type = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span>.<span style=\"color:#9876aa;\">type</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">//默认用createElement创建<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(transaction.<span style=\"color:#9876aa;\">useCreateElement</span>) {<br/>        <span style=\"color:#cc7832;font-weight:bold;\">var </span>ownerDocument = hostContainerInfo.<span style=\"color:#9876aa;\">_ownerDocument</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>el<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(namespaceURI === DOMNamespaces.<span style=\"color:#9876aa;\">html</span>) {<br/>            <span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag </span>=== <span style=\"color:#6a8759;\">'script'</span>) {<br/>                <span style=\"color:#808080;\">//如果是script标签，注意这里包在div里再获取<br/></span><span style=\"color:#808080;\">                // Create the script via .innerHTML so its \"parser-inserted\" flag is<br/></span><span style=\"color:#808080;\">                // set to true and it does not execute<br/></span><span style=\"color:#808080;\">                </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>div = ownerDocument.<span style=\"color:#ffc66d;\">createElement</span>(<span style=\"color:#6a8759;\">'div'</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">                </span>div.<span style=\"color:#9876aa;\">innerHTML </span>= <span style=\"color:#6a8759;\">`&lt;</span>${type}<span style=\"color:#6a8759;\">&gt;&lt;/</span>${type}<span style=\"color:#6a8759;\">&gt;`</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">                </span>el = div.<span style=\"color:#ffc66d;\">removeChild</span>(div.<span style=\"color:#9876aa;\">firstChild</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span>} <span style=\"color:#cc7832;font-weight:bold;\">else if </span>(props.<span style=\"color:#9876aa;\">is</span>) {<br/>                <span style=\"color:#808080;\">//和用户自定义元素相关，参见：https://developer.<a href=\"http://mozilla.org/en-US/docs/Web/API/Document/createElement\">mozilla.org/en-US/docs/Web/API/Document/createElement</a> <br/></span><span style=\"color:#808080;\">                //https://www.<a href=\"http://w3.org/TR/custom-elements/#customized-built-in-element\">w3.org/TR/custom-elements/#customized-built-in-element</a> 同时也是为了解决firefox下createElement的bug<br/></span><span style=\"color:#808080;\">                </span>el = ownerDocument.<span style=\"color:#ffc66d;\">createElement</span>(type<span style=\"color:#cc7832;\">, </span>props.<span style=\"color:#9876aa;\">is</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>                <span style=\"color:#808080;\">// Separate else branch instead of using `props.is || undefined` above becuase of a Firefox bug.<br/></span><span style=\"color:#808080;\">                // See discussion in <a href=\"https://github.com/facebook/react/pull/6896\">https://github.com/facebook/react/pull/6896</a><br/></span><span style=\"color:#808080;\">                // and discussion in <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1276240\">https://bugzilla.mozilla.org/show_bug.cgi?id=1276240</a><br/></span><span style=\"color:#808080;\">                </span>el = ownerDocument.<span style=\"color:#ffc66d;\">createElement</span>(type)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span>}<br/>        } <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>            el = ownerDocument.<span style=\"color:#ffc66d;\">createElementNS</span>(<br/>                namespaceURI<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">                </span>type<br/>            )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/>        <span style=\"color:#808080;\">//如果tag名包含’－’或指定“is”属性认为是用户自定义标签<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>isCustomComponentTag = <span style=\"color:#ffc66d;\">isCustomComponent</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span><span style=\"color:#cc7832;\">, </span>props)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//分别在react实例添加属性指向刚创建的节点，同时给节点添加属性指向当前实例<br/></span><span style=\"color:#808080;\">        </span>ReactDOMComponentTree.<span style=\"color:#ffc66d;\">precacheNode</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>el)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_flags </span>|= Flags.<span style=\"color:#9876aa;\">hasCachedChildNodes</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//如果是最外层标签，不是递归创建的子节点，则设置为React根元素，比如ReactDom.render(‘&lt;div&gt;&lt;input/&gt;&lt;/div&gt;’,node) 在创建到div层的时候设置为根元素，然后递归渲染子元素（input）的时候hostParent不为空了。<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(!<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_hostParent</span>) {<br/>            DOMPropertyOperations.<span style=\"color:#ffc66d;\">setAttributeForRoot</span>(el)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/>        <span style=\"color:#808080;\">//根据新旧props的差异更新对应dom元素上的属性，首次渲染没有旧props<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_updateDOMProperties</span>(<span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">, </span>props<span style=\"color:#cc7832;\">, </span>transaction<span style=\"color:#cc7832;\">, </span>isCustomComponentTag)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//初始化DOMLazyTree结构，根据不同浏览器选择不同的渲染策略，参见（src/renderers/dom/stack/client/DOMLazyTree.js）<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>lazyTree = DOMLazyTree(el)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//如果有子节点，则遍历子节点递归调用ReactReconciler.mountComponent（这个函数主要还是调用子节点实例对应的mountComponent）生成子节点的markup（可以简单理解为子节点dom树），保存到lazyTree中，<br/></span><span style=\"color:#808080;\">        //根据不同浏览器渲染dom的效率选择将子元素缓存在DOMLazyTree的队列中延迟渲染还是直接拼成一个完整的dom树返回<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_createInitialChildren</span>(transaction<span style=\"color:#cc7832;\">, </span>props<span style=\"color:#cc7832;\">, </span>context<span style=\"color:#cc7832;\">, </span>lazyTree)<span style=\"color:#cc7832;\">;    &lt;============<br/></span><span style=\"color:#cc7832;\">        </span>mountImage = lazyTree<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>        <span style=\"color:#808080;\">//判断是否是合法的tag名（用正则）<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#ffc66d;\">validateDangerousTag</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//用字符串拼接的方式创建起始标签，并添加事件监听、属性和样式内容<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>tagOpen = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_createOpenTagMarkupAndPutListeners</span>(transaction<span style=\"color:#cc7832;\">, </span>props)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//如果有子节点，则遍历子节点递归生成每一个子节点的ReactComponent实例，然后调用每个实例的ReactReconciler.mountComponent生成子节点的dom树<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>tagContent = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_createContentMarkup</span>(transaction<span style=\"color:#cc7832;\">, </span>props<span style=\"color:#cc7832;\">, </span>context)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//闭合标签<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(!tagContent &amp;&amp; omittedCloseTags[<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span>]) {<br/>            mountImage = tagOpen + <span style=\"color:#6a8759;\">'/&gt;'</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>            mountImage = tagOpen + <span style=\"color:#6a8759;\">'&gt;' </span>+ tagContent + <span style=\"color:#6a8759;\">'&lt;/' </span>+ type + <span style=\"color:#6a8759;\">'&gt;'</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/>    }<br/><br/>    <span style=\"color:#cc7832;font-weight:bold;\">switch </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span>) { &lt;—————<span style=\"color:#6897bb;\">4 </span>给事务添加组件渲染完毕后做的事情<br/>        <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'input'</span>:<br/>            transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<br/>                <span style=\"color:#ffc66d;\">inputPostMount</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">                </span><span style=\"color:#cc7832;font-weight:bold;\">this<br/></span><span style=\"color:#cc7832;font-weight:bold;\">            </span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(props.<span style=\"color:#9876aa;\">autoFocus</span>) {<br/>                transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<br/>                    AutoFocusUtils.<span style=\"color:#ffc66d;\">focusDOMComponent</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">                    </span><span style=\"color:#cc7832;font-weight:bold;\">this<br/></span><span style=\"color:#cc7832;font-weight:bold;\">                </span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span>}<br/>            <span style=\"color:#cc7832;font-weight:bold;\">break</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">       //略去其他……  </span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span>}<br/><br/>    <span style=\"color:#cc7832;font-weight:bold;\">return </span>mountImage<span style=\"color:#cc7832;\">;<br/></span>}\n</pre>这里额外讲一下 <b>this._createInitialChildren(transaction, props, context, lazyTree)</b>生成子元素dom树的函数，如果props.children是数组，调用以下函数。</div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#ffc66d;\">mountChildren</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(nestedChildren<span style=\"color:#cc7832;\">, </span>transaction<span style=\"color:#cc7832;\">, </span>context) {<br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>children = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_reconcilerInstantiateChildren</span>(<span style=\"color:#808080;\">//深度遍历子节点获得所有子节点，同时调用</span><span style=\"font-size: 9pt; background-color: rgb(52, 65, 52);\">instantiateReactComponent生成子节点对应的</span><span style=\"font-size: 9pt; color: rgb(128, 128, 128);\">ReactComponent组</span><span style=\"color:#808080;\"><br/></span><span style=\"color:#808080;\">    </span>nestedChildren<span style=\"color:#cc7832;\">, </span>transaction<span style=\"color:#cc7832;\">, </span>context<br/>  )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_renderedChildren </span>= children<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>mountImages = []<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>index = <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(<span style=\"color:#cc7832;font-weight:bold;\">var </span>name <span style=\"color:#cc7832;font-weight:bold;\">in </span>children) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">if </span>(children.<span style=\"color:#9876aa;\">hasOwnProperty</span>(name)) {<br/>      <span style=\"color:#cc7832;font-weight:bold;\">var </span>child = children[name]<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>selfDebugID = <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">     </span><br/>      <span style=\"color:#cc7832;font-weight:bold;\">var </span>mountImage = ReactReconciler.<span style=\"color:#ffc66d;\">mountComponent</span>(//调用每个子节点的ReactComponent实例的mountComponent递归渲染所有子节点<br/>        child<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_hostContainerInfo</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>context<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>selfDebugID<br/>      )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>child.<span style=\"color:#9876aa;\">_mountIndex </span>= index++<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>mountImages.<span style=\"color:#ffc66d;\">push</span>(mountImage)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/>  }<br/>  <span style=\"color:#cc7832;font-weight:bold;\">return </span>mountImages<span style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">,<br/></span>\n</pre> </div><div><div/><div>再顺便提一下，源码中用到了DOMLazyTree，并根据不同浏览器对dom片段生成的速度做了优化。</div><div><pre style=\"background-color: rgb(43, 43, 43); font-family: Menlo; font-size: 9pt;\"><pre style=\"background-color: rgb(43, 43, 43); font-family: Menlo; font-size: 9pt;\"><span style=\"color: rgb(98, 151, 85); font-style: italic;\">/**<br/></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> * In IE (8-11) and Edge, appending nodes with no children is dramatically<br/></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> * faster than appending a full subtree, so we essentially queue up the<br/></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> * .appendChild calls here and apply them so each node is added to its parent<br/></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> * before any children are added.<br/></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> *<br/></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> * In other browsers, doing so is slower or neutral compared to the other order<br/></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> * (in Firefox, twice as slow) so we only do this inversion in IE.<br/></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> *<br/></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> * See <a href=\"https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode\">https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode</a>.<br/></span><span style=\"color: rgb(98, 151, 85); font-style: italic;\"> */<br/></span><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">var </span><font color=\"#a9b7c6\">enableLazy = (<br/>  </font><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">typeof </span><span style=\"color: rgb(152, 118, 170);\">document </span><font color=\"#a9b7c6\">!== </font><span style=\"color: rgb(106, 135, 89);\">'undefined' </span><font color=\"#a9b7c6\">&amp;&amp;<br/>  </font><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">typeof </span><span style=\"color: rgb(152, 118, 170);\">document</span><font color=\"#a9b7c6\">.</font><span style=\"color: rgb(152, 118, 170);\">documentMode </span><font color=\"#a9b7c6\">=== </font><span style=\"color: rgb(106, 135, 89);\">'number'<br/></span><span style=\"color: rgb(106, 135, 89);\">  </span><font color=\"#a9b7c6\">||<br/>  </font><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">typeof </span><span style=\"color: rgb(152, 118, 170);\">navigator </span><font color=\"#a9b7c6\">!== </font><span style=\"color: rgb(106, 135, 89);\">'undefined' </span><font color=\"#a9b7c6\">&amp;&amp;<br/>  </font><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">typeof </span><span style=\"color: rgb(152, 118, 170);\">navigator</span><font color=\"#a9b7c6\">.</font><span style=\"color: rgb(152, 118, 170);\">userAgent </span><font color=\"#a9b7c6\">=== </font><span style=\"color: rgb(106, 135, 89);\">'string' </span><font color=\"#a9b7c6\">&amp;&amp;<br/>  </font><span style=\"color: rgb(106, 135, 89);\">/\\bEdge\\/\\d/</span><font color=\"#a9b7c6\">.</font><span style=\"color: rgb(255, 198, 109);\">test</span><font color=\"#a9b7c6\">(</font><span style=\"color: rgb(152, 118, 170);\">navigator</span><font color=\"#a9b7c6\">.</font><span style=\"color: rgb(152, 118, 170);\">userAgent</span><font color=\"#a9b7c6\">)<br/>)</font>;</pre><pre style=\"background-color: rgb(43, 43, 43); font-family: Menlo; font-size: 9pt;\"><span style=\"font-size: 9pt; color: rgb(204, 120, 50); font-weight: bold;\"> function </span><span style=\"font-size: 9pt; color: rgb(255, 198, 109);\">queueChild</span><font style=\"font-size: 9pt;\" color=\"#a9b7c6\">(parentTree</font><span style=\"font-size: 9pt; color: rgb(204, 120, 50);\">, </span><font style=\"font-size: 9pt;\" color=\"#a9b7c6\">childTree) {</font><br/></pre><pre style=\"background-color: rgb(43, 43, 43); font-family: Menlo; font-size: 9pt;\"><pre style=\"background-color: rgb(43, 43, 43); font-family: Menlo; font-size: 9pt;\"><font color=\"#a9b7c6\">  </font><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">if </span><font color=\"#a9b7c6\">(enableLazy) {<br/>    parentTree.</font><span style=\"color: rgb(152, 118, 170);\">children</span><font color=\"#a9b7c6\">.</font><span style=\"color: rgb(255, 198, 109);\">push</span><font color=\"#a9b7c6\">(childTree)</font><span style=\"color: rgb(204, 120, 50);\">;<br/></span><span style=\"color: rgb(204, 120, 50);\">  </span><font color=\"#a9b7c6\">} </font><span style=\"color: rgb(204, 120, 50); font-weight: bold;\">else </span><font color=\"#a9b7c6\">{<br/>    parentTree.node.</font><span style=\"color: rgb(152, 118, 170);\">appendChild</span><font color=\"#a9b7c6\">(childTree.node)</font><span style=\"color: rgb(204, 120, 50);\">;<br/></span><span style=\"color: rgb(204, 120, 50);\">  </span><font color=\"#a9b7c6\">}<br/></font><span style=\"color: rgb(169, 183, 198); background-color: rgb(52, 65, 52);\">}</span><font color=\"#a9b7c6\"\n/></pre><br/></pre></pre></div><div><font face=\"Helvetica\" color=\"#454545\"><font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); font-size: 12px; color: rgb(78, 89, 128);\"/></font></div></div><div><div>然后会在这里判断是把子节点缓存起来还是直接挂到父节点上。缓存起来的节点会在ReactMount的_mountImageIntoNode递归地将子节点逐个挂到父节点上，主要用在<code style=\"box-sizing: border-box; outline: none; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 0.2em 0.4em; word-break: break-word; color: rgb(78, 89, 128); background-color: rgb(248, 248, 248); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">ReactDOMComponent</code><span style=\"color: rgb(51, 51, 51); font-family: -apple-system, 'PingFang SC', 'Hiragino Sans GB', Arial, 'Microsoft YaHei', 'Helvetica Neue', sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); float: none;\">, </span><code style=\"box-sizing: border-box; outline: none; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; padding: 0.2em 0.4em; word-break: break-word; color: rgb(78, 89, 128); background-color: rgb(248, 248, 248); border-top-left-radius: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">ReactCompositeComponent。</code></div><div/><div><br/></div>  </div><div>2）receiveComponent 在setState触发更新时调用这个函</div><div><div/></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"/></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Updates a DOM component after it has already been allocated and<br/></span><span style=\"color:#629755;font-style:italic;\"> * attached to the DOM. Reconciles the root DOM node, then recurses.<br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction} transaction<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactElement} prevElement<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactElement} nextElement<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@internal<br/></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\" /><span style=\"color:#629755;font-style:italic;\">* </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@overridable<br/></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\" /><span style=\"color:#629755;font-style:italic;\">*/<br/></span><span style=\"color:#ffc66d;\">updateComponent</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(transaction<span style=\"color:#cc7832;\">, </span>prevElement<span style=\"color:#cc7832;\">, </span>nextElement<span style=\"color:#cc7832;\">, </span>context) {<br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>lastProps = prevElement.props<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextProps = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span>.props<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  //获得last 和next props<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">switch </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span>) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'input'</span>:<br/>      lastProps = ReactDOMInput.<span style=\"color:#ffc66d;\">getHostProps</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>lastProps)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>nextProps = ReactDOMInput.<span style=\"color:#ffc66d;\">getHostProps</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>nextProps)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">break</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    //略去其他……</span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">default</span>:<br/>      <span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">typeof </span>lastProps.<span style=\"color:#9876aa;\">onClick </span>!== <span style=\"color:#6a8759;\">'function' </span>&amp;&amp;<br/>          <span style=\"color:#cc7832;font-weight:bold;\">typeof </span>nextProps.<span style=\"color:#9876aa;\">onClick </span>=== <span style=\"color:#6a8759;\">'function'</span>) {<br/>        transaction.getReactMountReady().<span style=\"color:#ffc66d;\">enqueue</span>(<br/>          <span style=\"color:#ffc66d;\">trapClickOnNonInteractiveElement</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">          </span><span style=\"color:#cc7832;font-weight:bold;\">this<br/></span><span style=\"color:#cc7832;font-weight:bold;\">        </span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span>}<br/>      <span style=\"color:#cc7832;font-weight:bold;\">break</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><br/>  <span style=\"color:#ffc66d;\">assertValidProps</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span><span style=\"color:#cc7832;\">, </span>nextProps)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>isCustomComponentTag = <span style=\"color:#ffc66d;\">isCustomComponent</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span><span style=\"color:#cc7832;\">, </span>nextProps)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#808080;\">//根据新旧props的差异更新对应dom元素上的属性<br/></span><span style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_updateDOMProperties</span>(lastProps<span style=\"color:#cc7832;\">, </span>nextProps<span style=\"color:#cc7832;\">, </span>transaction<span style=\"color:#cc7832;\">, </span>isCustomComponentTag)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#808080;\">//更新子节点内容，diff算法（diff算法下文将详细介绍）<br/></span><span style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_updateDOMChildren</span>(<br/>    lastProps<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>nextProps<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>context<br/>  )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#808080;\">//更新节点后根据新的props中的值设置dom属性比如value、checked等<br/></span><span style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">switch </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_tag</span>) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">case </span><span style=\"color:#6a8759;\">'input'</span>:<br/>      <span style=\"color:#808080;\">// Update the wrapper around inputs *after* updating props. This has to<br/></span><span style=\"color:#808080;\">      // happen after `_updateDOMProperties`. Otherwise HTML5 input validations<br/></span><span style=\"color:#808080;\">      // raise warnings and prevent the new value from being assigned.<br/></span><span style=\"color:#808080;\">      </span>ReactDOMInput.<span style=\"color:#ffc66d;\">updateWrapper</span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">      </span><span style=\"color:#cc7832;font-weight:bold;\">break</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    <b>//略去其他……</b></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span>}<br/>}<span style=\"color:#cc7832;\">,</span>\n</pre><br/></div><div>3）unmountComponent 去掉React Component实例上的事件监听器，循环调用子组件的unmountComponent方法，不直接删除dom节点，由父节点统一清除。</div><div><br/></div><div>1.3）<font style=\"font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; background-color: rgb(248, 248, 248); color: rgb(78, 89, 128);\">ReactCompositeComponent</font></div><div><br/></div><div> 1）mountComponent</div><div style=\"text-align: center; \"><img src=\"/images/2017-01-20/%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B%E5%9B%BE%20(2).png\" height=\"548\" width=\"213\"/><br/></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><br/><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Initializes the component, renders markup, and registers event listeners.<br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction|ReactServerRenderingTransaction} transaction<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?object} hostParent<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?object} hostContainerInfo<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?object} context<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@return </span><span style=\"color:#629755;font-style:italic;\">{?string} Rendered markup to be inserted into the DOM.<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@final<br/></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\" /><span style=\"color:#629755;font-style:italic;\">* </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@internal<br/></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\" /><span style=\"color:#629755;font-style:italic;\">*/<br/></span>mountComponent: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br/>    transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>hostParent<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>hostContainerInfo<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>context<br/>) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_context </span>= context<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_mountOrder </span>= nextMountID++<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_hostParent </span>= hostParent<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_hostContainerInfo </span>= hostContainerInfo<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>publicProps = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span>.<span style=\"color:#9876aa;\">props</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>publicContext = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_processContext</span>(context)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>Component = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement</span>.<span style=\"color:#9876aa;\">type</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>updateQueue = transaction.<span style=\"color:#ffc66d;\">getUpdateQueue</span>()<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// Initialize the public class<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>doConstruct = <span style=\"color:#ffc66d;\">shouldConstruct</span>(Component)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>inst = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_constructComponent</span>(<br/>        doConstruct<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>publicProps<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>publicContext<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>updateQueue<br/>    )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>renderedElement<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// Support functional components<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(!doConstruct &amp;&amp; (inst == <span style=\"color:#cc7832;font-weight:bold;\">null </span>|| inst.<span style=\"color:#ffc66d;\">render </span>== <span style=\"color:#cc7832;font-weight:bold;\">null</span>)) {<br/>        renderedElement = inst<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>inst = <span style=\"color:#cc7832;font-weight:bold;\">new </span><span style=\"color:#ffc66d;\">StatelessComponent</span>(Component)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_compositeType </span>= ReactCompositeComponentTypes.<span style=\"color:#9876aa;\">StatelessFunctional</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>        <span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#ffc66d;\">isPureComponent</span>(Component)) {<br/>            <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_compositeType </span>= ReactCompositeComponentTypes.<span style=\"color:#9876aa;\">PureClass</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>            <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_compositeType </span>= ReactCompositeComponentTypes.<span style=\"color:#9876aa;\">ImpureClass</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/>    }<br/><br/>    <span style=\"color:#808080;\">// These should be set up in the constructor, but as a convenience for<br/></span><span style=\"color:#808080;\">    // simpler class abstractions, we set them up after the fact.<br/></span><span style=\"color:#808080;\">    </span>inst.<span style=\"color:#9876aa;\">props </span>= publicProps<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>inst.<span style=\"color:#9876aa;\">context </span>= publicContext<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>inst.<span style=\"color:#9876aa;\">refs </span>= emptyObject<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>inst.<span style=\"color:#9876aa;\">updater </span>= updateQueue<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_instance </span>= inst<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// Store a reference from the instance back to the internal representation<br/></span><span style=\"color:#808080;\">    </span>ReactInstanceMap.<span style=\"color:#ffc66d;\">set</span>(inst<span style=\"color:#cc7832;\">, </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>initialState = inst.<span style=\"color:#9876aa;\">state</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(initialState === <span style=\"color:#9876aa;\">undefined</span>) {<br/>        inst.<span style=\"color:#9876aa;\">state </span>= initialState = <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/><br/>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingStateQueue </span>= <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingReplaceState </span>= <span style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingForceUpdate </span>= <span style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">//调用生命周期函数<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(inst.<span style=\"color:#9876aa;\">componentWillMount</span>) {<br/>        inst.<span style=\"color:#9876aa;\">componentWillMount</span>()<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">// When mounting, calls to `setState` by `componentWillMount` will set<br/></span><span style=\"color:#808080;\">        // `this._pendingStateQueue` without triggering a re-render.注意这里新的state是在</span><span style=\"color: rgb(152, 118, 170); font-size: 9pt;\">componentWillMount执行完后更新的，因此在<font style=\"font-family: Menlo; font-size: 12px; background-color: rgb(43, 43, 43); color: rgb(152, 118, 170);\">componentWillMount</font>里的this.state不是最新的</span><span style=\"color:#808080;\"><br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingStateQueue</span>) {<br/>            inst.<span style=\"color:#9876aa;\">state </span>= <span style=\"color:#cc7832;font-weight:bold;\">this</span>._processPendingState(inst.<span style=\"color:#9876aa;\">props</span><span style=\"color:#cc7832;\">, </span>inst.<span style=\"color:#9876aa;\">context</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/>    }<br/><br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>markup<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">//带错误监听，内部调用performInitialMount，render函数返回的内容用来初始化一个ReactComponent实例，然后调用ReactReconciler.mountComponent获得dom树<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(inst.<span style=\"color:#ffc66d;\">unstable_handleError</span>) {<br/>        markup = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">performInitialMountWithErrorHandling</span>(<br/>            renderedElement<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>hostParent<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>hostContainerInfo<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>context<br/>        )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>        markup = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">performInitialMount</span>(<br/>            renderedElement<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>hostParent<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>hostContainerInfo<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>context<br/>        )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/>    <span style=\"color:#808080;\">//<font style=\"font-family: Menlo; font-size: 12px; background-color: rgb(43, 43, 43); color: rgb(255, 198, 109);\">componentDidMount执行</font><br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(inst.<span style=\"color:#ffc66d;\">componentDidMount</span>) {<br/>        transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(inst.<span style=\"color:#ffc66d;\">componentDidMount</span><span style=\"color:#cc7832;\">, </span>inst)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/><br/>    <span style=\"color:#808080;\">// setState callbacks during willMount should end up here<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">const </span>callbacks = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingCallbacks</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(callbacks) {<br/>        <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingCallbacks </span>= <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">for </span>(let i = <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">; </span>i &lt; callbacks.<span style=\"color:#9876aa;\">length</span><span style=\"color:#cc7832;\">; </span>i++) {<br/>            transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<br/>                callbacks[i]<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">                </span>inst<br/>            )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/>    }<br/><br/>    <span style=\"color:#cc7832;font-weight:bold;\">return </span>markup<span style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">,</span>\n</pre><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#cc7832;\"><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#ffc66d;\">performInitialMount</span>: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br/>  renderedElement<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>hostParent<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>hostContainerInfo<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>context<br/>) {<br/>  <span style=\"color:#808080;\">// If not a stateless component, we now render<br/></span><span style=\"color:#808080;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(renderedElement === <span style=\"color:#9876aa;\">undefined</span>) {<br/>    renderedElement = <span style=\"color:#cc7832;font-weight:bold;\">this</span>._renderValidatedComponent()<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>nodeType = ReactNodeTypes.<span style=\"color:#ffc66d;\">getType</span>(renderedElement)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_renderedNodeType </span>= nodeType<span style=\"color:#cc7832;\">;</span></pre><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#cc7832;\">  //得到当前ReactElement对应的ReactComponent实例<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>child = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_instantiateReactComponent</span>(<br/>    renderedElement<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>nodeType !== ReactNodeTypes.<span style=\"color:#9876aa;\">EMPTY </span><span style=\"color:#808080;\">/* shouldHaveDebugID */<br/></span><span style=\"color:#808080;\">  </span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_renderedComponent </span>= child<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>debugID = <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">;</span><br/>  //递归生成子节点dom树<br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>markup = ReactReconciler.<span style=\"color:#ffc66d;\">mountComponent</span>(<br/>    child<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>hostParent<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>hostContainerInfo<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_processChildContext</span>(context)<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>debugID<br/>  )<span style=\"color:#cc7832;\">;</span><br/><br/>  <span style=\"color:#cc7832;font-weight:bold;\">return </span>markup<span style=\"color:#cc7832;\">;<br/></span>}<span style=\"color:#cc7832;\">,<br/></span>\n</pre><br/></span></pre>2）receiveComponent </div><div>这里负责生命周期的componentWillReceiveProps、shouldComponentUpdate、componentWillUpdate、render、componentDidUpdate。注意在前三个生命周期函数中调用this.state无法获取更新后的this.state因为为实例更新state的inst.state=nextState在componentWillUpdate之后调用，即render和componentDidUpdate中可以，禁止在shouldComponentUpdate和componentWillUpdate中调用setState，会造成循环调用（原因参见src/renderers/shared/stack/reconciler/ReactCompositeComponent.js的performUpdateIfNecessary方法）</div><div style=\"text-align: center; \"><img src=\"/images/2017-01-20/%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B%E5%9B%BE%20(3).png\" height=\"685\" width=\"564\"/><br/></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><br/><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Perform an update to a mounted component. The componentWillReceiveProps and<br/></span><span style=\"color:#629755;font-style:italic;\"> * shouldComponentUpdate methods are called, then (assuming the update isn't<br/></span><span style=\"color:#629755;font-style:italic;\"> * skipped) the remaining update lifecycle methods are called and the DOM<br/></span><span style=\"color:#629755;font-style:italic;\"> * representation is updated.<br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * By default, this implements React's rendering and reconciliation algorithm.<br/></span><span style=\"color:#629755;font-style:italic;\"> * Sophisticated clients may wish to override this.<br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction} transaction<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactElement} prevParentElement<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactElement} nextParentElement<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@internal<br/></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\" /><span style=\"color:#629755;font-style:italic;\">* </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@overridable<br/></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\" /><span style=\"color:#629755;font-style:italic;\">*/<br/></span>updateComponent: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br/>    transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>prevParentElement<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>nextParentElement<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>prevUnmaskedContext<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>nextUnmaskedContext<br/>) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>inst = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_instance</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>willReceive = <span style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextContext<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// Determine if the context has changed or not<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_context </span>=== nextUnmaskedContext) {<br/>        nextContext = inst.<span style=\"color:#9876aa;\">context</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>        nextContext = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">_processContext</span>(nextUnmaskedContext)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>willReceive = <span style=\"color:#cc7832;font-weight:bold;\">true</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/><br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>prevProps = prevParentElement.<span style=\"color:#9876aa;\">props</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextProps = nextParentElement.<span style=\"color:#9876aa;\">props</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#808080;\">// Not a simple state update but a props update<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(prevParentElement !== nextParentElement) {<br/>        willReceive = <span style=\"color:#cc7832;font-weight:bold;\">true</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/><br/>    <span style=\"color:#808080;\">// An update here will schedule an update but immediately set<br/></span><span style=\"color:#808080;\">    // _pendingStateQueue which will ensure that any state updates gets<br/></span><span style=\"color:#808080;\">    // immediately reconciled instead of waiting for the next batch.<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(willReceive &amp;&amp; inst.<span style=\"color:#ffc66d;\">componentWillReceiveProps</span>) {<br/>        inst.<span style=\"color:#ffc66d;\">componentWillReceiveProps</span>(nextProps<span style=\"color:#cc7832;\">, </span>nextContext)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/><br/>    <span style=\"color:#808080;\">// If updating happens to enqueue any new updates, we shouldn't execute new<br/></span><span style=\"color:#808080;\">    // callbacks until the next render happens, so stash the callbacks first.<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>callbacks = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingCallbacks</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingCallbacks </span>= <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>nextState = <span style=\"color:#cc7832;font-weight:bold;\">this</span>._processPendingState(nextProps<span style=\"color:#cc7832;\">, </span>nextContext)<span style=\"color:#cc7832;\">; </span><span style=\"color:#808080;\">//获得nextState<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>shouldUpdate = <span style=\"color:#cc7832;font-weight:bold;\">true</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(!<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingForceUpdate</span>) { <span style=\"color:#808080;\">//没设置forseupdate<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>prevState = inst.<span style=\"color:#9876aa;\">state</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>shouldUpdate = willReceive || nextState !== prevState<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">//如果提供shouldComponentUpdate，调用函数，否则新旧state和props浅比较确定是否更新<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(inst.<span style=\"color:#ffc66d;\">shouldComponentUpdate</span>) {<br/>            shouldUpdate = inst.<span style=\"color:#ffc66d;\">shouldComponentUpdate</span>(nextProps<span style=\"color:#cc7832;\">, </span>nextState<span style=\"color:#cc7832;\">, </span>nextContext)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>            <span style=\"color:#cc7832;font-weight:bold;\">if </span>(<span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_compositeType </span>=== ReactCompositeComponentTypes.<span style=\"color:#9876aa;\">PureClass</span>) {<br/>                shouldUpdate =<br/>                    !shallowEqual(prevProps<span style=\"color:#cc7832;\">, </span>nextProps) ||<br/>                    !shallowEqual(inst.<span style=\"color:#9876aa;\">state</span><span style=\"color:#cc7832;\">, </span>nextState)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">            </span>}<br/>        }<br/>    }<br/><br/>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_updateBatchNumber </span>= <span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(shouldUpdate) {<br/>        <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_pendingForceUpdate </span>= <span style=\"color:#cc7832;font-weight:bold;\">false</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#808080;\">// Will set `this.props`, `this.state` and `this.context`.<br/></span><span style=\"color:#808080;\">        //设置新props、state，调用生命周期函数（如果提供），更新dom<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>._performComponentUpdate(<br/>            nextParentElement<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>nextProps<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>nextState<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>nextContext<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">            </span>nextUnmaskedContext<br/>        )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>        <span style=\"color:#808080;\">// If it's determined that a component should not update, we still want<br/></span><span style=\"color:#808080;\">        // to set props and state but we shortcut the rest of the update.<br/></span><span style=\"color:#808080;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement </span>= nextParentElement<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_context </span>= nextUnmaskedContext<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>inst.<span style=\"color:#9876aa;\">props </span>= nextProps<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>inst.<span style=\"color:#9876aa;\">state </span>= nextState<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>inst.<span style=\"color:#9876aa;\">context </span>= nextContext<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>}<br/>    <span style=\"color:#808080;\">//render之后调用的事件队列<br/></span><span style=\"color:#808080;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(callbacks) {<br/>        <span style=\"color:#cc7832;font-weight:bold;\">for </span>(<span style=\"color:#cc7832;font-weight:bold;\">var </span>j = <span style=\"color:#6897bb;\">0</span><span style=\"color:#cc7832;\">; </span>j &lt; callbacks.<span style=\"color:#9876aa;\">length</span><span style=\"color:#cc7832;\">; </span>j++) {<br/>            transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<br/>                callbacks[j]<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">                </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#ffc66d;\">getPublicInstance</span>()<br/>            )<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">        </span>}<br/>    }<br/>}<span style=\"color:#cc7832;\">,</span>\n</pre><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Merges new props and state, notifies delegate methods of update and<br/></span><span style=\"color:#629755;font-style:italic;\"> * performs update.<br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactElement} nextElement Next element<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{object} nextProps Next public object to set as properties.<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?object} nextState Next object to set as state.<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?object} nextContext Next public object to set as context.<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction} transaction<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{?object} unmaskedContext<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@private<br/></span><span style=\"color:#629755;font-weight:bold;font-style:italic;\" /><span style=\"color:#629755;font-style:italic;\">*/<br/></span>_performComponentUpdate: <span style=\"color:#cc7832;font-weight:bold;\">function</span>(<br/>  nextElement<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>nextProps<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>nextState<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>nextContext<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>unmaskedContext<br/>) {<br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>inst = <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_instance</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>hasComponentDidUpdate = Boolean(inst.<span style=\"color:#ffc66d;\">componentDidUpdate</span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>prevProps<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>prevState<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>prevContext<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(hasComponentDidUpdate) {<br/>    prevProps = inst.<span style=\"color:#9876aa;\">props</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>prevState = inst.<span style=\"color:#9876aa;\">state</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>prevContext = inst.<span style=\"color:#9876aa;\">context</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><br/>  <span style=\"color:#cc7832;font-weight:bold;\">if </span>(inst.<span style=\"color:#ffc66d;\">componentWillUpdate</span>) {<br/>     inst.<span style=\"color:#ffc66d;\">componentWillUpdate</span>(nextProps<span style=\"color:#cc7832;\">, </span>nextState<span style=\"color:#cc7832;\">, </span>nextContext)<span style=\"color:#cc7832;\">;</span><br/>  }<br/><br/>  <span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_currentElement </span>= nextElement<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">this</span>.<span style=\"color:#9876aa;\">_context </span>= unmaskedContext<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>inst.<span style=\"color:#9876aa;\">props </span>= nextProps<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>inst.<span style=\"color:#9876aa;\">state </span>= nextState<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>inst.<span style=\"color:#9876aa;\">context </span>= nextContext<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(inst.<span style=\"color:#ffc66d;\">unstable_handleError</span>) {<br/>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>._updateRenderedComponentWithErrorHandling(transaction<span style=\"color:#cc7832;\">, </span>unmaskedContext)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>} <span style=\"color:#cc7832;font-weight:bold;\">else </span>{<br/>    <span style=\"color:#cc7832;font-weight:bold;\">this</span>._updateRenderedComponent(transaction<span style=\"color:#cc7832;\">, </span>unmaskedContext)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><br/>  <span style=\"color:#cc7832;font-weight:bold;\">if </span>(hasComponentDidUpdate) {<br/>      transaction.<span style=\"color:#ffc66d;\">getReactMountReady</span>().<span style=\"color:#ffc66d;\">enqueue</span>(<br/>        inst.<span style=\"color:#ffc66d;\">componentDidUpdate</span>.<span style=\"color:#ffc66d;\">bind</span>(inst<span style=\"color:#cc7832;\">, </span>prevProps<span style=\"color:#cc7832;\">, </span>prevState<span style=\"color:#cc7832;\">, </span>prevContext)<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">        </span>inst<br/>      )<span style=\"color:#cc7832;\">;</span><br/>  }<br/>}<span style=\"color:#cc7832;\">,</span>\n</pre><br/></div><div>3）unmountComponent 调用生命周期函数componentWillUnmount（如果提供），调用当前组件对应的React Component实例对应的unmountComponent函数，重置一堆变量。</div><div><br/></div><div><br/></div><div/><ol start=\"2\"><li>渲染组件的工作主要在这个函数，通过<font style=\"font-family: Helvetica; color: rgb(69, 69, 69);\">instantiateReactComponent</font>得到了各种类型组件对应的ReactComponent实例（可以理解为一个ReactComponent实例的树，包含所有子节点的ReactComponent实例），然后调用实例的mountComponent方法（上面讲解过）得到要渲染的‘markup’可能是一个dom树，或一个DOMLazyTree结构保存将子节点的dom结构树保存到数组里，最后插入到container中。</li></ol></div><div><pre style=\"background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.0pt;\"><span style=\"color:#629755;font-style:italic;\">/**<br/></span><span style=\"color:#629755;font-style:italic;\"> * Mounts this component and inserts it into the DOM.<br/></span><span style=\"color:#629755;font-style:italic;\"> *<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactComponent} componentInstance The instance to mount.<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{DOMElement} container DOM element to mount into.<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{ReactReconcileTransaction} transaction<br/></span><span style=\"color:#629755;font-style:italic;\"> * </span><span style=\"color:#629755;font-weight:bold;font-style:italic;\">@param </span><span style=\"color:#629755;font-style:italic;\">{boolean} shouldReuseMarkup If true, do not insert markup<br/></span><span style=\"color:#629755;font-style:italic;\"> */<br/></span><span style=\"color:#cc7832;font-weight:bold;\">function </span><span style=\"color:#ffc66d;\">mountComponentIntoNode</span>(<br/>  wrapperInstance<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>container<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>shouldReuseMarkup<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">  </span>context<br/>) {<br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>markerName<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(ReactFeatureFlags.<span style=\"color:#9876aa;\">logTopLevelRenders</span>) { //记录拼接组件对应的dom模板所用的时长<br/>    <span style=\"color:#cc7832;font-weight:bold;\">var </span>wrappedElement = wrapperInstance.<span style=\"color:#9876aa;\">_currentElement</span>.<span style=\"color:#9876aa;\">props</span>.child<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">var </span>type = wrappedElement.<span style=\"color:#9876aa;\">type</span><span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span>markerName = <span style=\"color:#6a8759;\">'React mount: ' </span>+ (<br/>      <span style=\"color:#cc7832;font-weight:bold;\">typeof </span>type === <span style=\"color:#6a8759;\">'string' </span>? type :<br/>      type.<span style=\"color:#9876aa;\">displayName </span>|| type.<span style=\"color:#9876aa;\">name<br/></span><span style=\"color:#9876aa;\">    </span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#9876aa;\">console</span>.<span style=\"color:#ffc66d;\">time</span>(markerName)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><br/>  <span style=\"color:#cc7832;font-weight:bold;\">var </span>markup = ReactReconciler.<span style=\"color:#ffc66d;\">mountComponent</span>( //调用组件实例的mountComponent方法获得要渲染的结构（可能是一个html片段或一个src/<font style=\"font-size: 12px; color: rgb(169, 183, 198); font-family: Menlo;\">renderers/dom/stack/client/DOMLazyTree.js结构）</font>，添加事件以及ref属性<br/>    wrapperInstance<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>transaction<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#cc7832;font-weight:bold;\">null</span><span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>ReactDOMContainerInfo(wrapperInstance<span style=\"color:#cc7832;\">, </span>container)<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>context<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span><span style=\"color:#6897bb;\">0 </span><span style=\"color:#808080;\">/* parentDebugID */<br/></span><span style=\"color:#808080;\">  </span>)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\"><br/></span><span style=\"color:#cc7832;\">  </span><span style=\"color:#cc7832;font-weight:bold;\">if </span>(markerName) {<br/>    <span style=\"color:#9876aa;\">console</span>.<span style=\"color:#ffc66d;\">timeEnd</span>(markerName)<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>}<br/><br/>  wrapperInstance.<span style=\"color:#9876aa;\">_renderedComponent</span>.<span style=\"color:#9876aa;\">_topLevelWrapper </span>= wrapperInstance<span style=\"color:#cc7832;\">;<br/></span><span style=\"color:#cc7832;\">  </span>ReactMount.<span style=\"color:#ffc66d;\">_mountImageIntoNode</span>( //将上面得到的结构（递归）渲染到container dom节点中，显示在页面上<br/>    markup<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>container<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>wrapperInstance<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>shouldReuseMarkup<span style=\"color:#cc7832;\">,<br/></span><span style=\"color:#cc7832;\">    </span>transaction<br/>  )<span style=\"color:#cc7832;\">;<br/></span>}\n</pre><br/></div><div>以上是对虚拟dom和渲染策略的讲解。</div><div><br/></div><div>推荐阅读：</div><div><span style=\"font: 12.0px Helvetica; color: #e4af09\"><a href=\"https://zhuanlan.zhihu.com/purerender\">https://zhuanlan.zhihu.com/purerender</a></span><span style=\"font: 12.0px Helvetica; color: #454545\" /><span style=\"font: 12.0px 'PingFang SC'; color: #454545\">关于</span><span style=\"font: 12.0px Helvetica; color: #454545\">react</span><span style=\"font: 12.0px 'PingFang SC'; color: #454545\">源码解析系列文章</span><span style=\"font: 12.0px Helvetica; color: #454545\"><br/>\n<span style=\"color: #e4af09\"><a href=\"http://purplebamboo.github.io/2015/09/15/reactjs_source_analyze_part_one/\">http://purplebamboo.github.io/2015/09/15/reactjs_source_analyze_part_one/</a></span></span></div><div><span style=\"font-style: normal; font-variant-caps: normal; font-weight: normal; font-size: 12px; font-family: Helvetica;\"><font color=\"#e4af09\">《深入React技术栈》这本书的第三章（有需要可以找我借）<br/></font>\n</span><br/></div><div><br/></div><div><br/></div>"}],"PostAsset":[],"PostCategory":[{"post_id":"cizknqup1000095c4hr3mh5fr","category_id":"cizknqup7000295c4wmypf84m","_id":"cizknqupm000a95c4k7c48cp1"},{"post_id":"cizknquph000695c4z9s3agab","category_id":"cizknqup7000295c4wmypf84m","_id":"cizknqupq000e95c4l0y6crms"},{"post_id":"cizknqupk000995c4wxs1133k","category_id":"cizknqup7000295c4wmypf84m","_id":"cizknqups000h95c4s83jk94o"},{"post_id":"cizknqup5000195c4ik3l0rez","category_id":"cizknqupj000795c4l6nre0ec","_id":"cizknqupu000l95c4dbdfac9l"},{"post_id":"cizknqupm000b95c4jihsthuo","category_id":"cizknqup7000295c4wmypf84m","_id":"cizknqupv000m95c4mam46saf"},{"post_id":"cizknqupb000495c4bahzoqy2","category_id":"cizknqup7000295c4wmypf84m","_id":"cizknqupv000o95c4v2jtokjk"},{"post_id":"cizknqupd000595c4tazyazz2","category_id":"cizknqupt000j95c47ku1hw3r","_id":"cizknqupx000q95c4b68ft0fw"},{"post_id":"cizknqupq000f95c4lckoj1ro","category_id":"cizknqupv000n95c49j3sis26","_id":"cizknquq0000t95c42s4xam1q"},{"post_id":"cizknquqb001l95c44hlw1g4e","category_id":"cizknqup7000295c4wmypf84m","_id":"cizknquqc001n95c4xhdl3egt"},{"post_id":"cizknqusd001r95c4ajiuuoat","category_id":"cizknqup7000295c4wmypf84m","_id":"cizknqusi001t95c4aw6ozkwf"}],"PostTag":[{"post_id":"cizknqup1000095c4hr3mh5fr","tag_id":"cizknqupa000395c44fm8vx1u","_id":"cizknqupr000g95c48lvcontc"},{"post_id":"cizknqup1000095c4hr3mh5fr","tag_id":"cizknqupj000895c4xcx1czzs","_id":"cizknqupt000i95c4iu4kjhcl"},{"post_id":"cizknqup5000195c4ik3l0rez","tag_id":"cizknqupo000d95c4rqhkjmf0","_id":"cizknqupy000s95c4presvxzg"},{"post_id":"cizknqup5000195c4ik3l0rez","tag_id":"cizknqupu000k95c4u04u30nd","_id":"cizknquq0000u95c4h3q0ik38"},{"post_id":"cizknqup5000195c4ik3l0rez","tag_id":"cizknqupv000p95c4t7bub5e3","_id":"cizknquq3000w95c4d2g3thcb"},{"post_id":"cizknqupb000495c4bahzoqy2","tag_id":"cizknqupy000r95c4gu5llptw","_id":"cizknquq4000y95c4dyh0t4zd"},{"post_id":"cizknqupb000495c4bahzoqy2","tag_id":"cizknqupj000895c4xcx1czzs","_id":"cizknquq4000z95c45fkmzysi"},{"post_id":"cizknqupd000595c4tazyazz2","tag_id":"cizknquq3000x95c4wog048u2","_id":"cizknquq4001295c4dhzgpozo"},{"post_id":"cizknqupd000595c4tazyazz2","tag_id":"cizknquq4001095c4906pglfq","_id":"cizknquq4001395c4hoqsq9yo"},{"post_id":"cizknquph000695c4z9s3agab","tag_id":"cizknquq4001195c4x2gm9t48","_id":"cizknquq5001695c495bpqrqw"},{"post_id":"cizknquph000695c4z9s3agab","tag_id":"cizknquq4001495c4xn2frakz","_id":"cizknquq5001795c4bzc9lt66"},{"post_id":"cizknqupk000995c4wxs1133k","tag_id":"cizknquq5001595c4rp40kabl","_id":"cizknquq5001a95c46es0z3x0"},{"post_id":"cizknqupk000995c4wxs1133k","tag_id":"cizknquq5001895c4wg62pl5l","_id":"cizknquq5001b95c446ukzjka"},{"post_id":"cizknqupm000b95c4jihsthuo","tag_id":"cizknquq5001995c4w7g1trtx","_id":"cizknquq6001e95c4ng5mb8bx"},{"post_id":"cizknqupm000b95c4jihsthuo","tag_id":"cizknquq5001c95c4gl2pjr32","_id":"cizknquq6001f95c4b1wcjr6c"},{"post_id":"cizknqupq000f95c4lckoj1ro","tag_id":"cizknquq6001d95c40frfq7ns","_id":"cizknquq7001i95c4sm79siwz"},{"post_id":"cizknqupq000f95c4lckoj1ro","tag_id":"cizknquq6001g95c4p305be4r","_id":"cizknquq8001j95c4ebmqi4ko"},{"post_id":"cizknqupq000f95c4lckoj1ro","tag_id":"cizknquq6001h95c456mi4zoz","_id":"cizknquq8001k95c4g2it7rvd"},{"post_id":"cizknquqb001l95c44hlw1g4e","tag_id":"cizknquqc001m95c47dsyv0uo","_id":"cizknquqd001p95c4o0d82n3a"},{"post_id":"cizknquqb001l95c44hlw1g4e","tag_id":"cizknquqd001o95c4ra01t64o","_id":"cizknquqd001q95c487qkp9t5"},{"post_id":"cizknqusd001r95c4ajiuuoat","tag_id":"cizknquqc001m95c47dsyv0uo","_id":"cizknqush001s95c4mf6z1cxv"},{"post_id":"cizknqusd001r95c4ajiuuoat","tag_id":"cizknquqd001o95c4ra01t64o","_id":"cizknqusi001u95c462pcoyfe"}],"Tag":[{"name":"effective javascript","_id":"cizknqupa000395c44fm8vx1u"},{"name":"读书笔记","_id":"cizknqupj000895c4xcx1czzs"},{"name":"push notification","_id":"cizknqupo000d95c4rqhkjmf0"},{"name":"apns","_id":"cizknqupu000k95c4u04u30nd"},{"name":"node-apn","_id":"cizknqupv000p95c4t7bub5e3"},{"name":"javascript设计模式","_id":"cizknqupy000r95c4gu5llptw"},{"name":"网络拓扑","_id":"cizknquq3000x95c4wog048u2"},{"name":"开源","_id":"cizknquq4001095c4906pglfq"},{"name":"React Native","_id":"cizknquq4001195c4x2gm9t48"},{"name":"动画","_id":"cizknquq4001495c4xn2frakz"},{"name":"intro.js","_id":"cizknquq5001595c4rp40kabl"},{"name":"新手引导","_id":"cizknquq5001895c4wg62pl5l"},{"name":"发布订阅","_id":"cizknquq5001995c4w7g1trtx"},{"name":"任务调度","_id":"cizknquq5001c95c4gl2pjr32"},{"name":"ab","_id":"cizknquq6001d95c40frfq7ns"},{"name":"btrace","_id":"cizknquq6001g95c4p305be4r"},{"name":"网站压测","_id":"cizknquq6001h95c456mi4zoz"},{"name":"react","_id":"cizknquqc001m95c47dsyv0uo"},{"name":"源码解读","_id":"cizknquqd001o95c4ra01t64o"}]}}